/******************************************************************************
Parts of this code are from:
  -> circuitschools.com (sensor interface): https://www.circuitschools.com/ecg-monitoring-system-using-ad8232-with-arduino-or-esp32-iot-based/
  -> norwegiancreations.com (highpass filter): https://www.norwegiancreations.com/2016/03/arduino-tutorial-simple-high-pass-band-pass-and-band-stop-filtering/

ESP & sensor wiring:
  Sensor        ESP
   GND           GND
   3.3v          3.3v
   out           34  (analog)
   LO-           25
   LO+           26
   SDN           not conn.

Body wiring:
  Red: RA (right arm or right side of chest)
  Yellow: LA (left arm or left side of chest)
  Green: RL (right leg)

Signal processing path:
  Analog signal from sensor -> highpass filter -> treshold activation -> lowpass filter

******************************************************************************/

#include <Arduino.h>


// Pins
const int sensorInputPin = 34;
const int loNegPin = 25;
const int loPosPin = 26;

// Config constants
const int lowPassFrameSize = 5;                 // How many previous readings are averaged
const int contractionDetectionTreshold = 350;   // Value above which the muscleActive is set to TRUE
const int sensorReadDelay = 10;                 // How long to wait between sensor readings
const float EMA_a = 0.3;                        // Initialization of EMA alpha

// Variables for highpass filter

// Other variables
int sensorValue = 0;                            // Initialization of sensor variable, equivalent to EMA Y
int highpassOutput = 0;                         // Output from high pass filter stage
bool muscleActive = false;                      // Output from tresholding stage
int lowpassOutput = 0;                          // Output from low pass filter stage
int EMA_S = 0;                                  // Highpass filter initialization of EMA S
bool lowpassHistory[lowPassFrameSize];          // Previous values for low pass filter



void setup() 
{
  // Initialize the serial communication
  Serial.begin(115200);

  // Setup pins/ports
  pinMode(loNegPin, INPUT); // Setup for leads off detection LO +
  pinMode(loPosPin, INPUT); // Setup for leads off detection LO -

  // Reset variables
  highpassFilterReset();
}



void loop()
{
  // If leads are not connected
  if((digitalRead(loNegPin) == 1)||(digitalRead(loPosPin) == 1)){
    Serial.println('!');
    return;
  }

  // Read sensor
  // highpass
  // treshold
  // lowpass filter
  
  sensorValue = readSensor();                      // Read the sensor value using ADC
  highpass = highpassFilter(sensorValue);          // Calculate the high-pass signal
  muscleActive = tresholdSignal(highpass);         // Convert int signal to bool
  lowpassOutput = lowpassFilter(muscleActive)// Calculate the low-pass signal
  
  // Wait for a bit
  delay(sensorReadDelay);
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HELPER FUNCTIONS ////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Read the sensor value using ADC
int readSensor(){
  return analogRead(sensorInputPin);
}

// Set EMA_S for t=1
void highpassFilterReset(){
  EMA_S = analogRead(sensorInputPin);
}

// Filter input val
int highpassFilter(int val){
  EMA_S = (EMA_a*val) + ((1-EMA_a)*EMA_S);        //run the EMA
  return val - EMA_S;                             //calculate the high-pass signal 
}

// Return true if signal is greater than 'contractionDetectionTreshold'
bool tresholdSignal(int val){
  if(abs(val) > contractionDetectionTreshold){
    return true;
  }
  return false;
}

bool lowpassFilter(bool val){
  return false;
}
