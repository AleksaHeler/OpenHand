
OpenHandFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063bc  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080065ac  080065ac  000075ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006658  08006658  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  08006658  08006658  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006658  08006658  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006658  08006658  00007658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800665c  0800665c  0000765c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006660  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000205c  20000060  080066c0  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020bc  080066c0  000080bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e86c  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c7b  00000000  00000000  000268f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  0002a570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001463  00000000  00000000  0002bf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a4c  00000000  00000000  0002d3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d95f  00000000  00000000  00030e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae1b3  00000000  00000000  0004e77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc931  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000725c  00000000  00000000  000fc974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00103bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000060 	.word	0x20000060
 800020c:	00000000 	.word	0x00000000
 8000210:	08006594 	.word	0x08006594

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000064 	.word	0x20000064
 800022c:	08006594 	.word	0x08006594

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 fec4 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f836 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 fafa 	bl	8000834 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000240:	f000 f8fe 	bl	8000440 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000244:	f000 f950 	bl	80004e8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000248:	f000 f9a2 	bl	8000590 <MX_TIM5_Init>
  MX_USB_PCD_Init();
 800024c:	f000 fad0 	bl	80007f0 <MX_USB_PCD_Init>
  MX_TIM8_Init();
 8000250:	f000 f9f2 	bl	8000638 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000254:	f000 f888 	bl	8000368 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000258:	f000 f8c4 	bl	80003e4 <MX_I2C1_Init>
  MX_UART4_Init();
 800025c:	f000 fa9e 	bl	800079c <MX_UART4_Init>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  /* Motor 2 */
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  /* Motor 3 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000260:	f003 fb74 	bl	800394c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of hand_control */
  hand_controlHandle = osThreadNew(hand_control_function, NULL, &hand_control_attributes);
 8000264:	4a0a      	ldr	r2, [pc, #40]	@ (8000290 <main+0x60>)
 8000266:	2100      	movs	r1, #0
 8000268:	480a      	ldr	r0, [pc, #40]	@ (8000294 <main+0x64>)
 800026a:	f003 fbb7 	bl	80039dc <osThreadNew>
 800026e:	4603      	mov	r3, r0
 8000270:	4a09      	ldr	r2, [pc, #36]	@ (8000298 <main+0x68>)
 8000272:	6013      	str	r3, [r2, #0]

  /* creation of system_health */
  system_healthHandle = osThreadNew(system_health_function, NULL, &system_health_attributes);
 8000274:	4a09      	ldr	r2, [pc, #36]	@ (800029c <main+0x6c>)
 8000276:	2100      	movs	r1, #0
 8000278:	4809      	ldr	r0, [pc, #36]	@ (80002a0 <main+0x70>)
 800027a:	f003 fbaf 	bl	80039dc <osThreadNew>
 800027e:	4603      	mov	r3, r0
 8000280:	4a08      	ldr	r2, [pc, #32]	@ (80002a4 <main+0x74>)
 8000282:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000284:	f003 fb84 	bl	8003990 <osKernelStart>
 8000288:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800028a:	4618      	mov	r0, r3
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	080065e4 	.word	0x080065e4
 8000294:	08000971 	.word	0x08000971
 8000298:	20000540 	.word	0x20000540
 800029c:	08006608 	.word	0x08006608
 80002a0:	08000983 	.word	0x08000983
 80002a4:	20000544 	.word	0x20000544

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b096      	sub	sp, #88	@ 0x58
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002b2:	2228      	movs	r2, #40	@ 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f006 f886 	bl	80063c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	f107 031c 	add.w	r3, r7, #28
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]
 80002da:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002dc:	2301      	movs	r3, #1
 80002de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80002e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80002ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	2301      	movs	r3, #1
 80002ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	2302      	movs	r3, #2
 80002f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002fa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002fe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000304:	4618      	mov	r0, r3
 8000306:	f001 fd77 	bl	8001df8 <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000310:	f000 fb52 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000318:	2302      	movs	r3, #2
 800031a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000320:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000324:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800032a:	f107 031c 	add.w	r3, r7, #28
 800032e:	2102      	movs	r1, #2
 8000330:	4618      	mov	r0, r3
 8000332:	f001 ffe3 	bl	80022fc <HAL_RCC_ClockConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800033c:	f000 fb3c 	bl	80009b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000340:	2312      	movs	r3, #18
 8000342:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000344:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000348:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800034a:	2300      	movs	r3, #0
 800034c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	4618      	mov	r0, r3
 8000352:	f002 f993 	bl	800267c <HAL_RCCEx_PeriphCLKConfig>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800035c:	f000 fb2c 	bl	80009b8 <Error_Handler>
  }
}
 8000360:	bf00      	nop
 8000362:	3758      	adds	r7, #88	@ 0x58
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <MX_ADC1_Init+0x74>)
 800037a:	4a19      	ldr	r2, [pc, #100]	@ (80003e0 <MX_ADC1_Init+0x78>)
 800037c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <MX_ADC1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <MX_ADC1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <MX_ADC1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <MX_ADC1_Init+0x74>)
 8000392:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000396:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000398:	4b10      	ldr	r3, [pc, #64]	@ (80003dc <MX_ADC1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800039e:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <MX_ADC1_Init+0x74>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003a4:	480d      	ldr	r0, [pc, #52]	@ (80003dc <MX_ADC1_Init+0x74>)
 80003a6:	f000 fe3d 	bl	8001024 <HAL_ADC_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003b0:	f000 fb02 	bl	80009b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80003b4:	2308      	movs	r3, #8
 80003b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b8:	2301      	movs	r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	4619      	mov	r1, r3
 80003c4:	4805      	ldr	r0, [pc, #20]	@ (80003dc <MX_ADC1_Init+0x74>)
 80003c6:	f000 ff17 	bl	80011f8 <HAL_ADC_ConfigChannel>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003d0:	f000 faf2 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003d4:	bf00      	nop
 80003d6:	3710      	adds	r7, #16
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	2000007c 	.word	0x2000007c
 80003e0:	40012400 	.word	0x40012400

080003e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e8:	4b12      	ldr	r3, [pc, #72]	@ (8000434 <MX_I2C1_Init+0x50>)
 80003ea:	4a13      	ldr	r2, [pc, #76]	@ (8000438 <MX_I2C1_Init+0x54>)
 80003ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003ee:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <MX_I2C1_Init+0x50>)
 80003f0:	4a12      	ldr	r2, [pc, #72]	@ (800043c <MX_I2C1_Init+0x58>)
 80003f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000434 <MX_I2C1_Init+0x50>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000434 <MX_I2C1_Init+0x50>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000400:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <MX_I2C1_Init+0x50>)
 8000402:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000406:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000408:	4b0a      	ldr	r3, [pc, #40]	@ (8000434 <MX_I2C1_Init+0x50>)
 800040a:	2200      	movs	r2, #0
 800040c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800040e:	4b09      	ldr	r3, [pc, #36]	@ (8000434 <MX_I2C1_Init+0x50>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000414:	4b07      	ldr	r3, [pc, #28]	@ (8000434 <MX_I2C1_Init+0x50>)
 8000416:	2200      	movs	r2, #0
 8000418:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800041a:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <MX_I2C1_Init+0x50>)
 800041c:	2200      	movs	r2, #0
 800041e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000420:	4804      	ldr	r0, [pc, #16]	@ (8000434 <MX_I2C1_Init+0x50>)
 8000422:	f001 faaf 	bl	8001984 <HAL_I2C_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800042c:	f000 fac4 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	200000ac 	.word	0x200000ac
 8000438:	40005400 	.word	0x40005400
 800043c:	000186a0 	.word	0x000186a0

08000440 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08c      	sub	sp, #48	@ 0x30
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000446:	f107 030c 	add.w	r3, r7, #12
 800044a:	2224      	movs	r2, #36	@ 0x24
 800044c:	2100      	movs	r1, #0
 800044e:	4618      	mov	r0, r3
 8000450:	f005 ffba 	bl	80063c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800045c:	4b20      	ldr	r3, [pc, #128]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 800045e:	4a21      	ldr	r2, [pc, #132]	@ (80004e4 <MX_TIM3_Init+0xa4>)
 8000460:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000462:	4b1f      	ldr	r3, [pc, #124]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 8000464:	2200      	movs	r2, #0
 8000466:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000468:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800046e:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 8000470:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000474:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000476:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800047c:	4b18      	ldr	r3, [pc, #96]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 800047e:	2200      	movs	r2, #0
 8000480:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000482:	2301      	movs	r3, #1
 8000484:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800048a:	2301      	movs	r3, #1
 800048c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000496:	2300      	movs	r3, #0
 8000498:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800049a:	2301      	movs	r3, #1
 800049c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80004a6:	f107 030c 	add.w	r3, r7, #12
 80004aa:	4619      	mov	r1, r3
 80004ac:	480c      	ldr	r0, [pc, #48]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 80004ae:	f002 fafa 	bl	8002aa6 <HAL_TIM_Encoder_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80004b8:	f000 fa7e 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004bc:	2300      	movs	r3, #0
 80004be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4619      	mov	r1, r3
 80004c8:	4805      	ldr	r0, [pc, #20]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 80004ca:	f002 fff3 	bl	80034b4 <HAL_TIMEx_MasterConfigSynchronization>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80004d4:	f000 fa70 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004d8:	bf00      	nop
 80004da:	3730      	adds	r7, #48	@ 0x30
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000100 	.word	0x20000100
 80004e4:	40000400 	.word	0x40000400

080004e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08c      	sub	sp, #48	@ 0x30
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	2224      	movs	r2, #36	@ 0x24
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f005 ff66 	bl	80063c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000504:	4b20      	ldr	r3, [pc, #128]	@ (8000588 <MX_TIM4_Init+0xa0>)
 8000506:	4a21      	ldr	r2, [pc, #132]	@ (800058c <MX_TIM4_Init+0xa4>)
 8000508:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800050a:	4b1f      	ldr	r3, [pc, #124]	@ (8000588 <MX_TIM4_Init+0xa0>)
 800050c:	2200      	movs	r2, #0
 800050e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000510:	4b1d      	ldr	r3, [pc, #116]	@ (8000588 <MX_TIM4_Init+0xa0>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000516:	4b1c      	ldr	r3, [pc, #112]	@ (8000588 <MX_TIM4_Init+0xa0>)
 8000518:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800051c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051e:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <MX_TIM4_Init+0xa0>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000524:	4b18      	ldr	r3, [pc, #96]	@ (8000588 <MX_TIM4_Init+0xa0>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800052a:	2301      	movs	r3, #1
 800052c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000532:	2301      	movs	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800053e:	2300      	movs	r3, #0
 8000540:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000542:	2301      	movs	r3, #1
 8000544:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4619      	mov	r1, r3
 8000554:	480c      	ldr	r0, [pc, #48]	@ (8000588 <MX_TIM4_Init+0xa0>)
 8000556:	f002 faa6 	bl	8002aa6 <HAL_TIM_Encoder_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000560:	f000 fa2a 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4619      	mov	r1, r3
 8000570:	4805      	ldr	r0, [pc, #20]	@ (8000588 <MX_TIM4_Init+0xa0>)
 8000572:	f002 ff9f 	bl	80034b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800057c:	f000 fa1c 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000580:	bf00      	nop
 8000582:	3730      	adds	r7, #48	@ 0x30
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000148 	.word	0x20000148
 800058c:	40000800 	.word	0x40000800

08000590 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	@ 0x30
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2224      	movs	r2, #36	@ 0x24
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 ff12 	bl	80063c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80005ac:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <MX_TIM5_Init+0xa0>)
 80005ae:	4a21      	ldr	r2, [pc, #132]	@ (8000634 <MX_TIM5_Init+0xa4>)
 80005b0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80005b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <MX_TIM5_Init+0xa0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000630 <MX_TIM5_Init+0xa0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80005be:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <MX_TIM5_Init+0xa0>)
 80005c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005c4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <MX_TIM5_Init+0xa0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005cc:	4b18      	ldr	r3, [pc, #96]	@ (8000630 <MX_TIM5_Init+0xa0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005da:	2301      	movs	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005ea:	2301      	movs	r3, #1
 80005ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	480c      	ldr	r0, [pc, #48]	@ (8000630 <MX_TIM5_Init+0xa0>)
 80005fe:	f002 fa52 	bl	8002aa6 <HAL_TIM_Encoder_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000608:	f000 f9d6 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_TIM5_Init+0xa0>)
 800061a:	f002 ff4b 	bl	80034b4 <HAL_TIMEx_MasterConfigSynchronization>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000624:	f000 f9c8 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	3730      	adds	r7, #48	@ 0x30
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000190 	.word	0x20000190
 8000634:	40000c00 	.word	0x40000c00

08000638 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b092      	sub	sp, #72	@ 0x48
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000648:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
 8000658:	615a      	str	r2, [r3, #20]
 800065a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2220      	movs	r2, #32
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 feb0 	bl	80063c8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000668:	4b4a      	ldr	r3, [pc, #296]	@ (8000794 <MX_TIM8_Init+0x15c>)
 800066a:	4a4b      	ldr	r2, [pc, #300]	@ (8000798 <MX_TIM8_Init+0x160>)
 800066c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 72;
 800066e:	4b49      	ldr	r3, [pc, #292]	@ (8000794 <MX_TIM8_Init+0x15c>)
 8000670:	2248      	movs	r2, #72	@ 0x48
 8000672:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b47      	ldr	r3, [pc, #284]	@ (8000794 <MX_TIM8_Init+0x15c>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20-1;
 800067a:	4b46      	ldr	r3, [pc, #280]	@ (8000794 <MX_TIM8_Init+0x15c>)
 800067c:	2213      	movs	r2, #19
 800067e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000680:	4b44      	ldr	r3, [pc, #272]	@ (8000794 <MX_TIM8_Init+0x15c>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000686:	4b43      	ldr	r3, [pc, #268]	@ (8000794 <MX_TIM8_Init+0x15c>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068c:	4b41      	ldr	r3, [pc, #260]	@ (8000794 <MX_TIM8_Init+0x15c>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000692:	4840      	ldr	r0, [pc, #256]	@ (8000794 <MX_TIM8_Init+0x15c>)
 8000694:	f002 f9b8 	bl	8002a08 <HAL_TIM_PWM_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 800069e:	f000 f98b 	bl	80009b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80006a2:	483c      	ldr	r0, [pc, #240]	@ (8000794 <MX_TIM8_Init+0x15c>)
 80006a4:	f002 f958 	bl	8002958 <HAL_TIM_OC_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80006ae:	f000 f983 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b2:	2300      	movs	r3, #0
 80006b4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80006ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006be:	4619      	mov	r1, r3
 80006c0:	4834      	ldr	r0, [pc, #208]	@ (8000794 <MX_TIM8_Init+0x15c>)
 80006c2:	f002 fef7 	bl	80034b4 <HAL_TIMEx_MasterConfigSynchronization>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80006cc:	f000 f974 	bl	80009b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d0:	2360      	movs	r3, #96	@ 0x60
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d8:	2300      	movs	r3, #0
 80006da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006dc:	2300      	movs	r3, #0
 80006de:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	4827      	ldr	r0, [pc, #156]	@ (8000794 <MX_TIM8_Init+0x15c>)
 80006f6:	f002 fbc5 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8000700:	f000 f95a 	bl	80009b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000704:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000708:	2204      	movs	r2, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4821      	ldr	r0, [pc, #132]	@ (8000794 <MX_TIM8_Init+0x15c>)
 800070e:	f002 fbb9 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM8_Init+0xe4>
  {
    Error_Handler();
 8000718:	f000 f94e 	bl	80009b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000724:	2208      	movs	r2, #8
 8000726:	4619      	mov	r1, r3
 8000728:	481a      	ldr	r0, [pc, #104]	@ (8000794 <MX_TIM8_Init+0x15c>)
 800072a:	f002 fb4f 	bl	8002dcc <HAL_TIM_OC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8000734:	f000 f940 	bl	80009b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000738:	2360      	movs	r3, #96	@ 0x60
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800073c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000740:	220c      	movs	r2, #12
 8000742:	4619      	mov	r1, r3
 8000744:	4813      	ldr	r0, [pc, #76]	@ (8000794 <MX_TIM8_Init+0x15c>)
 8000746:	f002 fb9d 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM8_Init+0x11c>
  {
    Error_Handler();
 8000750:	f000 f932 	bl	80009b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800076c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	4807      	ldr	r0, [pc, #28]	@ (8000794 <MX_TIM8_Init+0x15c>)
 8000778:	f002 ff08 	bl	800358c <HAL_TIMEx_ConfigBreakDeadTime>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM8_Init+0x14e>
  {
    Error_Handler();
 8000782:	f000 f919 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000786:	4803      	ldr	r0, [pc, #12]	@ (8000794 <MX_TIM8_Init+0x15c>)
 8000788:	f000 faae 	bl	8000ce8 <HAL_TIM_MspPostInit>

}
 800078c:	bf00      	nop
 800078e:	3748      	adds	r7, #72	@ 0x48
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200001d8 	.word	0x200001d8
 8000798:	40013400 	.word	0x40013400

0800079c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_UART4_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <MX_UART4_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <MX_UART4_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_UART4_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_UART4_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_UART4_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_UART4_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_UART4_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_UART4_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_UART4_Init+0x4c>)
 80007d4:	f002 ff3d 	bl	8003652 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80007de:	f000 f8eb 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000220 	.word	0x20000220
 80007ec:	40004c00 	.word	0x40004c00

080007f0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007f4:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <MX_USB_PCD_Init+0x3c>)
 80007f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000830 <MX_USB_PCD_Init+0x40>)
 80007f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007fa:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USB_PCD_Init+0x3c>)
 80007fc:	2208      	movs	r2, #8
 80007fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <MX_USB_PCD_Init+0x3c>)
 8000802:	2202      	movs	r2, #2
 8000804:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USB_PCD_Init+0x3c>)
 8000808:	2200      	movs	r2, #0
 800080a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	@ (800082c <MX_USB_PCD_Init+0x3c>)
 800080e:	2200      	movs	r2, #0
 8000810:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USB_PCD_Init+0x3c>)
 8000814:	2200      	movs	r2, #0
 8000816:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	@ (800082c <MX_USB_PCD_Init+0x3c>)
 800081a:	f001 f9f7 	bl	8001c0c <HAL_PCD_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000824:	f000 f8c8 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000268 	.word	0x20000268
 8000830:	40005c00 	.word	0x40005c00

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000848:	4b44      	ldr	r3, [pc, #272]	@ (800095c <MX_GPIO_Init+0x128>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a43      	ldr	r2, [pc, #268]	@ (800095c <MX_GPIO_Init+0x128>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b41      	ldr	r3, [pc, #260]	@ (800095c <MX_GPIO_Init+0x128>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000860:	4b3e      	ldr	r3, [pc, #248]	@ (800095c <MX_GPIO_Init+0x128>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a3d      	ldr	r2, [pc, #244]	@ (800095c <MX_GPIO_Init+0x128>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b3b      	ldr	r3, [pc, #236]	@ (800095c <MX_GPIO_Init+0x128>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0310 	and.w	r3, r3, #16
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000878:	4b38      	ldr	r3, [pc, #224]	@ (800095c <MX_GPIO_Init+0x128>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a37      	ldr	r2, [pc, #220]	@ (800095c <MX_GPIO_Init+0x128>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b35      	ldr	r3, [pc, #212]	@ (800095c <MX_GPIO_Init+0x128>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000890:	4b32      	ldr	r3, [pc, #200]	@ (800095c <MX_GPIO_Init+0x128>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a31      	ldr	r2, [pc, #196]	@ (800095c <MX_GPIO_Init+0x128>)
 8000896:	f043 0308 	orr.w	r3, r3, #8
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b2f      	ldr	r3, [pc, #188]	@ (800095c <MX_GPIO_Init+0x128>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2130      	movs	r1, #48	@ 0x30
 80008ac:	482c      	ldr	r0, [pc, #176]	@ (8000960 <MX_GPIO_Init+0x12c>)
 80008ae:	f001 f851 	bl	8001954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_01_EN_Pin|MOTOR_02_EN_Pin|MOTOR_03_EN_Pin|HAPTIC_DIR_Pin
 80008b2:	2200      	movs	r2, #0
 80008b4:	f64f 4104 	movw	r1, #64516	@ 0xfc04
 80008b8:	482a      	ldr	r0, [pc, #168]	@ (8000964 <MX_GPIO_Init+0x130>)
 80008ba:	f001 f84b 	bl	8001954 <HAL_GPIO_WritePin>
                          |MOTOR_01_DIR_Pin|MOTOR_02_DIR_Pin|MOTOR_03_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HAPTIC_EN_GPIO_Port, HAPTIC_EN_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008c4:	4828      	ldr	r0, [pc, #160]	@ (8000968 <MX_GPIO_Init+0x134>)
 80008c6:	f001 f845 	bl	8001954 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = LED_01_Pin|LED_02_Pin;
 80008ca:	2330      	movs	r3, #48	@ 0x30
 80008cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	481f      	ldr	r0, [pc, #124]	@ (8000960 <MX_GPIO_Init+0x12c>)
 80008e2:	f000 fea3 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_01_EN_Pin MOTOR_02_EN_Pin MOTOR_03_EN_Pin HAPTIC_DIR_Pin
                           MOTOR_01_DIR_Pin MOTOR_02_DIR_Pin MOTOR_03_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_01_EN_Pin|MOTOR_02_EN_Pin|MOTOR_03_EN_Pin|HAPTIC_DIR_Pin
 80008e6:	f64f 4304 	movw	r3, #64516	@ 0xfc04
 80008ea:	613b      	str	r3, [r7, #16]
                          |MOTOR_01_DIR_Pin|MOTOR_02_DIR_Pin|MOTOR_03_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	4819      	ldr	r0, [pc, #100]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000900:	f000 fe94 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_01_FAULT_Pin MOTOR_02_FAULT_Pin MOTOR_03_FAULT_Pin BTN_Pin */
  GPIO_InitStruct.Pin = MOTOR_01_FAULT_Pin|MOTOR_02_FAULT_Pin|MOTOR_03_FAULT_Pin|BTN_Pin;
 8000904:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8000908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	4619      	mov	r1, r3
 8000918:	4811      	ldr	r0, [pc, #68]	@ (8000960 <MX_GPIO_Init+0x12c>)
 800091a:	f000 fe87 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : HAPTIC_EN_Pin */
  GPIO_InitStruct.Pin = HAPTIC_EN_Pin;
 800091e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2302      	movs	r3, #2
 800092e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HAPTIC_EN_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4619      	mov	r1, r3
 8000936:	480c      	ldr	r0, [pc, #48]	@ (8000968 <MX_GPIO_Init+0x134>)
 8000938:	f000 fe78 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : HAPTIC_FAULT_Pin */
  GPIO_InitStruct.Pin = HAPTIC_FAULT_Pin;
 800093c:	2304      	movs	r3, #4
 800093e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HAPTIC_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	4619      	mov	r1, r3
 800094e:	4807      	ldr	r0, [pc, #28]	@ (800096c <MX_GPIO_Init+0x138>)
 8000950:	f000 fe6c 	bl	800162c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000
 8000960:	40010800 	.word	0x40010800
 8000964:	40010c00 	.word	0x40010c00
 8000968:	40011000 	.word	0x40011000
 800096c:	40011400 	.word	0x40011400

08000970 <hand_control_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_hand_control_function */
void hand_control_function(void *argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	// HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); /* LED_02 */
  	osDelay(1000);
 8000978:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800097c:	f003 f8c0 	bl	8003b00 <osDelay>
 8000980:	e7fa      	b.n	8000978 <hand_control_function+0x8>

08000982 <system_health_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_system_health_function */
void system_health_function(void *argument)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN system_health_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800098a:	2001      	movs	r0, #1
 800098c:	f003 f8b8 	bl	8003b00 <osDelay>
 8000990:	e7fb      	b.n	800098a <system_health_function+0x8>
	...

08000994 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009a6:	f000 fb21 	bl	8000fec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40001000 	.word	0x40001000

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <Error_Handler+0x8>

080009c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ca:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <HAL_MspInit+0x68>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a17      	ldr	r2, [pc, #92]	@ (8000a2c <HAL_MspInit+0x68>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <HAL_MspInit+0x68>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <HAL_MspInit+0x68>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4a11      	ldr	r2, [pc, #68]	@ (8000a2c <HAL_MspInit+0x68>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ec:	61d3      	str	r3, [r2, #28]
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <HAL_MspInit+0x68>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	210f      	movs	r1, #15
 80009fe:	f06f 0001 	mvn.w	r0, #1
 8000a02:	f000 fde8 	bl	80015d6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a06:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <HAL_MspInit+0x6c>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	@ (8000a30 <HAL_MspInit+0x6c>)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010000 	.word	0x40010000

08000a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0318 	add.w	r3, r7, #24
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000acc <HAL_ADC_MspInit+0x98>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d137      	bne.n	8000ac4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <HAL_ADC_MspInit+0x9c>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad0 <HAL_ADC_MspInit+0x9c>)
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <HAL_ADC_MspInit+0x9c>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <HAL_ADC_MspInit+0x9c>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a17      	ldr	r2, [pc, #92]	@ (8000ad0 <HAL_ADC_MspInit+0x9c>)
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <HAL_ADC_MspInit+0x9c>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0310 	and.w	r3, r3, #16
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <HAL_ADC_MspInit+0x9c>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a11      	ldr	r2, [pc, #68]	@ (8000ad0 <HAL_ADC_MspInit+0x9c>)
 8000a8a:	f043 0308 	orr.w	r3, r3, #8
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <HAL_ADC_MspInit+0x9c>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0308 	and.w	r3, r3, #8
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = EMG_01_Pin|EMG_02_Pin|TRIM_POT_01_Pin|TRIM_POT_02_Pin;
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480a      	ldr	r0, [pc, #40]	@ (8000ad4 <HAL_ADC_MspInit+0xa0>)
 8000aac:	f000 fdbe 	bl	800162c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BATT_SENSE_Pin|VIN_5V_SENSE_Pin;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 0318 	add.w	r3, r7, #24
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <HAL_ADC_MspInit+0xa4>)
 8000ac0:	f000 fdb4 	bl	800162c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	@ 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40012400 	.word	0x40012400
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40011000 	.word	0x40011000
 8000ad8:	40010c00 	.word	0x40010c00

08000adc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b6c <HAL_I2C_MspInit+0x90>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d132      	bne.n	8000b62 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <HAL_I2C_MspInit+0x94>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a1b      	ldr	r2, [pc, #108]	@ (8000b70 <HAL_I2C_MspInit+0x94>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <HAL_I2C_MspInit+0x94>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1a:	2312      	movs	r3, #18
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4812      	ldr	r0, [pc, #72]	@ (8000b74 <HAL_I2C_MspInit+0x98>)
 8000b2a:	f000 fd7f 	bl	800162c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000b2e:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <HAL_I2C_MspInit+0x9c>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b36:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b44:	4a0c      	ldr	r2, [pc, #48]	@ (8000b78 <HAL_I2C_MspInit+0x9c>)
 8000b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b48:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_I2C_MspInit+0x94>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <HAL_I2C_MspInit+0x94>)
 8000b50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b54:	61d3      	str	r3, [r2, #28]
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_I2C_MspInit+0x94>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	@ 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40005400 	.word	0x40005400
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010c00 	.word	0x40010c00
 8000b78:	40010000 	.word	0x40010000

08000b7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	@ 0x30
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0320 	add.w	r3, r7, #32
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a3f      	ldr	r2, [pc, #252]	@ (8000c94 <HAL_TIM_Encoder_MspInit+0x118>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d124      	bne.n	8000be6 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b9c:	4b3e      	ldr	r3, [pc, #248]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	4a3d      	ldr	r2, [pc, #244]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	61d3      	str	r3, [r2, #28]
 8000ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	61fb      	str	r3, [r7, #28]
 8000bb2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b38      	ldr	r3, [pc, #224]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a37      	ldr	r2, [pc, #220]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b35      	ldr	r3, [pc, #212]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_01_ENCODER_A_Pin|MOTOR_01_ENCODER_B_Pin;
 8000bcc:	23c0      	movs	r3, #192	@ 0xc0
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0320 	add.w	r3, r7, #32
 8000bdc:	4619      	mov	r1, r3
 8000bde:	482f      	ldr	r0, [pc, #188]	@ (8000c9c <HAL_TIM_Encoder_MspInit+0x120>)
 8000be0:	f000 fd24 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000be4:	e052      	b.n	8000c8c <HAL_TIM_Encoder_MspInit+0x110>
  else if(htim_encoder->Instance==TIM4)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a2d      	ldr	r2, [pc, #180]	@ (8000ca0 <HAL_TIM_Encoder_MspInit+0x124>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d124      	bne.n	8000c3a <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bf0:	4b29      	ldr	r3, [pc, #164]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	4a28      	ldr	r2, [pc, #160]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	61d3      	str	r3, [r2, #28]
 8000bfc:	4b26      	ldr	r3, [pc, #152]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	4b23      	ldr	r3, [pc, #140]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a22      	ldr	r2, [pc, #136]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0308 	and.w	r3, r3, #8
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_02_ENCODER_A_Pin|MOTOR_02_ENCODER_B_Pin;
 8000c20:	23c0      	movs	r3, #192	@ 0xc0
 8000c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0320 	add.w	r3, r7, #32
 8000c30:	4619      	mov	r1, r3
 8000c32:	481c      	ldr	r0, [pc, #112]	@ (8000ca4 <HAL_TIM_Encoder_MspInit+0x128>)
 8000c34:	f000 fcfa 	bl	800162c <HAL_GPIO_Init>
}
 8000c38:	e028      	b.n	8000c8c <HAL_TIM_Encoder_MspInit+0x110>
  else if(htim_encoder->Instance==TIM5)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ca8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d123      	bne.n	8000c8c <HAL_TIM_Encoder_MspInit+0x110>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c44:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	4a13      	ldr	r2, [pc, #76]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	61d3      	str	r3, [r2, #28]
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c52:	69db      	ldr	r3, [r3, #28]
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_03_ENCODER_A_Pin|MOTOR_03_ENCODER_B_Pin;
 8000c74:	2303      	movs	r3, #3
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0320 	add.w	r3, r7, #32
 8000c84:	4619      	mov	r1, r3
 8000c86:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <HAL_TIM_Encoder_MspInit+0x120>)
 8000c88:	f000 fcd0 	bl	800162c <HAL_GPIO_Init>
}
 8000c8c:	bf00      	nop
 8000c8e:	3730      	adds	r7, #48	@ 0x30
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40000400 	.word	0x40000400
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010800 	.word	0x40010800
 8000ca0:	40000800 	.word	0x40000800
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	40000c00 	.word	0x40000c00

08000cac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a09      	ldr	r2, [pc, #36]	@ (8000ce0 <HAL_TIM_PWM_MspInit+0x34>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d10b      	bne.n	8000cd6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_TIM_PWM_MspInit+0x38>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <HAL_TIM_PWM_MspInit+0x38>)
 8000cc4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cc8:	6193      	str	r3, [r2, #24]
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_TIM_PWM_MspInit+0x38>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	40013400 	.word	0x40013400
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a10      	ldr	r2, [pc, #64]	@ (8000d44 <HAL_TIM_MspPostInit+0x5c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d118      	bne.n	8000d3a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <HAL_TIM_MspPostInit+0x60>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d48 <HAL_TIM_MspPostInit+0x60>)
 8000d0e:	f043 0310 	orr.w	r3, r3, #16
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <HAL_TIM_MspPostInit+0x60>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0310 	and.w	r3, r3, #16
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = HAPTIC_PWM_Pin|MOTOR_01_PWM_Pin|MOTOR_02_PWM_Pin|MOTOR_03_PWM_Pin;
 8000d20:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000d24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <HAL_TIM_MspPostInit+0x64>)
 8000d36:	f000 fc79 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40013400 	.word	0x40013400
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40011000 	.word	0x40011000

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ddc <HAL_UART_MspInit+0x8c>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d131      	bne.n	8000dd4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <HAL_UART_MspInit+0x90>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	4a1a      	ldr	r2, [pc, #104]	@ (8000de0 <HAL_UART_MspInit+0x90>)
 8000d76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d7a:	61d3      	str	r3, [r2, #28]
 8000d7c:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <HAL_UART_MspInit+0x90>)
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d88:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <HAL_UART_MspInit+0x90>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <HAL_UART_MspInit+0x90>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_UART_MspInit+0x90>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0310 	and.w	r3, r3, #16
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000da0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000da4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	480b      	ldr	r0, [pc, #44]	@ (8000de4 <HAL_UART_MspInit+0x94>)
 8000db6:	f000 fc39 	bl	800162c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <HAL_UART_MspInit+0x94>)
 8000dd0:	f000 fc2c 	bl	800162c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40004c00 	.word	0x40004c00
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40011000 	.word	0x40011000

08000de8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a09      	ldr	r2, [pc, #36]	@ (8000e1c <HAL_PCD_MspInit+0x34>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10b      	bne.n	8000e12 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000dfa:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <HAL_PCD_MspInit+0x38>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	4a08      	ldr	r2, [pc, #32]	@ (8000e20 <HAL_PCD_MspInit+0x38>)
 8000e00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e04:	61d3      	str	r3, [r2, #28]
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_PCD_MspInit+0x38>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	40005c00 	.word	0x40005c00
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08e      	sub	sp, #56	@ 0x38
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e3a:	4b34      	ldr	r3, [pc, #208]	@ (8000f0c <HAL_InitTick+0xe8>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	4a33      	ldr	r2, [pc, #204]	@ (8000f0c <HAL_InitTick+0xe8>)
 8000e40:	f043 0310 	orr.w	r3, r3, #16
 8000e44:	61d3      	str	r3, [r2, #28]
 8000e46:	4b31      	ldr	r3, [pc, #196]	@ (8000f0c <HAL_InitTick+0xe8>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f003 0310 	and.w	r3, r3, #16
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e52:	f107 0210 	add.w	r2, r7, #16
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 fbbf 	bl	80025e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d103      	bne.n	8000e74 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e6c:	f001 fb90 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8000e70:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e72:	e004      	b.n	8000e7e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e74:	f001 fb8c 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e80:	4a23      	ldr	r2, [pc, #140]	@ (8000f10 <HAL_InitTick+0xec>)
 8000e82:	fba2 2303 	umull	r2, r3, r2, r3
 8000e86:	0c9b      	lsrs	r3, r3, #18
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e8c:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <HAL_InitTick+0xf0>)
 8000e8e:	4a22      	ldr	r2, [pc, #136]	@ (8000f18 <HAL_InitTick+0xf4>)
 8000e90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e92:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <HAL_InitTick+0xf0>)
 8000e94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e98:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f14 <HAL_InitTick+0xf0>)
 8000e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e9e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <HAL_InitTick+0xf0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <HAL_InitTick+0xf0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <HAL_InitTick+0xf0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000eb2:	4818      	ldr	r0, [pc, #96]	@ (8000f14 <HAL_InitTick+0xf0>)
 8000eb4:	f001 fc98 	bl	80027e8 <HAL_TIM_Base_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ebe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d11b      	bne.n	8000efe <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ec6:	4813      	ldr	r0, [pc, #76]	@ (8000f14 <HAL_InitTick+0xf0>)
 8000ec8:	f001 fce6 	bl	8002898 <HAL_TIM_Base_Start_IT>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ed2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d111      	bne.n	8000efe <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000eda:	2036      	movs	r0, #54	@ 0x36
 8000edc:	f000 fb97 	bl	800160e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b0f      	cmp	r3, #15
 8000ee4:	d808      	bhi.n	8000ef8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	2036      	movs	r0, #54	@ 0x36
 8000eec:	f000 fb73 	bl	80015d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <HAL_InitTick+0xf8>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e002      	b.n	8000efe <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000efe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3738      	adds	r7, #56	@ 0x38
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	431bde83 	.word	0x431bde83
 8000f14:	20000548 	.word	0x20000548
 8000f18:	40001000 	.word	0x40001000
 8000f1c:	20000004 	.word	0x20000004

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <NMI_Handler+0x4>

08000f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <MemManage_Handler+0x4>

08000f38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <TIM6_IRQHandler+0x10>)
 8000f5a:	f001 fe46 	bl	8002bea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000548 	.word	0x20000548

08000f68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f74:	f7ff fff8 	bl	8000f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480b      	ldr	r0, [pc, #44]	@ (8000fa8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f7a:	490c      	ldr	r1, [pc, #48]	@ (8000fac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a09      	ldr	r2, [pc, #36]	@ (8000fb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f90:	4c09      	ldr	r4, [pc, #36]	@ (8000fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f005 fa71 	bl	8006484 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa2:	f7ff f945 	bl	8000230 <main>
  bx lr
 8000fa6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000fb0:	08006660 	.word	0x08006660
  ldr r2, =_sbss
 8000fb4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000fb8:	200020bc 	.word	0x200020bc

08000fbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC1_2_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <HAL_Init+0x28>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	@ (8000fe8 <HAL_Init+0x28>)
 8000fca:	f043 0310 	orr.w	r3, r3, #16
 8000fce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 faf5 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f7ff ff24 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fcf2 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40022000 	.word	0x40022000

08000fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <HAL_IncTick+0x1c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b05      	ldr	r3, [pc, #20]	@ (800100c <HAL_IncTick+0x20>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a03      	ldr	r2, [pc, #12]	@ (800100c <HAL_IncTick+0x20>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	20000008 	.word	0x20000008
 800100c:	20000590 	.word	0x20000590

08001010 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b02      	ldr	r3, [pc, #8]	@ (8001020 <HAL_GetTick+0x10>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	20000590 	.word	0x20000590

08001024 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e0ce      	b.n	80011e4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001050:	2b00      	cmp	r3, #0
 8001052:	d109      	bne.n	8001068 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fce6 	bl	8000a34 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 f9bd 	bl	80013e8 <ADC_ConversionStop_Disable>
 800106e:	4603      	mov	r3, r0
 8001070:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	2b00      	cmp	r3, #0
 800107c:	f040 80a9 	bne.w	80011d2 <HAL_ADC_Init+0x1ae>
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f040 80a5 	bne.w	80011d2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800108c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001090:	f023 0302 	bic.w	r3, r3, #2
 8001094:	f043 0202 	orr.w	r2, r3, #2
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4951      	ldr	r1, [pc, #324]	@ (80011ec <HAL_ADC_Init+0x1c8>)
 80010a6:	428b      	cmp	r3, r1
 80010a8:	d10a      	bne.n	80010c0 <HAL_ADC_Init+0x9c>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80010b2:	d002      	beq.n	80010ba <HAL_ADC_Init+0x96>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	e004      	b.n	80010c4 <HAL_ADC_Init+0xa0>
 80010ba:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80010be:	e001      	b.n	80010c4 <HAL_ADC_Init+0xa0>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7b1b      	ldrb	r3, [r3, #12]
 80010ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010dc:	d003      	beq.n	80010e6 <HAL_ADC_Init+0xc2>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d102      	bne.n	80010ec <HAL_ADC_Init+0xc8>
 80010e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ea:	e000      	b.n	80010ee <HAL_ADC_Init+0xca>
 80010ec:	2300      	movs	r3, #0
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7d1b      	ldrb	r3, [r3, #20]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d119      	bne.n	8001130 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7b1b      	ldrb	r3, [r3, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d109      	bne.n	8001118 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	3b01      	subs	r3, #1
 800110a:	035a      	lsls	r2, r3, #13
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	e00b      	b.n	8001130 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800111c:	f043 0220 	orr.w	r2, r3, #32
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	430a      	orrs	r2, r1
 8001142:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	4b29      	ldr	r3, [pc, #164]	@ (80011f0 <HAL_ADC_Init+0x1cc>)
 800114c:	4013      	ands	r3, r2
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	68b9      	ldr	r1, [r7, #8]
 8001154:	430b      	orrs	r3, r1
 8001156:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001160:	d003      	beq.n	800116a <HAL_ADC_Init+0x146>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d104      	bne.n	8001174 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	3b01      	subs	r3, #1
 8001170:	051b      	lsls	r3, r3, #20
 8001172:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	430a      	orrs	r2, r1
 8001186:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <HAL_ADC_Init+0x1d0>)
 8001190:	4013      	ands	r3, r2
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	429a      	cmp	r2, r3
 8001196:	d10b      	bne.n	80011b0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a2:	f023 0303 	bic.w	r3, r3, #3
 80011a6:	f043 0201 	orr.w	r2, r3, #1
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011ae:	e018      	b.n	80011e2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b4:	f023 0312 	bic.w	r3, r3, #18
 80011b8:	f043 0210 	orr.w	r2, r3, #16
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c4:	f043 0201 	orr.w	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011d0:	e007      	b.n	80011e2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d6:	f043 0210 	orr.w	r2, r3, #16
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40013c00 	.word	0x40013c00
 80011f0:	ffe1f7fd 	.word	0xffe1f7fd
 80011f4:	ff1f0efe 	.word	0xff1f0efe

080011f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x20>
 8001214:	2302      	movs	r3, #2
 8001216:	e0dc      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x1da>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b06      	cmp	r3, #6
 8001226:	d81c      	bhi.n	8001262 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3b05      	subs	r3, #5
 800123a:	221f      	movs	r2, #31
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	4019      	ands	r1, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	3b05      	subs	r3, #5
 8001254:	fa00 f203 	lsl.w	r2, r0, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001260:	e03c      	b.n	80012dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b0c      	cmp	r3, #12
 8001268:	d81c      	bhi.n	80012a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	3b23      	subs	r3, #35	@ 0x23
 800127c:	221f      	movs	r2, #31
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	4019      	ands	r1, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	3b23      	subs	r3, #35	@ 0x23
 8001296:	fa00 f203 	lsl.w	r2, r0, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80012a2:	e01b      	b.n	80012dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	3b41      	subs	r3, #65	@ 0x41
 80012b6:	221f      	movs	r2, #31
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	4019      	ands	r1, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	3b41      	subs	r3, #65	@ 0x41
 80012d0:	fa00 f203 	lsl.w	r2, r0, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b09      	cmp	r3, #9
 80012e2:	d91c      	bls.n	800131e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68d9      	ldr	r1, [r3, #12]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	3b1e      	subs	r3, #30
 80012f6:	2207      	movs	r2, #7
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	4019      	ands	r1, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	6898      	ldr	r0, [r3, #8]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	3b1e      	subs	r3, #30
 8001310:	fa00 f203 	lsl.w	r2, r0, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	e019      	b.n	8001352 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6919      	ldr	r1, [r3, #16]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	2207      	movs	r2, #7
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	4019      	ands	r1, r3
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	6898      	ldr	r0, [r3, #8]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	fa00 f203 	lsl.w	r2, r0, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b10      	cmp	r3, #16
 8001358:	d003      	beq.n	8001362 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800135e:	2b11      	cmp	r3, #17
 8001360:	d132      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1d      	ldr	r2, [pc, #116]	@ (80013dc <HAL_ADC_ConfigChannel+0x1e4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d125      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d126      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001388:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b10      	cmp	r3, #16
 8001390:	d11a      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001392:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a13      	ldr	r2, [pc, #76]	@ (80013e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001398:	fba2 2303 	umull	r2, r3, r2, r3
 800139c:	0c9a      	lsrs	r2, r3, #18
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013a8:	e002      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f9      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x1b2>
 80013b6:	e007      	b.n	80013c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013bc:	f043 0220 	orr.w	r2, r3, #32
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40012400 	.word	0x40012400
 80013e0:	20000000 	.word	0x20000000
 80013e4:	431bde83 	.word	0x431bde83

080013e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d12e      	bne.n	8001460 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001412:	f7ff fdfd 	bl	8001010 <HAL_GetTick>
 8001416:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001418:	e01b      	b.n	8001452 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800141a:	f7ff fdf9 	bl	8001010 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d914      	bls.n	8001452 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b01      	cmp	r3, #1
 8001434:	d10d      	bne.n	8001452 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800143a:	f043 0210 	orr.w	r2, r3, #16
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001446:	f043 0201 	orr.w	r2, r3, #1
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e007      	b.n	8001462 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b01      	cmp	r3, #1
 800145e:	d0dc      	beq.n	800141a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001488:	4013      	ands	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001494:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b8:	4b04      	ldr	r3, [pc, #16]	@ (80014cc <__NVIC_GetPriorityGrouping+0x18>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f003 0307 	and.w	r3, r3, #7
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	db0b      	blt.n	80014fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	4906      	ldr	r1, [pc, #24]	@ (8001504 <__NVIC_EnableIRQ+0x34>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	2001      	movs	r0, #1
 80014f2:	fa00 f202 	lsl.w	r2, r0, r2
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	@ (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	@ (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	@ 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	@ 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff4f 	bl	800146c <__NVIC_SetPriorityGrouping>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff64 	bl	80014b4 <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ffb2 	bl	800155c <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff81 	bl	8001508 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff57 	bl	80014d0 <__NVIC_EnableIRQ>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b08b      	sub	sp, #44	@ 0x2c
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	e179      	b.n	8001934 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001640:	2201      	movs	r2, #1
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 8168 	bne.w	800192e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a96      	ldr	r2, [pc, #600]	@ (80018bc <HAL_GPIO_Init+0x290>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d05e      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001668:	4a94      	ldr	r2, [pc, #592]	@ (80018bc <HAL_GPIO_Init+0x290>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d875      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800166e:	4a94      	ldr	r2, [pc, #592]	@ (80018c0 <HAL_GPIO_Init+0x294>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d058      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001674:	4a92      	ldr	r2, [pc, #584]	@ (80018c0 <HAL_GPIO_Init+0x294>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d86f      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800167a:	4a92      	ldr	r2, [pc, #584]	@ (80018c4 <HAL_GPIO_Init+0x298>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d052      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001680:	4a90      	ldr	r2, [pc, #576]	@ (80018c4 <HAL_GPIO_Init+0x298>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d869      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 8001686:	4a90      	ldr	r2, [pc, #576]	@ (80018c8 <HAL_GPIO_Init+0x29c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d04c      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 800168c:	4a8e      	ldr	r2, [pc, #568]	@ (80018c8 <HAL_GPIO_Init+0x29c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d863      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 8001692:	4a8e      	ldr	r2, [pc, #568]	@ (80018cc <HAL_GPIO_Init+0x2a0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d046      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001698:	4a8c      	ldr	r2, [pc, #560]	@ (80018cc <HAL_GPIO_Init+0x2a0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d85d      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d82a      	bhi.n	80016f8 <HAL_GPIO_Init+0xcc>
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d859      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 80016a6:	a201      	add	r2, pc, #4	@ (adr r2, 80016ac <HAL_GPIO_Init+0x80>)
 80016a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ac:	08001727 	.word	0x08001727
 80016b0:	08001701 	.word	0x08001701
 80016b4:	08001713 	.word	0x08001713
 80016b8:	08001755 	.word	0x08001755
 80016bc:	0800175b 	.word	0x0800175b
 80016c0:	0800175b 	.word	0x0800175b
 80016c4:	0800175b 	.word	0x0800175b
 80016c8:	0800175b 	.word	0x0800175b
 80016cc:	0800175b 	.word	0x0800175b
 80016d0:	0800175b 	.word	0x0800175b
 80016d4:	0800175b 	.word	0x0800175b
 80016d8:	0800175b 	.word	0x0800175b
 80016dc:	0800175b 	.word	0x0800175b
 80016e0:	0800175b 	.word	0x0800175b
 80016e4:	0800175b 	.word	0x0800175b
 80016e8:	0800175b 	.word	0x0800175b
 80016ec:	0800175b 	.word	0x0800175b
 80016f0:	08001709 	.word	0x08001709
 80016f4:	0800171d 	.word	0x0800171d
 80016f8:	4a75      	ldr	r2, [pc, #468]	@ (80018d0 <HAL_GPIO_Init+0x2a4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016fe:	e02c      	b.n	800175a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	623b      	str	r3, [r7, #32]
          break;
 8001706:	e029      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	3304      	adds	r3, #4
 800170e:	623b      	str	r3, [r7, #32]
          break;
 8001710:	e024      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	3308      	adds	r3, #8
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e01f      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	330c      	adds	r3, #12
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e01a      	b.n	800175c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800172e:	2304      	movs	r3, #4
 8001730:	623b      	str	r3, [r7, #32]
          break;
 8001732:	e013      	b.n	800175c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800173c:	2308      	movs	r3, #8
 800173e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	611a      	str	r2, [r3, #16]
          break;
 8001746:	e009      	b.n	800175c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001748:	2308      	movs	r3, #8
 800174a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	615a      	str	r2, [r3, #20]
          break;
 8001752:	e003      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x130>
          break;
 800175a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2bff      	cmp	r3, #255	@ 0xff
 8001760:	d801      	bhi.n	8001766 <HAL_GPIO_Init+0x13a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	e001      	b.n	800176a <HAL_GPIO_Init+0x13e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3304      	adds	r3, #4
 800176a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2bff      	cmp	r3, #255	@ 0xff
 8001770:	d802      	bhi.n	8001778 <HAL_GPIO_Init+0x14c>
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	e002      	b.n	800177e <HAL_GPIO_Init+0x152>
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	3b08      	subs	r3, #8
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	210f      	movs	r1, #15
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	401a      	ands	r2, r3
 8001790:	6a39      	ldr	r1, [r7, #32]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	431a      	orrs	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80c1 	beq.w	800192e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ac:	4b49      	ldr	r3, [pc, #292]	@ (80018d4 <HAL_GPIO_Init+0x2a8>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a48      	ldr	r2, [pc, #288]	@ (80018d4 <HAL_GPIO_Init+0x2a8>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b46      	ldr	r3, [pc, #280]	@ (80018d4 <HAL_GPIO_Init+0x2a8>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c4:	4a44      	ldr	r2, [pc, #272]	@ (80018d8 <HAL_GPIO_Init+0x2ac>)
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a3c      	ldr	r2, [pc, #240]	@ (80018dc <HAL_GPIO_Init+0x2b0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d01f      	beq.n	8001830 <HAL_GPIO_Init+0x204>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a3b      	ldr	r2, [pc, #236]	@ (80018e0 <HAL_GPIO_Init+0x2b4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d019      	beq.n	800182c <HAL_GPIO_Init+0x200>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a3a      	ldr	r2, [pc, #232]	@ (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d013      	beq.n	8001828 <HAL_GPIO_Init+0x1fc>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a39      	ldr	r2, [pc, #228]	@ (80018e8 <HAL_GPIO_Init+0x2bc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d00d      	beq.n	8001824 <HAL_GPIO_Init+0x1f8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a38      	ldr	r2, [pc, #224]	@ (80018ec <HAL_GPIO_Init+0x2c0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d007      	beq.n	8001820 <HAL_GPIO_Init+0x1f4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a37      	ldr	r2, [pc, #220]	@ (80018f0 <HAL_GPIO_Init+0x2c4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d101      	bne.n	800181c <HAL_GPIO_Init+0x1f0>
 8001818:	2305      	movs	r3, #5
 800181a:	e00a      	b.n	8001832 <HAL_GPIO_Init+0x206>
 800181c:	2306      	movs	r3, #6
 800181e:	e008      	b.n	8001832 <HAL_GPIO_Init+0x206>
 8001820:	2304      	movs	r3, #4
 8001822:	e006      	b.n	8001832 <HAL_GPIO_Init+0x206>
 8001824:	2303      	movs	r3, #3
 8001826:	e004      	b.n	8001832 <HAL_GPIO_Init+0x206>
 8001828:	2302      	movs	r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x206>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_GPIO_Init+0x206>
 8001830:	2300      	movs	r3, #0
 8001832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001834:	f002 0203 	and.w	r2, r2, #3
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	4093      	lsls	r3, r2
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4313      	orrs	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001842:	4925      	ldr	r1, [pc, #148]	@ (80018d8 <HAL_GPIO_Init+0x2ac>)
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <HAL_GPIO_Init+0x2c8>)
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	4924      	ldr	r1, [pc, #144]	@ (80018f4 <HAL_GPIO_Init+0x2c8>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]
 8001868:	e006      	b.n	8001878 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800186a:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <HAL_GPIO_Init+0x2c8>)
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	43db      	mvns	r3, r3
 8001872:	4920      	ldr	r1, [pc, #128]	@ (80018f4 <HAL_GPIO_Init+0x2c8>)
 8001874:	4013      	ands	r3, r2
 8001876:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001884:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <HAL_GPIO_Init+0x2c8>)
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	491a      	ldr	r1, [pc, #104]	@ (80018f4 <HAL_GPIO_Init+0x2c8>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	60cb      	str	r3, [r1, #12]
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001892:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <HAL_GPIO_Init+0x2c8>)
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	43db      	mvns	r3, r3
 800189a:	4916      	ldr	r1, [pc, #88]	@ (80018f4 <HAL_GPIO_Init+0x2c8>)
 800189c:	4013      	ands	r3, r2
 800189e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d025      	beq.n	80018f8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <HAL_GPIO_Init+0x2c8>)
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4910      	ldr	r1, [pc, #64]	@ (80018f4 <HAL_GPIO_Init+0x2c8>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	e025      	b.n	8001906 <HAL_GPIO_Init+0x2da>
 80018ba:	bf00      	nop
 80018bc:	10320000 	.word	0x10320000
 80018c0:	10310000 	.word	0x10310000
 80018c4:	10220000 	.word	0x10220000
 80018c8:	10210000 	.word	0x10210000
 80018cc:	10120000 	.word	0x10120000
 80018d0:	10110000 	.word	0x10110000
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010000 	.word	0x40010000
 80018dc:	40010800 	.word	0x40010800
 80018e0:	40010c00 	.word	0x40010c00
 80018e4:	40011000 	.word	0x40011000
 80018e8:	40011400 	.word	0x40011400
 80018ec:	40011800 	.word	0x40011800
 80018f0:	40011c00 	.word	0x40011c00
 80018f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018f8:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <HAL_GPIO_Init+0x324>)
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	43db      	mvns	r3, r3
 8001900:	4913      	ldr	r1, [pc, #76]	@ (8001950 <HAL_GPIO_Init+0x324>)
 8001902:	4013      	ands	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d006      	beq.n	8001920 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001912:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <HAL_GPIO_Init+0x324>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	490e      	ldr	r1, [pc, #56]	@ (8001950 <HAL_GPIO_Init+0x324>)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]
 800191e:	e006      	b.n	800192e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <HAL_GPIO_Init+0x324>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	43db      	mvns	r3, r3
 8001928:	4909      	ldr	r1, [pc, #36]	@ (8001950 <HAL_GPIO_Init+0x324>)
 800192a:	4013      	ands	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	3301      	adds	r3, #1
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193a:	fa22 f303 	lsr.w	r3, r2, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	f47f ae7e 	bne.w	8001640 <HAL_GPIO_Init+0x14>
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	372c      	adds	r7, #44	@ 0x2c
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40010400 	.word	0x40010400

08001954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
 8001960:	4613      	mov	r3, r2
 8001962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001964:	787b      	ldrb	r3, [r7, #1]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800196a:	887a      	ldrh	r2, [r7, #2]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001970:	e003      	b.n	800197a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001972:	887b      	ldrh	r3, [r7, #2]
 8001974:	041a      	lsls	r2, r3, #16
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	611a      	str	r2, [r3, #16]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e12b      	b.n	8001bee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d106      	bne.n	80019b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff f896 	bl	8000adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2224      	movs	r2, #36	@ 0x24
 80019b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019e8:	f000 fdd2 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 80019ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a81      	ldr	r2, [pc, #516]	@ (8001bf8 <HAL_I2C_Init+0x274>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d807      	bhi.n	8001a08 <HAL_I2C_Init+0x84>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4a80      	ldr	r2, [pc, #512]	@ (8001bfc <HAL_I2C_Init+0x278>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	bf94      	ite	ls
 8001a00:	2301      	movls	r3, #1
 8001a02:	2300      	movhi	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	e006      	b.n	8001a16 <HAL_I2C_Init+0x92>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4a7d      	ldr	r2, [pc, #500]	@ (8001c00 <HAL_I2C_Init+0x27c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	bf94      	ite	ls
 8001a10:	2301      	movls	r3, #1
 8001a12:	2300      	movhi	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0e7      	b.n	8001bee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4a78      	ldr	r2, [pc, #480]	@ (8001c04 <HAL_I2C_Init+0x280>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	0c9b      	lsrs	r3, r3, #18
 8001a28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a6a      	ldr	r2, [pc, #424]	@ (8001bf8 <HAL_I2C_Init+0x274>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d802      	bhi.n	8001a58 <HAL_I2C_Init+0xd4>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	3301      	adds	r3, #1
 8001a56:	e009      	b.n	8001a6c <HAL_I2C_Init+0xe8>
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	4a69      	ldr	r2, [pc, #420]	@ (8001c08 <HAL_I2C_Init+0x284>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	099b      	lsrs	r3, r3, #6
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	495c      	ldr	r1, [pc, #368]	@ (8001bf8 <HAL_I2C_Init+0x274>)
 8001a88:	428b      	cmp	r3, r1
 8001a8a:	d819      	bhi.n	8001ac0 <HAL_I2C_Init+0x13c>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1e59      	subs	r1, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a9a:	1c59      	adds	r1, r3, #1
 8001a9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001aa0:	400b      	ands	r3, r1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00a      	beq.n	8001abc <HAL_I2C_Init+0x138>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1e59      	subs	r1, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aba:	e051      	b.n	8001b60 <HAL_I2C_Init+0x1dc>
 8001abc:	2304      	movs	r3, #4
 8001abe:	e04f      	b.n	8001b60 <HAL_I2C_Init+0x1dc>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d111      	bne.n	8001aec <HAL_I2C_Init+0x168>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1e58      	subs	r0, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	440b      	add	r3, r1
 8001ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ada:	3301      	adds	r3, #1
 8001adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	e012      	b.n	8001b12 <HAL_I2C_Init+0x18e>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1e58      	subs	r0, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	0099      	lsls	r1, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b02:	3301      	adds	r3, #1
 8001b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2301      	moveq	r3, #1
 8001b0e:	2300      	movne	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Init+0x196>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e022      	b.n	8001b60 <HAL_I2C_Init+0x1dc>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10e      	bne.n	8001b40 <HAL_I2C_Init+0x1bc>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1e58      	subs	r0, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6859      	ldr	r1, [r3, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	440b      	add	r3, r1
 8001b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b3e:	e00f      	b.n	8001b60 <HAL_I2C_Init+0x1dc>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1e58      	subs	r0, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	0099      	lsls	r1, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	6809      	ldr	r1, [r1, #0]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6911      	ldr	r1, [r2, #16]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68d2      	ldr	r2, [r2, #12]
 8001b9a:	4311      	orrs	r1, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	000186a0 	.word	0x000186a0
 8001bfc:	001e847f 	.word	0x001e847f
 8001c00:	003d08ff 	.word	0x003d08ff
 8001c04:	431bde83 	.word	0x431bde83
 8001c08:	10624dd3 	.word	0x10624dd3

08001c0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0e8      	b.n	8001df0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff f8d8 	bl	8000de8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 fded 	bl	800382a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3304      	adds	r3, #4
 8001c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c5a:	f001 fdd9 	bl	8003810 <USB_CoreInit>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0bf      	b.n	8001df0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f001 fdf1 	bl	800385e <USB_SetCurrentMode>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2202      	movs	r2, #2
 8001c86:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0b0      	b.n	8001df0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	73fb      	strb	r3, [r7, #15]
 8001c92:	e03e      	b.n	8001d12 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	440b      	add	r3, r1
 8001ca2:	3311      	adds	r3, #17
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3310      	adds	r3, #16
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	440b      	add	r3, r1
 8001cca:	3313      	adds	r3, #19
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	440b      	add	r3, r1
 8001cde:	3320      	adds	r3, #32
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3324      	adds	r3, #36	@ 0x24
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	440b      	add	r3, r1
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	791b      	ldrb	r3, [r3, #4]
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d3bb      	bcc.n	8001c94 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e044      	b.n	8001dac <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	440b      	add	r3, r1
 8001d30:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d38:	7bfa      	ldrb	r2, [r7, #15]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	440b      	add	r3, r1
 8001d88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	3301      	adds	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	791b      	ldrb	r3, [r3, #4]
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d3b5      	bcc.n	8001d22 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc0:	f001 fd59 	bl	8003876 <USB_DevInit>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00c      	b.n	8001df0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f001 fd61 	bl	80038b0 <USB_DevDisconnect>

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e272      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8087 	beq.w	8001f26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e18:	4b92      	ldr	r3, [pc, #584]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d00c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e24:	4b8f      	ldr	r3, [pc, #572]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d112      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5e>
 8001e30:	4b8c      	ldr	r3, [pc, #560]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e3c:	d10b      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3e:	4b89      	ldr	r3, [pc, #548]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d06c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x12c>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d168      	bne.n	8001f24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e24c      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x76>
 8001e60:	4b80      	ldr	r3, [pc, #512]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a7f      	ldr	r2, [pc, #508]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e02e      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x98>
 8001e76:	4b7b      	ldr	r3, [pc, #492]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a7a      	ldr	r2, [pc, #488]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b78      	ldr	r3, [pc, #480]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a77      	ldr	r2, [pc, #476]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e01d      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xbc>
 8001e9a:	4b72      	ldr	r3, [pc, #456]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a71      	ldr	r2, [pc, #452]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b6f      	ldr	r3, [pc, #444]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a6e      	ldr	r2, [pc, #440]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001eb4:	4b6b      	ldr	r3, [pc, #428]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a6a      	ldr	r2, [pc, #424]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b68      	ldr	r3, [pc, #416]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a67      	ldr	r2, [pc, #412]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f89c 	bl	8001010 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff f898 	bl	8001010 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	@ 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e200      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b5d      	ldr	r3, [pc, #372]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0xe4>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff f888 	bl	8001010 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff f884 	bl	8001010 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	@ 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1ec      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	4b53      	ldr	r3, [pc, #332]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x10c>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d063      	beq.n	8001ffa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f32:	4b4c      	ldr	r3, [pc, #304]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f3e:	4b49      	ldr	r3, [pc, #292]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d11c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x18c>
 8001f4a:	4b46      	ldr	r3, [pc, #280]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d116      	bne.n	8001f84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	4b43      	ldr	r3, [pc, #268]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x176>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1c0      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4939      	ldr	r1, [pc, #228]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	e03a      	b.n	8001ffa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8c:	4b36      	ldr	r3, [pc, #216]	@ (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7ff f83d 	bl	8001010 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9a:	f7ff f839 	bl	8001010 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e1a1      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	4b2d      	ldr	r3, [pc, #180]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4927      	ldr	r1, [pc, #156]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
 8001fcc:	e015      	b.n	8001ffa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fce:	4b26      	ldr	r3, [pc, #152]	@ (8002068 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff f81c 	bl	8001010 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7ff f818 	bl	8001010 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e180      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d03a      	beq.n	800207c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d019      	beq.n	8002042 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200e:	4b17      	ldr	r3, [pc, #92]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002014:	f7fe fffc 	bl	8001010 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201c:	f7fe fff8 	bl	8001010 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e160      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202e:	4b0d      	ldr	r3, [pc, #52]	@ (8002064 <HAL_RCC_OscConfig+0x26c>)
 8002030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800203a:	2001      	movs	r0, #1
 800203c:	f000 fb00 	bl	8002640 <RCC_Delay>
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7fe ffe2 	bl	8001010 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204e:	e00f      	b.n	8002070 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7fe ffde 	bl	8001010 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d908      	bls.n	8002070 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e146      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	42420000 	.word	0x42420000
 800206c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	4b92      	ldr	r3, [pc, #584]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e9      	bne.n	8002050 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80a6 	beq.w	80021d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4b8b      	ldr	r3, [pc, #556]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10d      	bne.n	80020b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b88      	ldr	r3, [pc, #544]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a87      	ldr	r2, [pc, #540]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b85      	ldr	r3, [pc, #532]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	4b82      	ldr	r3, [pc, #520]	@ (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d118      	bne.n	80020f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c2:	4b7f      	ldr	r3, [pc, #508]	@ (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a7e      	ldr	r2, [pc, #504]	@ (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7fe ff9f 	bl	8001010 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d6:	f7fe ff9b 	bl	8001010 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b64      	cmp	r3, #100	@ 0x64
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e103      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e8:	4b75      	ldr	r3, [pc, #468]	@ (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x312>
 80020fc:	4b6f      	ldr	r3, [pc, #444]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a6e      	ldr	r2, [pc, #440]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	e02d      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x334>
 8002112:	4b6a      	ldr	r3, [pc, #424]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a69      	ldr	r2, [pc, #420]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6213      	str	r3, [r2, #32]
 800211e:	4b67      	ldr	r3, [pc, #412]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a66      	ldr	r2, [pc, #408]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	6213      	str	r3, [r2, #32]
 800212a:	e01c      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b05      	cmp	r3, #5
 8002132:	d10c      	bne.n	800214e <HAL_RCC_OscConfig+0x356>
 8002134:	4b61      	ldr	r3, [pc, #388]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4a60      	ldr	r2, [pc, #384]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6213      	str	r3, [r2, #32]
 8002140:	4b5e      	ldr	r3, [pc, #376]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4a5d      	ldr	r2, [pc, #372]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6213      	str	r3, [r2, #32]
 800214c:	e00b      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800214e:	4b5b      	ldr	r3, [pc, #364]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a5a      	ldr	r2, [pc, #360]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6213      	str	r3, [r2, #32]
 800215a:	4b58      	ldr	r3, [pc, #352]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4a57      	ldr	r2, [pc, #348]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002160:	f023 0304 	bic.w	r3, r3, #4
 8002164:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d015      	beq.n	800219a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7fe ff4f 	bl	8001010 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe ff4b 	bl	8001010 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0b1      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	4b4b      	ldr	r3, [pc, #300]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ee      	beq.n	8002176 <HAL_RCC_OscConfig+0x37e>
 8002198:	e014      	b.n	80021c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219a:	f7fe ff39 	bl	8001010 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7fe ff35 	bl	8001010 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e09b      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	4b40      	ldr	r3, [pc, #256]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ee      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d105      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ca:	4b3c      	ldr	r3, [pc, #240]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4a3b      	ldr	r2, [pc, #236]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8087 	beq.w	80022ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e0:	4b36      	ldr	r3, [pc, #216]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d061      	beq.n	80022b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d146      	bne.n	8002282 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f4:	4b33      	ldr	r3, [pc, #204]	@ (80022c4 <HAL_RCC_OscConfig+0x4cc>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7fe ff09 	bl	8001010 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7fe ff05 	bl	8001010 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e06d      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002214:	4b29      	ldr	r3, [pc, #164]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002228:	d108      	bne.n	800223c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800222a:	4b24      	ldr	r3, [pc, #144]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4921      	ldr	r1, [pc, #132]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223c:	4b1f      	ldr	r3, [pc, #124]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a19      	ldr	r1, [r3, #32]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	430b      	orrs	r3, r1
 800224e:	491b      	ldr	r1, [pc, #108]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002254:	4b1b      	ldr	r3, [pc, #108]	@ (80022c4 <HAL_RCC_OscConfig+0x4cc>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fed9 	bl	8001010 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe fed5 	bl	8001010 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e03d      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x46a>
 8002280:	e035      	b.n	80022ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b10      	ldr	r3, [pc, #64]	@ (80022c4 <HAL_RCC_OscConfig+0x4cc>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7fe fec2 	bl	8001010 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe febe 	bl	8001010 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e026      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x498>
 80022ae:	e01e      	b.n	80022ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d107      	bne.n	80022c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e019      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40007000 	.word	0x40007000
 80022c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <HAL_RCC_OscConfig+0x500>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000

080022fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0d0      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b6a      	ldr	r3, [pc, #424]	@ (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d910      	bls.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b67      	ldr	r3, [pc, #412]	@ (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	4965      	ldr	r1, [pc, #404]	@ (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b63      	ldr	r3, [pc, #396]	@ (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b8      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002358:	4b59      	ldr	r3, [pc, #356]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4a58      	ldr	r2, [pc, #352]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002362:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002370:	4b53      	ldr	r3, [pc, #332]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4a52      	ldr	r2, [pc, #328]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800237a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b50      	ldr	r3, [pc, #320]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	494d      	ldr	r1, [pc, #308]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d040      	beq.n	800241c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b47      	ldr	r3, [pc, #284]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d115      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b41      	ldr	r3, [pc, #260]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e073      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b3d      	ldr	r3, [pc, #244]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06b      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b39      	ldr	r3, [pc, #228]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4936      	ldr	r1, [pc, #216]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ec:	f7fe fe10 	bl	8001010 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe fe0c 	bl	8001010 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e053      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b2d      	ldr	r3, [pc, #180]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b27      	ldr	r3, [pc, #156]	@ (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d210      	bcs.n	800244c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b24      	ldr	r3, [pc, #144]	@ (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 0207 	bic.w	r2, r3, #7
 8002432:	4922      	ldr	r1, [pc, #136]	@ (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b20      	ldr	r3, [pc, #128]	@ (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e032      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4916      	ldr	r1, [pc, #88]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002476:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	490e      	ldr	r1, [pc, #56]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248a:	f000 f821 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800248e:	4602      	mov	r2, r0
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	490a      	ldr	r1, [pc, #40]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	5ccb      	ldrb	r3, [r1, r3]
 800249e:	fa22 f303 	lsr.w	r3, r2, r3
 80024a2:	4a09      	ldr	r2, [pc, #36]	@ (80024c8 <HAL_RCC_ClockConfig+0x1cc>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <HAL_RCC_ClockConfig+0x1d0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fcba 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40021000 	.word	0x40021000
 80024c4:	0800662c 	.word	0x0800662c
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x94>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d002      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x30>
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x36>
 80024fe:	e027      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002500:	4b19      	ldr	r3, [pc, #100]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x98>)
 8002502:	613b      	str	r3, [r7, #16]
      break;
 8002504:	e027      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	0c9b      	lsrs	r3, r3, #18
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	4a17      	ldr	r2, [pc, #92]	@ (800256c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002510:	5cd3      	ldrb	r3, [r2, r3]
 8002512:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d010      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800251e:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x94>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	0c5b      	lsrs	r3, r3, #17
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	4a11      	ldr	r2, [pc, #68]	@ (8002570 <HAL_RCC_GetSysClockFreq+0xa0>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a0d      	ldr	r2, [pc, #52]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x98>)
 8002532:	fb03 f202 	mul.w	r2, r3, r2
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e004      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0c      	ldr	r2, [pc, #48]	@ (8002574 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002544:	fb02 f303 	mul.w	r3, r2, r3
 8002548:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	613b      	str	r3, [r7, #16]
      break;
 800254e:	e002      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002552:	613b      	str	r3, [r7, #16]
      break;
 8002554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002556:	693b      	ldr	r3, [r7, #16]
}
 8002558:	4618      	mov	r0, r3
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	00f42400 	.word	0x00f42400
 800256c:	08006644 	.word	0x08006644
 8002570:	08006654 	.word	0x08006654
 8002574:	003d0900 	.word	0x003d0900
 8002578:	007a1200 	.word	0x007a1200

0800257c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002580:	4b02      	ldr	r3, [pc, #8]	@ (800258c <HAL_RCC_GetHCLKFreq+0x10>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	20000000 	.word	0x20000000

08002590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002594:	f7ff fff2 	bl	800257c <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4903      	ldr	r1, [pc, #12]	@ (80025b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	0800663c 	.word	0x0800663c

080025b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025bc:	f7ff ffde 	bl	800257c <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	0adb      	lsrs	r3, r3, #11
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4903      	ldr	r1, [pc, #12]	@ (80025dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40021000 	.word	0x40021000
 80025dc:	0800663c 	.word	0x0800663c

080025e0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	220f      	movs	r2, #15
 80025ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025f0:	4b11      	ldr	r3, [pc, #68]	@ (8002638 <HAL_RCC_GetClockConfig+0x58>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <HAL_RCC_GetClockConfig+0x58>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_RCC_GetClockConfig+0x58>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002614:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <HAL_RCC_GetClockConfig+0x58>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	08db      	lsrs	r3, r3, #3
 800261a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002622:	4b06      	ldr	r3, [pc, #24]	@ (800263c <HAL_RCC_GetClockConfig+0x5c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0207 	and.w	r2, r3, #7
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	40021000 	.word	0x40021000
 800263c:	40022000 	.word	0x40022000

08002640 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002648:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <RCC_Delay+0x34>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <RCC_Delay+0x38>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0a5b      	lsrs	r3, r3, #9
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800265c:	bf00      	nop
  }
  while (Delay --);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1e5a      	subs	r2, r3, #1
 8002662:	60fa      	str	r2, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f9      	bne.n	800265c <RCC_Delay+0x1c>
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	20000000 	.word	0x20000000
 8002678:	10624dd3 	.word	0x10624dd3

0800267c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d07d      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002698:	2300      	movs	r3, #0
 800269a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269c:	4b4f      	ldr	r3, [pc, #316]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10d      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a8:	4b4c      	ldr	r3, [pc, #304]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	4a4b      	ldr	r2, [pc, #300]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	61d3      	str	r3, [r2, #28]
 80026b4:	4b49      	ldr	r3, [pc, #292]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c0:	2301      	movs	r3, #1
 80026c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b46      	ldr	r3, [pc, #280]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d118      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d0:	4b43      	ldr	r3, [pc, #268]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a42      	ldr	r2, [pc, #264]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026dc:	f7fe fc98 	bl	8001010 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	e008      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e4:	f7fe fc94 	bl	8001010 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	@ 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e06d      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f6:	4b3a      	ldr	r3, [pc, #232]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002702:	4b36      	ldr	r3, [pc, #216]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800270a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d02e      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	429a      	cmp	r2, r3
 800271e:	d027      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002720:	4b2e      	ldr	r3, [pc, #184]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002728:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800272a:	4b2e      	ldr	r3, [pc, #184]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002730:	4b2c      	ldr	r3, [pc, #176]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002736:	4a29      	ldr	r2, [pc, #164]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d014      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7fe fc63 	bl	8001010 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7fe fc5f 	bl	8001010 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e036      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	4b1d      	ldr	r3, [pc, #116]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ee      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002770:	4b1a      	ldr	r3, [pc, #104]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4917      	ldr	r1, [pc, #92]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277e:	4313      	orrs	r3, r2
 8002780:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002788:	4b14      	ldr	r3, [pc, #80]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	4a13      	ldr	r2, [pc, #76]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002792:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027a0:	4b0e      	ldr	r3, [pc, #56]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	490b      	ldr	r1, [pc, #44]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027be:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	4904      	ldr	r1, [pc, #16]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40007000 	.word	0x40007000
 80027e4:	42420440 	.word	0x42420440

080027e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e041      	b.n	800287e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f839 	bl	8002886 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f000 fc12 	bl	8003050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d001      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e044      	b.n	800293a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002944 <HAL_TIM_Base_Start_IT+0xac>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d018      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x6c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002948 <HAL_TIM_Base_Start_IT+0xb0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d013      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x6c>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e4:	d00e      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x6c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a18      	ldr	r2, [pc, #96]	@ (800294c <HAL_TIM_Base_Start_IT+0xb4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d009      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x6c>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a16      	ldr	r2, [pc, #88]	@ (8002950 <HAL_TIM_Base_Start_IT+0xb8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x6c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a15      	ldr	r2, [pc, #84]	@ (8002954 <HAL_TIM_Base_Start_IT+0xbc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d111      	bne.n	8002928 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b06      	cmp	r3, #6
 8002914:	d010      	beq.n	8002938 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0201 	orr.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002926:	e007      	b.n	8002938 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40013400 	.word	0x40013400
 800294c:	40000400 	.word	0x40000400
 8002950:	40000800 	.word	0x40000800
 8002954:	40000c00 	.word	0x40000c00

08002958 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e041      	b.n	80029ee <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f839 	bl	80029f6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3304      	adds	r3, #4
 8002994:	4619      	mov	r1, r3
 8002996:	4610      	mov	r0, r2
 8002998:	f000 fb5a 	bl	8003050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e041      	b.n	8002a9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe f93c 	bl	8000cac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f000 fb02 	bl	8003050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e093      	b.n	8002be2 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe f854 	bl	8000b7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002aea:	f023 0307 	bic.w	r3, r3, #7
 8002aee:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f000 faa8 	bl	8003050 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b28:	f023 0303 	bic.w	r3, r3, #3
 8002b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002b46:	f023 030c 	bic.w	r3, r3, #12
 8002b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	4313      	orrs	r3, r2
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	011a      	lsls	r2, r3, #4
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	031b      	lsls	r3, r3, #12
 8002b76:	4313      	orrs	r3, r2
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002b84:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	4313      	orrs	r3, r2
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01b      	beq.n	8002c4e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0202 	mvn.w	r2, #2
 8002c1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f9f0 	bl	800301a <HAL_TIM_IC_CaptureCallback>
 8002c3a:	e005      	b.n	8002c48 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f9e3 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f9f2 	bl	800302c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d01b      	beq.n	8002c9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f06f 0204 	mvn.w	r2, #4
 8002c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f9ca 	bl	800301a <HAL_TIM_IC_CaptureCallback>
 8002c86:	e005      	b.n	8002c94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f9bd 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f9cc 	bl	800302c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01b      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f06f 0208 	mvn.w	r2, #8
 8002cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2204      	movs	r2, #4
 8002cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f9a4 	bl	800301a <HAL_TIM_IC_CaptureCallback>
 8002cd2:	e005      	b.n	8002ce0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f997 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f9a6 	bl	800302c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01b      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f06f 0210 	mvn.w	r2, #16
 8002d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2208      	movs	r2, #8
 8002d08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f97e 	bl	800301a <HAL_TIM_IC_CaptureCallback>
 8002d1e:	e005      	b.n	8002d2c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f971 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f980 	bl	800302c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00c      	beq.n	8002d56 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f06f 0201 	mvn.w	r2, #1
 8002d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7fd fe1f 	bl	8000994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00c      	beq.n	8002d7a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fc63 	bl	8003640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00c      	beq.n	8002d9e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d007      	beq.n	8002d9e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f950 	bl	800303e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00c      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0220 	mvn.w	r2, #32
 8002dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fc36 	bl	800362e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_OC_ConfigChannel+0x1e>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e048      	b.n	8002e7c <HAL_TIM_OC_ConfigChannel+0xb0>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	d839      	bhi.n	8002e6c <HAL_TIM_OC_ConfigChannel+0xa0>
 8002df8:	a201      	add	r2, pc, #4	@ (adr r2, 8002e00 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfe:	bf00      	nop
 8002e00:	08002e35 	.word	0x08002e35
 8002e04:	08002e6d 	.word	0x08002e6d
 8002e08:	08002e6d 	.word	0x08002e6d
 8002e0c:	08002e6d 	.word	0x08002e6d
 8002e10:	08002e43 	.word	0x08002e43
 8002e14:	08002e6d 	.word	0x08002e6d
 8002e18:	08002e6d 	.word	0x08002e6d
 8002e1c:	08002e6d 	.word	0x08002e6d
 8002e20:	08002e51 	.word	0x08002e51
 8002e24:	08002e6d 	.word	0x08002e6d
 8002e28:	08002e6d 	.word	0x08002e6d
 8002e2c:	08002e6d 	.word	0x08002e6d
 8002e30:	08002e5f 	.word	0x08002e5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f98e 	bl	800315c <TIM_OC1_SetConfig>
      break;
 8002e40:	e017      	b.n	8002e72 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 f9f7 	bl	800323c <TIM_OC2_SetConfig>
      break;
 8002e4e:	e010      	b.n	8002e72 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fa64 	bl	8003324 <TIM_OC3_SetConfig>
      break;
 8002e5c:	e009      	b.n	8002e72 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fad1 	bl	800340c <TIM_OC4_SetConfig>
      break;
 8002e6a:	e002      	b.n	8002e72 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e0ae      	b.n	8003000 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b0c      	cmp	r3, #12
 8002eae:	f200 809f 	bhi.w	8002ff0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002eed 	.word	0x08002eed
 8002ebc:	08002ff1 	.word	0x08002ff1
 8002ec0:	08002ff1 	.word	0x08002ff1
 8002ec4:	08002ff1 	.word	0x08002ff1
 8002ec8:	08002f2d 	.word	0x08002f2d
 8002ecc:	08002ff1 	.word	0x08002ff1
 8002ed0:	08002ff1 	.word	0x08002ff1
 8002ed4:	08002ff1 	.word	0x08002ff1
 8002ed8:	08002f6f 	.word	0x08002f6f
 8002edc:	08002ff1 	.word	0x08002ff1
 8002ee0:	08002ff1 	.word	0x08002ff1
 8002ee4:	08002ff1 	.word	0x08002ff1
 8002ee8:	08002faf 	.word	0x08002faf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f932 	bl	800315c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0208 	orr.w	r2, r2, #8
 8002f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0204 	bic.w	r2, r2, #4
 8002f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6999      	ldr	r1, [r3, #24]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	619a      	str	r2, [r3, #24]
      break;
 8002f2a:	e064      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f982 	bl	800323c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6999      	ldr	r1, [r3, #24]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	021a      	lsls	r2, r3, #8
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	619a      	str	r2, [r3, #24]
      break;
 8002f6c:	e043      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f9d5 	bl	8003324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0208 	orr.w	r2, r2, #8
 8002f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69da      	ldr	r2, [r3, #28]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0204 	bic.w	r2, r2, #4
 8002f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69d9      	ldr	r1, [r3, #28]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	61da      	str	r2, [r3, #28]
      break;
 8002fac:	e023      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fa29 	bl	800340c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69da      	ldr	r2, [r3, #28]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69d9      	ldr	r1, [r3, #28]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	021a      	lsls	r2, r3, #8
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	61da      	str	r2, [r3, #28]
      break;
 8002fee:	e002      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a39      	ldr	r2, [pc, #228]	@ (8003148 <TIM_Base_SetConfig+0xf8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d013      	beq.n	8003090 <TIM_Base_SetConfig+0x40>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a38      	ldr	r2, [pc, #224]	@ (800314c <TIM_Base_SetConfig+0xfc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00f      	beq.n	8003090 <TIM_Base_SetConfig+0x40>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003076:	d00b      	beq.n	8003090 <TIM_Base_SetConfig+0x40>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a35      	ldr	r2, [pc, #212]	@ (8003150 <TIM_Base_SetConfig+0x100>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d007      	beq.n	8003090 <TIM_Base_SetConfig+0x40>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a34      	ldr	r2, [pc, #208]	@ (8003154 <TIM_Base_SetConfig+0x104>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d003      	beq.n	8003090 <TIM_Base_SetConfig+0x40>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a33      	ldr	r2, [pc, #204]	@ (8003158 <TIM_Base_SetConfig+0x108>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d108      	bne.n	80030a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a28      	ldr	r2, [pc, #160]	@ (8003148 <TIM_Base_SetConfig+0xf8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <TIM_Base_SetConfig+0x82>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a27      	ldr	r2, [pc, #156]	@ (800314c <TIM_Base_SetConfig+0xfc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00f      	beq.n	80030d2 <TIM_Base_SetConfig+0x82>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030b8:	d00b      	beq.n	80030d2 <TIM_Base_SetConfig+0x82>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a24      	ldr	r2, [pc, #144]	@ (8003150 <TIM_Base_SetConfig+0x100>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <TIM_Base_SetConfig+0x82>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a23      	ldr	r2, [pc, #140]	@ (8003154 <TIM_Base_SetConfig+0x104>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d003      	beq.n	80030d2 <TIM_Base_SetConfig+0x82>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a22      	ldr	r2, [pc, #136]	@ (8003158 <TIM_Base_SetConfig+0x108>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d108      	bne.n	80030e4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a0f      	ldr	r2, [pc, #60]	@ (8003148 <TIM_Base_SetConfig+0xf8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_Base_SetConfig+0xc8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a0e      	ldr	r2, [pc, #56]	@ (800314c <TIM_Base_SetConfig+0xfc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d103      	bne.n	8003120 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f023 0201 	bic.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	611a      	str	r2, [r3, #16]
  }
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40013400 	.word	0x40013400
 8003150:	40000400 	.word	0x40000400
 8003154:	40000800 	.word	0x40000800
 8003158:	40000c00 	.word	0x40000c00

0800315c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f023 0201 	bic.w	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800318a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0303 	bic.w	r3, r3, #3
 8003192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f023 0302 	bic.w	r3, r3, #2
 80031a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a20      	ldr	r2, [pc, #128]	@ (8003234 <TIM_OC1_SetConfig+0xd8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d003      	beq.n	80031c0 <TIM_OC1_SetConfig+0x64>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003238 <TIM_OC1_SetConfig+0xdc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d10c      	bne.n	80031da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0308 	bic.w	r3, r3, #8
 80031c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a15      	ldr	r2, [pc, #84]	@ (8003234 <TIM_OC1_SetConfig+0xd8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d003      	beq.n	80031ea <TIM_OC1_SetConfig+0x8e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a14      	ldr	r2, [pc, #80]	@ (8003238 <TIM_OC1_SetConfig+0xdc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d111      	bne.n	800320e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	621a      	str	r2, [r3, #32]
}
 8003228:	bf00      	nop
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40012c00 	.word	0x40012c00
 8003238:	40013400 	.word	0x40013400

0800323c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f023 0210 	bic.w	r2, r3, #16
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800326a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f023 0320 	bic.w	r3, r3, #32
 8003286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a21      	ldr	r2, [pc, #132]	@ (800331c <TIM_OC2_SetConfig+0xe0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d003      	beq.n	80032a4 <TIM_OC2_SetConfig+0x68>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a20      	ldr	r2, [pc, #128]	@ (8003320 <TIM_OC2_SetConfig+0xe4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d10d      	bne.n	80032c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a16      	ldr	r2, [pc, #88]	@ (800331c <TIM_OC2_SetConfig+0xe0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_OC2_SetConfig+0x94>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a15      	ldr	r2, [pc, #84]	@ (8003320 <TIM_OC2_SetConfig+0xe4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d113      	bne.n	80032f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	40012c00 	.word	0x40012c00
 8003320:	40013400 	.word	0x40013400

08003324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0303 	bic.w	r3, r3, #3
 800335a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800336c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a21      	ldr	r2, [pc, #132]	@ (8003404 <TIM_OC3_SetConfig+0xe0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d003      	beq.n	800338a <TIM_OC3_SetConfig+0x66>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a20      	ldr	r2, [pc, #128]	@ (8003408 <TIM_OC3_SetConfig+0xe4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d10d      	bne.n	80033a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a16      	ldr	r2, [pc, #88]	@ (8003404 <TIM_OC3_SetConfig+0xe0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d003      	beq.n	80033b6 <TIM_OC3_SetConfig+0x92>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a15      	ldr	r2, [pc, #84]	@ (8003408 <TIM_OC3_SetConfig+0xe4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d113      	bne.n	80033de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	621a      	str	r2, [r3, #32]
}
 80033f8:	bf00      	nop
 80033fa:	371c      	adds	r7, #28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40013400 	.word	0x40013400

0800340c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800343a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	031b      	lsls	r3, r3, #12
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a11      	ldr	r2, [pc, #68]	@ (80034ac <TIM_OC4_SetConfig+0xa0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d003      	beq.n	8003474 <TIM_OC4_SetConfig+0x68>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a10      	ldr	r2, [pc, #64]	@ (80034b0 <TIM_OC4_SetConfig+0xa4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d109      	bne.n	8003488 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800347a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	019b      	lsls	r3, r3, #6
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	621a      	str	r2, [r3, #32]
}
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	40012c00 	.word	0x40012c00
 80034b0:	40013400 	.word	0x40013400

080034b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e050      	b.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1b      	ldr	r2, [pc, #108]	@ (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d018      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a19      	ldr	r2, [pc, #100]	@ (800357c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003522:	d00e      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a15      	ldr	r2, [pc, #84]	@ (8003580 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a14      	ldr	r2, [pc, #80]	@ (8003584 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a12      	ldr	r2, [pc, #72]	@ (8003588 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10c      	bne.n	800355c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	4313      	orrs	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	40012c00 	.word	0x40012c00
 800357c:	40013400 	.word	0x40013400
 8003580:	40000400 	.word	0x40000400
 8003584:	40000800 	.word	0x40000800
 8003588:	40000c00 	.word	0x40000c00

0800358c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e03d      	b.n	8003624 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr

08003652 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e042      	b.n	80036ea <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7fd fb69 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2224      	movs	r2, #36	@ 0x24
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003694:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f82c 	bl	80036f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800372e:	f023 030c 	bic.w	r3, r3, #12
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	430b      	orrs	r3, r1
 800373a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2c      	ldr	r2, [pc, #176]	@ (8003808 <UART_SetConfig+0x114>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d103      	bne.n	8003764 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800375c:	f7fe ff2c 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	e002      	b.n	800376a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003764:	f7fe ff14 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8003768:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009a      	lsls	r2, r3, #2
 8003774:	441a      	add	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003780:	4a22      	ldr	r2, [pc, #136]	@ (800380c <UART_SetConfig+0x118>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	0119      	lsls	r1, r3, #4
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	009a      	lsls	r2, r3, #2
 8003794:	441a      	add	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	fbb2 f2f3 	udiv	r2, r2, r3
 80037a0:	4b1a      	ldr	r3, [pc, #104]	@ (800380c <UART_SetConfig+0x118>)
 80037a2:	fba3 0302 	umull	r0, r3, r3, r2
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	2064      	movs	r0, #100	@ 0x64
 80037aa:	fb00 f303 	mul.w	r3, r0, r3
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	3332      	adds	r3, #50	@ 0x32
 80037b4:	4a15      	ldr	r2, [pc, #84]	@ (800380c <UART_SetConfig+0x118>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037c0:	4419      	add	r1, r3
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009a      	lsls	r2, r3, #2
 80037cc:	441a      	add	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d8:	4b0c      	ldr	r3, [pc, #48]	@ (800380c <UART_SetConfig+0x118>)
 80037da:	fba3 0302 	umull	r0, r3, r3, r2
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	2064      	movs	r0, #100	@ 0x64
 80037e2:	fb00 f303 	mul.w	r3, r0, r3
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	3332      	adds	r3, #50	@ 0x32
 80037ec:	4a07      	ldr	r2, [pc, #28]	@ (800380c <UART_SetConfig+0x118>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	f003 020f 	and.w	r2, r3, #15
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	440a      	add	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003800:	bf00      	nop
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40013800 	.word	0x40013800
 800380c:	51eb851f 	.word	0x51eb851f

08003810 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	4638      	mov	r0, r7
 800381a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003832:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003836:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	b29b      	uxth	r3, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	b29b      	uxth	r3, r3
 8003848:	4013      	ands	r3, r2
 800384a:	b29a      	uxth	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	4638      	mov	r0, r7
 8003880:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <__NVIC_SetPriority>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db0a      	blt.n	80038ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	490c      	ldr	r1, [pc, #48]	@ (8003910 <__NVIC_SetPriority+0x4c>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	440b      	add	r3, r1
 80038e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80038ec:	e00a      	b.n	8003904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4908      	ldr	r1, [pc, #32]	@ (8003914 <__NVIC_SetPriority+0x50>)
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3b04      	subs	r3, #4
 80038fc:	0112      	lsls	r2, r2, #4
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	440b      	add	r3, r1
 8003902:	761a      	strb	r2, [r3, #24]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000e100 	.word	0xe000e100
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800391c:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <SysTick_Handler+0x1c>)
 800391e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003920:	f001 fd38 	bl	8005394 <xTaskGetSchedulerState>
 8003924:	4603      	mov	r3, r0
 8003926:	2b01      	cmp	r3, #1
 8003928:	d001      	beq.n	800392e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800392a:	f002 fadd 	bl	8005ee8 <xPortSysTickHandler>
  }
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	e000e010 	.word	0xe000e010

08003938 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800393c:	2100      	movs	r1, #0
 800393e:	f06f 0004 	mvn.w	r0, #4
 8003942:	f7ff ffbf 	bl	80038c4 <__NVIC_SetPriority>
#endif
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003952:	f3ef 8305 	mrs	r3, IPSR
 8003956:	603b      	str	r3, [r7, #0]
  return(result);
 8003958:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800395e:	f06f 0305 	mvn.w	r3, #5
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	e00c      	b.n	8003980 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003966:	4b09      	ldr	r3, [pc, #36]	@ (800398c <osKernelInitialize+0x40>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d105      	bne.n	800397a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800396e:	4b07      	ldr	r3, [pc, #28]	@ (800398c <osKernelInitialize+0x40>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003974:	2300      	movs	r3, #0
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	e002      	b.n	8003980 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800397a:	f04f 33ff 	mov.w	r3, #4294967295
 800397e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003980:	687b      	ldr	r3, [r7, #4]
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr
 800398c:	20000594 	.word	0x20000594

08003990 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003996:	f3ef 8305 	mrs	r3, IPSR
 800399a:	603b      	str	r3, [r7, #0]
  return(result);
 800399c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80039a2:	f06f 0305 	mvn.w	r3, #5
 80039a6:	607b      	str	r3, [r7, #4]
 80039a8:	e010      	b.n	80039cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80039aa:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <osKernelStart+0x48>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d109      	bne.n	80039c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039b2:	f7ff ffc1 	bl	8003938 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039b6:	4b08      	ldr	r3, [pc, #32]	@ (80039d8 <osKernelStart+0x48>)
 80039b8:	2202      	movs	r2, #2
 80039ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039bc:	f001 f88a 	bl	8004ad4 <vTaskStartScheduler>
      stat = osOK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	607b      	str	r3, [r7, #4]
 80039c4:	e002      	b.n	80039cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039cc:	687b      	ldr	r3, [r7, #4]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000594 	.word	0x20000594

080039dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08e      	sub	sp, #56	@ 0x38
 80039e0:	af04      	add	r7, sp, #16
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039ec:	f3ef 8305 	mrs	r3, IPSR
 80039f0:	617b      	str	r3, [r7, #20]
  return(result);
 80039f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d17e      	bne.n	8003af6 <osThreadNew+0x11a>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d07b      	beq.n	8003af6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80039fe:	2380      	movs	r3, #128	@ 0x80
 8003a00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a02:	2318      	movs	r3, #24
 8003a04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d045      	beq.n	8003aa2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <osThreadNew+0x48>
        name = attr->name;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <osThreadNew+0x6e>
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b38      	cmp	r3, #56	@ 0x38
 8003a3c:	d805      	bhi.n	8003a4a <osThreadNew+0x6e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <osThreadNew+0x72>
        return (NULL);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e054      	b.n	8003af8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	089b      	lsrs	r3, r3, #2
 8003a5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00e      	beq.n	8003a84 <osThreadNew+0xa8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2ba7      	cmp	r3, #167	@ 0xa7
 8003a6c:	d90a      	bls.n	8003a84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <osThreadNew+0xa8>
        mem = 1;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	e010      	b.n	8003aa6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10c      	bne.n	8003aa6 <osThreadNew+0xca>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d108      	bne.n	8003aa6 <osThreadNew+0xca>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <osThreadNew+0xca>
          mem = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e001      	b.n	8003aa6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d110      	bne.n	8003ace <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ab4:	9202      	str	r2, [sp, #8]
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	6a3a      	ldr	r2, [r7, #32]
 8003ac0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 fe12 	bl	80046ec <xTaskCreateStatic>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	e013      	b.n	8003af6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d110      	bne.n	8003af6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	f107 0310 	add.w	r3, r7, #16
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 fe60 	bl	80047ac <xTaskCreate>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d001      	beq.n	8003af6 <osThreadNew+0x11a>
            hTask = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003af6:	693b      	ldr	r3, [r7, #16]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3728      	adds	r7, #40	@ 0x28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b08:	f3ef 8305 	mrs	r3, IPSR
 8003b0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <osDelay+0x1c>
    stat = osErrorISR;
 8003b14:	f06f 0305 	mvn.w	r3, #5
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	e007      	b.n	8003b2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 ff9e 	bl	8004a68 <vTaskDelay>
    }
  }

  return (stat);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a06      	ldr	r2, [pc, #24]	@ (8003b60 <vApplicationGetIdleTaskMemory+0x28>)
 8003b48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4a05      	ldr	r2, [pc, #20]	@ (8003b64 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2280      	movs	r2, #128	@ 0x80
 8003b54:	601a      	str	r2, [r3, #0]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	20000598 	.word	0x20000598
 8003b64:	20000640 	.word	0x20000640

08003b68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a07      	ldr	r2, [pc, #28]	@ (8003b94 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4a06      	ldr	r2, [pc, #24]	@ (8003b98 <vApplicationGetTimerTaskMemory+0x30>)
 8003b7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b86:	601a      	str	r2, [r3, #0]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000840 	.word	0x20000840
 8003b98:	200008e8 	.word	0x200008e8

08003b9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f103 0208 	add.w	r2, r3, #8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f103 0208 	add.w	r2, r3, #8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f103 0208 	add.w	r2, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr

08003bf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	601a      	str	r2, [r3, #0]
}
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4e:	d103      	bne.n	8003c58 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	e00c      	b.n	8003c72 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3308      	adds	r3, #8
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e002      	b.n	8003c66 <vListInsert+0x2e>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d2f6      	bcs.n	8003c60 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	601a      	str	r2, [r3, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6892      	ldr	r2, [r2, #8]
 8003cbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6852      	ldr	r2, [r2, #4]
 8003cc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d103      	bne.n	8003cdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	1e5a      	subs	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr
	...

08003cfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10b      	bne.n	8003d28 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d22:	bf00      	nop
 8003d24:	bf00      	nop
 8003d26:	e7fd      	b.n	8003d24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d28:	f002 f860 	bl	8005dec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d34:	68f9      	ldr	r1, [r7, #12]
 8003d36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	441a      	add	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	68f9      	ldr	r1, [r7, #12]
 8003d5c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	441a      	add	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	22ff      	movs	r2, #255	@ 0xff
 8003d6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	22ff      	movs	r2, #255	@ 0xff
 8003d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d114      	bne.n	8003da8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d01a      	beq.n	8003dbc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3310      	adds	r3, #16
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 f93c 	bl	8005008 <xTaskRemoveFromEventList>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d012      	beq.n	8003dbc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d96:	4b0d      	ldr	r3, [pc, #52]	@ (8003dcc <xQueueGenericReset+0xd0>)
 8003d98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	e009      	b.n	8003dbc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3310      	adds	r3, #16
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fef5 	bl	8003b9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3324      	adds	r3, #36	@ 0x24
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fef0 	bl	8003b9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003dbc:	f002 f846 	bl	8005e4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003dc0:	2301      	movs	r3, #1
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	e000ed04 	.word	0xe000ed04

08003dd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08e      	sub	sp, #56	@ 0x38
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003df6:	bf00      	nop
 8003df8:	bf00      	nop
 8003dfa:	e7fd      	b.n	8003df8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop
 8003e18:	e7fd      	b.n	8003e16 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <xQueueGenericCreateStatic+0x56>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <xQueueGenericCreateStatic+0x5a>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <xQueueGenericCreateStatic+0x5c>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10b      	bne.n	8003e48 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	623b      	str	r3, [r7, #32]
}
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
 8003e46:	e7fd      	b.n	8003e44 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <xQueueGenericCreateStatic+0x84>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <xQueueGenericCreateStatic+0x88>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <xQueueGenericCreateStatic+0x8a>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	61fb      	str	r3, [r7, #28]
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	e7fd      	b.n	8003e72 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e76:	2350      	movs	r3, #80	@ 0x50
 8003e78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b50      	cmp	r3, #80	@ 0x50
 8003e7e:	d00b      	beq.n	8003e98 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	61bb      	str	r3, [r7, #24]
}
 8003e92:	bf00      	nop
 8003e94:	bf00      	nop
 8003e96:	e7fd      	b.n	8003e94 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003eac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f805 	bl	8003eca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3730      	adds	r7, #48	@ 0x30
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
 8003ed6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e002      	b.n	8003eec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ef8:	2101      	movs	r1, #1
 8003efa:	69b8      	ldr	r0, [r7, #24]
 8003efc:	f7ff fefe 	bl	8003cfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08e      	sub	sp, #56	@ 0x38
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10b      	bne.n	8003f44 <xQueueGenericSend+0x34>
	__asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f3e:	bf00      	nop
 8003f40:	bf00      	nop
 8003f42:	e7fd      	b.n	8003f40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d103      	bne.n	8003f52 <xQueueGenericSend+0x42>
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <xQueueGenericSend+0x46>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <xQueueGenericSend+0x48>
 8003f56:	2300      	movs	r3, #0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10b      	bne.n	8003f74 <xQueueGenericSend+0x64>
	__asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f6e:	bf00      	nop
 8003f70:	bf00      	nop
 8003f72:	e7fd      	b.n	8003f70 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d103      	bne.n	8003f82 <xQueueGenericSend+0x72>
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <xQueueGenericSend+0x76>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <xQueueGenericSend+0x78>
 8003f86:	2300      	movs	r3, #0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <xQueueGenericSend+0x94>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	623b      	str	r3, [r7, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	e7fd      	b.n	8003fa0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fa4:	f001 f9f6 	bl	8005394 <xTaskGetSchedulerState>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d102      	bne.n	8003fb4 <xQueueGenericSend+0xa4>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <xQueueGenericSend+0xa8>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <xQueueGenericSend+0xaa>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <xQueueGenericSend+0xc6>
	__asm volatile
 8003fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	61fb      	str	r3, [r7, #28]
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	e7fd      	b.n	8003fd2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fd6:	f001 ff09 	bl	8005dec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <xQueueGenericSend+0xdc>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d129      	bne.n	8004040 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ff2:	f000 fa0f 	bl	8004414 <prvCopyDataToQueue>
 8003ff6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d010      	beq.n	8004022 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	3324      	adds	r3, #36	@ 0x24
 8004004:	4618      	mov	r0, r3
 8004006:	f000 ffff 	bl	8005008 <xTaskRemoveFromEventList>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d013      	beq.n	8004038 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004010:	4b3f      	ldr	r3, [pc, #252]	@ (8004110 <xQueueGenericSend+0x200>)
 8004012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	e00a      	b.n	8004038 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004028:	4b39      	ldr	r3, [pc, #228]	@ (8004110 <xQueueGenericSend+0x200>)
 800402a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004038:	f001 ff08 	bl	8005e4c <vPortExitCritical>
				return pdPASS;
 800403c:	2301      	movs	r3, #1
 800403e:	e063      	b.n	8004108 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d103      	bne.n	800404e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004046:	f001 ff01 	bl	8005e4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800404a:	2300      	movs	r3, #0
 800404c:	e05c      	b.n	8004108 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800404e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004050:	2b00      	cmp	r3, #0
 8004052:	d106      	bne.n	8004062 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004054:	f107 0314 	add.w	r3, r7, #20
 8004058:	4618      	mov	r0, r3
 800405a:	f001 f839 	bl	80050d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800405e:	2301      	movs	r3, #1
 8004060:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004062:	f001 fef3 	bl	8005e4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004066:	f000 fda5 	bl	8004bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800406a:	f001 febf 	bl	8005dec <vPortEnterCritical>
 800406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004070:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004074:	b25b      	sxtb	r3, r3
 8004076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407a:	d103      	bne.n	8004084 <xQueueGenericSend+0x174>
 800407c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004086:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800408a:	b25b      	sxtb	r3, r3
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d103      	bne.n	800409a <xQueueGenericSend+0x18a>
 8004092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800409a:	f001 fed7 	bl	8005e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800409e:	1d3a      	adds	r2, r7, #4
 80040a0:	f107 0314 	add.w	r3, r7, #20
 80040a4:	4611      	mov	r1, r2
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 f828 	bl	80050fc <xTaskCheckForTimeOut>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d124      	bne.n	80040fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040b4:	f000 faa6 	bl	8004604 <prvIsQueueFull>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d018      	beq.n	80040f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c0:	3310      	adds	r3, #16
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4611      	mov	r1, r2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 ff4c 	bl	8004f64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040ce:	f000 fa31 	bl	8004534 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040d2:	f000 fd7d 	bl	8004bd0 <xTaskResumeAll>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f47f af7c 	bne.w	8003fd6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80040de:	4b0c      	ldr	r3, [pc, #48]	@ (8004110 <xQueueGenericSend+0x200>)
 80040e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	e772      	b.n	8003fd6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040f2:	f000 fa1f 	bl	8004534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040f6:	f000 fd6b 	bl	8004bd0 <xTaskResumeAll>
 80040fa:	e76c      	b.n	8003fd6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040fe:	f000 fa19 	bl	8004534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004102:	f000 fd65 	bl	8004bd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004106:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004108:	4618      	mov	r0, r3
 800410a:	3738      	adds	r7, #56	@ 0x38
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	e000ed04 	.word	0xe000ed04

08004114 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b090      	sub	sp, #64	@ 0x40
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	e7fd      	b.n	8004140 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d103      	bne.n	8004152 <xQueueGenericSendFromISR+0x3e>
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <xQueueGenericSendFromISR+0x42>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <xQueueGenericSendFromISR+0x44>
 8004156:	2300      	movs	r3, #0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10b      	bne.n	8004174 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	e7fd      	b.n	8004170 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d103      	bne.n	8004182 <xQueueGenericSendFromISR+0x6e>
 800417a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <xQueueGenericSendFromISR+0x72>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <xQueueGenericSendFromISR+0x74>
 8004186:	2300      	movs	r3, #0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	623b      	str	r3, [r7, #32]
}
 800419e:	bf00      	nop
 80041a0:	bf00      	nop
 80041a2:	e7fd      	b.n	80041a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041a4:	f001 fee4 	bl	8005f70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041a8:	f3ef 8211 	mrs	r2, BASEPRI
 80041ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	61fa      	str	r2, [r7, #28]
 80041be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d302      	bcc.n	80041d6 <xQueueGenericSendFromISR+0xc2>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d12f      	bne.n	8004236 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80041ec:	f000 f912 	bl	8004414 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d112      	bne.n	8004220 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d016      	beq.n	8004230 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004204:	3324      	adds	r3, #36	@ 0x24
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fefe 	bl	8005008 <xTaskRemoveFromEventList>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00e      	beq.n	8004230 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00b      	beq.n	8004230 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e007      	b.n	8004230 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004220:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004224:	3301      	adds	r3, #1
 8004226:	b2db      	uxtb	r3, r3
 8004228:	b25a      	sxtb	r2, r3
 800422a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004230:	2301      	movs	r3, #1
 8004232:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004234:	e001      	b.n	800423a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004236:	2300      	movs	r3, #0
 8004238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800423a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004244:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004248:	4618      	mov	r0, r3
 800424a:	3740      	adds	r7, #64	@ 0x40
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08c      	sub	sp, #48	@ 0x30
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800425c:	2300      	movs	r3, #0
 800425e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10b      	bne.n	8004282 <xQueueReceive+0x32>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	623b      	str	r3, [r7, #32]
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	e7fd      	b.n	800427e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d103      	bne.n	8004290 <xQueueReceive+0x40>
 8004288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <xQueueReceive+0x44>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <xQueueReceive+0x46>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10b      	bne.n	80042b2 <xQueueReceive+0x62>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	61fb      	str	r3, [r7, #28]
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	e7fd      	b.n	80042ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042b2:	f001 f86f 	bl	8005394 <xTaskGetSchedulerState>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <xQueueReceive+0x72>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <xQueueReceive+0x76>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <xQueueReceive+0x78>
 80042c6:	2300      	movs	r3, #0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10b      	bne.n	80042e4 <xQueueReceive+0x94>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	61bb      	str	r3, [r7, #24]
}
 80042de:	bf00      	nop
 80042e0:	bf00      	nop
 80042e2:	e7fd      	b.n	80042e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042e4:	f001 fd82 	bl	8005dec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01f      	beq.n	8004334 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042f8:	f000 f8f6 	bl	80044e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	1e5a      	subs	r2, r3, #1
 8004300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004302:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00f      	beq.n	800432c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800430c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430e:	3310      	adds	r3, #16
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fe79 	bl	8005008 <xTaskRemoveFromEventList>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800431c:	4b3c      	ldr	r3, [pc, #240]	@ (8004410 <xQueueReceive+0x1c0>)
 800431e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800432c:	f001 fd8e 	bl	8005e4c <vPortExitCritical>
				return pdPASS;
 8004330:	2301      	movs	r3, #1
 8004332:	e069      	b.n	8004408 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d103      	bne.n	8004342 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800433a:	f001 fd87 	bl	8005e4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800433e:	2300      	movs	r3, #0
 8004340:	e062      	b.n	8004408 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004348:	f107 0310 	add.w	r3, r7, #16
 800434c:	4618      	mov	r0, r3
 800434e:	f000 febf 	bl	80050d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004352:	2301      	movs	r3, #1
 8004354:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004356:	f001 fd79 	bl	8005e4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800435a:	f000 fc2b 	bl	8004bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800435e:	f001 fd45 	bl	8005dec <vPortEnterCritical>
 8004362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004364:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004368:	b25b      	sxtb	r3, r3
 800436a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436e:	d103      	bne.n	8004378 <xQueueReceive+0x128>
 8004370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800437e:	b25b      	sxtb	r3, r3
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004384:	d103      	bne.n	800438e <xQueueReceive+0x13e>
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800438e:	f001 fd5d 	bl	8005e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004392:	1d3a      	adds	r2, r7, #4
 8004394:	f107 0310 	add.w	r3, r7, #16
 8004398:	4611      	mov	r1, r2
 800439a:	4618      	mov	r0, r3
 800439c:	f000 feae 	bl	80050fc <xTaskCheckForTimeOut>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d123      	bne.n	80043ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043a8:	f000 f916 	bl	80045d8 <prvIsQueueEmpty>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d017      	beq.n	80043e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b4:	3324      	adds	r3, #36	@ 0x24
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4611      	mov	r1, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fdd2 	bl	8004f64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043c2:	f000 f8b7 	bl	8004534 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043c6:	f000 fc03 	bl	8004bd0 <xTaskResumeAll>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d189      	bne.n	80042e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80043d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004410 <xQueueReceive+0x1c0>)
 80043d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	e780      	b.n	80042e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043e4:	f000 f8a6 	bl	8004534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043e8:	f000 fbf2 	bl	8004bd0 <xTaskResumeAll>
 80043ec:	e77a      	b.n	80042e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043f0:	f000 f8a0 	bl	8004534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043f4:	f000 fbec 	bl	8004bd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043fa:	f000 f8ed 	bl	80045d8 <prvIsQueueEmpty>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	f43f af6f 	beq.w	80042e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004406:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004408:	4618      	mov	r0, r3
 800440a:	3730      	adds	r7, #48	@ 0x30
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	e000ed04 	.word	0xe000ed04

08004414 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004428:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10d      	bne.n	800444e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d14d      	bne.n	80044d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	4618      	mov	r0, r3
 8004440:	f000 ffc6 	bl	80053d0 <xTaskPriorityDisinherit>
 8004444:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	e043      	b.n	80044d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d119      	bne.n	8004488 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6858      	ldr	r0, [r3, #4]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445c:	461a      	mov	r2, r3
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	f002 f836 	bl	80064d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446c:	441a      	add	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	d32b      	bcc.n	80044d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	e026      	b.n	80044d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68d8      	ldr	r0, [r3, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004490:	461a      	mov	r2, r3
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	f002 f81c 	bl	80064d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	425b      	negs	r3, r3
 80044a2:	441a      	add	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d207      	bcs.n	80044c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	425b      	negs	r3, r3
 80044be:	441a      	add	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d105      	bne.n	80044d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80044de:	697b      	ldr	r3, [r7, #20]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d018      	beq.n	800452c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	441a      	add	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	429a      	cmp	r2, r3
 8004512:	d303      	bcc.n	800451c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68d9      	ldr	r1, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004524:	461a      	mov	r2, r3
 8004526:	6838      	ldr	r0, [r7, #0]
 8004528:	f001 ffd2 	bl	80064d0 <memcpy>
	}
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800453c:	f001 fc56 	bl	8005dec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004546:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004548:	e011      	b.n	800456e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	2b00      	cmp	r3, #0
 8004550:	d012      	beq.n	8004578 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3324      	adds	r3, #36	@ 0x24
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fd56 	bl	8005008 <xTaskRemoveFromEventList>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004562:	f000 fe2f 	bl	80051c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	3b01      	subs	r3, #1
 800456a:	b2db      	uxtb	r3, r3
 800456c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800456e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004572:	2b00      	cmp	r3, #0
 8004574:	dce9      	bgt.n	800454a <prvUnlockQueue+0x16>
 8004576:	e000      	b.n	800457a <prvUnlockQueue+0x46>
					break;
 8004578:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	22ff      	movs	r2, #255	@ 0xff
 800457e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004582:	f001 fc63 	bl	8005e4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004586:	f001 fc31 	bl	8005dec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004590:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004592:	e011      	b.n	80045b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d012      	beq.n	80045c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3310      	adds	r3, #16
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fd31 	bl	8005008 <xTaskRemoveFromEventList>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045ac:	f000 fe0a 	bl	80051c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045b0:	7bbb      	ldrb	r3, [r7, #14]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	dce9      	bgt.n	8004594 <prvUnlockQueue+0x60>
 80045c0:	e000      	b.n	80045c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	22ff      	movs	r2, #255	@ 0xff
 80045c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80045cc:	f001 fc3e 	bl	8005e4c <vPortExitCritical>
}
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045e0:	f001 fc04 	bl	8005dec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045ec:	2301      	movs	r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e001      	b.n	80045f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045f6:	f001 fc29 	bl	8005e4c <vPortExitCritical>

	return xReturn;
 80045fa:	68fb      	ldr	r3, [r7, #12]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800460c:	f001 fbee 	bl	8005dec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004618:	429a      	cmp	r2, r3
 800461a:	d102      	bne.n	8004622 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800461c:	2301      	movs	r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e001      	b.n	8004626 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004626:	f001 fc11 	bl	8005e4c <vPortExitCritical>

	return xReturn;
 800462a:	68fb      	ldr	r3, [r7, #12]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	e014      	b.n	800466e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004644:	4a0e      	ldr	r2, [pc, #56]	@ (8004680 <vQueueAddToRegistry+0x4c>)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004650:	490b      	ldr	r1, [pc, #44]	@ (8004680 <vQueueAddToRegistry+0x4c>)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800465a:	4a09      	ldr	r2, [pc, #36]	@ (8004680 <vQueueAddToRegistry+0x4c>)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4413      	add	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004666:	e006      	b.n	8004676 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3301      	adds	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b07      	cmp	r3, #7
 8004672:	d9e7      	bls.n	8004644 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr
 8004680:	20000ce8 	.word	0x20000ce8

08004684 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004694:	f001 fbaa 	bl	8005dec <vPortEnterCritical>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800469e:	b25b      	sxtb	r3, r3
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d103      	bne.n	80046ae <vQueueWaitForMessageRestricted+0x2a>
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046b4:	b25b      	sxtb	r3, r3
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ba:	d103      	bne.n	80046c4 <vQueueWaitForMessageRestricted+0x40>
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046c4:	f001 fbc2 	bl	8005e4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	3324      	adds	r3, #36	@ 0x24
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fc69 	bl	8004fb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f7ff ff28 	bl	8004534 <prvUnlockQueue>
	}
 80046e4:	bf00      	nop
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08e      	sub	sp, #56	@ 0x38
 80046f0:	af04      	add	r7, sp, #16
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10b      	bne.n	8004718 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	623b      	str	r3, [r7, #32]
}
 8004712:	bf00      	nop
 8004714:	bf00      	nop
 8004716:	e7fd      	b.n	8004714 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <xTaskCreateStatic+0x4a>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	61fb      	str	r3, [r7, #28]
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	e7fd      	b.n	8004732 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004736:	23a8      	movs	r3, #168	@ 0xa8
 8004738:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2ba8      	cmp	r3, #168	@ 0xa8
 800473e:	d00b      	beq.n	8004758 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	61bb      	str	r3, [r7, #24]
}
 8004752:	bf00      	nop
 8004754:	bf00      	nop
 8004756:	e7fd      	b.n	8004754 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004758:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800475a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01e      	beq.n	800479e <xTaskCreateStatic+0xb2>
 8004760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004762:	2b00      	cmp	r3, #0
 8004764:	d01b      	beq.n	800479e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004768:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800476e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	2202      	movs	r2, #2
 8004774:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004778:	2300      	movs	r3, #0
 800477a:	9303      	str	r3, [sp, #12]
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	9302      	str	r3, [sp, #8]
 8004780:	f107 0314 	add.w	r3, r7, #20
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f851 	bl	8004838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004796:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004798:	f000 f8f6 	bl	8004988 <prvAddNewTaskToReadyList>
 800479c:	e001      	b.n	80047a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047a2:	697b      	ldr	r3, [r7, #20]
	}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3728      	adds	r7, #40	@ 0x28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08c      	sub	sp, #48	@ 0x30
 80047b0:	af04      	add	r7, sp, #16
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	4613      	mov	r3, r2
 80047ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047bc:	88fb      	ldrh	r3, [r7, #6]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f001 fc15 	bl	8005ff0 <pvPortMalloc>
 80047c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00e      	beq.n	80047ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047ce:	20a8      	movs	r0, #168	@ 0xa8
 80047d0:	f001 fc0e 	bl	8005ff0 <pvPortMalloc>
 80047d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80047e2:	e005      	b.n	80047f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047e4:	6978      	ldr	r0, [r7, #20]
 80047e6:	f001 fcd1 	bl	800618c <vPortFree>
 80047ea:	e001      	b.n	80047f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d017      	beq.n	8004826 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047fe:	88fa      	ldrh	r2, [r7, #6]
 8004800:	2300      	movs	r3, #0
 8004802:	9303      	str	r3, [sp, #12]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	9302      	str	r3, [sp, #8]
 8004808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f80f 	bl	8004838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800481a:	69f8      	ldr	r0, [r7, #28]
 800481c:	f000 f8b4 	bl	8004988 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004820:	2301      	movs	r3, #1
 8004822:	61bb      	str	r3, [r7, #24]
 8004824:	e002      	b.n	800482c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004826:	f04f 33ff 	mov.w	r3, #4294967295
 800482a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800482c:	69bb      	ldr	r3, [r7, #24]
	}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004848:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	461a      	mov	r2, r3
 8004850:	21a5      	movs	r1, #165	@ 0xa5
 8004852:	f001 fdb9 	bl	80063c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004860:	3b01      	subs	r3, #1
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f023 0307 	bic.w	r3, r3, #7
 800486e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	617b      	str	r3, [r7, #20]
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	e7fd      	b.n	800488e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01f      	beq.n	80048d8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	e012      	b.n	80048c4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	4413      	add	r3, r2
 80048a4:	7819      	ldrb	r1, [r3, #0]
 80048a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4413      	add	r3, r2
 80048ac:	3334      	adds	r3, #52	@ 0x34
 80048ae:	460a      	mov	r2, r1
 80048b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	4413      	add	r3, r2
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d006      	beq.n	80048cc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	3301      	adds	r3, #1
 80048c2:	61fb      	str	r3, [r7, #28]
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2b0f      	cmp	r3, #15
 80048c8:	d9e9      	bls.n	800489e <prvInitialiseNewTask+0x66>
 80048ca:	e000      	b.n	80048ce <prvInitialiseNewTask+0x96>
			{
				break;
 80048cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048d6:	e003      	b.n	80048e0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e2:	2b37      	cmp	r3, #55	@ 0x37
 80048e4:	d901      	bls.n	80048ea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048e6:	2337      	movs	r3, #55	@ 0x37
 80048e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048f4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	2200      	movs	r2, #0
 80048fa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	3304      	adds	r3, #4
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff f96a 	bl	8003bda <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004908:	3318      	adds	r3, #24
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff f965 	bl	8003bda <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004914:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004918:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004924:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004928:	2200      	movs	r2, #0
 800492a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800492e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004930:	2200      	movs	r2, #0
 8004932:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	3354      	adds	r3, #84	@ 0x54
 800493a:	224c      	movs	r2, #76	@ 0x4c
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f001 fd42 	bl	80063c8 <memset>
 8004944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004946:	4a0d      	ldr	r2, [pc, #52]	@ (800497c <prvInitialiseNewTask+0x144>)
 8004948:	659a      	str	r2, [r3, #88]	@ 0x58
 800494a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494c:	4a0c      	ldr	r2, [pc, #48]	@ (8004980 <prvInitialiseNewTask+0x148>)
 800494e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004952:	4a0c      	ldr	r2, [pc, #48]	@ (8004984 <prvInitialiseNewTask+0x14c>)
 8004954:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68f9      	ldr	r1, [r7, #12]
 800495a:	69b8      	ldr	r0, [r7, #24]
 800495c:	f001 f954 	bl	8005c08 <pxPortInitialiseStack>
 8004960:	4602      	mov	r2, r0
 8004962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004964:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800496c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004970:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004972:	bf00      	nop
 8004974:	3720      	adds	r7, #32
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20001f7c 	.word	0x20001f7c
 8004980:	20001fe4 	.word	0x20001fe4
 8004984:	2000204c 	.word	0x2000204c

08004988 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004990:	f001 fa2c 	bl	8005dec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004994:	4b2d      	ldr	r3, [pc, #180]	@ (8004a4c <prvAddNewTaskToReadyList+0xc4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3301      	adds	r3, #1
 800499a:	4a2c      	ldr	r2, [pc, #176]	@ (8004a4c <prvAddNewTaskToReadyList+0xc4>)
 800499c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800499e:	4b2c      	ldr	r3, [pc, #176]	@ (8004a50 <prvAddNewTaskToReadyList+0xc8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004a50 <prvAddNewTaskToReadyList+0xc8>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049ac:	4b27      	ldr	r3, [pc, #156]	@ (8004a4c <prvAddNewTaskToReadyList+0xc4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d110      	bne.n	80049d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049b4:	f000 fc2a 	bl	800520c <prvInitialiseTaskLists>
 80049b8:	e00d      	b.n	80049d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049ba:	4b26      	ldr	r3, [pc, #152]	@ (8004a54 <prvAddNewTaskToReadyList+0xcc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049c2:	4b23      	ldr	r3, [pc, #140]	@ (8004a50 <prvAddNewTaskToReadyList+0xc8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d802      	bhi.n	80049d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004a50 <prvAddNewTaskToReadyList+0xc8>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049d6:	4b20      	ldr	r3, [pc, #128]	@ (8004a58 <prvAddNewTaskToReadyList+0xd0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3301      	adds	r3, #1
 80049dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004a58 <prvAddNewTaskToReadyList+0xd0>)
 80049de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a58 <prvAddNewTaskToReadyList+0xd0>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ec:	4b1b      	ldr	r3, [pc, #108]	@ (8004a5c <prvAddNewTaskToReadyList+0xd4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d903      	bls.n	80049fc <prvAddNewTaskToReadyList+0x74>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	4a18      	ldr	r2, [pc, #96]	@ (8004a5c <prvAddNewTaskToReadyList+0xd4>)
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4a15      	ldr	r2, [pc, #84]	@ (8004a60 <prvAddNewTaskToReadyList+0xd8>)
 8004a0a:	441a      	add	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f7ff f8ed 	bl	8003bf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a18:	f001 fa18 	bl	8005e4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <prvAddNewTaskToReadyList+0xcc>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00e      	beq.n	8004a42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a24:	4b0a      	ldr	r3, [pc, #40]	@ (8004a50 <prvAddNewTaskToReadyList+0xc8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d207      	bcs.n	8004a42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a32:	4b0c      	ldr	r3, [pc, #48]	@ (8004a64 <prvAddNewTaskToReadyList+0xdc>)
 8004a34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	200011fc 	.word	0x200011fc
 8004a50:	20000d28 	.word	0x20000d28
 8004a54:	20001208 	.word	0x20001208
 8004a58:	20001218 	.word	0x20001218
 8004a5c:	20001204 	.word	0x20001204
 8004a60:	20000d2c 	.word	0x20000d2c
 8004a64:	e000ed04 	.word	0xe000ed04

08004a68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d018      	beq.n	8004aac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a7a:	4b14      	ldr	r3, [pc, #80]	@ (8004acc <vTaskDelay+0x64>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00b      	beq.n	8004a9a <vTaskDelay+0x32>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60bb      	str	r3, [r7, #8]
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	e7fd      	b.n	8004a96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a9a:	f000 f88b 	bl	8004bb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fd05 	bl	80054b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004aa6:	f000 f893 	bl	8004bd0 <xTaskResumeAll>
 8004aaa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d107      	bne.n	8004ac2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ab2:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <vTaskDelay+0x68>)
 8004ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20001224 	.word	0x20001224
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	@ 0x28
 8004ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ae2:	463a      	mov	r2, r7
 8004ae4:	1d39      	adds	r1, r7, #4
 8004ae6:	f107 0308 	add.w	r3, r7, #8
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff f824 	bl	8003b38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004af0:	6839      	ldr	r1, [r7, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	9202      	str	r2, [sp, #8]
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	2300      	movs	r3, #0
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	2300      	movs	r3, #0
 8004b00:	460a      	mov	r2, r1
 8004b02:	4924      	ldr	r1, [pc, #144]	@ (8004b94 <vTaskStartScheduler+0xc0>)
 8004b04:	4824      	ldr	r0, [pc, #144]	@ (8004b98 <vTaskStartScheduler+0xc4>)
 8004b06:	f7ff fdf1 	bl	80046ec <xTaskCreateStatic>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4a23      	ldr	r2, [pc, #140]	@ (8004b9c <vTaskStartScheduler+0xc8>)
 8004b0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b10:	4b22      	ldr	r3, [pc, #136]	@ (8004b9c <vTaskStartScheduler+0xc8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	e001      	b.n	8004b22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d102      	bne.n	8004b2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b28:	f000 fd16 	bl	8005558 <xTimerCreateTimerTask>
 8004b2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d11b      	bne.n	8004b6c <vTaskStartScheduler+0x98>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	613b      	str	r3, [r7, #16]
}
 8004b46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b48:	4b15      	ldr	r3, [pc, #84]	@ (8004ba0 <vTaskStartScheduler+0xcc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3354      	adds	r3, #84	@ 0x54
 8004b4e:	4a15      	ldr	r2, [pc, #84]	@ (8004ba4 <vTaskStartScheduler+0xd0>)
 8004b50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b52:	4b15      	ldr	r3, [pc, #84]	@ (8004ba8 <vTaskStartScheduler+0xd4>)
 8004b54:	f04f 32ff 	mov.w	r2, #4294967295
 8004b58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b5a:	4b14      	ldr	r3, [pc, #80]	@ (8004bac <vTaskStartScheduler+0xd8>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b60:	4b13      	ldr	r3, [pc, #76]	@ (8004bb0 <vTaskStartScheduler+0xdc>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b66:	f001 f8cf 	bl	8005d08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b6a:	e00f      	b.n	8004b8c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b72:	d10b      	bne.n	8004b8c <vTaskStartScheduler+0xb8>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	60fb      	str	r3, [r7, #12]
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	e7fd      	b.n	8004b88 <vTaskStartScheduler+0xb4>
}
 8004b8c:	bf00      	nop
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	080065cc 	.word	0x080065cc
 8004b98:	080051dd 	.word	0x080051dd
 8004b9c:	20001220 	.word	0x20001220
 8004ba0:	20000d28 	.word	0x20000d28
 8004ba4:	20000010 	.word	0x20000010
 8004ba8:	2000121c 	.word	0x2000121c
 8004bac:	20001208 	.word	0x20001208
 8004bb0:	20001200 	.word	0x20001200

08004bb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004bb8:	4b04      	ldr	r3, [pc, #16]	@ (8004bcc <vTaskSuspendAll+0x18>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	4a03      	ldr	r2, [pc, #12]	@ (8004bcc <vTaskSuspendAll+0x18>)
 8004bc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004bc2:	bf00      	nop
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20001224 	.word	0x20001224

08004bd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bde:	4b42      	ldr	r3, [pc, #264]	@ (8004ce8 <xTaskResumeAll+0x118>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10b      	bne.n	8004bfe <xTaskResumeAll+0x2e>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	603b      	str	r3, [r7, #0]
}
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
 8004bfc:	e7fd      	b.n	8004bfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004bfe:	f001 f8f5 	bl	8005dec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c02:	4b39      	ldr	r3, [pc, #228]	@ (8004ce8 <xTaskResumeAll+0x118>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	4a37      	ldr	r2, [pc, #220]	@ (8004ce8 <xTaskResumeAll+0x118>)
 8004c0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c0c:	4b36      	ldr	r3, [pc, #216]	@ (8004ce8 <xTaskResumeAll+0x118>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d162      	bne.n	8004cda <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c14:	4b35      	ldr	r3, [pc, #212]	@ (8004cec <xTaskResumeAll+0x11c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d05e      	beq.n	8004cda <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c1c:	e02f      	b.n	8004c7e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c1e:	4b34      	ldr	r3, [pc, #208]	@ (8004cf0 <xTaskResumeAll+0x120>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3318      	adds	r3, #24
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff f83c 	bl	8003ca8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff f837 	bl	8003ca8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8004cf4 <xTaskResumeAll+0x124>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d903      	bls.n	8004c4e <xTaskResumeAll+0x7e>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004cf4 <xTaskResumeAll+0x124>)
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4a27      	ldr	r2, [pc, #156]	@ (8004cf8 <xTaskResumeAll+0x128>)
 8004c5c:	441a      	add	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f7fe ffc4 	bl	8003bf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c6e:	4b23      	ldr	r3, [pc, #140]	@ (8004cfc <xTaskResumeAll+0x12c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d302      	bcc.n	8004c7e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004c78:	4b21      	ldr	r3, [pc, #132]	@ (8004d00 <xTaskResumeAll+0x130>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf0 <xTaskResumeAll+0x120>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1cb      	bne.n	8004c1e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c8c:	f000 fb62 	bl	8005354 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c90:	4b1c      	ldr	r3, [pc, #112]	@ (8004d04 <xTaskResumeAll+0x134>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d010      	beq.n	8004cbe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c9c:	f000 f844 	bl	8004d28 <xTaskIncrementTick>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004ca6:	4b16      	ldr	r3, [pc, #88]	@ (8004d00 <xTaskResumeAll+0x130>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f1      	bne.n	8004c9c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004cb8:	4b12      	ldr	r3, [pc, #72]	@ (8004d04 <xTaskResumeAll+0x134>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cbe:	4b10      	ldr	r3, [pc, #64]	@ (8004d00 <xTaskResumeAll+0x130>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cca:	4b0f      	ldr	r3, [pc, #60]	@ (8004d08 <xTaskResumeAll+0x138>)
 8004ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cda:	f001 f8b7 	bl	8005e4c <vPortExitCritical>

	return xAlreadyYielded;
 8004cde:	68bb      	ldr	r3, [r7, #8]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20001224 	.word	0x20001224
 8004cec:	200011fc 	.word	0x200011fc
 8004cf0:	200011bc 	.word	0x200011bc
 8004cf4:	20001204 	.word	0x20001204
 8004cf8:	20000d2c 	.word	0x20000d2c
 8004cfc:	20000d28 	.word	0x20000d28
 8004d00:	20001210 	.word	0x20001210
 8004d04:	2000120c 	.word	0x2000120c
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004d12:	4b04      	ldr	r3, [pc, #16]	@ (8004d24 <xTaskGetTickCount+0x18>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d18:	687b      	ldr	r3, [r7, #4]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr
 8004d24:	20001200 	.word	0x20001200

08004d28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d32:	4b4f      	ldr	r3, [pc, #316]	@ (8004e70 <xTaskIncrementTick+0x148>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f040 8090 	bne.w	8004e5c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8004e74 <xTaskIncrementTick+0x14c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3301      	adds	r3, #1
 8004d42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d44:	4a4b      	ldr	r2, [pc, #300]	@ (8004e74 <xTaskIncrementTick+0x14c>)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d121      	bne.n	8004d94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d50:	4b49      	ldr	r3, [pc, #292]	@ (8004e78 <xTaskIncrementTick+0x150>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	603b      	str	r3, [r7, #0]
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	e7fd      	b.n	8004d6e <xTaskIncrementTick+0x46>
 8004d72:	4b41      	ldr	r3, [pc, #260]	@ (8004e78 <xTaskIncrementTick+0x150>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	4b40      	ldr	r3, [pc, #256]	@ (8004e7c <xTaskIncrementTick+0x154>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a3e      	ldr	r2, [pc, #248]	@ (8004e78 <xTaskIncrementTick+0x150>)
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	4a3e      	ldr	r2, [pc, #248]	@ (8004e7c <xTaskIncrementTick+0x154>)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	4b3e      	ldr	r3, [pc, #248]	@ (8004e80 <xTaskIncrementTick+0x158>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	4a3c      	ldr	r2, [pc, #240]	@ (8004e80 <xTaskIncrementTick+0x158>)
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	f000 fae0 	bl	8005354 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d94:	4b3b      	ldr	r3, [pc, #236]	@ (8004e84 <xTaskIncrementTick+0x15c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d349      	bcc.n	8004e32 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d9e:	4b36      	ldr	r3, [pc, #216]	@ (8004e78 <xTaskIncrementTick+0x150>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d104      	bne.n	8004db2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da8:	4b36      	ldr	r3, [pc, #216]	@ (8004e84 <xTaskIncrementTick+0x15c>)
 8004daa:	f04f 32ff 	mov.w	r2, #4294967295
 8004dae:	601a      	str	r2, [r3, #0]
					break;
 8004db0:	e03f      	b.n	8004e32 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004db2:	4b31      	ldr	r3, [pc, #196]	@ (8004e78 <xTaskIncrementTick+0x150>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d203      	bcs.n	8004dd2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dca:	4a2e      	ldr	r2, [pc, #184]	@ (8004e84 <xTaskIncrementTick+0x15c>)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004dd0:	e02f      	b.n	8004e32 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe ff66 	bl	8003ca8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d004      	beq.n	8004dee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	3318      	adds	r3, #24
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fe ff5d 	bl	8003ca8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df2:	4b25      	ldr	r3, [pc, #148]	@ (8004e88 <xTaskIncrementTick+0x160>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d903      	bls.n	8004e02 <xTaskIncrementTick+0xda>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfe:	4a22      	ldr	r2, [pc, #136]	@ (8004e88 <xTaskIncrementTick+0x160>)
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8004e8c <xTaskIncrementTick+0x164>)
 8004e10:	441a      	add	r2, r3
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f7fe feea 	bl	8003bf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e22:	4b1b      	ldr	r3, [pc, #108]	@ (8004e90 <xTaskIncrementTick+0x168>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d3b8      	bcc.n	8004d9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e30:	e7b5      	b.n	8004d9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e32:	4b17      	ldr	r3, [pc, #92]	@ (8004e90 <xTaskIncrementTick+0x168>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e38:	4914      	ldr	r1, [pc, #80]	@ (8004e8c <xTaskIncrementTick+0x164>)
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d901      	bls.n	8004e4e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e4e:	4b11      	ldr	r3, [pc, #68]	@ (8004e94 <xTaskIncrementTick+0x16c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004e56:	2301      	movs	r3, #1
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e004      	b.n	8004e66 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e98 <xTaskIncrementTick+0x170>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3301      	adds	r3, #1
 8004e62:	4a0d      	ldr	r2, [pc, #52]	@ (8004e98 <xTaskIncrementTick+0x170>)
 8004e64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e66:	697b      	ldr	r3, [r7, #20]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20001224 	.word	0x20001224
 8004e74:	20001200 	.word	0x20001200
 8004e78:	200011b4 	.word	0x200011b4
 8004e7c:	200011b8 	.word	0x200011b8
 8004e80:	20001214 	.word	0x20001214
 8004e84:	2000121c 	.word	0x2000121c
 8004e88:	20001204 	.word	0x20001204
 8004e8c:	20000d2c 	.word	0x20000d2c
 8004e90:	20000d28 	.word	0x20000d28
 8004e94:	20001210 	.word	0x20001210
 8004e98:	2000120c 	.word	0x2000120c

08004e9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f4c <vTaskSwitchContext+0xb0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004eaa:	4b29      	ldr	r3, [pc, #164]	@ (8004f50 <vTaskSwitchContext+0xb4>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004eb0:	e047      	b.n	8004f42 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004eb2:	4b27      	ldr	r3, [pc, #156]	@ (8004f50 <vTaskSwitchContext+0xb4>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eb8:	4b26      	ldr	r3, [pc, #152]	@ (8004f54 <vTaskSwitchContext+0xb8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	e011      	b.n	8004ee4 <vTaskSwitchContext+0x48>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10b      	bne.n	8004ede <vTaskSwitchContext+0x42>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	607b      	str	r3, [r7, #4]
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	e7fd      	b.n	8004eda <vTaskSwitchContext+0x3e>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	491c      	ldr	r1, [pc, #112]	@ (8004f58 <vTaskSwitchContext+0xbc>)
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0e3      	beq.n	8004ec0 <vTaskSwitchContext+0x24>
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4613      	mov	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4a15      	ldr	r2, [pc, #84]	@ (8004f58 <vTaskSwitchContext+0xbc>)
 8004f04:	4413      	add	r3, r2
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	605a      	str	r2, [r3, #4]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	3308      	adds	r3, #8
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d104      	bne.n	8004f28 <vTaskSwitchContext+0x8c>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	605a      	str	r2, [r3, #4]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	4a0b      	ldr	r2, [pc, #44]	@ (8004f5c <vTaskSwitchContext+0xc0>)
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	4a08      	ldr	r2, [pc, #32]	@ (8004f54 <vTaskSwitchContext+0xb8>)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f38:	4b08      	ldr	r3, [pc, #32]	@ (8004f5c <vTaskSwitchContext+0xc0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3354      	adds	r3, #84	@ 0x54
 8004f3e:	4a08      	ldr	r2, [pc, #32]	@ (8004f60 <vTaskSwitchContext+0xc4>)
 8004f40:	6013      	str	r3, [r2, #0]
}
 8004f42:	bf00      	nop
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	20001224 	.word	0x20001224
 8004f50:	20001210 	.word	0x20001210
 8004f54:	20001204 	.word	0x20001204
 8004f58:	20000d2c 	.word	0x20000d2c
 8004f5c:	20000d28 	.word	0x20000d28
 8004f60:	20000010 	.word	0x20000010

08004f64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	60fb      	str	r3, [r7, #12]
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	e7fd      	b.n	8004f88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f8c:	4b07      	ldr	r3, [pc, #28]	@ (8004fac <vTaskPlaceOnEventList+0x48>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3318      	adds	r3, #24
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7fe fe4f 	bl	8003c38 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	6838      	ldr	r0, [r7, #0]
 8004f9e:	f000 fa87 	bl	80054b0 <prvAddCurrentTaskToDelayedList>
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000d28 	.word	0x20000d28

08004fb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10b      	bne.n	8004fda <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	617b      	str	r3, [r7, #20]
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	e7fd      	b.n	8004fd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fda:	4b0a      	ldr	r3, [pc, #40]	@ (8005004 <vTaskPlaceOnEventListRestricted+0x54>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3318      	adds	r3, #24
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f7fe fe05 	bl	8003bf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004fee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	68b8      	ldr	r0, [r7, #8]
 8004ff8:	f000 fa5a 	bl	80054b0 <prvAddCurrentTaskToDelayedList>
	}
 8004ffc:	bf00      	nop
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000d28 	.word	0x20000d28

08005008 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10b      	bne.n	8005036 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	60fb      	str	r3, [r7, #12]
}
 8005030:	bf00      	nop
 8005032:	bf00      	nop
 8005034:	e7fd      	b.n	8005032 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	3318      	adds	r3, #24
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe fe34 	bl	8003ca8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005040:	4b1d      	ldr	r3, [pc, #116]	@ (80050b8 <xTaskRemoveFromEventList+0xb0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d11d      	bne.n	8005084 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	3304      	adds	r3, #4
 800504c:	4618      	mov	r0, r3
 800504e:	f7fe fe2b 	bl	8003ca8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005056:	4b19      	ldr	r3, [pc, #100]	@ (80050bc <xTaskRemoveFromEventList+0xb4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d903      	bls.n	8005066 <xTaskRemoveFromEventList+0x5e>
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005062:	4a16      	ldr	r2, [pc, #88]	@ (80050bc <xTaskRemoveFromEventList+0xb4>)
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4a13      	ldr	r2, [pc, #76]	@ (80050c0 <xTaskRemoveFromEventList+0xb8>)
 8005074:	441a      	add	r2, r3
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	3304      	adds	r3, #4
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f7fe fdb8 	bl	8003bf2 <vListInsertEnd>
 8005082:	e005      	b.n	8005090 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	3318      	adds	r3, #24
 8005088:	4619      	mov	r1, r3
 800508a:	480e      	ldr	r0, [pc, #56]	@ (80050c4 <xTaskRemoveFromEventList+0xbc>)
 800508c:	f7fe fdb1 	bl	8003bf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005094:	4b0c      	ldr	r3, [pc, #48]	@ (80050c8 <xTaskRemoveFromEventList+0xc0>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	429a      	cmp	r2, r3
 800509c:	d905      	bls.n	80050aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800509e:	2301      	movs	r3, #1
 80050a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80050a2:	4b0a      	ldr	r3, [pc, #40]	@ (80050cc <xTaskRemoveFromEventList+0xc4>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e001      	b.n	80050ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80050ae:	697b      	ldr	r3, [r7, #20]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20001224 	.word	0x20001224
 80050bc:	20001204 	.word	0x20001204
 80050c0:	20000d2c 	.word	0x20000d2c
 80050c4:	200011bc 	.word	0x200011bc
 80050c8:	20000d28 	.word	0x20000d28
 80050cc:	20001210 	.word	0x20001210

080050d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050d8:	4b06      	ldr	r3, [pc, #24]	@ (80050f4 <vTaskInternalSetTimeOutState+0x24>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050e0:	4b05      	ldr	r3, [pc, #20]	@ (80050f8 <vTaskInternalSetTimeOutState+0x28>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	605a      	str	r2, [r3, #4]
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20001214 	.word	0x20001214
 80050f8:	20001200 	.word	0x20001200

080050fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10b      	bne.n	8005124 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	613b      	str	r3, [r7, #16]
}
 800511e:	bf00      	nop
 8005120:	bf00      	nop
 8005122:	e7fd      	b.n	8005120 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10b      	bne.n	8005142 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	60fb      	str	r3, [r7, #12]
}
 800513c:	bf00      	nop
 800513e:	bf00      	nop
 8005140:	e7fd      	b.n	800513e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005142:	f000 fe53 	bl	8005dec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005146:	4b1d      	ldr	r3, [pc, #116]	@ (80051bc <xTaskCheckForTimeOut+0xc0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515e:	d102      	bne.n	8005166 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005160:	2300      	movs	r3, #0
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	e023      	b.n	80051ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4b15      	ldr	r3, [pc, #84]	@ (80051c0 <xTaskCheckForTimeOut+0xc4>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d007      	beq.n	8005182 <xTaskCheckForTimeOut+0x86>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	429a      	cmp	r2, r3
 800517a:	d302      	bcc.n	8005182 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800517c:	2301      	movs	r3, #1
 800517e:	61fb      	str	r3, [r7, #28]
 8005180:	e015      	b.n	80051ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	429a      	cmp	r2, r3
 800518a:	d20b      	bcs.n	80051a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	1ad2      	subs	r2, r2, r3
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff ff99 	bl	80050d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800519e:	2300      	movs	r3, #0
 80051a0:	61fb      	str	r3, [r7, #28]
 80051a2:	e004      	b.n	80051ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051aa:	2301      	movs	r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80051ae:	f000 fe4d 	bl	8005e4c <vPortExitCritical>

	return xReturn;
 80051b2:	69fb      	ldr	r3, [r7, #28]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3720      	adds	r7, #32
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	20001200 	.word	0x20001200
 80051c0:	20001214 	.word	0x20001214

080051c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051c8:	4b03      	ldr	r3, [pc, #12]	@ (80051d8 <vTaskMissedYield+0x14>)
 80051ca:	2201      	movs	r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
}
 80051ce:	bf00      	nop
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20001210 	.word	0x20001210

080051dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051e4:	f000 f852 	bl	800528c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051e8:	4b06      	ldr	r3, [pc, #24]	@ (8005204 <prvIdleTask+0x28>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d9f9      	bls.n	80051e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051f0:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <prvIdleTask+0x2c>)
 80051f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005200:	e7f0      	b.n	80051e4 <prvIdleTask+0x8>
 8005202:	bf00      	nop
 8005204:	20000d2c 	.word	0x20000d2c
 8005208:	e000ed04 	.word	0xe000ed04

0800520c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
 8005216:	e00c      	b.n	8005232 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4a12      	ldr	r2, [pc, #72]	@ (800526c <prvInitialiseTaskLists+0x60>)
 8005224:	4413      	add	r3, r2
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe fcb8 	bl	8003b9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3301      	adds	r3, #1
 8005230:	607b      	str	r3, [r7, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b37      	cmp	r3, #55	@ 0x37
 8005236:	d9ef      	bls.n	8005218 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005238:	480d      	ldr	r0, [pc, #52]	@ (8005270 <prvInitialiseTaskLists+0x64>)
 800523a:	f7fe fcaf 	bl	8003b9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800523e:	480d      	ldr	r0, [pc, #52]	@ (8005274 <prvInitialiseTaskLists+0x68>)
 8005240:	f7fe fcac 	bl	8003b9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005244:	480c      	ldr	r0, [pc, #48]	@ (8005278 <prvInitialiseTaskLists+0x6c>)
 8005246:	f7fe fca9 	bl	8003b9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800524a:	480c      	ldr	r0, [pc, #48]	@ (800527c <prvInitialiseTaskLists+0x70>)
 800524c:	f7fe fca6 	bl	8003b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005250:	480b      	ldr	r0, [pc, #44]	@ (8005280 <prvInitialiseTaskLists+0x74>)
 8005252:	f7fe fca3 	bl	8003b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005256:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <prvInitialiseTaskLists+0x78>)
 8005258:	4a05      	ldr	r2, [pc, #20]	@ (8005270 <prvInitialiseTaskLists+0x64>)
 800525a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800525c:	4b0a      	ldr	r3, [pc, #40]	@ (8005288 <prvInitialiseTaskLists+0x7c>)
 800525e:	4a05      	ldr	r2, [pc, #20]	@ (8005274 <prvInitialiseTaskLists+0x68>)
 8005260:	601a      	str	r2, [r3, #0]
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000d2c 	.word	0x20000d2c
 8005270:	2000118c 	.word	0x2000118c
 8005274:	200011a0 	.word	0x200011a0
 8005278:	200011bc 	.word	0x200011bc
 800527c:	200011d0 	.word	0x200011d0
 8005280:	200011e8 	.word	0x200011e8
 8005284:	200011b4 	.word	0x200011b4
 8005288:	200011b8 	.word	0x200011b8

0800528c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005292:	e019      	b.n	80052c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005294:	f000 fdaa 	bl	8005dec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005298:	4b10      	ldr	r3, [pc, #64]	@ (80052dc <prvCheckTasksWaitingTermination+0x50>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3304      	adds	r3, #4
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fe fcff 	bl	8003ca8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052aa:	4b0d      	ldr	r3, [pc, #52]	@ (80052e0 <prvCheckTasksWaitingTermination+0x54>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	4a0b      	ldr	r2, [pc, #44]	@ (80052e0 <prvCheckTasksWaitingTermination+0x54>)
 80052b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052b4:	4b0b      	ldr	r3, [pc, #44]	@ (80052e4 <prvCheckTasksWaitingTermination+0x58>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	4a0a      	ldr	r2, [pc, #40]	@ (80052e4 <prvCheckTasksWaitingTermination+0x58>)
 80052bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052be:	f000 fdc5 	bl	8005e4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f810 	bl	80052e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052c8:	4b06      	ldr	r3, [pc, #24]	@ (80052e4 <prvCheckTasksWaitingTermination+0x58>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e1      	bne.n	8005294 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052d0:	bf00      	nop
 80052d2:	bf00      	nop
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	200011d0 	.word	0x200011d0
 80052e0:	200011fc 	.word	0x200011fc
 80052e4:	200011e4 	.word	0x200011e4

080052e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3354      	adds	r3, #84	@ 0x54
 80052f4:	4618      	mov	r0, r3
 80052f6:	f001 f86f 	bl	80063d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005300:	2b00      	cmp	r3, #0
 8005302:	d108      	bne.n	8005316 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005308:	4618      	mov	r0, r3
 800530a:	f000 ff3f 	bl	800618c <vPortFree>
				vPortFree( pxTCB );
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 ff3c 	bl	800618c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005314:	e019      	b.n	800534a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800531c:	2b01      	cmp	r3, #1
 800531e:	d103      	bne.n	8005328 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 ff33 	bl	800618c <vPortFree>
	}
 8005326:	e010      	b.n	800534a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800532e:	2b02      	cmp	r3, #2
 8005330:	d00b      	beq.n	800534a <prvDeleteTCB+0x62>
	__asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	60fb      	str	r3, [r7, #12]
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop
 8005348:	e7fd      	b.n	8005346 <prvDeleteTCB+0x5e>
	}
 800534a:	bf00      	nop
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800535a:	4b0c      	ldr	r3, [pc, #48]	@ (800538c <prvResetNextTaskUnblockTime+0x38>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d104      	bne.n	800536e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005364:	4b0a      	ldr	r3, [pc, #40]	@ (8005390 <prvResetNextTaskUnblockTime+0x3c>)
 8005366:	f04f 32ff 	mov.w	r2, #4294967295
 800536a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800536c:	e008      	b.n	8005380 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800536e:	4b07      	ldr	r3, [pc, #28]	@ (800538c <prvResetNextTaskUnblockTime+0x38>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4a04      	ldr	r2, [pc, #16]	@ (8005390 <prvResetNextTaskUnblockTime+0x3c>)
 800537e:	6013      	str	r3, [r2, #0]
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	200011b4 	.word	0x200011b4
 8005390:	2000121c 	.word	0x2000121c

08005394 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800539a:	4b0b      	ldr	r3, [pc, #44]	@ (80053c8 <xTaskGetSchedulerState+0x34>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d102      	bne.n	80053a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053a2:	2301      	movs	r3, #1
 80053a4:	607b      	str	r3, [r7, #4]
 80053a6:	e008      	b.n	80053ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a8:	4b08      	ldr	r3, [pc, #32]	@ (80053cc <xTaskGetSchedulerState+0x38>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d102      	bne.n	80053b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053b0:	2302      	movs	r3, #2
 80053b2:	607b      	str	r3, [r7, #4]
 80053b4:	e001      	b.n	80053ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053b6:	2300      	movs	r3, #0
 80053b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053ba:	687b      	ldr	r3, [r7, #4]
	}
 80053bc:	4618      	mov	r0, r3
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	20001208 	.word	0x20001208
 80053cc:	20001224 	.word	0x20001224

080053d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d058      	beq.n	8005498 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053e6:	4b2f      	ldr	r3, [pc, #188]	@ (80054a4 <xTaskPriorityDisinherit+0xd4>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d00b      	beq.n	8005408 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	60fb      	str	r3, [r7, #12]
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	e7fd      	b.n	8005404 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10b      	bne.n	8005428 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	60bb      	str	r3, [r7, #8]
}
 8005422:	bf00      	nop
 8005424:	bf00      	nop
 8005426:	e7fd      	b.n	8005424 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800542c:	1e5a      	subs	r2, r3, #1
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543a:	429a      	cmp	r2, r3
 800543c:	d02c      	beq.n	8005498 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005442:	2b00      	cmp	r3, #0
 8005444:	d128      	bne.n	8005498 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	3304      	adds	r3, #4
 800544a:	4618      	mov	r0, r3
 800544c:	f7fe fc2c 	bl	8003ca8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005468:	4b0f      	ldr	r3, [pc, #60]	@ (80054a8 <xTaskPriorityDisinherit+0xd8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d903      	bls.n	8005478 <xTaskPriorityDisinherit+0xa8>
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005474:	4a0c      	ldr	r2, [pc, #48]	@ (80054a8 <xTaskPriorityDisinherit+0xd8>)
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4a09      	ldr	r2, [pc, #36]	@ (80054ac <xTaskPriorityDisinherit+0xdc>)
 8005486:	441a      	add	r2, r3
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	3304      	adds	r3, #4
 800548c:	4619      	mov	r1, r3
 800548e:	4610      	mov	r0, r2
 8005490:	f7fe fbaf 	bl	8003bf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005494:	2301      	movs	r3, #1
 8005496:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005498:	697b      	ldr	r3, [r7, #20]
	}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000d28 	.word	0x20000d28
 80054a8:	20001204 	.word	0x20001204
 80054ac:	20000d2c 	.word	0x20000d2c

080054b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054ba:	4b21      	ldr	r3, [pc, #132]	@ (8005540 <prvAddCurrentTaskToDelayedList+0x90>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054c0:	4b20      	ldr	r3, [pc, #128]	@ (8005544 <prvAddCurrentTaskToDelayedList+0x94>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3304      	adds	r3, #4
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fe fbee 	bl	8003ca8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d10a      	bne.n	80054ea <prvAddCurrentTaskToDelayedList+0x3a>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054da:	4b1a      	ldr	r3, [pc, #104]	@ (8005544 <prvAddCurrentTaskToDelayedList+0x94>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	4819      	ldr	r0, [pc, #100]	@ (8005548 <prvAddCurrentTaskToDelayedList+0x98>)
 80054e4:	f7fe fb85 	bl	8003bf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054e8:	e026      	b.n	8005538 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4413      	add	r3, r2
 80054f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054f2:	4b14      	ldr	r3, [pc, #80]	@ (8005544 <prvAddCurrentTaskToDelayedList+0x94>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d209      	bcs.n	8005516 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005502:	4b12      	ldr	r3, [pc, #72]	@ (800554c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4b0f      	ldr	r3, [pc, #60]	@ (8005544 <prvAddCurrentTaskToDelayedList+0x94>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3304      	adds	r3, #4
 800550c:	4619      	mov	r1, r3
 800550e:	4610      	mov	r0, r2
 8005510:	f7fe fb92 	bl	8003c38 <vListInsert>
}
 8005514:	e010      	b.n	8005538 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005516:	4b0e      	ldr	r3, [pc, #56]	@ (8005550 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4b0a      	ldr	r3, [pc, #40]	@ (8005544 <prvAddCurrentTaskToDelayedList+0x94>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3304      	adds	r3, #4
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f7fe fb88 	bl	8003c38 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005528:	4b0a      	ldr	r3, [pc, #40]	@ (8005554 <prvAddCurrentTaskToDelayedList+0xa4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	429a      	cmp	r2, r3
 8005530:	d202      	bcs.n	8005538 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005532:	4a08      	ldr	r2, [pc, #32]	@ (8005554 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	6013      	str	r3, [r2, #0]
}
 8005538:	bf00      	nop
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20001200 	.word	0x20001200
 8005544:	20000d28 	.word	0x20000d28
 8005548:	200011e8 	.word	0x200011e8
 800554c:	200011b8 	.word	0x200011b8
 8005550:	200011b4 	.word	0x200011b4
 8005554:	2000121c 	.word	0x2000121c

08005558 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	@ 0x28
 800555c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005562:	f000 fb11 	bl	8005b88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005566:	4b1d      	ldr	r3, [pc, #116]	@ (80055dc <xTimerCreateTimerTask+0x84>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d021      	beq.n	80055b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005576:	1d3a      	adds	r2, r7, #4
 8005578:	f107 0108 	add.w	r1, r7, #8
 800557c:	f107 030c 	add.w	r3, r7, #12
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe faf1 	bl	8003b68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	9202      	str	r2, [sp, #8]
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	2302      	movs	r3, #2
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	2300      	movs	r3, #0
 8005596:	460a      	mov	r2, r1
 8005598:	4911      	ldr	r1, [pc, #68]	@ (80055e0 <xTimerCreateTimerTask+0x88>)
 800559a:	4812      	ldr	r0, [pc, #72]	@ (80055e4 <xTimerCreateTimerTask+0x8c>)
 800559c:	f7ff f8a6 	bl	80046ec <xTaskCreateStatic>
 80055a0:	4603      	mov	r3, r0
 80055a2:	4a11      	ldr	r2, [pc, #68]	@ (80055e8 <xTimerCreateTimerTask+0x90>)
 80055a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80055a6:	4b10      	ldr	r3, [pc, #64]	@ (80055e8 <xTimerCreateTimerTask+0x90>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80055ae:	2301      	movs	r3, #1
 80055b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10b      	bne.n	80055d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	613b      	str	r3, [r7, #16]
}
 80055ca:	bf00      	nop
 80055cc:	bf00      	nop
 80055ce:	e7fd      	b.n	80055cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80055d0:	697b      	ldr	r3, [r7, #20]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20001258 	.word	0x20001258
 80055e0:	080065d4 	.word	0x080065d4
 80055e4:	08005725 	.word	0x08005725
 80055e8:	2000125c 	.word	0x2000125c

080055ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	@ 0x28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10b      	bne.n	800561c <xTimerGenericCommand+0x30>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	623b      	str	r3, [r7, #32]
}
 8005616:	bf00      	nop
 8005618:	bf00      	nop
 800561a:	e7fd      	b.n	8005618 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800561c:	4b19      	ldr	r3, [pc, #100]	@ (8005684 <xTimerGenericCommand+0x98>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d02a      	beq.n	800567a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b05      	cmp	r3, #5
 8005634:	dc18      	bgt.n	8005668 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005636:	f7ff fead 	bl	8005394 <xTaskGetSchedulerState>
 800563a:	4603      	mov	r3, r0
 800563c:	2b02      	cmp	r3, #2
 800563e:	d109      	bne.n	8005654 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005640:	4b10      	ldr	r3, [pc, #64]	@ (8005684 <xTimerGenericCommand+0x98>)
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	f107 0110 	add.w	r1, r7, #16
 8005648:	2300      	movs	r3, #0
 800564a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800564c:	f7fe fc60 	bl	8003f10 <xQueueGenericSend>
 8005650:	6278      	str	r0, [r7, #36]	@ 0x24
 8005652:	e012      	b.n	800567a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005654:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <xTimerGenericCommand+0x98>)
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	f107 0110 	add.w	r1, r7, #16
 800565c:	2300      	movs	r3, #0
 800565e:	2200      	movs	r2, #0
 8005660:	f7fe fc56 	bl	8003f10 <xQueueGenericSend>
 8005664:	6278      	str	r0, [r7, #36]	@ 0x24
 8005666:	e008      	b.n	800567a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005668:	4b06      	ldr	r3, [pc, #24]	@ (8005684 <xTimerGenericCommand+0x98>)
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	f107 0110 	add.w	r1, r7, #16
 8005670:	2300      	movs	r3, #0
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	f7fe fd4e 	bl	8004114 <xQueueGenericSendFromISR>
 8005678:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800567c:	4618      	mov	r0, r3
 800567e:	3728      	adds	r7, #40	@ 0x28
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20001258 	.word	0x20001258

08005688 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af02      	add	r7, sp, #8
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005692:	4b23      	ldr	r3, [pc, #140]	@ (8005720 <prvProcessExpiredTimer+0x98>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	3304      	adds	r3, #4
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fe fb01 	bl	8003ca8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d023      	beq.n	80056fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	699a      	ldr	r2, [r3, #24]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	18d1      	adds	r1, r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	6978      	ldr	r0, [r7, #20]
 80056c2:	f000 f8d3 	bl	800586c <prvInsertTimerInActiveList>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d020      	beq.n	800570e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056cc:	2300      	movs	r3, #0
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	2300      	movs	r3, #0
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	2100      	movs	r1, #0
 80056d6:	6978      	ldr	r0, [r7, #20]
 80056d8:	f7ff ff88 	bl	80055ec <xTimerGenericCommand>
 80056dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d114      	bne.n	800570e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	60fb      	str	r3, [r7, #12]
}
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
 80056fa:	e7fd      	b.n	80056f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	b2da      	uxtb	r2, r3
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	6978      	ldr	r0, [r7, #20]
 8005714:	4798      	blx	r3
}
 8005716:	bf00      	nop
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20001250 	.word	0x20001250

08005724 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800572c:	f107 0308 	add.w	r3, r7, #8
 8005730:	4618      	mov	r0, r3
 8005732:	f000 f859 	bl	80057e8 <prvGetNextExpireTime>
 8005736:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4619      	mov	r1, r3
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f805 	bl	800574c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005742:	f000 f8d5 	bl	80058f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005746:	bf00      	nop
 8005748:	e7f0      	b.n	800572c <prvTimerTask+0x8>
	...

0800574c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005756:	f7ff fa2d 	bl	8004bb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800575a:	f107 0308 	add.w	r3, r7, #8
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f864 	bl	800582c <prvSampleTimeNow>
 8005764:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d130      	bne.n	80057ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <prvProcessTimerOrBlockTask+0x3c>
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	429a      	cmp	r2, r3
 8005778:	d806      	bhi.n	8005788 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800577a:	f7ff fa29 	bl	8004bd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800577e:	68f9      	ldr	r1, [r7, #12]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff ff81 	bl	8005688 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005786:	e024      	b.n	80057d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d008      	beq.n	80057a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800578e:	4b13      	ldr	r3, [pc, #76]	@ (80057dc <prvProcessTimerOrBlockTask+0x90>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <prvProcessTimerOrBlockTask+0x50>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <prvProcessTimerOrBlockTask+0x52>
 800579c:	2300      	movs	r3, #0
 800579e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80057a0:	4b0f      	ldr	r3, [pc, #60]	@ (80057e0 <prvProcessTimerOrBlockTask+0x94>)
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	4619      	mov	r1, r3
 80057ae:	f7fe ff69 	bl	8004684 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80057b2:	f7ff fa0d 	bl	8004bd0 <xTaskResumeAll>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80057bc:	4b09      	ldr	r3, [pc, #36]	@ (80057e4 <prvProcessTimerOrBlockTask+0x98>)
 80057be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	f3bf 8f6f 	isb	sy
}
 80057cc:	e001      	b.n	80057d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80057ce:	f7ff f9ff 	bl	8004bd0 <xTaskResumeAll>
}
 80057d2:	bf00      	nop
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20001254 	.word	0x20001254
 80057e0:	20001258 	.word	0x20001258
 80057e4:	e000ed04 	.word	0xe000ed04

080057e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <prvGetNextExpireTime+0x40>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <prvGetNextExpireTime+0x16>
 80057fa:	2201      	movs	r2, #1
 80057fc:	e000      	b.n	8005800 <prvGetNextExpireTime+0x18>
 80057fe:	2200      	movs	r2, #0
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d105      	bne.n	8005818 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800580c:	4b06      	ldr	r3, [pc, #24]	@ (8005828 <prvGetNextExpireTime+0x40>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	e001      	b.n	800581c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800581c:	68fb      	ldr	r3, [r7, #12]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr
 8005828:	20001250 	.word	0x20001250

0800582c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005834:	f7ff fa6a 	bl	8004d0c <xTaskGetTickCount>
 8005838:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800583a:	4b0b      	ldr	r3, [pc, #44]	@ (8005868 <prvSampleTimeNow+0x3c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	429a      	cmp	r2, r3
 8005842:	d205      	bcs.n	8005850 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005844:	f000 f93a 	bl	8005abc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e002      	b.n	8005856 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005856:	4a04      	ldr	r2, [pc, #16]	@ (8005868 <prvSampleTimeNow+0x3c>)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800585c:	68fb      	ldr	r3, [r7, #12]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20001260 	.word	0x20001260

0800586c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	429a      	cmp	r2, r3
 8005890:	d812      	bhi.n	80058b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	1ad2      	subs	r2, r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	429a      	cmp	r2, r3
 800589e:	d302      	bcc.n	80058a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e01b      	b.n	80058de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80058a6:	4b10      	ldr	r3, [pc, #64]	@ (80058e8 <prvInsertTimerInActiveList+0x7c>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3304      	adds	r3, #4
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f7fe f9c1 	bl	8003c38 <vListInsert>
 80058b6:	e012      	b.n	80058de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d206      	bcs.n	80058ce <prvInsertTimerInActiveList+0x62>
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d302      	bcc.n	80058ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80058c8:	2301      	movs	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	e007      	b.n	80058de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058ce:	4b07      	ldr	r3, [pc, #28]	@ (80058ec <prvInsertTimerInActiveList+0x80>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3304      	adds	r3, #4
 80058d6:	4619      	mov	r1, r3
 80058d8:	4610      	mov	r0, r2
 80058da:	f7fe f9ad 	bl	8003c38 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058de:	697b      	ldr	r3, [r7, #20]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20001254 	.word	0x20001254
 80058ec:	20001250 	.word	0x20001250

080058f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08e      	sub	sp, #56	@ 0x38
 80058f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058f6:	e0ce      	b.n	8005a96 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	da19      	bge.n	8005932 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058fe:	1d3b      	adds	r3, r7, #4
 8005900:	3304      	adds	r3, #4
 8005902:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10b      	bne.n	8005922 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	61fb      	str	r3, [r7, #28]
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	e7fd      	b.n	800591e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005928:	6850      	ldr	r0, [r2, #4]
 800592a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800592c:	6892      	ldr	r2, [r2, #8]
 800592e:	4611      	mov	r1, r2
 8005930:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f2c0 80ae 	blt.w	8005a96 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800593e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d004      	beq.n	8005950 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005948:	3304      	adds	r3, #4
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe f9ac 	bl	8003ca8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005950:	463b      	mov	r3, r7
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff ff6a 	bl	800582c <prvSampleTimeNow>
 8005958:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b09      	cmp	r3, #9
 800595e:	f200 8097 	bhi.w	8005a90 <prvProcessReceivedCommands+0x1a0>
 8005962:	a201      	add	r2, pc, #4	@ (adr r2, 8005968 <prvProcessReceivedCommands+0x78>)
 8005964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005968:	08005991 	.word	0x08005991
 800596c:	08005991 	.word	0x08005991
 8005970:	08005991 	.word	0x08005991
 8005974:	08005a07 	.word	0x08005a07
 8005978:	08005a1b 	.word	0x08005a1b
 800597c:	08005a67 	.word	0x08005a67
 8005980:	08005991 	.word	0x08005991
 8005984:	08005991 	.word	0x08005991
 8005988:	08005a07 	.word	0x08005a07
 800598c:	08005a1b 	.word	0x08005a1b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005992:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005996:	f043 0301 	orr.w	r3, r3, #1
 800599a:	b2da      	uxtb	r2, r3
 800599c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	18d1      	adds	r1, r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059b0:	f7ff ff5c 	bl	800586c <prvInsertTimerInActiveList>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d06c      	beq.n	8005a94 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d061      	beq.n	8005a94 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	441a      	add	r2, r3
 80059d8:	2300      	movs	r3, #0
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	2300      	movs	r3, #0
 80059de:	2100      	movs	r1, #0
 80059e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059e2:	f7ff fe03 	bl	80055ec <xTimerGenericCommand>
 80059e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d152      	bne.n	8005a94 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	61bb      	str	r3, [r7, #24]
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	e7fd      	b.n	8005a02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a0c:	f023 0301 	bic.w	r3, r3, #1
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005a18:	e03d      	b.n	8005a96 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a20:	f043 0301 	orr.w	r3, r3, #1
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10b      	bne.n	8005a52 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	617b      	str	r3, [r7, #20]
}
 8005a4c:	bf00      	nop
 8005a4e:	bf00      	nop
 8005a50:	e7fd      	b.n	8005a4e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	18d1      	adds	r1, r2, r3
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a60:	f7ff ff04 	bl	800586c <prvInsertTimerInActiveList>
					break;
 8005a64:	e017      	b.n	8005a96 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d103      	bne.n	8005a7c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005a74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a76:	f000 fb89 	bl	800618c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a7a:	e00c      	b.n	8005a96 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a82:	f023 0301 	bic.w	r3, r3, #1
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005a8e:	e002      	b.n	8005a96 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005a90:	bf00      	nop
 8005a92:	e000      	b.n	8005a96 <prvProcessReceivedCommands+0x1a6>
					break;
 8005a94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a96:	4b08      	ldr	r3, [pc, #32]	@ (8005ab8 <prvProcessReceivedCommands+0x1c8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	1d39      	adds	r1, r7, #4
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fbd6 	bl	8004250 <xQueueReceive>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f47f af26 	bne.w	80058f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005aac:	bf00      	nop
 8005aae:	bf00      	nop
 8005ab0:	3730      	adds	r7, #48	@ 0x30
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20001258 	.word	0x20001258

08005abc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ac2:	e049      	b.n	8005b58 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8005b80 <prvSwitchTimerLists+0xc4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ace:	4b2c      	ldr	r3, [pc, #176]	@ (8005b80 <prvSwitchTimerLists+0xc4>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fe f8e3 	bl	8003ca8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d02f      	beq.n	8005b58 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4413      	add	r3, r2
 8005b00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d90e      	bls.n	8005b28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b16:	4b1a      	ldr	r3, [pc, #104]	@ (8005b80 <prvSwitchTimerLists+0xc4>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4610      	mov	r0, r2
 8005b22:	f7fe f889 	bl	8003c38 <vListInsert>
 8005b26:	e017      	b.n	8005b58 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b28:	2300      	movs	r3, #0
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	2100      	movs	r1, #0
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff fd5a 	bl	80055ec <xTimerGenericCommand>
 8005b38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10b      	bne.n	8005b58 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	603b      	str	r3, [r7, #0]
}
 8005b52:	bf00      	nop
 8005b54:	bf00      	nop
 8005b56:	e7fd      	b.n	8005b54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b58:	4b09      	ldr	r3, [pc, #36]	@ (8005b80 <prvSwitchTimerLists+0xc4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1b0      	bne.n	8005ac4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b62:	4b07      	ldr	r3, [pc, #28]	@ (8005b80 <prvSwitchTimerLists+0xc4>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b68:	4b06      	ldr	r3, [pc, #24]	@ (8005b84 <prvSwitchTimerLists+0xc8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a04      	ldr	r2, [pc, #16]	@ (8005b80 <prvSwitchTimerLists+0xc4>)
 8005b6e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b70:	4a04      	ldr	r2, [pc, #16]	@ (8005b84 <prvSwitchTimerLists+0xc8>)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	6013      	str	r3, [r2, #0]
}
 8005b76:	bf00      	nop
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20001250 	.word	0x20001250
 8005b84:	20001254 	.word	0x20001254

08005b88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b8e:	f000 f92d 	bl	8005dec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b92:	4b15      	ldr	r3, [pc, #84]	@ (8005be8 <prvCheckForValidListAndQueue+0x60>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d120      	bne.n	8005bdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b9a:	4814      	ldr	r0, [pc, #80]	@ (8005bec <prvCheckForValidListAndQueue+0x64>)
 8005b9c:	f7fd fffe 	bl	8003b9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ba0:	4813      	ldr	r0, [pc, #76]	@ (8005bf0 <prvCheckForValidListAndQueue+0x68>)
 8005ba2:	f7fd fffb 	bl	8003b9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ba6:	4b13      	ldr	r3, [pc, #76]	@ (8005bf4 <prvCheckForValidListAndQueue+0x6c>)
 8005ba8:	4a10      	ldr	r2, [pc, #64]	@ (8005bec <prvCheckForValidListAndQueue+0x64>)
 8005baa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005bac:	4b12      	ldr	r3, [pc, #72]	@ (8005bf8 <prvCheckForValidListAndQueue+0x70>)
 8005bae:	4a10      	ldr	r2, [pc, #64]	@ (8005bf0 <prvCheckForValidListAndQueue+0x68>)
 8005bb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	4b11      	ldr	r3, [pc, #68]	@ (8005bfc <prvCheckForValidListAndQueue+0x74>)
 8005bb8:	4a11      	ldr	r2, [pc, #68]	@ (8005c00 <prvCheckForValidListAndQueue+0x78>)
 8005bba:	2110      	movs	r1, #16
 8005bbc:	200a      	movs	r0, #10
 8005bbe:	f7fe f907 	bl	8003dd0 <xQueueGenericCreateStatic>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	4a08      	ldr	r2, [pc, #32]	@ (8005be8 <prvCheckForValidListAndQueue+0x60>)
 8005bc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005bc8:	4b07      	ldr	r3, [pc, #28]	@ (8005be8 <prvCheckForValidListAndQueue+0x60>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005bd0:	4b05      	ldr	r3, [pc, #20]	@ (8005be8 <prvCheckForValidListAndQueue+0x60>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	490b      	ldr	r1, [pc, #44]	@ (8005c04 <prvCheckForValidListAndQueue+0x7c>)
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe fd2c 	bl	8004634 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bdc:	f000 f936 	bl	8005e4c <vPortExitCritical>
}
 8005be0:	bf00      	nop
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20001258 	.word	0x20001258
 8005bec:	20001228 	.word	0x20001228
 8005bf0:	2000123c 	.word	0x2000123c
 8005bf4:	20001250 	.word	0x20001250
 8005bf8:	20001254 	.word	0x20001254
 8005bfc:	20001304 	.word	0x20001304
 8005c00:	20001264 	.word	0x20001264
 8005c04:	080065dc 	.word	0x080065dc

08005c08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3b04      	subs	r3, #4
 8005c18:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3b04      	subs	r3, #4
 8005c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f023 0201 	bic.w	r2, r3, #1
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3b04      	subs	r3, #4
 8005c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c38:	4a08      	ldr	r2, [pc, #32]	@ (8005c5c <pxPortInitialiseStack+0x54>)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3b14      	subs	r3, #20
 8005c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3b20      	subs	r3, #32
 8005c4e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c50:	68fb      	ldr	r3, [r7, #12]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr
 8005c5c:	08005c61 	.word	0x08005c61

08005c60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c6a:	4b12      	ldr	r3, [pc, #72]	@ (8005cb4 <prvTaskExitError+0x54>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c72:	d00b      	beq.n	8005c8c <prvTaskExitError+0x2c>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	60fb      	str	r3, [r7, #12]
}
 8005c86:	bf00      	nop
 8005c88:	bf00      	nop
 8005c8a:	e7fd      	b.n	8005c88 <prvTaskExitError+0x28>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	60bb      	str	r3, [r7, #8]
}
 8005c9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ca0:	bf00      	nop
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0fc      	beq.n	8005ca2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bc80      	pop	{r7}
 8005cb2:	4770      	bx	lr
 8005cb4:	2000000c 	.word	0x2000000c
	...

08005cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005cc0:	4b07      	ldr	r3, [pc, #28]	@ (8005ce0 <pxCurrentTCBConst2>)
 8005cc2:	6819      	ldr	r1, [r3, #0]
 8005cc4:	6808      	ldr	r0, [r1, #0]
 8005cc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005cca:	f380 8809 	msr	PSP, r0
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f04f 0000 	mov.w	r0, #0
 8005cd6:	f380 8811 	msr	BASEPRI, r0
 8005cda:	f04e 0e0d 	orr.w	lr, lr, #13
 8005cde:	4770      	bx	lr

08005ce0 <pxCurrentTCBConst2>:
 8005ce0:	20000d28 	.word	0x20000d28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop

08005ce8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005ce8:	4806      	ldr	r0, [pc, #24]	@ (8005d04 <prvPortStartFirstTask+0x1c>)
 8005cea:	6800      	ldr	r0, [r0, #0]
 8005cec:	6800      	ldr	r0, [r0, #0]
 8005cee:	f380 8808 	msr	MSP, r0
 8005cf2:	b662      	cpsie	i
 8005cf4:	b661      	cpsie	f
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	df00      	svc	0
 8005d00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d02:	bf00      	nop
 8005d04:	e000ed08 	.word	0xe000ed08

08005d08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d0e:	4b32      	ldr	r3, [pc, #200]	@ (8005dd8 <xPortStartScheduler+0xd0>)
 8005d10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	22ff      	movs	r2, #255	@ 0xff
 8005d1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	4b2a      	ldr	r3, [pc, #168]	@ (8005ddc <xPortStartScheduler+0xd4>)
 8005d34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d36:	4b2a      	ldr	r3, [pc, #168]	@ (8005de0 <xPortStartScheduler+0xd8>)
 8005d38:	2207      	movs	r2, #7
 8005d3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d3c:	e009      	b.n	8005d52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005d3e:	4b28      	ldr	r3, [pc, #160]	@ (8005de0 <xPortStartScheduler+0xd8>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	4a26      	ldr	r2, [pc, #152]	@ (8005de0 <xPortStartScheduler+0xd8>)
 8005d46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d5a:	2b80      	cmp	r3, #128	@ 0x80
 8005d5c:	d0ef      	beq.n	8005d3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d5e:	4b20      	ldr	r3, [pc, #128]	@ (8005de0 <xPortStartScheduler+0xd8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f1c3 0307 	rsb	r3, r3, #7
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d00b      	beq.n	8005d82 <xPortStartScheduler+0x7a>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	60bb      	str	r3, [r7, #8]
}
 8005d7c:	bf00      	nop
 8005d7e:	bf00      	nop
 8005d80:	e7fd      	b.n	8005d7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d82:	4b17      	ldr	r3, [pc, #92]	@ (8005de0 <xPortStartScheduler+0xd8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	4a15      	ldr	r2, [pc, #84]	@ (8005de0 <xPortStartScheduler+0xd8>)
 8005d8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d8c:	4b14      	ldr	r3, [pc, #80]	@ (8005de0 <xPortStartScheduler+0xd8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d94:	4a12      	ldr	r2, [pc, #72]	@ (8005de0 <xPortStartScheduler+0xd8>)
 8005d96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005da0:	4b10      	ldr	r3, [pc, #64]	@ (8005de4 <xPortStartScheduler+0xdc>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a0f      	ldr	r2, [pc, #60]	@ (8005de4 <xPortStartScheduler+0xdc>)
 8005da6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005daa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dac:	4b0d      	ldr	r3, [pc, #52]	@ (8005de4 <xPortStartScheduler+0xdc>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a0c      	ldr	r2, [pc, #48]	@ (8005de4 <xPortStartScheduler+0xdc>)
 8005db2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005db6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005db8:	f000 f8b8 	bl	8005f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005de8 <xPortStartScheduler+0xe0>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005dc2:	f7ff ff91 	bl	8005ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dc6:	f7ff f869 	bl	8004e9c <vTaskSwitchContext>
	prvTaskExitError();
 8005dca:	f7ff ff49 	bl	8005c60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	e000e400 	.word	0xe000e400
 8005ddc:	20001354 	.word	0x20001354
 8005de0:	20001358 	.word	0x20001358
 8005de4:	e000ed20 	.word	0xe000ed20
 8005de8:	2000000c 	.word	0x2000000c

08005dec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	607b      	str	r3, [r7, #4]
}
 8005e04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e06:	4b0f      	ldr	r3, [pc, #60]	@ (8005e44 <vPortEnterCritical+0x58>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8005e44 <vPortEnterCritical+0x58>)
 8005e0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e10:	4b0c      	ldr	r3, [pc, #48]	@ (8005e44 <vPortEnterCritical+0x58>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d110      	bne.n	8005e3a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e18:	4b0b      	ldr	r3, [pc, #44]	@ (8005e48 <vPortEnterCritical+0x5c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00b      	beq.n	8005e3a <vPortEnterCritical+0x4e>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	603b      	str	r3, [r7, #0]
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	e7fd      	b.n	8005e36 <vPortEnterCritical+0x4a>
	}
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr
 8005e44:	2000000c 	.word	0x2000000c
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e52:	4b12      	ldr	r3, [pc, #72]	@ (8005e9c <vPortExitCritical+0x50>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10b      	bne.n	8005e72 <vPortExitCritical+0x26>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	607b      	str	r3, [r7, #4]
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	e7fd      	b.n	8005e6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e72:	4b0a      	ldr	r3, [pc, #40]	@ (8005e9c <vPortExitCritical+0x50>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	4a08      	ldr	r2, [pc, #32]	@ (8005e9c <vPortExitCritical+0x50>)
 8005e7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e7c:	4b07      	ldr	r3, [pc, #28]	@ (8005e9c <vPortExitCritical+0x50>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d105      	bne.n	8005e90 <vPortExitCritical+0x44>
 8005e84:	2300      	movs	r3, #0
 8005e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	f383 8811 	msr	BASEPRI, r3
}
 8005e8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bc80      	pop	{r7}
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	2000000c 	.word	0x2000000c

08005ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ea0:	f3ef 8009 	mrs	r0, PSP
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee0 <pxCurrentTCBConst>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005eb0:	6010      	str	r0, [r2, #0]
 8005eb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005eb6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005eba:	f380 8811 	msr	BASEPRI, r0
 8005ebe:	f7fe ffed 	bl	8004e9c <vTaskSwitchContext>
 8005ec2:	f04f 0000 	mov.w	r0, #0
 8005ec6:	f380 8811 	msr	BASEPRI, r0
 8005eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005ece:	6819      	ldr	r1, [r3, #0]
 8005ed0:	6808      	ldr	r0, [r1, #0]
 8005ed2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ed6:	f380 8809 	msr	PSP, r0
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	4770      	bx	lr

08005ee0 <pxCurrentTCBConst>:
 8005ee0:	20000d28 	.word	0x20000d28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop

08005ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	607b      	str	r3, [r7, #4]
}
 8005f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f02:	f7fe ff11 	bl	8004d28 <xTaskIncrementTick>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f0c:	4b06      	ldr	r3, [pc, #24]	@ (8005f28 <xPortSysTickHandler+0x40>)
 8005f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	2300      	movs	r3, #0
 8005f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	f383 8811 	msr	BASEPRI, r3
}
 8005f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	e000ed04 	.word	0xe000ed04

08005f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f30:	4b0a      	ldr	r3, [pc, #40]	@ (8005f5c <vPortSetupTimerInterrupt+0x30>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f36:	4b0a      	ldr	r3, [pc, #40]	@ (8005f60 <vPortSetupTimerInterrupt+0x34>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f3c:	4b09      	ldr	r3, [pc, #36]	@ (8005f64 <vPortSetupTimerInterrupt+0x38>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a09      	ldr	r2, [pc, #36]	@ (8005f68 <vPortSetupTimerInterrupt+0x3c>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	099b      	lsrs	r3, r3, #6
 8005f48:	4a08      	ldr	r2, [pc, #32]	@ (8005f6c <vPortSetupTimerInterrupt+0x40>)
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f4e:	4b03      	ldr	r3, [pc, #12]	@ (8005f5c <vPortSetupTimerInterrupt+0x30>)
 8005f50:	2207      	movs	r2, #7
 8005f52:	601a      	str	r2, [r3, #0]
}
 8005f54:	bf00      	nop
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr
 8005f5c:	e000e010 	.word	0xe000e010
 8005f60:	e000e018 	.word	0xe000e018
 8005f64:	20000000 	.word	0x20000000
 8005f68:	10624dd3 	.word	0x10624dd3
 8005f6c:	e000e014 	.word	0xe000e014

08005f70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f76:	f3ef 8305 	mrs	r3, IPSR
 8005f7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b0f      	cmp	r3, #15
 8005f80:	d915      	bls.n	8005fae <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f82:	4a17      	ldr	r2, [pc, #92]	@ (8005fe0 <vPortValidateInterruptPriority+0x70>)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f8c:	4b15      	ldr	r3, [pc, #84]	@ (8005fe4 <vPortValidateInterruptPriority+0x74>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	7afa      	ldrb	r2, [r7, #11]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d20b      	bcs.n	8005fae <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	607b      	str	r3, [r7, #4]
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	e7fd      	b.n	8005faa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fae:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe8 <vPortValidateInterruptPriority+0x78>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fec <vPortValidateInterruptPriority+0x7c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d90b      	bls.n	8005fd6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	603b      	str	r3, [r7, #0]
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop
 8005fd4:	e7fd      	b.n	8005fd2 <vPortValidateInterruptPriority+0x62>
	}
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr
 8005fe0:	e000e3f0 	.word	0xe000e3f0
 8005fe4:	20001354 	.word	0x20001354
 8005fe8:	e000ed0c 	.word	0xe000ed0c
 8005fec:	20001358 	.word	0x20001358

08005ff0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08a      	sub	sp, #40	@ 0x28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ffc:	f7fe fdda 	bl	8004bb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006000:	4b5c      	ldr	r3, [pc, #368]	@ (8006174 <pvPortMalloc+0x184>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006008:	f000 f924 	bl	8006254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800600c:	4b5a      	ldr	r3, [pc, #360]	@ (8006178 <pvPortMalloc+0x188>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4013      	ands	r3, r2
 8006014:	2b00      	cmp	r3, #0
 8006016:	f040 8095 	bne.w	8006144 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01e      	beq.n	800605e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006020:	2208      	movs	r2, #8
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4413      	add	r3, r2
 8006026:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	2b00      	cmp	r3, #0
 8006030:	d015      	beq.n	800605e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f023 0307 	bic.w	r3, r3, #7
 8006038:	3308      	adds	r3, #8
 800603a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00b      	beq.n	800605e <pvPortMalloc+0x6e>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	617b      	str	r3, [r7, #20]
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	e7fd      	b.n	800605a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d06f      	beq.n	8006144 <pvPortMalloc+0x154>
 8006064:	4b45      	ldr	r3, [pc, #276]	@ (800617c <pvPortMalloc+0x18c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	429a      	cmp	r2, r3
 800606c:	d86a      	bhi.n	8006144 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800606e:	4b44      	ldr	r3, [pc, #272]	@ (8006180 <pvPortMalloc+0x190>)
 8006070:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006072:	4b43      	ldr	r3, [pc, #268]	@ (8006180 <pvPortMalloc+0x190>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006078:	e004      	b.n	8006084 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	429a      	cmp	r2, r3
 800608c:	d903      	bls.n	8006096 <pvPortMalloc+0xa6>
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f1      	bne.n	800607a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006096:	4b37      	ldr	r3, [pc, #220]	@ (8006174 <pvPortMalloc+0x184>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609c:	429a      	cmp	r2, r3
 800609e:	d051      	beq.n	8006144 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2208      	movs	r2, #8
 80060a6:	4413      	add	r3, r2
 80060a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	1ad2      	subs	r2, r2, r3
 80060ba:	2308      	movs	r3, #8
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	429a      	cmp	r2, r3
 80060c0:	d920      	bls.n	8006104 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4413      	add	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00b      	beq.n	80060ec <pvPortMalloc+0xfc>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	613b      	str	r3, [r7, #16]
}
 80060e6:	bf00      	nop
 80060e8:	bf00      	nop
 80060ea:	e7fd      	b.n	80060e8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	1ad2      	subs	r2, r2, r3
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060fe:	69b8      	ldr	r0, [r7, #24]
 8006100:	f000 f90a 	bl	8006318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006104:	4b1d      	ldr	r3, [pc, #116]	@ (800617c <pvPortMalloc+0x18c>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	4a1b      	ldr	r2, [pc, #108]	@ (800617c <pvPortMalloc+0x18c>)
 8006110:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006112:	4b1a      	ldr	r3, [pc, #104]	@ (800617c <pvPortMalloc+0x18c>)
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	4b1b      	ldr	r3, [pc, #108]	@ (8006184 <pvPortMalloc+0x194>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d203      	bcs.n	8006126 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800611e:	4b17      	ldr	r3, [pc, #92]	@ (800617c <pvPortMalloc+0x18c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a18      	ldr	r2, [pc, #96]	@ (8006184 <pvPortMalloc+0x194>)
 8006124:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	4b13      	ldr	r3, [pc, #76]	@ (8006178 <pvPortMalloc+0x188>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	431a      	orrs	r2, r3
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800613a:	4b13      	ldr	r3, [pc, #76]	@ (8006188 <pvPortMalloc+0x198>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3301      	adds	r3, #1
 8006140:	4a11      	ldr	r2, [pc, #68]	@ (8006188 <pvPortMalloc+0x198>)
 8006142:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006144:	f7fe fd44 	bl	8004bd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00b      	beq.n	800616a <pvPortMalloc+0x17a>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60fb      	str	r3, [r7, #12]
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop
 8006168:	e7fd      	b.n	8006166 <pvPortMalloc+0x176>
	return pvReturn;
 800616a:	69fb      	ldr	r3, [r7, #28]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3728      	adds	r7, #40	@ 0x28
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	20001f64 	.word	0x20001f64
 8006178:	20001f78 	.word	0x20001f78
 800617c:	20001f68 	.word	0x20001f68
 8006180:	20001f5c 	.word	0x20001f5c
 8006184:	20001f6c 	.word	0x20001f6c
 8006188:	20001f70 	.word	0x20001f70

0800618c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d04f      	beq.n	800623e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800619e:	2308      	movs	r3, #8
 80061a0:	425b      	negs	r3, r3
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4413      	add	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	4b25      	ldr	r3, [pc, #148]	@ (8006248 <vPortFree+0xbc>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4013      	ands	r3, r2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10b      	bne.n	80061d2 <vPortFree+0x46>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	60fb      	str	r3, [r7, #12]
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	e7fd      	b.n	80061ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00b      	beq.n	80061f2 <vPortFree+0x66>
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	60bb      	str	r3, [r7, #8]
}
 80061ec:	bf00      	nop
 80061ee:	bf00      	nop
 80061f0:	e7fd      	b.n	80061ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4b14      	ldr	r3, [pc, #80]	@ (8006248 <vPortFree+0xbc>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01e      	beq.n	800623e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11a      	bne.n	800623e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	4b0e      	ldr	r3, [pc, #56]	@ (8006248 <vPortFree+0xbc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	43db      	mvns	r3, r3
 8006212:	401a      	ands	r2, r3
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006218:	f7fe fccc 	bl	8004bb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	4b0a      	ldr	r3, [pc, #40]	@ (800624c <vPortFree+0xc0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4413      	add	r3, r2
 8006226:	4a09      	ldr	r2, [pc, #36]	@ (800624c <vPortFree+0xc0>)
 8006228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800622a:	6938      	ldr	r0, [r7, #16]
 800622c:	f000 f874 	bl	8006318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006230:	4b07      	ldr	r3, [pc, #28]	@ (8006250 <vPortFree+0xc4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3301      	adds	r3, #1
 8006236:	4a06      	ldr	r2, [pc, #24]	@ (8006250 <vPortFree+0xc4>)
 8006238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800623a:	f7fe fcc9 	bl	8004bd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800623e:	bf00      	nop
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20001f78 	.word	0x20001f78
 800624c:	20001f68 	.word	0x20001f68
 8006250:	20001f74 	.word	0x20001f74

08006254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800625a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800625e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006260:	4b27      	ldr	r3, [pc, #156]	@ (8006300 <prvHeapInit+0xac>)
 8006262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00c      	beq.n	8006288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3307      	adds	r3, #7
 8006272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0307 	bic.w	r3, r3, #7
 800627a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	4a1f      	ldr	r2, [pc, #124]	@ (8006300 <prvHeapInit+0xac>)
 8006284:	4413      	add	r3, r2
 8006286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800628c:	4a1d      	ldr	r2, [pc, #116]	@ (8006304 <prvHeapInit+0xb0>)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006292:	4b1c      	ldr	r3, [pc, #112]	@ (8006304 <prvHeapInit+0xb0>)
 8006294:	2200      	movs	r2, #0
 8006296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	4413      	add	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062a0:	2208      	movs	r2, #8
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0307 	bic.w	r3, r3, #7
 80062ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4a15      	ldr	r2, [pc, #84]	@ (8006308 <prvHeapInit+0xb4>)
 80062b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062b6:	4b14      	ldr	r3, [pc, #80]	@ (8006308 <prvHeapInit+0xb4>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2200      	movs	r2, #0
 80062bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062be:	4b12      	ldr	r3, [pc, #72]	@ (8006308 <prvHeapInit+0xb4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	1ad2      	subs	r2, r2, r3
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006308 <prvHeapInit+0xb4>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	4a0a      	ldr	r2, [pc, #40]	@ (800630c <prvHeapInit+0xb8>)
 80062e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4a09      	ldr	r2, [pc, #36]	@ (8006310 <prvHeapInit+0xbc>)
 80062ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062ec:	4b09      	ldr	r3, [pc, #36]	@ (8006314 <prvHeapInit+0xc0>)
 80062ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80062f2:	601a      	str	r2, [r3, #0]
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	2000135c 	.word	0x2000135c
 8006304:	20001f5c 	.word	0x20001f5c
 8006308:	20001f64 	.word	0x20001f64
 800630c:	20001f6c 	.word	0x20001f6c
 8006310:	20001f68 	.word	0x20001f68
 8006314:	20001f78 	.word	0x20001f78

08006318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006320:	4b27      	ldr	r3, [pc, #156]	@ (80063c0 <prvInsertBlockIntoFreeList+0xa8>)
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	e002      	b.n	800632c <prvInsertBlockIntoFreeList+0x14>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	429a      	cmp	r2, r3
 8006334:	d8f7      	bhi.n	8006326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	4413      	add	r3, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	429a      	cmp	r2, r3
 8006346:	d108      	bne.n	800635a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	441a      	add	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	441a      	add	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d118      	bne.n	80063a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b14      	ldr	r3, [pc, #80]	@ (80063c4 <prvInsertBlockIntoFreeList+0xac>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d00d      	beq.n	8006396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	e008      	b.n	80063a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006396:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <prvInsertBlockIntoFreeList+0xac>)
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	e003      	b.n	80063a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d002      	beq.n	80063b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063b6:	bf00      	nop
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr
 80063c0:	20001f5c 	.word	0x20001f5c
 80063c4:	20001f64 	.word	0x20001f64

080063c8 <memset>:
 80063c8:	4603      	mov	r3, r0
 80063ca:	4402      	add	r2, r0
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d100      	bne.n	80063d2 <memset+0xa>
 80063d0:	4770      	bx	lr
 80063d2:	f803 1b01 	strb.w	r1, [r3], #1
 80063d6:	e7f9      	b.n	80063cc <memset+0x4>

080063d8 <_reclaim_reent>:
 80063d8:	4b29      	ldr	r3, [pc, #164]	@ (8006480 <_reclaim_reent+0xa8>)
 80063da:	b570      	push	{r4, r5, r6, lr}
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4604      	mov	r4, r0
 80063e0:	4283      	cmp	r3, r0
 80063e2:	d04b      	beq.n	800647c <_reclaim_reent+0xa4>
 80063e4:	69c3      	ldr	r3, [r0, #28]
 80063e6:	b1ab      	cbz	r3, 8006414 <_reclaim_reent+0x3c>
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	b16b      	cbz	r3, 8006408 <_reclaim_reent+0x30>
 80063ec:	2500      	movs	r5, #0
 80063ee:	69e3      	ldr	r3, [r4, #28]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	5959      	ldr	r1, [r3, r5]
 80063f4:	2900      	cmp	r1, #0
 80063f6:	d13b      	bne.n	8006470 <_reclaim_reent+0x98>
 80063f8:	3504      	adds	r5, #4
 80063fa:	2d80      	cmp	r5, #128	@ 0x80
 80063fc:	d1f7      	bne.n	80063ee <_reclaim_reent+0x16>
 80063fe:	69e3      	ldr	r3, [r4, #28]
 8006400:	4620      	mov	r0, r4
 8006402:	68d9      	ldr	r1, [r3, #12]
 8006404:	f000 f872 	bl	80064ec <_free_r>
 8006408:	69e3      	ldr	r3, [r4, #28]
 800640a:	6819      	ldr	r1, [r3, #0]
 800640c:	b111      	cbz	r1, 8006414 <_reclaim_reent+0x3c>
 800640e:	4620      	mov	r0, r4
 8006410:	f000 f86c 	bl	80064ec <_free_r>
 8006414:	6961      	ldr	r1, [r4, #20]
 8006416:	b111      	cbz	r1, 800641e <_reclaim_reent+0x46>
 8006418:	4620      	mov	r0, r4
 800641a:	f000 f867 	bl	80064ec <_free_r>
 800641e:	69e1      	ldr	r1, [r4, #28]
 8006420:	b111      	cbz	r1, 8006428 <_reclaim_reent+0x50>
 8006422:	4620      	mov	r0, r4
 8006424:	f000 f862 	bl	80064ec <_free_r>
 8006428:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800642a:	b111      	cbz	r1, 8006432 <_reclaim_reent+0x5a>
 800642c:	4620      	mov	r0, r4
 800642e:	f000 f85d 	bl	80064ec <_free_r>
 8006432:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006434:	b111      	cbz	r1, 800643c <_reclaim_reent+0x64>
 8006436:	4620      	mov	r0, r4
 8006438:	f000 f858 	bl	80064ec <_free_r>
 800643c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800643e:	b111      	cbz	r1, 8006446 <_reclaim_reent+0x6e>
 8006440:	4620      	mov	r0, r4
 8006442:	f000 f853 	bl	80064ec <_free_r>
 8006446:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006448:	b111      	cbz	r1, 8006450 <_reclaim_reent+0x78>
 800644a:	4620      	mov	r0, r4
 800644c:	f000 f84e 	bl	80064ec <_free_r>
 8006450:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006452:	b111      	cbz	r1, 800645a <_reclaim_reent+0x82>
 8006454:	4620      	mov	r0, r4
 8006456:	f000 f849 	bl	80064ec <_free_r>
 800645a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800645c:	b111      	cbz	r1, 8006464 <_reclaim_reent+0x8c>
 800645e:	4620      	mov	r0, r4
 8006460:	f000 f844 	bl	80064ec <_free_r>
 8006464:	6a23      	ldr	r3, [r4, #32]
 8006466:	b14b      	cbz	r3, 800647c <_reclaim_reent+0xa4>
 8006468:	4620      	mov	r0, r4
 800646a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800646e:	4718      	bx	r3
 8006470:	680e      	ldr	r6, [r1, #0]
 8006472:	4620      	mov	r0, r4
 8006474:	f000 f83a 	bl	80064ec <_free_r>
 8006478:	4631      	mov	r1, r6
 800647a:	e7bb      	b.n	80063f4 <_reclaim_reent+0x1c>
 800647c:	bd70      	pop	{r4, r5, r6, pc}
 800647e:	bf00      	nop
 8006480:	20000010 	.word	0x20000010

08006484 <__libc_init_array>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	2600      	movs	r6, #0
 8006488:	4d0c      	ldr	r5, [pc, #48]	@ (80064bc <__libc_init_array+0x38>)
 800648a:	4c0d      	ldr	r4, [pc, #52]	@ (80064c0 <__libc_init_array+0x3c>)
 800648c:	1b64      	subs	r4, r4, r5
 800648e:	10a4      	asrs	r4, r4, #2
 8006490:	42a6      	cmp	r6, r4
 8006492:	d109      	bne.n	80064a8 <__libc_init_array+0x24>
 8006494:	f000 f87e 	bl	8006594 <_init>
 8006498:	2600      	movs	r6, #0
 800649a:	4d0a      	ldr	r5, [pc, #40]	@ (80064c4 <__libc_init_array+0x40>)
 800649c:	4c0a      	ldr	r4, [pc, #40]	@ (80064c8 <__libc_init_array+0x44>)
 800649e:	1b64      	subs	r4, r4, r5
 80064a0:	10a4      	asrs	r4, r4, #2
 80064a2:	42a6      	cmp	r6, r4
 80064a4:	d105      	bne.n	80064b2 <__libc_init_array+0x2e>
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ac:	4798      	blx	r3
 80064ae:	3601      	adds	r6, #1
 80064b0:	e7ee      	b.n	8006490 <__libc_init_array+0xc>
 80064b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b6:	4798      	blx	r3
 80064b8:	3601      	adds	r6, #1
 80064ba:	e7f2      	b.n	80064a2 <__libc_init_array+0x1e>
 80064bc:	08006658 	.word	0x08006658
 80064c0:	08006658 	.word	0x08006658
 80064c4:	08006658 	.word	0x08006658
 80064c8:	0800665c 	.word	0x0800665c

080064cc <__retarget_lock_acquire_recursive>:
 80064cc:	4770      	bx	lr

080064ce <__retarget_lock_release_recursive>:
 80064ce:	4770      	bx	lr

080064d0 <memcpy>:
 80064d0:	440a      	add	r2, r1
 80064d2:	4291      	cmp	r1, r2
 80064d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80064d8:	d100      	bne.n	80064dc <memcpy+0xc>
 80064da:	4770      	bx	lr
 80064dc:	b510      	push	{r4, lr}
 80064de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e2:	4291      	cmp	r1, r2
 80064e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064e8:	d1f9      	bne.n	80064de <memcpy+0xe>
 80064ea:	bd10      	pop	{r4, pc}

080064ec <_free_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4605      	mov	r5, r0
 80064f0:	2900      	cmp	r1, #0
 80064f2:	d040      	beq.n	8006576 <_free_r+0x8a>
 80064f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064f8:	1f0c      	subs	r4, r1, #4
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	bfb8      	it	lt
 80064fe:	18e4      	addlt	r4, r4, r3
 8006500:	f000 f83c 	bl	800657c <__malloc_lock>
 8006504:	4a1c      	ldr	r2, [pc, #112]	@ (8006578 <_free_r+0x8c>)
 8006506:	6813      	ldr	r3, [r2, #0]
 8006508:	b933      	cbnz	r3, 8006518 <_free_r+0x2c>
 800650a:	6063      	str	r3, [r4, #4]
 800650c:	6014      	str	r4, [r2, #0]
 800650e:	4628      	mov	r0, r5
 8006510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006514:	f000 b838 	b.w	8006588 <__malloc_unlock>
 8006518:	42a3      	cmp	r3, r4
 800651a:	d908      	bls.n	800652e <_free_r+0x42>
 800651c:	6820      	ldr	r0, [r4, #0]
 800651e:	1821      	adds	r1, r4, r0
 8006520:	428b      	cmp	r3, r1
 8006522:	bf01      	itttt	eq
 8006524:	6819      	ldreq	r1, [r3, #0]
 8006526:	685b      	ldreq	r3, [r3, #4]
 8006528:	1809      	addeq	r1, r1, r0
 800652a:	6021      	streq	r1, [r4, #0]
 800652c:	e7ed      	b.n	800650a <_free_r+0x1e>
 800652e:	461a      	mov	r2, r3
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	b10b      	cbz	r3, 8006538 <_free_r+0x4c>
 8006534:	42a3      	cmp	r3, r4
 8006536:	d9fa      	bls.n	800652e <_free_r+0x42>
 8006538:	6811      	ldr	r1, [r2, #0]
 800653a:	1850      	adds	r0, r2, r1
 800653c:	42a0      	cmp	r0, r4
 800653e:	d10b      	bne.n	8006558 <_free_r+0x6c>
 8006540:	6820      	ldr	r0, [r4, #0]
 8006542:	4401      	add	r1, r0
 8006544:	1850      	adds	r0, r2, r1
 8006546:	4283      	cmp	r3, r0
 8006548:	6011      	str	r1, [r2, #0]
 800654a:	d1e0      	bne.n	800650e <_free_r+0x22>
 800654c:	6818      	ldr	r0, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	4408      	add	r0, r1
 8006552:	6010      	str	r0, [r2, #0]
 8006554:	6053      	str	r3, [r2, #4]
 8006556:	e7da      	b.n	800650e <_free_r+0x22>
 8006558:	d902      	bls.n	8006560 <_free_r+0x74>
 800655a:	230c      	movs	r3, #12
 800655c:	602b      	str	r3, [r5, #0]
 800655e:	e7d6      	b.n	800650e <_free_r+0x22>
 8006560:	6820      	ldr	r0, [r4, #0]
 8006562:	1821      	adds	r1, r4, r0
 8006564:	428b      	cmp	r3, r1
 8006566:	bf01      	itttt	eq
 8006568:	6819      	ldreq	r1, [r3, #0]
 800656a:	685b      	ldreq	r3, [r3, #4]
 800656c:	1809      	addeq	r1, r1, r0
 800656e:	6021      	streq	r1, [r4, #0]
 8006570:	6063      	str	r3, [r4, #4]
 8006572:	6054      	str	r4, [r2, #4]
 8006574:	e7cb      	b.n	800650e <_free_r+0x22>
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	200020b8 	.word	0x200020b8

0800657c <__malloc_lock>:
 800657c:	4801      	ldr	r0, [pc, #4]	@ (8006584 <__malloc_lock+0x8>)
 800657e:	f7ff bfa5 	b.w	80064cc <__retarget_lock_acquire_recursive>
 8006582:	bf00      	nop
 8006584:	200020b4 	.word	0x200020b4

08006588 <__malloc_unlock>:
 8006588:	4801      	ldr	r0, [pc, #4]	@ (8006590 <__malloc_unlock+0x8>)
 800658a:	f7ff bfa0 	b.w	80064ce <__retarget_lock_release_recursive>
 800658e:	bf00      	nop
 8006590:	200020b4 	.word	0x200020b4

08006594 <_init>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	bf00      	nop
 8006598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659a:	bc08      	pop	{r3}
 800659c:	469e      	mov	lr, r3
 800659e:	4770      	bx	lr

080065a0 <_fini>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	bf00      	nop
 80065a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a6:	bc08      	pop	{r3}
 80065a8:	469e      	mov	lr, r3
 80065aa:	4770      	bx	lr
