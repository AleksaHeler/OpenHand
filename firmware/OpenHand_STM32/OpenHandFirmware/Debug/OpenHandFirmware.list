
OpenHandFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce4c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800cf5c  0800cf5c  0001cf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d064  0800d064  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d064  0800d064  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d064  0800d064  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d064  0800d064  0001d064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d068  0800d068  0001d068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800d06c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ef4  200001d0  0800d23c  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200030c4  0800d23c  000230c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023ac1  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005023  00000000  00000000  00043cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d88  00000000  00000000  00048d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016ea  00000000  00000000  0004aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000657b  00000000  00000000  0004c192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000249f5  00000000  00000000  0005270d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0c22  00000000  00000000  00077102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008028  00000000  00000000  00117d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0011fd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cf44 	.word	0x0800cf44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800cf44 	.word	0x0800cf44

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <led_f_Handle_v>:
/**
 * @todo Description!
 * @note Called every 1s
 */
void led_f_Handle_v(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000930:	2140      	movs	r1, #64	; 0x40
 8000932:	4802      	ldr	r0, [pc, #8]	; (800093c <led_f_Handle_v+0x10>)
 8000934:	f001 fe17 	bl	8002566 <HAL_GPIO_TogglePin>
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40010c00 	.word	0x40010c00

08000940 <main_f_Init_v>:
/**
 *  @todo Description
 *  @note Called once during boot
 */
void main_f_Init_v(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	/* Start all PWM channels */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000944:	2100      	movs	r1, #0
 8000946:	480a      	ldr	r0, [pc, #40]	; (8000970 <main_f_Init_v+0x30>)
 8000948:	f004 fb80 	bl	800504c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800094c:	2104      	movs	r1, #4
 800094e:	4808      	ldr	r0, [pc, #32]	; (8000970 <main_f_Init_v+0x30>)
 8000950:	f004 fb7c 	bl	800504c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000954:	2108      	movs	r1, #8
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <main_f_Init_v+0x30>)
 8000958:	f004 fb78 	bl	800504c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800095c:	2100      	movs	r1, #0
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <main_f_Init_v+0x34>)
 8000960:	f004 fb74 	bl	800504c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000964:	2108      	movs	r1, #8
 8000966:	4803      	ldr	r0, [pc, #12]	; (8000974 <main_f_Init_v+0x34>)
 8000968:	f004 fb70 	bl	800504c <HAL_TIM_PWM_Start>
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200002a0 	.word	0x200002a0
 8000974:	200002e8 	.word	0x200002e8

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097c:	f000 ff02 	bl	8001784 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f834 	bl	80009ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f000 fa62 	bl	8000e4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000988:	f000 f90a 	bl	8000ba0 <MX_I2C1_Init>
  MX_ADC1_Init();
 800098c:	f000 f88c 	bl	8000aa8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000990:	f000 f8c8 	bl	8000b24 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000994:	f000 fa30 	bl	8000df8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000998:	f000 f930 	bl	8000bfc <MX_TIM1_Init>
  MX_TIM3_Init();
 800099c:	f000 f9c8 	bl	8000d30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  main_f_Init_v();
 80009a0:	f7ff ffce 	bl	8000940 <main_f_Init_v>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009a4:	f009 f86c 	bl	8009a80 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of main_task_10ms */
  main_task_10msHandle = osThreadNew(main_f_Handle10ms_v, NULL, &main_task_10ms_attributes);
 80009a8:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <main+0x5c>)
 80009aa:	2100      	movs	r1, #0
 80009ac:	480a      	ldr	r0, [pc, #40]	; (80009d8 <main+0x60>)
 80009ae:	f009 f8cd 	bl	8009b4c <osThreadNew>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a09      	ldr	r2, [pc, #36]	; (80009dc <main+0x64>)
 80009b6:	6013      	str	r3, [r2, #0]

  /* creation of main_task_1s */
  main_task_1sHandle = osThreadNew(main_f_Handle1s_v, NULL, &main_task_1s_attributes);
 80009b8:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <main+0x68>)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4809      	ldr	r0, [pc, #36]	; (80009e4 <main+0x6c>)
 80009be:	f009 f8c5 	bl	8009b4c <osThreadNew>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <main+0x70>)
 80009c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009c8:	f009 f88c 	bl	8009ae4 <osKernelStart>
 80009cc:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	0800cfdc 	.word	0x0800cfdc
 80009d8:	08000fa9 	.word	0x08000fa9
 80009dc:	20000378 	.word	0x20000378
 80009e0:	0800d000 	.word	0x0800d000
 80009e4:	08001185 	.word	0x08001185
 80009e8:	2000037c 	.word	0x2000037c

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	; 0x50
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f6:	2228      	movs	r2, #40	; 0x28
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f00c f9bc 	bl	800cd78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a30:	2302      	movs	r3, #2
 8000a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a3a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a44:	4618      	mov	r0, r3
 8000a46:	f003 fc59 	bl	80042fc <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a50:	f000 fbb6 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	230f      	movs	r3, #15
 8000a56:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a64:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	2102      	movs	r1, #2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f003 fec5 	bl	8004800 <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a7c:	f000 fba0 	bl	80011c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000a80:	2312      	movs	r3, #18
 8000a82:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a88:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4618      	mov	r0, r3
 8000a92:	f004 f875 	bl	8004b80 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a9c:	f000 fb90 	bl	80011c0 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3750      	adds	r7, #80	; 0x50
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000aba:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <MX_ADC1_Init+0x78>)
 8000abc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000ad2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ad6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad8:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000ae6:	f000 fe7f 	bl	80017e8 <HAL_ADC_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000af0:	f000 fb66 	bl	80011c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000af4:	230b      	movs	r3, #11
 8000af6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000b06:	f001 f907 	bl	8001d18 <HAL_ADC_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b10:	f000 fb56 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200001ec 	.word	0x200001ec
 8000b20:	40012400 	.word	0x40012400

08000b24 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */
  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */
  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <MX_ADC2_Init+0x74>)
 8000b36:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <MX_ADC2_Init+0x78>)
 8000b38:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_ADC2_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <MX_ADC2_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_ADC2_Init+0x74>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_ADC2_Init+0x74>)
 8000b4e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b52:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_ADC2_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_ADC2_Init+0x74>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_ADC2_Init+0x74>)
 8000b62:	f000 fe41 	bl	80017e8 <HAL_ADC_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000b6c:	f000 fb28 	bl	80011c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_ADC2_Init+0x74>)
 8000b82:	f001 f8c9 	bl	8001d18 <HAL_ADC_ConfigChannel>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000b8c:	f000 fb18 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  /* USER CODE END ADC2_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000021c 	.word	0x2000021c
 8000b9c:	40012800 	.word	0x40012800

08000ba0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <MX_I2C1_Init+0x54>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_I2C1_Init+0x58>)
 8000bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bde:	f001 fcdb 	bl	8002598 <HAL_I2C_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000be8:	f000 faea 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000024c 	.word	0x2000024c
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	000186a0 	.word	0x000186a0

08000bfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b092      	sub	sp, #72	; 0x48
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
 8000c1c:	615a      	str	r2, [r3, #20]
 8000c1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2220      	movs	r2, #32
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f00c f8a6 	bl	800cd78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c2c:	4b3e      	ldr	r3, [pc, #248]	; (8000d28 <MX_TIM1_Init+0x12c>)
 8000c2e:	4a3f      	ldr	r2, [pc, #252]	; (8000d2c <MX_TIM1_Init+0x130>)
 8000c30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000c32:	4b3d      	ldr	r3, [pc, #244]	; (8000d28 <MX_TIM1_Init+0x12c>)
 8000c34:	220f      	movs	r2, #15
 8000c36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c38:	4b3b      	ldr	r3, [pc, #236]	; (8000d28 <MX_TIM1_Init+0x12c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000c3e:	4b3a      	ldr	r3, [pc, #232]	; (8000d28 <MX_TIM1_Init+0x12c>)
 8000c40:	2263      	movs	r2, #99	; 0x63
 8000c42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c44:	4b38      	ldr	r3, [pc, #224]	; (8000d28 <MX_TIM1_Init+0x12c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c4a:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <MX_TIM1_Init+0x12c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c50:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <MX_TIM1_Init+0x12c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c56:	4834      	ldr	r0, [pc, #208]	; (8000d28 <MX_TIM1_Init+0x12c>)
 8000c58:	f004 f9a8 	bl	8004fac <HAL_TIM_PWM_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000c62:	f000 faad 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c72:	4619      	mov	r1, r3
 8000c74:	482c      	ldr	r0, [pc, #176]	; (8000d28 <MX_TIM1_Init+0x12c>)
 8000c76:	f004 fe87 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000c80:	f000 fa9e 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c84:	2360      	movs	r3, #96	; 0x60
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	481f      	ldr	r0, [pc, #124]	; (8000d28 <MX_TIM1_Init+0x12c>)
 8000caa:	f004 fb79 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000cb4:	f000 fa84 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4819      	ldr	r0, [pc, #100]	; (8000d28 <MX_TIM1_Init+0x12c>)
 8000cc2:	f004 fb6d 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000ccc:	f000 fa78 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4813      	ldr	r0, [pc, #76]	; (8000d28 <MX_TIM1_Init+0x12c>)
 8000cda:	f004 fb61 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000ce4:	f000 fa6c 	bl	80011c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4807      	ldr	r0, [pc, #28]	; (8000d28 <MX_TIM1_Init+0x12c>)
 8000d0c:	f004 fe9a 	bl	8005a44 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000d16:	f000 fa53 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d1a:	4803      	ldr	r0, [pc, #12]	; (8000d28 <MX_TIM1_Init+0x12c>)
 8000d1c:	f000 fb78 	bl	8001410 <HAL_TIM_MspPostInit>

}
 8000d20:	bf00      	nop
 8000d22:	3748      	adds	r7, #72	; 0x48
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200002a0 	.word	0x200002a0
 8000d2c:	40012c00 	.word	0x40012c00

08000d30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	615a      	str	r2, [r3, #20]
 8000d50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d52:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <MX_TIM3_Init+0xc0>)
 8000d54:	4a27      	ldr	r2, [pc, #156]	; (8000df4 <MX_TIM3_Init+0xc4>)
 8000d56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000d58:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <MX_TIM3_Init+0xc0>)
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5e:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <MX_TIM3_Init+0xc0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <MX_TIM3_Init+0xc0>)
 8000d66:	2263      	movs	r2, #99	; 0x63
 8000d68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <MX_TIM3_Init+0xc0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <MX_TIM3_Init+0xc0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d76:	481e      	ldr	r0, [pc, #120]	; (8000df0 <MX_TIM3_Init+0xc0>)
 8000d78:	f004 f918 	bl	8004fac <HAL_TIM_PWM_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000d82:	f000 fa1d 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d8e:	f107 0320 	add.w	r3, r7, #32
 8000d92:	4619      	mov	r1, r3
 8000d94:	4816      	ldr	r0, [pc, #88]	; (8000df0 <MX_TIM3_Init+0xc0>)
 8000d96:	f004 fdf7 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000da0:	f000 fa0e 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da4:	2360      	movs	r3, #96	; 0x60
 8000da6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	4619      	mov	r1, r3
 8000dba:	480d      	ldr	r0, [pc, #52]	; (8000df0 <MX_TIM3_Init+0xc0>)
 8000dbc:	f004 faf0 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000dc6:	f000 f9fb 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2208      	movs	r2, #8
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4807      	ldr	r0, [pc, #28]	; (8000df0 <MX_TIM3_Init+0xc0>)
 8000dd2:	f004 fae5 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ddc:	f000 f9f0 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000de0:	4803      	ldr	r0, [pc, #12]	; (8000df0 <MX_TIM3_Init+0xc0>)
 8000de2:	f000 fb15 	bl	8001410 <HAL_TIM_MspPostInit>

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	; 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200002e8 	.word	0x200002e8
 8000df4:	40000400 	.word	0x40000400

08000df8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <MX_USART3_UART_Init+0x50>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e30:	f004 fe6b 	bl	8005b0a <HAL_UART_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e3a:	f000 f9c1 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000330 	.word	0x20000330
 8000e48:	40004800 	.word	0x40004800

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e60:	4b4d      	ldr	r3, [pc, #308]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a4c      	ldr	r2, [pc, #304]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e66:	f043 0320 	orr.w	r3, r3, #32
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b4a      	ldr	r3, [pc, #296]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0320 	and.w	r3, r3, #32
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e78:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a46      	ldr	r2, [pc, #280]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b44      	ldr	r3, [pc, #272]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b41      	ldr	r3, [pc, #260]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a40      	ldr	r2, [pc, #256]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b3e      	ldr	r3, [pc, #248]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a3a      	ldr	r2, [pc, #232]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HAPTIC_EN_GPIO_Port, HAPTIC_EN_Pin, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4835      	ldr	r0, [pc, #212]	; (8000f9c <MX_GPIO_Init+0x150>)
 8000ec6:	f001 fb36 	bl	8002536 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_01_EN_GPIO_Port, MOTOR_01_EN_Pin, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2120      	movs	r1, #32
 8000ece:	4834      	ldr	r0, [pc, #208]	; (8000fa0 <MX_GPIO_Init+0x154>)
 8000ed0:	f001 fb31 	bl	8002536 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_02_EN_Pin|MOTOR_03_EN_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f240 4102 	movw	r1, #1026	; 0x402
 8000eda:	4832      	ldr	r0, [pc, #200]	; (8000fa4 <MX_GPIO_Init+0x158>)
 8000edc:	f001 fb2b 	bl	8002536 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HAPTIC_01_DIR_Pin|HAPTIC_02_DIR_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f24a 0160 	movw	r1, #41056	; 0xa060
 8000ee6:	482f      	ldr	r0, [pc, #188]	; (8000fa4 <MX_GPIO_Init+0x158>)
 8000ee8:	f001 fb25 	bl	8002536 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_01_DIR_Pin|MOTOR_02_DIR_Pin, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000ef2:	482b      	ldr	r0, [pc, #172]	; (8000fa0 <MX_GPIO_Init+0x154>)
 8000ef4:	f001 fb1f 	bl	8002536 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_03_DIR_GPIO_Port, MOTOR_03_DIR_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efe:	4827      	ldr	r0, [pc, #156]	; (8000f9c <MX_GPIO_Init+0x150>)
 8000f00:	f001 fb19 	bl	8002536 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HAPTIC_EN_Pin MOTOR_03_DIR_Pin */
  GPIO_InitStruct.Pin = HAPTIC_EN_Pin|MOTOR_03_DIR_Pin;
 8000f04:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481f      	ldr	r0, [pc, #124]	; (8000f9c <MX_GPIO_Init+0x150>)
 8000f1e:	f001 f96f 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : HAPTIC_FAULT_Pin */
  GPIO_InitStruct.Pin = HAPTIC_FAULT_Pin;
 8000f22:	2310      	movs	r3, #16
 8000f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HAPTIC_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	4619      	mov	r1, r3
 8000f34:	481a      	ldr	r0, [pc, #104]	; (8000fa0 <MX_GPIO_Init+0x154>)
 8000f36:	f001 f963 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_01_EN_Pin MOTOR_01_DIR_Pin MOTOR_02_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_01_EN_Pin|MOTOR_01_DIR_Pin|MOTOR_02_DIR_Pin;
 8000f3a:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	4619      	mov	r1, r3
 8000f52:	4813      	ldr	r0, [pc, #76]	; (8000fa0 <MX_GPIO_Init+0x154>)
 8000f54:	f001 f954 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_01_FAULT_Pin MOTOR_02_FAULT_Pin MOTOR_03_FAULT_Pin BTN_01_Pin */
  GPIO_InitStruct.Pin = MOTOR_01_FAULT_Pin|MOTOR_02_FAULT_Pin|MOTOR_03_FAULT_Pin|BTN_01_Pin;
 8000f58:	f640 0385 	movw	r3, #2181	; 0x885
 8000f5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_GPIO_Init+0x158>)
 8000f6e:	f001 f947 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_02_EN_Pin MOTOR_03_EN_Pin HAPTIC_01_DIR_Pin HAPTIC_02_DIR_Pin
                           LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = MOTOR_02_EN_Pin|MOTOR_03_EN_Pin|HAPTIC_01_DIR_Pin|HAPTIC_02_DIR_Pin
 8000f72:	f24a 4362 	movw	r3, #42082	; 0xa462
 8000f76:	613b      	str	r3, [r7, #16]
                          |LED_01_Pin|LED_02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_GPIO_Init+0x158>)
 8000f8c:	f001 f938 	bl	8002200 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	40011000 	.word	0x40011000
 8000fa4:	40010c00 	.word	0x40010c00

08000fa8 <main_f_Handle10ms_v>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_main_f_Handle10ms_v */
void main_f_Handle10ms_v(void *argument)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000fb0:	f00b fa6c 	bl	800c48c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  uint32_t last_10ms = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  uint32_t my_pot = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  double my_pwm = 0;
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    // batt_f_Handle_v();
    // motor_f_Handle_v();

    /* All of this should be moved to separate drivers... */
    /* Firstly, ignore everything unless 10ms has passed, and it's our time to work */
    if(HAL_GetTick() - last_10ms > (10-1))
 8000fc8:	f000 fc04 	bl	80017d4 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b09      	cmp	r3, #9
 8000fd4:	f240 80c0 	bls.w	8001158 <main_f_Handle10ms_v+0x1b0>
    {
      last_10ms = HAL_GetTick();
 8000fd8:	f000 fbfc 	bl	80017d4 <HAL_GetTick>
 8000fdc:	6178      	str	r0, [r7, #20]

      /* All the motors are ENABLED by default (configured HIGH by default) */
      /* Get pot value */
      HAL_ADC_Start(&hadc2);
 8000fde:	4862      	ldr	r0, [pc, #392]	; (8001168 <main_f_Handle10ms_v+0x1c0>)
 8000fe0:	f000 fcda 	bl	8001998 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	485f      	ldr	r0, [pc, #380]	; (8001168 <main_f_Handle10ms_v+0x1c0>)
 8000fea:	f000 fd83 	bl	8001af4 <HAL_ADC_PollForConversion>
      my_pot = HAL_ADC_GetValue(&hadc2);
 8000fee:	485e      	ldr	r0, [pc, #376]	; (8001168 <main_f_Handle10ms_v+0x1c0>)
 8000ff0:	f000 fe86 	bl	8001d00 <HAL_ADC_GetValue>
 8000ff4:	6138      	str	r0, [r7, #16]

      /* Set DIR for all motors to given value (from button) */
      /* And PWM for all motors to given value (from potentiometer) */
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET)
 8000ff6:	2180      	movs	r1, #128	; 0x80
 8000ff8:	485c      	ldr	r0, [pc, #368]	; (800116c <main_f_Handle10ms_v+0x1c4>)
 8000ffa:	f001 fa85 	bl	8002508 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d151      	bne.n	80010a8 <main_f_Handle10ms_v+0x100>
      {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100a:	4859      	ldr	r0, [pc, #356]	; (8001170 <main_f_Handle10ms_v+0x1c8>)
 800100c:	f001 fa93 	bl	8002536 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001016:	4855      	ldr	r0, [pc, #340]	; (800116c <main_f_Handle10ms_v+0x1c4>)
 8001018:	f001 fa8d 	bl	8002536 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001022:	4852      	ldr	r0, [pc, #328]	; (800116c <main_f_Handle10ms_v+0x1c4>)
 8001024:	f001 fa87 	bl	8002536 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	4851      	ldr	r0, [pc, #324]	; (8001174 <main_f_Handle10ms_v+0x1cc>)
 800102e:	f001 fa82 	bl	8002536 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001038:	484e      	ldr	r0, [pc, #312]	; (8001174 <main_f_Handle10ms_v+0x1cc>)
 800103a:	f001 fa7c 	bl	8002536 <HAL_GPIO_WritePin>

        my_pwm = (double)my_pot / 40.96;
 800103e:	6938      	ldr	r0, [r7, #16]
 8001040:	f7ff f9c8 	bl	80003d4 <__aeabi_ui2d>
 8001044:	a346      	add	r3, pc, #280	; (adr r3, 8001160 <main_f_Handle10ms_v+0x1b8>)
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	f7ff fb67 	bl	800071c <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	e9c7 2302 	strd	r2, r3, [r7, #8]
        TIM1->CCR1 = (uint16_t)my_pwm;
 8001056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800105a:	f7ff fc47 	bl	80008ec <__aeabi_d2uiz>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	4b45      	ldr	r3, [pc, #276]	; (8001178 <main_f_Handle10ms_v+0x1d0>)
 8001064:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR2 = (uint16_t)my_pwm;
 8001066:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800106a:	f7ff fc3f 	bl	80008ec <__aeabi_d2uiz>
 800106e:	4603      	mov	r3, r0
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b41      	ldr	r3, [pc, #260]	; (8001178 <main_f_Handle10ms_v+0x1d0>)
 8001074:	639a      	str	r2, [r3, #56]	; 0x38
        TIM1->CCR3 = (uint16_t)my_pwm;
 8001076:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800107a:	f7ff fc37 	bl	80008ec <__aeabi_d2uiz>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b3d      	ldr	r3, [pc, #244]	; (8001178 <main_f_Handle10ms_v+0x1d0>)
 8001084:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM3->CCR1 = (uint16_t)my_pwm;
 8001086:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800108a:	f7ff fc2f 	bl	80008ec <__aeabi_d2uiz>
 800108e:	4603      	mov	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <main_f_Handle10ms_v+0x1d4>)
 8001094:	635a      	str	r2, [r3, #52]	; 0x34
        TIM3->CCR3 = (uint16_t)my_pwm;
 8001096:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800109a:	f7ff fc27 	bl	80008ec <__aeabi_d2uiz>
 800109e:	4603      	mov	r3, r0
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b36      	ldr	r3, [pc, #216]	; (800117c <main_f_Handle10ms_v+0x1d4>)
 80010a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80010a6:	e057      	b.n	8001158 <main_f_Handle10ms_v+0x1b0>
      }
      else
      {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ae:	4830      	ldr	r0, [pc, #192]	; (8001170 <main_f_Handle10ms_v+0x1c8>)
 80010b0:	f001 fa41 	bl	8002536 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ba:	482c      	ldr	r0, [pc, #176]	; (800116c <main_f_Handle10ms_v+0x1c4>)
 80010bc:	f001 fa3b 	bl	8002536 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c6:	4829      	ldr	r0, [pc, #164]	; (800116c <main_f_Handle10ms_v+0x1c4>)
 80010c8:	f001 fa35 	bl	8002536 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	4828      	ldr	r0, [pc, #160]	; (8001174 <main_f_Handle10ms_v+0x1cc>)
 80010d2:	f001 fa30 	bl	8002536 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010dc:	4825      	ldr	r0, [pc, #148]	; (8001174 <main_f_Handle10ms_v+0x1cc>)
 80010de:	f001 fa2a 	bl	8002536 <HAL_GPIO_WritePin>

        my_pwm = 100.0 - (double)my_pot / 40.96;
 80010e2:	6938      	ldr	r0, [r7, #16]
 80010e4:	f7ff f976 	bl	80003d4 <__aeabi_ui2d>
 80010e8:	a31d      	add	r3, pc, #116	; (adr r3, 8001160 <main_f_Handle10ms_v+0x1b8>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fb15 	bl	800071c <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4921      	ldr	r1, [pc, #132]	; (8001180 <main_f_Handle10ms_v+0x1d8>)
 80010fc:	f7ff f82c 	bl	8000158 <__aeabi_dsub>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	e9c7 2302 	strd	r2, r3, [r7, #8]
        TIM1->CCR1 = (uint16_t)my_pwm;
 8001108:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800110c:	f7ff fbee 	bl	80008ec <__aeabi_d2uiz>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <main_f_Handle10ms_v+0x1d0>)
 8001116:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR2 = (uint16_t)my_pwm;
 8001118:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800111c:	f7ff fbe6 	bl	80008ec <__aeabi_d2uiz>
 8001120:	4603      	mov	r3, r0
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <main_f_Handle10ms_v+0x1d0>)
 8001126:	639a      	str	r2, [r3, #56]	; 0x38
        TIM1->CCR3 = (uint16_t)my_pwm;
 8001128:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800112c:	f7ff fbde 	bl	80008ec <__aeabi_d2uiz>
 8001130:	4603      	mov	r3, r0
 8001132:	b29a      	uxth	r2, r3
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <main_f_Handle10ms_v+0x1d0>)
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM3->CCR1 = (uint16_t)my_pwm;
 8001138:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800113c:	f7ff fbd6 	bl	80008ec <__aeabi_d2uiz>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <main_f_Handle10ms_v+0x1d4>)
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
        TIM3->CCR3 = (uint16_t)my_pwm;
 8001148:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800114c:	f7ff fbce 	bl	80008ec <__aeabi_d2uiz>
 8001150:	4603      	mov	r3, r0
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <main_f_Handle10ms_v+0x1d4>)
 8001156:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Wait 1ms to let other tasks do their thing! */
    osDelay(1);
 8001158:	2001      	movs	r0, #1
 800115a:	f008 fda1 	bl	8009ca0 <osDelay>
    if(HAL_GetTick() - last_10ms > (10-1))
 800115e:	e733      	b.n	8000fc8 <main_f_Handle10ms_v+0x20>
 8001160:	47ae147b 	.word	0x47ae147b
 8001164:	40447ae1 	.word	0x40447ae1
 8001168:	2000021c 	.word	0x2000021c
 800116c:	40010c00 	.word	0x40010c00
 8001170:	40010800 	.word	0x40010800
 8001174:	40011000 	.word	0x40011000
 8001178:	40012c00 	.word	0x40012c00
 800117c:	40000400 	.word	0x40000400
 8001180:	40590000 	.word	0x40590000

08001184 <main_f_Handle1s_v>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_main_f_Handle1s_v */
void main_f_Handle1s_v(void *argument)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN main_f_Handle1s_v */
  /* Infinite loop */
  for(;;)
  {
    led_f_Handle_v();
 800118c:	f7ff fbce 	bl	800092c <led_f_Handle_v>
    osDelay(1000);
 8001190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001194:	f008 fd84 	bl	8009ca0 <osDelay>
    led_f_Handle_v();
 8001198:	e7f8      	b.n	800118c <main_f_Handle1s_v+0x8>
	...

0800119c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d101      	bne.n	80011b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ae:	f000 faff 	bl	80017b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40000800 	.word	0x40000800

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>
	...

080011cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_MspInit+0x68>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4a17      	ldr	r2, [pc, #92]	; (8001234 <HAL_MspInit+0x68>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6193      	str	r3, [r2, #24]
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_MspInit+0x68>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_MspInit+0x68>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <HAL_MspInit+0x68>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_MspInit+0x68>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	210f      	movs	r1, #15
 8001206:	f06f 0001 	mvn.w	r0, #1
 800120a:	f000 ffce 	bl	80021aa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_MspInit+0x6c>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_MspInit+0x6c>)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	40010000 	.word	0x40010000

0800123c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <HAL_ADC_MspInit+0xbc>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d122      	bne.n	80012a2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <HAL_ADC_MspInit+0xc0>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_ADC_MspInit+0xc0>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_ADC_MspInit+0xc0>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <HAL_ADC_MspInit+0xc0>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a20      	ldr	r2, [pc, #128]	; (80012fc <HAL_ADC_MspInit+0xc0>)
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_ADC_MspInit+0xc0>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = BATT_SENSE_Pin|HALL_SENSE_01_Pin|HALL_SENSE_02_Pin|HALL_SENSE_03_Pin;
 800128c:	230f      	movs	r3, #15
 800128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001290:	2303      	movs	r3, #3
 8001292:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	4619      	mov	r1, r3
 800129a:	4819      	ldr	r0, [pc, #100]	; (8001300 <HAL_ADC_MspInit+0xc4>)
 800129c:	f000 ffb0 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80012a0:	e026      	b.n	80012f0 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_ADC_MspInit+0xc8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d121      	bne.n	80012f0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_ADC_MspInit+0xc0>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <HAL_ADC_MspInit+0xc0>)
 80012b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_ADC_MspInit+0xc0>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <HAL_ADC_MspInit+0xc0>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <HAL_ADC_MspInit+0xc0>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_ADC_MspInit+0xc0>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TRIM_POT_01_Pin|TRIM_POT_02_Pin|EMG_01_Pin|EMG_02_Pin;
 80012dc:	231e      	movs	r3, #30
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e0:	2303      	movs	r3, #3
 80012e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0318 	add.w	r3, r7, #24
 80012e8:	4619      	mov	r1, r3
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <HAL_ADC_MspInit+0xcc>)
 80012ec:	f000 ff88 	bl	8002200 <HAL_GPIO_Init>
}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40012400 	.word	0x40012400
 80012fc:	40021000 	.word	0x40021000
 8001300:	40011000 	.word	0x40011000
 8001304:	40012800 	.word	0x40012800
 8001308:	40010800 	.word	0x40010800

0800130c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a1d      	ldr	r2, [pc, #116]	; (800139c <HAL_I2C_MspInit+0x90>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d132      	bne.n	8001392 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <HAL_I2C_MspInit+0x94>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <HAL_I2C_MspInit+0x94>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_I2C_MspInit+0x94>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001344:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134a:	2312      	movs	r3, #18
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <HAL_I2C_MspInit+0x98>)
 800135a:	f000 ff51 	bl	8002200 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_I2C_MspInit+0x9c>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
 8001374:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <HAL_I2C_MspInit+0x9c>)
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_I2C_MspInit+0x94>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_I2C_MspInit+0x94>)
 8001380:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_I2C_MspInit+0x94>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40005400 	.word	0x40005400
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010c00 	.word	0x40010c00
 80013a8:	40010000 	.word	0x40010000

080013ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a12      	ldr	r2, [pc, #72]	; (8001404 <HAL_TIM_PWM_MspInit+0x58>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d10c      	bne.n	80013d8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_TIM_PWM_MspInit+0x5c>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	4a11      	ldr	r2, [pc, #68]	; (8001408 <HAL_TIM_PWM_MspInit+0x5c>)
 80013c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013c8:	6193      	str	r3, [r2, #24]
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_TIM_PWM_MspInit+0x5c>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013d6:	e010      	b.n	80013fa <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_TIM_PWM_MspInit+0x60>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10b      	bne.n	80013fa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_TIM_PWM_MspInit+0x5c>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_TIM_PWM_MspInit+0x5c>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_TIM_PWM_MspInit+0x5c>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	40012c00 	.word	0x40012c00
 8001408:	40021000 	.word	0x40021000
 800140c:	40000400 	.word	0x40000400

08001410 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a35      	ldr	r2, [pc, #212]	; (8001500 <HAL_TIM_MspPostInit+0xf0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d132      	bne.n	8001496 <HAL_TIM_MspPostInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001430:	4b34      	ldr	r3, [pc, #208]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a33      	ldr	r2, [pc, #204]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b31      	ldr	r3, [pc, #196]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a2d      	ldr	r2, [pc, #180]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HAPTIC_01_PWM_Pin;
 8001460:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2302      	movs	r3, #2
 800146c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HAPTIC_01_PWM_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4824      	ldr	r0, [pc, #144]	; (8001508 <HAL_TIM_MspPostInit+0xf8>)
 8001476:	f000 fec3 	bl	8002200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_02_PWM_Pin|MOTOR_03_PWM_Pin;
 800147a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2302      	movs	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	481f      	ldr	r0, [pc, #124]	; (800150c <HAL_TIM_MspPostInit+0xfc>)
 8001490:	f000 feb6 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001494:	e02f      	b.n	80014f6 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <HAL_TIM_MspPostInit+0x100>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d12a      	bne.n	80014f6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HAPTIC_02_PWM_Pin|MOTOR_01_PWM_Pin;
 80014b8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2302      	movs	r3, #2
 80014c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4811      	ldr	r0, [pc, #68]	; (8001514 <HAL_TIM_MspPostInit+0x104>)
 80014ce:	f000 fe97 	bl	8002200 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_TIM_MspPostInit+0x108>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
 80014f0:	4a09      	ldr	r2, [pc, #36]	; (8001518 <HAL_TIM_MspPostInit+0x108>)
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	6053      	str	r3, [r2, #4]
}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40012c00 	.word	0x40012c00
 8001504:	40021000 	.word	0x40021000
 8001508:	40010c00 	.word	0x40010c00
 800150c:	40010800 	.word	0x40010800
 8001510:	40000400 	.word	0x40000400
 8001514:	40011000 	.word	0x40011000
 8001518:	40010000 	.word	0x40010000

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a25      	ldr	r2, [pc, #148]	; (80015cc <HAL_UART_MspInit+0xb0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d143      	bne.n	80015c4 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800153c:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <HAL_UART_MspInit+0xb4>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	4a23      	ldr	r2, [pc, #140]	; (80015d0 <HAL_UART_MspInit+0xb4>)
 8001542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001546:	61d3      	str	r3, [r2, #28]
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <HAL_UART_MspInit+0xb4>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <HAL_UART_MspInit+0xb4>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_UART_MspInit+0xb4>)
 800155a:	f043 0310 	orr.w	r3, r3, #16
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_UART_MspInit+0xb4>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800156c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4814      	ldr	r0, [pc, #80]	; (80015d4 <HAL_UART_MspInit+0xb8>)
 8001582:	f000 fe3d 	bl	8002200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001586:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800158a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	480e      	ldr	r0, [pc, #56]	; (80015d4 <HAL_UART_MspInit+0xb8>)
 800159c:	f000 fe30 	bl	8002200 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_UART_MspInit+0xbc>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	f043 0310 	orr.w	r3, r3, #16
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
 80015be:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <HAL_UART_MspInit+0xbc>)
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40004800 	.word	0x40004800
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40011000 	.word	0x40011000
 80015d8:	40010000 	.word	0x40010000

080015dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08e      	sub	sp, #56	; 0x38
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80015f2:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <HAL_InitTick+0xe8>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a33      	ldr	r2, [pc, #204]	; (80016c4 <HAL_InitTick+0xe8>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_InitTick+0xe8>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800160a:	f107 0210 	add.w	r2, r7, #16
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f003 fa65 	bl	8004ae4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800161e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001620:	2b00      	cmp	r3, #0
 8001622:	d103      	bne.n	800162c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001624:	f003 fa36 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 8001628:	6378      	str	r0, [r7, #52]	; 0x34
 800162a:	e004      	b.n	8001636 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800162c:	f003 fa32 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 8001630:	4603      	mov	r3, r0
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001638:	4a23      	ldr	r2, [pc, #140]	; (80016c8 <HAL_InitTick+0xec>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0c9b      	lsrs	r3, r3, #18
 8001640:	3b01      	subs	r3, #1
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_InitTick+0xf0>)
 8001646:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <HAL_InitTick+0xf4>)
 8001648:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_InitTick+0xf0>)
 800164c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001650:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001652:	4a1e      	ldr	r2, [pc, #120]	; (80016cc <HAL_InitTick+0xf0>)
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001656:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <HAL_InitTick+0xf0>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_InitTick+0xf0>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_InitTick+0xf0>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800166a:	4818      	ldr	r0, [pc, #96]	; (80016cc <HAL_InitTick+0xf0>)
 800166c:	f003 fbf4 	bl	8004e58 <HAL_TIM_Base_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001676:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800167a:	2b00      	cmp	r3, #0
 800167c:	d11b      	bne.n	80016b6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800167e:	4813      	ldr	r0, [pc, #76]	; (80016cc <HAL_InitTick+0xf0>)
 8001680:	f003 fc42 	bl	8004f08 <HAL_TIM_Base_Start_IT>
 8001684:	4603      	mov	r3, r0
 8001686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800168a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800168e:	2b00      	cmp	r3, #0
 8001690:	d111      	bne.n	80016b6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001692:	201e      	movs	r0, #30
 8001694:	f000 fda5 	bl	80021e2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b0f      	cmp	r3, #15
 800169c:	d808      	bhi.n	80016b0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800169e:	2200      	movs	r2, #0
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	201e      	movs	r0, #30
 80016a4:	f000 fd81 	bl	80021aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a8:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_InitTick+0xf8>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e002      	b.n	80016b6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3738      	adds	r7, #56	; 0x38
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	431bde83 	.word	0x431bde83
 80016cc:	20000380 	.word	0x20000380
 80016d0:	40000800 	.word	0x40000800
 80016d4:	20000004 	.word	0x20000004

080016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <NMI_Handler+0x4>

080016de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <MemManage_Handler+0x4>

080016ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
	...

08001704 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800170a:	f001 f9ae 	bl	8002a6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20002a74 	.word	0x20002a74

08001718 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <TIM4_IRQHandler+0x10>)
 800171e:	f003 fd37 	bl	8005190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000380 	.word	0x20000380

0800172c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001738:	f7ff fff8 	bl	800172c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480b      	ldr	r0, [pc, #44]	; (800176c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800173e:	490c      	ldr	r1, [pc, #48]	; (8001770 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001740:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001754:	4c09      	ldr	r4, [pc, #36]	; (800177c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001762:	f00b fb67 	bl	800ce34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001766:	f7ff f907 	bl	8000978 <main>
  bx lr
 800176a:	4770      	bx	lr
  ldr r0, =_sdata
 800176c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001770:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001774:	0800d06c 	.word	0x0800d06c
  ldr r2, =_sbss
 8001778:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 800177c:	200030c4 	.word	0x200030c4

08001780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC1_2_IRQHandler>
	...

08001784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_Init+0x28>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <HAL_Init+0x28>)
 800178e:	f043 0310 	orr.w	r3, r3, #16
 8001792:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001794:	2003      	movs	r0, #3
 8001796:	f000 fcfd 	bl	8002194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179a:	200f      	movs	r0, #15
 800179c:	f7ff ff1e 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a0:	f7ff fd14 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40022000 	.word	0x40022000

080017b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_IncTick+0x1c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_IncTick+0x20>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a03      	ldr	r2, [pc, #12]	; (80017d0 <HAL_IncTick+0x20>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	20000008 	.word	0x20000008
 80017d0:	200003c8 	.word	0x200003c8

080017d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <HAL_GetTick+0x10>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	200003c8 	.word	0x200003c8

080017e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0be      	b.n	8001988 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fd08 	bl	800123c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 fbc5 	bl	8001fbc <ADC_ConversionStop_Disable>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 8099 	bne.w	8001976 <HAL_ADC_Init+0x18e>
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f040 8095 	bne.w	8001976 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001854:	f023 0302 	bic.w	r3, r3, #2
 8001858:	f043 0202 	orr.w	r2, r3, #2
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001868:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7b1b      	ldrb	r3, [r3, #12]
 800186e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001870:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	4313      	orrs	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001880:	d003      	beq.n	800188a <HAL_ADC_Init+0xa2>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d102      	bne.n	8001890 <HAL_ADC_Init+0xa8>
 800188a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800188e:	e000      	b.n	8001892 <HAL_ADC_Init+0xaa>
 8001890:	2300      	movs	r3, #0
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7d1b      	ldrb	r3, [r3, #20]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d119      	bne.n	80018d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7b1b      	ldrb	r3, [r3, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d109      	bne.n	80018bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	035a      	lsls	r2, r3, #13
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	e00b      	b.n	80018d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	f043 0220 	orr.w	r2, r3, #32
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	f043 0201 	orr.w	r2, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	4b28      	ldr	r3, [pc, #160]	; (8001990 <HAL_ADC_Init+0x1a8>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	430b      	orrs	r3, r1
 80018fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001904:	d003      	beq.n	800190e <HAL_ADC_Init+0x126>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d104      	bne.n	8001918 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	3b01      	subs	r3, #1
 8001914:	051b      	lsls	r3, r3, #20
 8001916:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	430a      	orrs	r2, r1
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_ADC_Init+0x1ac>)
 8001934:	4013      	ands	r3, r2
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	429a      	cmp	r2, r3
 800193a:	d10b      	bne.n	8001954 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	f023 0303 	bic.w	r3, r3, #3
 800194a:	f043 0201 	orr.w	r2, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001952:	e018      	b.n	8001986 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	f023 0312 	bic.w	r3, r3, #18
 800195c:	f043 0210 	orr.w	r2, r3, #16
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001974:	e007      	b.n	8001986 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	f043 0210 	orr.w	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001986:	7dfb      	ldrb	r3, [r7, #23]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	ffe1f7fd 	.word	0xffe1f7fd
 8001994:	ff1f0efe 	.word	0xff1f0efe

08001998 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_Start+0x1a>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e098      	b.n	8001ae4 <HAL_ADC_Start+0x14c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 faa4 	bl	8001f08 <ADC_Enable>
 80019c0:	4603      	mov	r3, r0
 80019c2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f040 8087 	bne.w	8001ada <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a41      	ldr	r2, [pc, #260]	; (8001aec <HAL_ADC_Start+0x154>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d105      	bne.n	80019f6 <HAL_ADC_Start+0x5e>
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_ADC_Start+0x158>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d115      	bne.n	8001a22 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d026      	beq.n	8001a5e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a20:	e01d      	b.n	8001a5e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a2f      	ldr	r2, [pc, #188]	; (8001af0 <HAL_ADC_Start+0x158>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d004      	beq.n	8001a42 <HAL_ADC_Start+0xaa>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a2b      	ldr	r2, [pc, #172]	; (8001aec <HAL_ADC_Start+0x154>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10d      	bne.n	8001a5e <HAL_ADC_Start+0xc6>
 8001a42:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_ADC_Start+0x158>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	f023 0206 	bic.w	r2, r3, #6
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a76:	e002      	b.n	8001a7e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f06f 0202 	mvn.w	r2, #2
 8001a8e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a9a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a9e:	d113      	bne.n	8001ac8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001aa4:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_ADC_Start+0x154>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d105      	bne.n	8001ab6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_ADC_Start+0x158>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d108      	bne.n	8001ac8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	e00c      	b.n	8001ae2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	e003      	b.n	8001ae2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40012800 	.word	0x40012800
 8001af0:	40012400 	.word	0x40012400

08001af4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b0a:	f7ff fe63 	bl	80017d4 <HAL_GetTick>
 8001b0e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	f043 0220 	orr.w	r2, r3, #32
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0d3      	b.n	8001cde <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d131      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d12a      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b52:	e021      	b.n	8001b98 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5a:	d01d      	beq.n	8001b98 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_ADC_PollForConversion+0x7e>
 8001b62:	f7ff fe37 	bl	80017d4 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d212      	bcs.n	8001b98 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10b      	bne.n	8001b98 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	f043 0204 	orr.w	r2, r3, #4
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e0a2      	b.n	8001cde <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0d6      	beq.n	8001b54 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ba6:	e070      	b.n	8001c8a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ba8:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <HAL_ADC_PollForConversion+0x1f4>)
 8001baa:	681c      	ldr	r4, [r3, #0]
 8001bac:	2002      	movs	r0, #2
 8001bae:	f003 f89d 	bl	8004cec <HAL_RCCEx_GetPeriphCLKFreq>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6919      	ldr	r1, [r3, #16]
 8001bbe:	4b4b      	ldr	r3, [pc, #300]	; (8001cec <HAL_ADC_PollForConversion+0x1f8>)
 8001bc0:	400b      	ands	r3, r1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d118      	bne.n	8001bf8 <HAL_ADC_PollForConversion+0x104>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68d9      	ldr	r1, [r3, #12]
 8001bcc:	4b48      	ldr	r3, [pc, #288]	; (8001cf0 <HAL_ADC_PollForConversion+0x1fc>)
 8001bce:	400b      	ands	r3, r1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d111      	bne.n	8001bf8 <HAL_ADC_PollForConversion+0x104>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6919      	ldr	r1, [r3, #16]
 8001bda:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <HAL_ADC_PollForConversion+0x200>)
 8001bdc:	400b      	ands	r3, r1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d108      	bne.n	8001bf4 <HAL_ADC_PollForConversion+0x100>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68d9      	ldr	r1, [r3, #12]
 8001be8:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <HAL_ADC_PollForConversion+0x204>)
 8001bea:	400b      	ands	r3, r1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_PollForConversion+0x100>
 8001bf0:	2314      	movs	r3, #20
 8001bf2:	e020      	b.n	8001c36 <HAL_ADC_PollForConversion+0x142>
 8001bf4:	2329      	movs	r3, #41	; 0x29
 8001bf6:	e01e      	b.n	8001c36 <HAL_ADC_PollForConversion+0x142>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6919      	ldr	r1, [r3, #16]
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <HAL_ADC_PollForConversion+0x200>)
 8001c00:	400b      	ands	r3, r1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_ADC_PollForConversion+0x120>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68d9      	ldr	r1, [r3, #12]
 8001c0c:	4b3a      	ldr	r3, [pc, #232]	; (8001cf8 <HAL_ADC_PollForConversion+0x204>)
 8001c0e:	400b      	ands	r3, r1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00d      	beq.n	8001c30 <HAL_ADC_PollForConversion+0x13c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6919      	ldr	r1, [r3, #16]
 8001c1a:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <HAL_ADC_PollForConversion+0x208>)
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d108      	bne.n	8001c34 <HAL_ADC_PollForConversion+0x140>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68d9      	ldr	r1, [r3, #12]
 8001c28:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <HAL_ADC_PollForConversion+0x208>)
 8001c2a:	400b      	ands	r3, r1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_PollForConversion+0x140>
 8001c30:	2354      	movs	r3, #84	; 0x54
 8001c32:	e000      	b.n	8001c36 <HAL_ADC_PollForConversion+0x142>
 8001c34:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c3c:	e021      	b.n	8001c82 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c44:	d01a      	beq.n	8001c7c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d007      	beq.n	8001c5c <HAL_ADC_PollForConversion+0x168>
 8001c4c:	f7ff fdc2 	bl	80017d4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d20f      	bcs.n	8001c7c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d90b      	bls.n	8001c7c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	f043 0204 	orr.w	r2, r3, #4
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e030      	b.n	8001cde <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d8d9      	bhi.n	8001c3e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f06f 0212 	mvn.w	r2, #18
 8001c92:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001caa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cae:	d115      	bne.n	8001cdc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d111      	bne.n	8001cdc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	f043 0201 	orr.w	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	371c      	adds	r7, #28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd90      	pop	{r4, r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	24924924 	.word	0x24924924
 8001cf0:	00924924 	.word	0x00924924
 8001cf4:	12492492 	.word	0x12492492
 8001cf8:	00492492 	.word	0x00492492
 8001cfc:	00249249 	.word	0x00249249

08001d00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x20>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e0dc      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x1da>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b06      	cmp	r3, #6
 8001d46:	d81c      	bhi.n	8001d82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	3b05      	subs	r3, #5
 8001d5a:	221f      	movs	r2, #31
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4019      	ands	r1, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	3b05      	subs	r3, #5
 8001d74:	fa00 f203 	lsl.w	r2, r0, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	635a      	str	r2, [r3, #52]	; 0x34
 8001d80:	e03c      	b.n	8001dfc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b0c      	cmp	r3, #12
 8001d88:	d81c      	bhi.n	8001dc4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b23      	subs	r3, #35	; 0x23
 8001d9c:	221f      	movs	r2, #31
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	4019      	ands	r1, r3
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	3b23      	subs	r3, #35	; 0x23
 8001db6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc2:	e01b      	b.n	8001dfc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3b41      	subs	r3, #65	; 0x41
 8001dd6:	221f      	movs	r2, #31
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	4019      	ands	r1, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	3b41      	subs	r3, #65	; 0x41
 8001df0:	fa00 f203 	lsl.w	r2, r0, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b09      	cmp	r3, #9
 8001e02:	d91c      	bls.n	8001e3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68d9      	ldr	r1, [r3, #12]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	3b1e      	subs	r3, #30
 8001e16:	2207      	movs	r2, #7
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4019      	ands	r1, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6898      	ldr	r0, [r3, #8]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b1e      	subs	r3, #30
 8001e30:	fa00 f203 	lsl.w	r2, r0, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	e019      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6919      	ldr	r1, [r3, #16]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	2207      	movs	r2, #7
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	4019      	ands	r1, r3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	6898      	ldr	r0, [r3, #8]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d003      	beq.n	8001e82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e7e:	2b11      	cmp	r3, #17
 8001e80:	d132      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_ADC_ConfigChannel+0x1e4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d125      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d126      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ea8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b10      	cmp	r3, #16
 8001eb0:	d11a      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_ADC_ConfigChannel+0x1e8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a13      	ldr	r2, [pc, #76]	; (8001f04 <HAL_ADC_ConfigChannel+0x1ec>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	0c9a      	lsrs	r2, r3, #18
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ec8:	e002      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f9      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x1b2>
 8001ed6:	e007      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	f043 0220 	orr.w	r2, r3, #32
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	40012400 	.word	0x40012400
 8001f00:	20000000 	.word	0x20000000
 8001f04:	431bde83 	.word	0x431bde83

08001f08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d040      	beq.n	8001fa8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f36:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <ADC_Enable+0xac>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <ADC_Enable+0xb0>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	0c9b      	lsrs	r3, r3, #18
 8001f42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f44:	e002      	b.n	8001f4c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f9      	bne.n	8001f46 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f52:	f7ff fc3f 	bl	80017d4 <HAL_GetTick>
 8001f56:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f58:	e01f      	b.n	8001f9a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f5a:	f7ff fc3b 	bl	80017d4 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d918      	bls.n	8001f9a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d011      	beq.n	8001f9a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	f043 0210 	orr.w	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	f043 0201 	orr.w	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e007      	b.n	8001faa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d1d8      	bne.n	8001f5a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	431bde83 	.word	0x431bde83

08001fbc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d12e      	bne.n	8002034 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fe6:	f7ff fbf5 	bl	80017d4 <HAL_GetTick>
 8001fea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fec:	e01b      	b.n	8002026 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fee:	f7ff fbf1 	bl	80017d4 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d914      	bls.n	8002026 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b01      	cmp	r3, #1
 8002008:	d10d      	bne.n	8002026 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	f043 0210 	orr.w	r2, r3, #16
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	f043 0201 	orr.w	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e007      	b.n	8002036 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d0dc      	beq.n	8001fee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800205c:	4013      	ands	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800206c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002072:	4a04      	ldr	r2, [pc, #16]	; (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	60d3      	str	r3, [r2, #12]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <__NVIC_GetPriorityGrouping+0x18>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	f003 0307 	and.w	r3, r3, #7
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	db0b      	blt.n	80020ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	f003 021f 	and.w	r2, r3, #31
 80020bc:	4906      	ldr	r1, [pc, #24]	; (80020d8 <__NVIC_EnableIRQ+0x34>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	2001      	movs	r0, #1
 80020c6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100

080020dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db0a      	blt.n	8002106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	490c      	ldr	r1, [pc, #48]	; (8002128 <__NVIC_SetPriority+0x4c>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	440b      	add	r3, r1
 8002100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002104:	e00a      	b.n	800211c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4908      	ldr	r1, [pc, #32]	; (800212c <__NVIC_SetPriority+0x50>)
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	3b04      	subs	r3, #4
 8002114:	0112      	lsls	r2, r2, #4
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	440b      	add	r3, r1
 800211a:	761a      	strb	r2, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000e100 	.word	0xe000e100
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f1c3 0307 	rsb	r3, r3, #7
 800214a:	2b04      	cmp	r3, #4
 800214c:	bf28      	it	cs
 800214e:	2304      	movcs	r3, #4
 8002150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	2b06      	cmp	r3, #6
 8002158:	d902      	bls.n	8002160 <NVIC_EncodePriority+0x30>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3b03      	subs	r3, #3
 800215e:	e000      	b.n	8002162 <NVIC_EncodePriority+0x32>
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	f04f 32ff 	mov.w	r2, #4294967295
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	401a      	ands	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002178:	f04f 31ff 	mov.w	r1, #4294967295
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	43d9      	mvns	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	4313      	orrs	r3, r2
         );
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ff4f 	bl	8002040 <__NVIC_SetPriorityGrouping>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021bc:	f7ff ff64 	bl	8002088 <__NVIC_GetPriorityGrouping>
 80021c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	6978      	ldr	r0, [r7, #20]
 80021c8:	f7ff ffb2 	bl	8002130 <NVIC_EncodePriority>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff81 	bl	80020dc <__NVIC_SetPriority>
}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff57 	bl	80020a4 <__NVIC_EnableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	b480      	push	{r7}
 8002202:	b08b      	sub	sp, #44	; 0x2c
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002212:	e169      	b.n	80024e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002214:	2201      	movs	r2, #1
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	429a      	cmp	r2, r3
 800222e:	f040 8158 	bne.w	80024e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4a9a      	ldr	r2, [pc, #616]	; (80024a0 <HAL_GPIO_Init+0x2a0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d05e      	beq.n	80022fa <HAL_GPIO_Init+0xfa>
 800223c:	4a98      	ldr	r2, [pc, #608]	; (80024a0 <HAL_GPIO_Init+0x2a0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d875      	bhi.n	800232e <HAL_GPIO_Init+0x12e>
 8002242:	4a98      	ldr	r2, [pc, #608]	; (80024a4 <HAL_GPIO_Init+0x2a4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d058      	beq.n	80022fa <HAL_GPIO_Init+0xfa>
 8002248:	4a96      	ldr	r2, [pc, #600]	; (80024a4 <HAL_GPIO_Init+0x2a4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d86f      	bhi.n	800232e <HAL_GPIO_Init+0x12e>
 800224e:	4a96      	ldr	r2, [pc, #600]	; (80024a8 <HAL_GPIO_Init+0x2a8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d052      	beq.n	80022fa <HAL_GPIO_Init+0xfa>
 8002254:	4a94      	ldr	r2, [pc, #592]	; (80024a8 <HAL_GPIO_Init+0x2a8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d869      	bhi.n	800232e <HAL_GPIO_Init+0x12e>
 800225a:	4a94      	ldr	r2, [pc, #592]	; (80024ac <HAL_GPIO_Init+0x2ac>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d04c      	beq.n	80022fa <HAL_GPIO_Init+0xfa>
 8002260:	4a92      	ldr	r2, [pc, #584]	; (80024ac <HAL_GPIO_Init+0x2ac>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d863      	bhi.n	800232e <HAL_GPIO_Init+0x12e>
 8002266:	4a92      	ldr	r2, [pc, #584]	; (80024b0 <HAL_GPIO_Init+0x2b0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d046      	beq.n	80022fa <HAL_GPIO_Init+0xfa>
 800226c:	4a90      	ldr	r2, [pc, #576]	; (80024b0 <HAL_GPIO_Init+0x2b0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d85d      	bhi.n	800232e <HAL_GPIO_Init+0x12e>
 8002272:	2b12      	cmp	r3, #18
 8002274:	d82a      	bhi.n	80022cc <HAL_GPIO_Init+0xcc>
 8002276:	2b12      	cmp	r3, #18
 8002278:	d859      	bhi.n	800232e <HAL_GPIO_Init+0x12e>
 800227a:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <HAL_GPIO_Init+0x80>)
 800227c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002280:	080022fb 	.word	0x080022fb
 8002284:	080022d5 	.word	0x080022d5
 8002288:	080022e7 	.word	0x080022e7
 800228c:	08002329 	.word	0x08002329
 8002290:	0800232f 	.word	0x0800232f
 8002294:	0800232f 	.word	0x0800232f
 8002298:	0800232f 	.word	0x0800232f
 800229c:	0800232f 	.word	0x0800232f
 80022a0:	0800232f 	.word	0x0800232f
 80022a4:	0800232f 	.word	0x0800232f
 80022a8:	0800232f 	.word	0x0800232f
 80022ac:	0800232f 	.word	0x0800232f
 80022b0:	0800232f 	.word	0x0800232f
 80022b4:	0800232f 	.word	0x0800232f
 80022b8:	0800232f 	.word	0x0800232f
 80022bc:	0800232f 	.word	0x0800232f
 80022c0:	0800232f 	.word	0x0800232f
 80022c4:	080022dd 	.word	0x080022dd
 80022c8:	080022f1 	.word	0x080022f1
 80022cc:	4a79      	ldr	r2, [pc, #484]	; (80024b4 <HAL_GPIO_Init+0x2b4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022d2:	e02c      	b.n	800232e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	623b      	str	r3, [r7, #32]
          break;
 80022da:	e029      	b.n	8002330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	3304      	adds	r3, #4
 80022e2:	623b      	str	r3, [r7, #32]
          break;
 80022e4:	e024      	b.n	8002330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	3308      	adds	r3, #8
 80022ec:	623b      	str	r3, [r7, #32]
          break;
 80022ee:	e01f      	b.n	8002330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	330c      	adds	r3, #12
 80022f6:	623b      	str	r3, [r7, #32]
          break;
 80022f8:	e01a      	b.n	8002330 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002302:	2304      	movs	r3, #4
 8002304:	623b      	str	r3, [r7, #32]
          break;
 8002306:	e013      	b.n	8002330 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002310:	2308      	movs	r3, #8
 8002312:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	611a      	str	r2, [r3, #16]
          break;
 800231a:	e009      	b.n	8002330 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800231c:	2308      	movs	r3, #8
 800231e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	615a      	str	r2, [r3, #20]
          break;
 8002326:	e003      	b.n	8002330 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002328:	2300      	movs	r3, #0
 800232a:	623b      	str	r3, [r7, #32]
          break;
 800232c:	e000      	b.n	8002330 <HAL_GPIO_Init+0x130>
          break;
 800232e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2bff      	cmp	r3, #255	; 0xff
 8002334:	d801      	bhi.n	800233a <HAL_GPIO_Init+0x13a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	e001      	b.n	800233e <HAL_GPIO_Init+0x13e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3304      	adds	r3, #4
 800233e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2bff      	cmp	r3, #255	; 0xff
 8002344:	d802      	bhi.n	800234c <HAL_GPIO_Init+0x14c>
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	e002      	b.n	8002352 <HAL_GPIO_Init+0x152>
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	3b08      	subs	r3, #8
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	210f      	movs	r1, #15
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	401a      	ands	r2, r3
 8002364:	6a39      	ldr	r1, [r7, #32]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	431a      	orrs	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80b1 	beq.w	80024e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002380:	4b4d      	ldr	r3, [pc, #308]	; (80024b8 <HAL_GPIO_Init+0x2b8>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a4c      	ldr	r2, [pc, #304]	; (80024b8 <HAL_GPIO_Init+0x2b8>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b4a      	ldr	r3, [pc, #296]	; (80024b8 <HAL_GPIO_Init+0x2b8>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002398:	4a48      	ldr	r2, [pc, #288]	; (80024bc <HAL_GPIO_Init+0x2bc>)
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	3302      	adds	r3, #2
 80023a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a40      	ldr	r2, [pc, #256]	; (80024c0 <HAL_GPIO_Init+0x2c0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d013      	beq.n	80023ec <HAL_GPIO_Init+0x1ec>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3f      	ldr	r2, [pc, #252]	; (80024c4 <HAL_GPIO_Init+0x2c4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d00d      	beq.n	80023e8 <HAL_GPIO_Init+0x1e8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a3e      	ldr	r2, [pc, #248]	; (80024c8 <HAL_GPIO_Init+0x2c8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d007      	beq.n	80023e4 <HAL_GPIO_Init+0x1e4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a3d      	ldr	r2, [pc, #244]	; (80024cc <HAL_GPIO_Init+0x2cc>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d101      	bne.n	80023e0 <HAL_GPIO_Init+0x1e0>
 80023dc:	2303      	movs	r3, #3
 80023de:	e006      	b.n	80023ee <HAL_GPIO_Init+0x1ee>
 80023e0:	2304      	movs	r3, #4
 80023e2:	e004      	b.n	80023ee <HAL_GPIO_Init+0x1ee>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e002      	b.n	80023ee <HAL_GPIO_Init+0x1ee>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <HAL_GPIO_Init+0x1ee>
 80023ec:	2300      	movs	r3, #0
 80023ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f0:	f002 0203 	and.w	r2, r2, #3
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	4093      	lsls	r3, r2
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023fe:	492f      	ldr	r1, [pc, #188]	; (80024bc <HAL_GPIO_Init+0x2bc>)
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d006      	beq.n	8002426 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002418:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_GPIO_Init+0x2d0>)
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	492c      	ldr	r1, [pc, #176]	; (80024d0 <HAL_GPIO_Init+0x2d0>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]
 8002424:	e006      	b.n	8002434 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002426:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_GPIO_Init+0x2d0>)
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	43db      	mvns	r3, r3
 800242e:	4928      	ldr	r1, [pc, #160]	; (80024d0 <HAL_GPIO_Init+0x2d0>)
 8002430:	4013      	ands	r3, r2
 8002432:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002440:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <HAL_GPIO_Init+0x2d0>)
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	4922      	ldr	r1, [pc, #136]	; (80024d0 <HAL_GPIO_Init+0x2d0>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	60cb      	str	r3, [r1, #12]
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_GPIO_Init+0x2d0>)
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	43db      	mvns	r3, r3
 8002456:	491e      	ldr	r1, [pc, #120]	; (80024d0 <HAL_GPIO_Init+0x2d0>)
 8002458:	4013      	ands	r3, r2
 800245a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_GPIO_Init+0x2d0>)
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	4918      	ldr	r1, [pc, #96]	; (80024d0 <HAL_GPIO_Init+0x2d0>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_GPIO_Init+0x2d0>)
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	43db      	mvns	r3, r3
 800247e:	4914      	ldr	r1, [pc, #80]	; (80024d0 <HAL_GPIO_Init+0x2d0>)
 8002480:	4013      	ands	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d021      	beq.n	80024d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_GPIO_Init+0x2d0>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	490e      	ldr	r1, [pc, #56]	; (80024d0 <HAL_GPIO_Init+0x2d0>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]
 800249c:	e021      	b.n	80024e2 <HAL_GPIO_Init+0x2e2>
 800249e:	bf00      	nop
 80024a0:	10320000 	.word	0x10320000
 80024a4:	10310000 	.word	0x10310000
 80024a8:	10220000 	.word	0x10220000
 80024ac:	10210000 	.word	0x10210000
 80024b0:	10120000 	.word	0x10120000
 80024b4:	10110000 	.word	0x10110000
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40010000 	.word	0x40010000
 80024c0:	40010800 	.word	0x40010800
 80024c4:	40010c00 	.word	0x40010c00
 80024c8:	40011000 	.word	0x40011000
 80024cc:	40011400 	.word	0x40011400
 80024d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_GPIO_Init+0x304>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	43db      	mvns	r3, r3
 80024dc:	4909      	ldr	r1, [pc, #36]	; (8002504 <HAL_GPIO_Init+0x304>)
 80024de:	4013      	ands	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	3301      	adds	r3, #1
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f47f ae8e 	bne.w	8002214 <HAL_GPIO_Init+0x14>
  }
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	372c      	adds	r7, #44	; 0x2c
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40010400 	.word	0x40010400

08002508 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	e001      	b.n	800252a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	807b      	strh	r3, [r7, #2]
 8002542:	4613      	mov	r3, r2
 8002544:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002546:	787b      	ldrb	r3, [r7, #1]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254c:	887a      	ldrh	r2, [r7, #2]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002552:	e003      	b.n	800255c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	041a      	lsls	r2, r3, #16
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	611a      	str	r2, [r3, #16]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002566:	b480      	push	{r7}
 8002568:	b085      	sub	sp, #20
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002578:	887a      	ldrh	r2, [r7, #2]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4013      	ands	r3, r2
 800257e:	041a      	lsls	r2, r3, #16
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43d9      	mvns	r1, r3
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	400b      	ands	r3, r1
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	611a      	str	r2, [r3, #16]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e12b      	b.n	8002802 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe fea4 	bl	800130c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2224      	movs	r2, #36	; 0x24
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025fc:	f002 fa4a 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 8002600:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4a81      	ldr	r2, [pc, #516]	; (800280c <HAL_I2C_Init+0x274>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d807      	bhi.n	800261c <HAL_I2C_Init+0x84>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4a80      	ldr	r2, [pc, #512]	; (8002810 <HAL_I2C_Init+0x278>)
 8002610:	4293      	cmp	r3, r2
 8002612:	bf94      	ite	ls
 8002614:	2301      	movls	r3, #1
 8002616:	2300      	movhi	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	e006      	b.n	800262a <HAL_I2C_Init+0x92>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4a7d      	ldr	r2, [pc, #500]	; (8002814 <HAL_I2C_Init+0x27c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	bf94      	ite	ls
 8002624:	2301      	movls	r3, #1
 8002626:	2300      	movhi	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0e7      	b.n	8002802 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4a78      	ldr	r2, [pc, #480]	; (8002818 <HAL_I2C_Init+0x280>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0c9b      	lsrs	r3, r3, #18
 800263c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	430a      	orrs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a6a      	ldr	r2, [pc, #424]	; (800280c <HAL_I2C_Init+0x274>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d802      	bhi.n	800266c <HAL_I2C_Init+0xd4>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	3301      	adds	r3, #1
 800266a:	e009      	b.n	8002680 <HAL_I2C_Init+0xe8>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	4a69      	ldr	r2, [pc, #420]	; (800281c <HAL_I2C_Init+0x284>)
 8002678:	fba2 2303 	umull	r2, r3, r2, r3
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	3301      	adds	r3, #1
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	430b      	orrs	r3, r1
 8002686:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002692:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	495c      	ldr	r1, [pc, #368]	; (800280c <HAL_I2C_Init+0x274>)
 800269c:	428b      	cmp	r3, r1
 800269e:	d819      	bhi.n	80026d4 <HAL_I2C_Init+0x13c>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1e59      	subs	r1, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ae:	1c59      	adds	r1, r3, #1
 80026b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026b4:	400b      	ands	r3, r1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_I2C_Init+0x138>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1e59      	subs	r1, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ce:	e051      	b.n	8002774 <HAL_I2C_Init+0x1dc>
 80026d0:	2304      	movs	r3, #4
 80026d2:	e04f      	b.n	8002774 <HAL_I2C_Init+0x1dc>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d111      	bne.n	8002700 <HAL_I2C_Init+0x168>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1e58      	subs	r0, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	440b      	add	r3, r1
 80026ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	e012      	b.n	8002726 <HAL_I2C_Init+0x18e>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1e58      	subs	r0, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	0099      	lsls	r1, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	fbb0 f3f3 	udiv	r3, r0, r3
 8002716:	3301      	adds	r3, #1
 8002718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_I2C_Init+0x196>
 800272a:	2301      	movs	r3, #1
 800272c:	e022      	b.n	8002774 <HAL_I2C_Init+0x1dc>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10e      	bne.n	8002754 <HAL_I2C_Init+0x1bc>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1e58      	subs	r0, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6859      	ldr	r1, [r3, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	440b      	add	r3, r1
 8002744:	fbb0 f3f3 	udiv	r3, r0, r3
 8002748:	3301      	adds	r3, #1
 800274a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002752:	e00f      	b.n	8002774 <HAL_I2C_Init+0x1dc>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1e58      	subs	r0, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	0099      	lsls	r1, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	fbb0 f3f3 	udiv	r3, r0, r3
 800276a:	3301      	adds	r3, #1
 800276c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002770:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	6809      	ldr	r1, [r1, #0]
 8002778:	4313      	orrs	r3, r2
 800277a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69da      	ldr	r2, [r3, #28]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6911      	ldr	r1, [r2, #16]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68d2      	ldr	r2, [r2, #12]
 80027ae:	4311      	orrs	r1, r2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	430b      	orrs	r3, r1
 80027b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	000186a0 	.word	0x000186a0
 8002810:	001e847f 	.word	0x001e847f
 8002814:	003d08ff 	.word	0x003d08ff
 8002818:	431bde83 	.word	0x431bde83
 800281c:	10624dd3 	.word	0x10624dd3

08002820 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002822:	b08b      	sub	sp, #44	; 0x2c
 8002824:	af06      	add	r7, sp, #24
 8002826:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0f1      	b.n	8002a16 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f009 ffec 	bl	800c824 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2203      	movs	r2, #3
 8002850:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f003 fa5b 	bl	8005d14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	687e      	ldr	r6, [r7, #4]
 8002866:	466d      	mov	r5, sp
 8002868:	f106 0410 	add.w	r4, r6, #16
 800286c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	602b      	str	r3, [r5, #0]
 8002874:	1d33      	adds	r3, r6, #4
 8002876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002878:	6838      	ldr	r0, [r7, #0]
 800287a:	f003 fa25 	bl	8005cc8 <USB_CoreInit>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0c2      	b.n	8002a16 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f003 fa56 	bl	8005d48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e040      	b.n	8002924 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	3301      	adds	r3, #1
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	3303      	adds	r3, #3
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	3338      	adds	r3, #56	; 0x38
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	333c      	adds	r3, #60	; 0x3c
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	3340      	adds	r3, #64	; 0x40
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	3301      	adds	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	d3b9      	bcc.n	80028a2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	e044      	b.n	80029be <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	440b      	add	r3, r1
 8002942:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	440b      	add	r3, r1
 8002958:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	440b      	add	r3, r1
 800296e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	3301      	adds	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d3b5      	bcc.n	8002934 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	687e      	ldr	r6, [r7, #4]
 80029d0:	466d      	mov	r5, sp
 80029d2:	f106 0410 	add.w	r4, r6, #16
 80029d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	602b      	str	r3, [r5, #0]
 80029de:	1d33      	adds	r3, r6, #4
 80029e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e2:	6838      	ldr	r0, [r7, #0]
 80029e4:	f003 f9bc 	bl	8005d60 <USB_DevInit>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00d      	b.n	8002a16 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f005 fc3d 	bl	800828e <USB_DevDisconnect>

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a1e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_PCD_Start+0x16>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e016      	b.n	8002a62 <HAL_PCD_Start+0x44>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f003 f951 	bl	8005ce8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002a46:	2101      	movs	r1, #1
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f00a f95e 	bl	800cd0a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f005 fc11 	bl	800827a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f005 fc13 	bl	80082a2 <USB_ReadInterrupts>
 8002a7c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fb1b 	bl	80030c4 <PCD_EP_ISR_Handler>

    return;
 8002a8e:	e119      	b.n	8002cc4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d013      	beq.n	8002ac2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aac:	b292      	uxth	r2, r2
 8002aae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f009 ff31 	bl	800c91a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ab8:	2100      	movs	r1, #0
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f905 	bl	8002cca <HAL_PCD_SetAddress>

    return;
 8002ac0:	e100      	b.n	8002cc4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00c      	beq.n	8002ae6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ade:	b292      	uxth	r2, r2
 8002ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ae4:	e0ee      	b.n	8002cc4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00c      	beq.n	8002b0a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b02:	b292      	uxth	r2, r2
 8002b04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b08:	e0dc      	b.n	8002cc4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d027      	beq.n	8002b64 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	b292      	uxth	r2, r2
 8002b28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0208 	bic.w	r2, r2, #8
 8002b3e:	b292      	uxth	r2, r2
 8002b40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f009 ff21 	bl	800c98c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b5c:	b292      	uxth	r2, r2
 8002b5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b62:	e0af      	b.n	8002cc4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8083 	beq.w	8002c76 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	e010      	b.n	8002b98 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	7ffb      	ldrb	r3, [r7, #31]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	441a      	add	r2, r3
 8002b82:	7ffb      	ldrb	r3, [r7, #31]
 8002b84:	8812      	ldrh	r2, [r2, #0]
 8002b86:	b292      	uxth	r2, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	3320      	adds	r3, #32
 8002b8c:	443b      	add	r3, r7
 8002b8e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
 8002b94:	3301      	adds	r3, #1
 8002b96:	77fb      	strb	r3, [r7, #31]
 8002b98:	7ffb      	ldrb	r3, [r7, #31]
 8002b9a:	2b07      	cmp	r3, #7
 8002b9c:	d9eb      	bls.n	8002b76 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	b292      	uxth	r2, r2
 8002bb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0201 	bic.w	r2, r2, #1
 8002bc8:	b292      	uxth	r2, r2
 8002bca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002bce:	bf00      	nop
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f6      	beq.n	8002bd0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf4:	b292      	uxth	r2, r2
 8002bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e00f      	b.n	8002c20 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002c00:	7ffb      	ldrb	r3, [r7, #31]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	4611      	mov	r1, r2
 8002c08:	7ffa      	ldrb	r2, [r7, #31]
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	440a      	add	r2, r1
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	3320      	adds	r3, #32
 8002c12:	443b      	add	r3, r7
 8002c14:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002c18:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002c1a:	7ffb      	ldrb	r3, [r7, #31]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	77fb      	strb	r3, [r7, #31]
 8002c20:	7ffb      	ldrb	r3, [r7, #31]
 8002c22:	2b07      	cmp	r3, #7
 8002c24:	d9ec      	bls.n	8002c00 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0208 	orr.w	r2, r2, #8
 8002c38:	b292      	uxth	r2, r2
 8002c3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c50:	b292      	uxth	r2, r2
 8002c52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0204 	orr.w	r2, r2, #4
 8002c68:	b292      	uxth	r2, r2
 8002c6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f009 fe72 	bl	800c958 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c74:	e026      	b.n	8002cc4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00f      	beq.n	8002ca0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c92:	b292      	uxth	r2, r2
 8002c94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f009 fe30 	bl	800c8fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c9e:	e011      	b.n	8002cc4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002cc2:	bf00      	nop
  }
}
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_PCD_SetAddress+0x1a>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e013      	b.n	8002d0c <HAL_PCD_SetAddress+0x42>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f005 faa9 	bl	8008254 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	4608      	mov	r0, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	461a      	mov	r2, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	70fb      	strb	r3, [r7, #3]
 8002d26:	460b      	mov	r3, r1
 8002d28:	803b      	strh	r3, [r7, #0]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	da0e      	bge.n	8002d58 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	705a      	strb	r2, [r3, #1]
 8002d56:	e00e      	b.n	8002d76 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	f003 0207 	and.w	r2, r3, #7
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d82:	883a      	ldrh	r2, [r7, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	78ba      	ldrb	r2, [r7, #2]
 8002d8c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d8e:	78bb      	ldrb	r3, [r7, #2]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d102      	bne.n	8002d9a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_PCD_EP_Open+0x94>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e00e      	b.n	8002dc6 <HAL_PCD_EP_Open+0xb2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68f9      	ldr	r1, [r7, #12]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f002 fff2 	bl	8005da0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002dc4:	7afb      	ldrb	r3, [r7, #11]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	da0e      	bge.n	8002e00 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	705a      	strb	r2, [r3, #1]
 8002dfe:	e00e      	b.n	8002e1e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	f003 0207 	and.w	r2, r3, #7
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_PCD_EP_Close+0x6a>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e00e      	b.n	8002e56 <HAL_PCD_EP_Close+0x88>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68f9      	ldr	r1, [r7, #12]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f003 fb6a 	bl	8006520 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e6e:	7afb      	ldrb	r3, [r7, #11]
 8002e70:	f003 0207 	and.w	r2, r3, #7
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2200      	movs	r2, #0
 8002e96:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9e:	7afb      	ldrb	r3, [r7, #11]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6979      	ldr	r1, [r7, #20]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 fd21 	bl	80068f8 <USB_EPStartXfer>

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	f003 0207 	and.w	r2, r3, #7
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	440b      	add	r3, r1
 8002ede:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002ee2:	681b      	ldr	r3, [r3, #0]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b086      	sub	sp, #24
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	460b      	mov	r3, r1
 8002efc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002efe:	7afb      	ldrb	r3, [r7, #11]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4413      	add	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2200      	movs	r2, #0
 8002f32:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2201      	movs	r2, #1
 8002f38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f3a:	7afb      	ldrb	r3, [r7, #11]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6979      	ldr	r1, [r7, #20]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 fcd3 	bl	80068f8 <USB_EPStartXfer>

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	f003 0207 	and.w	r2, r3, #7
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d901      	bls.n	8002f7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e04c      	b.n	8003014 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	da0e      	bge.n	8002fa0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	705a      	strb	r2, [r3, #1]
 8002f9e:	e00c      	b.n	8002fba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_PCD_EP_SetStall+0x7e>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e01c      	b.n	8003014 <HAL_PCD_EP_SetStall+0xb8>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68f9      	ldr	r1, [r7, #12]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f005 f836 	bl	800805a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d108      	bne.n	800300a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f005 f95b 	bl	80082c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	f003 020f 	and.w	r2, r3, #15
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	429a      	cmp	r2, r3
 8003034:	d901      	bls.n	800303a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e040      	b.n	80030bc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800303a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800303e:	2b00      	cmp	r3, #0
 8003040:	da0e      	bge.n	8003060 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	705a      	strb	r2, [r3, #1]
 800305e:	e00e      	b.n	800307e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	f003 0207 	and.w	r2, r3, #7
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	b2da      	uxtb	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_PCD_EP_ClrStall+0x82>
 800309a:	2302      	movs	r3, #2
 800309c:	e00e      	b.n	80030bc <HAL_PCD_EP_ClrStall+0xa0>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68f9      	ldr	r1, [r7, #12]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f005 f824 	bl	80080fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b096      	sub	sp, #88	; 0x58
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030cc:	e3bf      	b.n	800384e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80030da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80030e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f040 8179 	bne.w	80033e4 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d152      	bne.n	80031a4 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800310a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310e:	81fb      	strh	r3, [r7, #14]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	89fb      	ldrh	r3, [r7, #14]
 8003116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800311a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800311e:	b29b      	uxth	r3, r3
 8003120:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3328      	adds	r3, #40	; 0x28
 8003126:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003130:	b29b      	uxth	r3, r3
 8003132:	461a      	mov	r2, r3
 8003134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4413      	add	r3, r2
 800313c:	3302      	adds	r3, #2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003152:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	441a      	add	r2, r3
 800315e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003160:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003162:	2100      	movs	r1, #0
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f009 fbb0 	bl	800c8ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 836b 	beq.w	800384e <PCD_EP_ISR_Handler+0x78a>
 8003178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f040 8366 	bne.w	800384e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800318e:	b2da      	uxtb	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	b292      	uxth	r2, r2
 8003196:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031a2:	e354      	b.n	800384e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031aa:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80031b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d034      	beq.n	800322c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	3306      	adds	r3, #6
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80031f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80031fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003200:	b29b      	uxth	r3, r3
 8003202:	f005 f8ad 	bl	8008360 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	b29a      	uxth	r2, r3
 800320e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003212:	4013      	ands	r3, r2
 8003214:	823b      	strh	r3, [r7, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	8a3a      	ldrh	r2, [r7, #16]
 800321c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003220:	b292      	uxth	r2, r2
 8003222:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f009 fb23 	bl	800c870 <HAL_PCD_SetupStageCallback>
 800322a:	e310      	b.n	800384e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800322c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003230:	2b00      	cmp	r3, #0
 8003232:	f280 830c 	bge.w	800384e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29a      	uxth	r2, r3
 800323e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003242:	4013      	ands	r3, r2
 8003244:	83fb      	strh	r3, [r7, #30]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	8bfa      	ldrh	r2, [r7, #30]
 800324c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003250:	b292      	uxth	r2, r2
 8003252:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800325c:	b29b      	uxth	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4413      	add	r3, r2
 8003268:	3306      	adds	r3, #6
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	4413      	add	r3, r2
 8003272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800327c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d019      	beq.n	80032bc <PCD_EP_ISR_Handler+0x1f8>
 8003288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d015      	beq.n	80032bc <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003296:	6959      	ldr	r1, [r3, #20]
 8003298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800329a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800329c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800329e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f005 f85d 	bl	8008360 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	441a      	add	r2, r3
 80032b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032b4:	2100      	movs	r1, #0
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f009 faec 	bl	800c894 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80032c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f040 82bd 	bne.w	800384e <PCD_EP_ISR_Handler+0x78a>
 80032d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032d8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032e0:	f000 82b5 	beq.w	800384e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4413      	add	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800330e:	b29a      	uxth	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	801a      	strh	r2, [r3, #0]
 8003314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b3e      	cmp	r3, #62	; 0x3e
 800331a:	d91d      	bls.n	8003358 <PCD_EP_ISR_Handler+0x294>
 800331c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	647b      	str	r3, [r7, #68]	; 0x44
 8003324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <PCD_EP_ISR_Handler+0x272>
 8003330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003332:	3b01      	subs	r3, #1
 8003334:	647b      	str	r3, [r7, #68]	; 0x44
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29a      	uxth	r2, r3
 800333c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333e:	b29b      	uxth	r3, r3
 8003340:	029b      	lsls	r3, r3, #10
 8003342:	b29b      	uxth	r3, r3
 8003344:	4313      	orrs	r3, r2
 8003346:	b29b      	uxth	r3, r3
 8003348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800334c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003350:	b29a      	uxth	r2, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	801a      	strh	r2, [r3, #0]
 8003356:	e026      	b.n	80033a6 <PCD_EP_ISR_Handler+0x2e2>
 8003358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10a      	bne.n	8003376 <PCD_EP_ISR_Handler+0x2b2>
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	b29b      	uxth	r3, r3
 8003366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800336a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800336e:	b29a      	uxth	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	801a      	strh	r2, [r3, #0]
 8003374:	e017      	b.n	80033a6 <PCD_EP_ISR_Handler+0x2e2>
 8003376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	647b      	str	r3, [r7, #68]	; 0x44
 800337e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <PCD_EP_ISR_Handler+0x2cc>
 800338a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800338c:	3301      	adds	r3, #1
 800338e:	647b      	str	r3, [r7, #68]	; 0x44
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b29a      	uxth	r2, r3
 8003396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003398:	b29b      	uxth	r3, r3
 800339a:	029b      	lsls	r3, r3, #10
 800339c:	b29b      	uxth	r3, r3
 800339e:	4313      	orrs	r3, r2
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	827b      	strh	r3, [r7, #18]
 80033b8:	8a7b      	ldrh	r3, [r7, #18]
 80033ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80033be:	827b      	strh	r3, [r7, #18]
 80033c0:	8a7b      	ldrh	r3, [r7, #18]
 80033c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033c6:	827b      	strh	r3, [r7, #18]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	8a7b      	ldrh	r3, [r7, #18]
 80033ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033de:	b29b      	uxth	r3, r3
 80033e0:	8013      	strh	r3, [r2, #0]
 80033e2:	e234      	b.n	800384e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033f8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f280 80fc 	bge.w	80035fa <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	b29a      	uxth	r2, r3
 8003414:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003418:	4013      	ands	r3, r2
 800341a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003430:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003434:	b292      	uxth	r2, r2
 8003436:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003438:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800344e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003450:	7b1b      	ldrb	r3, [r3, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d125      	bne.n	80034a2 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800345e:	b29b      	uxth	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	3306      	adds	r3, #6
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800347e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003482:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 8092 	beq.w	80035b0 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003492:	6959      	ldr	r1, [r3, #20]
 8003494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003496:	88da      	ldrh	r2, [r3, #6]
 8003498:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800349c:	f004 ff60 	bl	8008360 <USB_ReadPMA>
 80034a0:	e086      	b.n	80035b0 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80034a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a4:	78db      	ldrb	r3, [r3, #3]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d10a      	bne.n	80034c0 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80034aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034ae:	461a      	mov	r2, r3
 80034b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f9d9 	bl	800386a <HAL_PCD_EP_DB_Receive>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80034be:	e077      	b.n	80035b0 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	441a      	add	r2, r3
 80034ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003500:	b29b      	uxth	r3, r3
 8003502:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d024      	beq.n	8003568 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003526:	b29b      	uxth	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	3302      	adds	r3, #2
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003546:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800354a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800354e:	2b00      	cmp	r3, #0
 8003550:	d02e      	beq.n	80035b0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003558:	6959      	ldr	r1, [r3, #20]
 800355a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355c:	891a      	ldrh	r2, [r3, #8]
 800355e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003562:	f004 fefd 	bl	8008360 <USB_ReadPMA>
 8003566:	e023      	b.n	80035b0 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003570:	b29b      	uxth	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	3306      	adds	r3, #6
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003590:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003594:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a2:	6959      	ldr	r1, [r3, #20]
 80035a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a6:	895a      	ldrh	r2, [r3, #10]
 80035a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035ac:	f004 fed8 	bl	8008360 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80035b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035b8:	441a      	add	r2, r3
 80035ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80035be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035c6:	441a      	add	r2, r3
 80035c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <PCD_EP_ISR_Handler+0x51c>
 80035d4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80035d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d206      	bcs.n	80035ee <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	4619      	mov	r1, r3
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f009 f954 	bl	800c894 <HAL_PCD_DataOutStageCallback>
 80035ec:	e005      	b.n	80035fa <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035f4:	4618      	mov	r0, r3
 80035f6:	f003 f97f 	bl	80068f8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8123 	beq.w	800384e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003608:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	441a      	add	r2, r3
 8003648:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800364c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003654:	b29b      	uxth	r3, r3
 8003656:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365a:	78db      	ldrb	r3, [r3, #3]
 800365c:	2b01      	cmp	r3, #1
 800365e:	f040 80a2 	bne.w	80037a6 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003664:	2200      	movs	r2, #0
 8003666:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366a:	7b1b      	ldrb	r3, [r3, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8093 	beq.w	8003798 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003672:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d046      	beq.n	800370c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800367e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003680:	785b      	ldrb	r3, [r3, #1]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d126      	bne.n	80036d4 <PCD_EP_ISR_Handler+0x610>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003694:	b29b      	uxth	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	4413      	add	r3, r2
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
 800369e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	011a      	lsls	r2, r3, #4
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	4413      	add	r3, r2
 80036a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036ac:	623b      	str	r3, [r7, #32]
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	801a      	strh	r2, [r3, #0]
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	801a      	strh	r2, [r3, #0]
 80036d2:	e061      	b.n	8003798 <PCD_EP_ISR_Handler+0x6d4>
 80036d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d15d      	bne.n	8003798 <PCD_EP_ISR_Handler+0x6d4>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f0:	4413      	add	r3, r2
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	011a      	lsls	r2, r3, #4
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	4413      	add	r3, r2
 80036fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	2200      	movs	r2, #0
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	e045      	b.n	8003798 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003714:	785b      	ldrb	r3, [r3, #1]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d126      	bne.n	8003768 <PCD_EP_ISR_Handler+0x6a4>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003728:	b29b      	uxth	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372e:	4413      	add	r3, r2
 8003730:	637b      	str	r3, [r7, #52]	; 0x34
 8003732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	011a      	lsls	r2, r3, #4
 8003738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373a:	4413      	add	r3, r2
 800373c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003740:	633b      	str	r3, [r7, #48]	; 0x30
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800374c:	b29a      	uxth	r2, r3
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	801a      	strh	r2, [r3, #0]
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800375c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003760:	b29a      	uxth	r2, r3
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	801a      	strh	r2, [r3, #0]
 8003766:	e017      	b.n	8003798 <PCD_EP_ISR_Handler+0x6d4>
 8003768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376a:	785b      	ldrb	r3, [r3, #1]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d113      	bne.n	8003798 <PCD_EP_ISR_Handler+0x6d4>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003778:	b29b      	uxth	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377e:	4413      	add	r3, r2
 8003780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	011a      	lsls	r2, r3, #4
 8003788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378a:	4413      	add	r3, r2
 800378c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003790:	63bb      	str	r3, [r7, #56]	; 0x38
 8003792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003794:	2200      	movs	r2, #0
 8003796:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	4619      	mov	r1, r3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f009 f893 	bl	800c8ca <HAL_PCD_DataInStageCallback>
 80037a4:	e053      	b.n	800384e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80037a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d146      	bne.n	8003840 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	3302      	adds	r3, #2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80037de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d907      	bls.n	80037fa <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80037ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037f2:	1ad2      	subs	r2, r2, r3
 80037f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f6:	619a      	str	r2, [r3, #24]
 80037f8:	e002      	b.n	8003800 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80037fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fc:	2200      	movs	r2, #0
 80037fe:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d106      	bne.n	8003816 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	4619      	mov	r1, r3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f009 f85b 	bl	800c8ca <HAL_PCD_DataInStageCallback>
 8003814:	e01b      	b.n	800384e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800381e:	441a      	add	r2, r3
 8003820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003822:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800382c:	441a      	add	r2, r3
 800382e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003830:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003838:	4618      	mov	r0, r3
 800383a:	f003 f85d 	bl	80068f8 <USB_EPStartXfer>
 800383e:	e006      	b.n	800384e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003840:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003844:	461a      	mov	r2, r3
 8003846:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f91b 	bl	8003a84 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003856:	b29b      	uxth	r3, r3
 8003858:	b21b      	sxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	f6ff ac37 	blt.w	80030ce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3758      	adds	r7, #88	; 0x58
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b088      	sub	sp, #32
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	4613      	mov	r3, r2
 8003876:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d07e      	beq.n	8003980 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800388a:	b29b      	uxth	r3, r3
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4413      	add	r3, r2
 8003896:	3302      	adds	r3, #2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	699a      	ldr	r2, [r3, #24]
 80038b0:	8b7b      	ldrh	r3, [r7, #26]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d306      	bcc.n	80038c4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	8b7b      	ldrh	r3, [r7, #26]
 80038bc:	1ad2      	subs	r2, r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	619a      	str	r2, [r3, #24]
 80038c2:	e002      	b.n	80038ca <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2200      	movs	r2, #0
 80038c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d123      	bne.n	800391a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ec:	833b      	strh	r3, [r7, #24]
 80038ee:	8b3b      	ldrh	r3, [r7, #24]
 80038f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038f4:	833b      	strh	r3, [r7, #24]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	441a      	add	r2, r3
 8003904:	8b3b      	ldrh	r3, [r7, #24]
 8003906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800390a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800390e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003916:	b29b      	uxth	r3, r3
 8003918:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01f      	beq.n	8003964 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393e:	82fb      	strh	r3, [r7, #22]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	441a      	add	r2, r3
 800394e:	8afb      	ldrh	r3, [r7, #22]
 8003950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800395c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003960:	b29b      	uxth	r3, r3
 8003962:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003964:	8b7b      	ldrh	r3, [r7, #26]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8087 	beq.w	8003a7a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	6959      	ldr	r1, [r3, #20]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	891a      	ldrh	r2, [r3, #8]
 8003978:	8b7b      	ldrh	r3, [r7, #26]
 800397a:	f004 fcf1 	bl	8008360 <USB_ReadPMA>
 800397e:	e07c      	b.n	8003a7a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003988:	b29b      	uxth	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4413      	add	r3, r2
 8003994:	3306      	adds	r3, #6
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	8b7b      	ldrh	r3, [r7, #26]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d306      	bcc.n	80039c2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	8b7b      	ldrh	r3, [r7, #26]
 80039ba:	1ad2      	subs	r2, r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	619a      	str	r2, [r3, #24]
 80039c0:	e002      	b.n	80039c8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2200      	movs	r2, #0
 80039c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d123      	bne.n	8003a18 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ea:	83fb      	strh	r3, [r7, #30]
 80039ec:	8bfb      	ldrh	r3, [r7, #30]
 80039ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039f2:	83fb      	strh	r3, [r7, #30]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	441a      	add	r2, r3
 8003a02:	8bfb      	ldrh	r3, [r7, #30]
 8003a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11f      	bne.n	8003a62 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3c:	83bb      	strh	r3, [r7, #28]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	441a      	add	r2, r3
 8003a4c:	8bbb      	ldrh	r3, [r7, #28]
 8003a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a62:	8b7b      	ldrh	r3, [r7, #26]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	6959      	ldr	r1, [r3, #20]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	895a      	ldrh	r2, [r3, #10]
 8003a74:	8b7b      	ldrh	r3, [r7, #26]
 8003a76:	f004 fc73 	bl	8008360 <USB_ReadPMA>
    }
  }

  return count;
 8003a7a:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3720      	adds	r7, #32
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b0a4      	sub	sp, #144	; 0x90
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 81dd 	beq.w	8003e58 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d907      	bls.n	8003ae6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ade:	1ad2      	subs	r2, r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	619a      	str	r2, [r3, #24]
 8003ae4:	e002      	b.n	8003aec <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f040 80b9 	bne.w	8003c68 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	785b      	ldrb	r3, [r3, #1]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d126      	bne.n	8003b4c <HAL_PCD_EP_DB_Transmit+0xc8>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b12:	4413      	add	r3, r2
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	011a      	lsls	r2, r3, #4
 8003b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1e:	4413      	add	r3, r2
 8003b20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	801a      	strh	r2, [r3, #0]
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	e01a      	b.n	8003b82 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	785b      	ldrb	r3, [r3, #1]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d116      	bne.n	8003b82 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b68:	4413      	add	r3, r2
 8003b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	011a      	lsls	r2, r3, #4
 8003b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b74:	4413      	add	r3, r2
 8003b76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	2200      	movs	r2, #0
 8003b80:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	785b      	ldrb	r3, [r3, #1]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d126      	bne.n	8003bde <HAL_PCD_EP_DB_Transmit+0x15a>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	61fb      	str	r3, [r7, #28]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	011a      	lsls	r2, r3, #4
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	801a      	strh	r2, [r3, #0]
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	801a      	strh	r2, [r3, #0]
 8003bdc:	e017      	b.n	8003c0e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	785b      	ldrb	r3, [r3, #1]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d113      	bne.n	8003c0e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	4413      	add	r3, r2
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	011a      	lsls	r2, r3, #4
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	4413      	add	r3, r2
 8003c02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	4619      	mov	r1, r3
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f008 fe58 	bl	800c8ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 82fc 	beq.w	800421e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c40:	82fb      	strh	r3, [r7, #22]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	441a      	add	r2, r3
 8003c50:	8afb      	ldrh	r3, [r7, #22]
 8003c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	8013      	strh	r3, [r2, #0]
 8003c66:	e2da      	b.n	800421e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d021      	beq.n	8003cb6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	461a      	mov	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	441a      	add	r2, r3
 8003c9e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f040 82ae 	bne.w	800421e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cca:	441a      	add	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cd8:	441a      	add	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	6a1a      	ldr	r2, [r3, #32]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d30b      	bcc.n	8003d02 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	6a1a      	ldr	r2, [r3, #32]
 8003cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cfa:	1ad2      	subs	r2, r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	621a      	str	r2, [r3, #32]
 8003d00:	e017      	b.n	8003d32 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d108      	bne.n	8003d1c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003d0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d1a:	e00a      	b.n	8003d32 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	785b      	ldrb	r3, [r3, #1]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d165      	bne.n	8003e06 <HAL_PCD_EP_DB_Transmit+0x382>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4e:	4413      	add	r3, r2
 8003d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	011a      	lsls	r2, r3, #4
 8003d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d60:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	801a      	strh	r2, [r3, #0]
 8003d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d76:	2b3e      	cmp	r3, #62	; 0x3e
 8003d78:	d91d      	bls.n	8003db6 <HAL_PCD_EP_DB_Transmit+0x332>
 8003d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <HAL_PCD_EP_DB_Transmit+0x310>
 8003d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d90:	3b01      	subs	r3, #1
 8003d92:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	029b      	lsls	r3, r3, #10
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	4313      	orrs	r3, r2
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	e044      	b.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <HAL_PCD_EP_DB_Transmit+0x350>
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd0:	801a      	strh	r2, [r3, #0]
 8003dd2:	e035      	b.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_PCD_EP_DB_Transmit+0x36a>
 8003de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dea:	3301      	adds	r3, #1
 8003dec:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	029b      	lsls	r3, r3, #10
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e02:	801a      	strh	r2, [r3, #0]
 8003e04:	e01c      	b.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d118      	bne.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	647b      	str	r3, [r7, #68]	; 0x44
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e22:	4413      	add	r3, r2
 8003e24:	647b      	str	r3, [r7, #68]	; 0x44
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	011a      	lsls	r2, r3, #4
 8003e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2e:	4413      	add	r3, r2
 8003e30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e34:	643b      	str	r3, [r7, #64]	; 0x40
 8003e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e3e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6818      	ldr	r0, [r3, #0]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	6959      	ldr	r1, [r3, #20]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	891a      	ldrh	r2, [r3, #8]
 8003e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f004 fa40 	bl	80082d6 <USB_WritePMA>
 8003e56:	e1e2      	b.n	800421e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3306      	adds	r3, #6
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e80:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d307      	bcc.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e98:	1ad2      	subs	r2, r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	619a      	str	r2, [r3, #24]
 8003e9e:	e002      	b.n	8003ea6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f040 80c0 	bne.w	8004030 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	785b      	ldrb	r3, [r3, #1]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d126      	bne.n	8003f06 <HAL_PCD_EP_DB_Transmit+0x482>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ecc:	4413      	add	r3, r2
 8003ece:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	011a      	lsls	r2, r3, #4
 8003ed6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ed8:	4413      	add	r3, r2
 8003eda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ede:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eee:	801a      	strh	r2, [r3, #0]
 8003ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f02:	801a      	strh	r2, [r3, #0]
 8003f04:	e01a      	b.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	785b      	ldrb	r3, [r3, #1]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d116      	bne.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	667b      	str	r3, [r7, #100]	; 0x64
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f22:	4413      	add	r3, r2
 8003f24:	667b      	str	r3, [r7, #100]	; 0x64
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	011a      	lsls	r2, r3, #4
 8003f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f2e:	4413      	add	r3, r2
 8003f30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f34:	663b      	str	r3, [r7, #96]	; 0x60
 8003f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f38:	2200      	movs	r2, #0
 8003f3a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	677b      	str	r3, [r7, #116]	; 0x74
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	785b      	ldrb	r3, [r3, #1]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d12b      	bne.n	8003fa2 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5e:	4413      	add	r3, r2
 8003f60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	011a      	lsls	r2, r3, #4
 8003f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f86:	801a      	strh	r2, [r3, #0]
 8003f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	e017      	b.n	8003fd2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	785b      	ldrb	r3, [r3, #1]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d113      	bne.n	8003fd2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb8:	4413      	add	r3, r2
 8003fba:	677b      	str	r3, [r7, #116]	; 0x74
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	011a      	lsls	r2, r3, #4
 8003fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fca:	673b      	str	r3, [r7, #112]	; 0x70
 8003fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fce:	2200      	movs	r2, #0
 8003fd0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f008 fc76 	bl	800c8ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f040 811a 	bne.w	800421e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004004:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800401a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800401e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004022:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800402a:	b29b      	uxth	r3, r3
 800402c:	8013      	strh	r3, [r2, #0]
 800402e:	e0f6      	b.n	800421e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d121      	bne.n	800407e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b29b      	uxth	r3, r3
 800404c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004054:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	441a      	add	r2, r3
 8004066:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800406a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800406e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004072:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407a:	b29b      	uxth	r3, r3
 800407c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004084:	2b01      	cmp	r3, #1
 8004086:	f040 80ca 	bne.w	800421e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004092:	441a      	add	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040a0:	441a      	add	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6a1a      	ldr	r2, [r3, #32]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d30b      	bcc.n	80040ca <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	6a1a      	ldr	r2, [r3, #32]
 80040be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040c2:	1ad2      	subs	r2, r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	621a      	str	r2, [r3, #32]
 80040c8:	e017      	b.n	80040fa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d108      	bne.n	80040e4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80040d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040e2:	e00a      	b.n	80040fa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2200      	movs	r2, #0
 80040f0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	785b      	ldrb	r3, [r3, #1]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d165      	bne.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x750>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411c:	4413      	add	r3, r2
 800411e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	011a      	lsls	r2, r3, #4
 8004126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004128:	4413      	add	r3, r2
 800412a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800412e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b29b      	uxth	r3, r3
 8004136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800413a:	b29a      	uxth	r2, r3
 800413c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800413e:	801a      	strh	r2, [r3, #0]
 8004140:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004144:	2b3e      	cmp	r3, #62	; 0x3e
 8004146:	d91d      	bls.n	8004184 <HAL_PCD_EP_DB_Transmit+0x700>
 8004148:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	2b00      	cmp	r3, #0
 800415a:	d102      	bne.n	8004162 <HAL_PCD_EP_DB_Transmit+0x6de>
 800415c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800415e:	3b01      	subs	r3, #1
 8004160:	66bb      	str	r3, [r7, #104]	; 0x68
 8004162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29a      	uxth	r2, r3
 8004168:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800416a:	b29b      	uxth	r3, r3
 800416c:	029b      	lsls	r3, r3, #10
 800416e:	b29b      	uxth	r3, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	b29b      	uxth	r3, r3
 8004174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800417c:	b29a      	uxth	r2, r3
 800417e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004180:	801a      	strh	r2, [r3, #0]
 8004182:	e041      	b.n	8004208 <HAL_PCD_EP_DB_Transmit+0x784>
 8004184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10a      	bne.n	80041a2 <HAL_PCD_EP_DB_Transmit+0x71e>
 800418c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b29b      	uxth	r3, r3
 8004192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419a:	b29a      	uxth	r2, r3
 800419c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800419e:	801a      	strh	r2, [r3, #0]
 80041a0:	e032      	b.n	8004208 <HAL_PCD_EP_DB_Transmit+0x784>
 80041a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80041aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_PCD_EP_DB_Transmit+0x738>
 80041b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041b8:	3301      	adds	r3, #1
 80041ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80041bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	029b      	lsls	r3, r3, #10
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	4313      	orrs	r3, r2
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041d0:	801a      	strh	r2, [r3, #0]
 80041d2:	e019      	b.n	8004208 <HAL_PCD_EP_DB_Transmit+0x784>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	785b      	ldrb	r3, [r3, #1]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d115      	bne.n	8004208 <HAL_PCD_EP_DB_Transmit+0x784>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ea:	4413      	add	r3, r2
 80041ec:	657b      	str	r3, [r7, #84]	; 0x54
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	011a      	lsls	r2, r3, #4
 80041f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f6:	4413      	add	r3, r2
 80041f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041fc:	653b      	str	r3, [r7, #80]	; 0x50
 80041fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004202:	b29a      	uxth	r2, r3
 8004204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004206:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	6959      	ldr	r1, [r3, #20]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	895a      	ldrh	r2, [r3, #10]
 8004214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004218:	b29b      	uxth	r3, r3
 800421a:	f004 f85c 	bl	80082d6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29b      	uxth	r3, r3
 8004230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004238:	82bb      	strh	r3, [r7, #20]
 800423a:	8abb      	ldrh	r3, [r7, #20]
 800423c:	f083 0310 	eor.w	r3, r3, #16
 8004240:	82bb      	strh	r3, [r7, #20]
 8004242:	8abb      	ldrh	r3, [r7, #20]
 8004244:	f083 0320 	eor.w	r3, r3, #32
 8004248:	82bb      	strh	r3, [r7, #20]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	441a      	add	r2, r3
 8004258:	8abb      	ldrh	r3, [r7, #20]
 800425a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426a:	b29b      	uxth	r3, r3
 800426c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3790      	adds	r7, #144	; 0x90
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	460b      	mov	r3, r1
 8004284:	817b      	strh	r3, [r7, #10]
 8004286:	4613      	mov	r3, r2
 8004288:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800428a:	897b      	ldrh	r3, [r7, #10]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004296:	897b      	ldrh	r3, [r7, #10]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e009      	b.n	80042c2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042ae:	897a      	ldrh	r2, [r7, #10]
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042c2:	893b      	ldrh	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d107      	bne.n	80042d8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2200      	movs	r2, #0
 80042cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	80da      	strh	r2, [r3, #6]
 80042d6:	e00b      	b.n	80042f0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2201      	movs	r2, #1
 80042dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	0c1b      	lsrs	r3, r3, #16
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr

080042fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e272      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8087 	beq.w	800442a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800431c:	4b92      	ldr	r3, [pc, #584]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b04      	cmp	r3, #4
 8004326:	d00c      	beq.n	8004342 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004328:	4b8f      	ldr	r3, [pc, #572]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b08      	cmp	r3, #8
 8004332:	d112      	bne.n	800435a <HAL_RCC_OscConfig+0x5e>
 8004334:	4b8c      	ldr	r3, [pc, #560]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004340:	d10b      	bne.n	800435a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004342:	4b89      	ldr	r3, [pc, #548]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d06c      	beq.n	8004428 <HAL_RCC_OscConfig+0x12c>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d168      	bne.n	8004428 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e24c      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004362:	d106      	bne.n	8004372 <HAL_RCC_OscConfig+0x76>
 8004364:	4b80      	ldr	r3, [pc, #512]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7f      	ldr	r2, [pc, #508]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800436a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e02e      	b.n	80043d0 <HAL_RCC_OscConfig+0xd4>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0x98>
 800437a:	4b7b      	ldr	r3, [pc, #492]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a7a      	ldr	r2, [pc, #488]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b78      	ldr	r3, [pc, #480]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a77      	ldr	r2, [pc, #476]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800438c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e01d      	b.n	80043d0 <HAL_RCC_OscConfig+0xd4>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0xbc>
 800439e:	4b72      	ldr	r3, [pc, #456]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a71      	ldr	r2, [pc, #452]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b6f      	ldr	r3, [pc, #444]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a6e      	ldr	r2, [pc, #440]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e00b      	b.n	80043d0 <HAL_RCC_OscConfig+0xd4>
 80043b8:	4b6b      	ldr	r3, [pc, #428]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a6a      	ldr	r2, [pc, #424]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4b68      	ldr	r3, [pc, #416]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a67      	ldr	r2, [pc, #412]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fd f9fc 	bl	80017d4 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e0:	f7fd f9f8 	bl	80017d4 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	; 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e200      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	4b5d      	ldr	r3, [pc, #372]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0xe4>
 80043fe:	e014      	b.n	800442a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fd f9e8 	bl	80017d4 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004408:	f7fd f9e4 	bl	80017d4 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	; 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e1ec      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	4b53      	ldr	r3, [pc, #332]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x10c>
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d063      	beq.n	80044fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004436:	4b4c      	ldr	r3, [pc, #304]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004442:	4b49      	ldr	r3, [pc, #292]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b08      	cmp	r3, #8
 800444c:	d11c      	bne.n	8004488 <HAL_RCC_OscConfig+0x18c>
 800444e:	4b46      	ldr	r3, [pc, #280]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d116      	bne.n	8004488 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	4b43      	ldr	r3, [pc, #268]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_RCC_OscConfig+0x176>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e1c0      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	4b3d      	ldr	r3, [pc, #244]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4939      	ldr	r1, [pc, #228]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	e03a      	b.n	80044fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004490:	4b36      	ldr	r3, [pc, #216]	; (800456c <HAL_RCC_OscConfig+0x270>)
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004496:	f7fd f99d 	bl	80017d4 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449e:	f7fd f999 	bl	80017d4 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e1a1      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4927      	ldr	r1, [pc, #156]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d2:	4b26      	ldr	r3, [pc, #152]	; (800456c <HAL_RCC_OscConfig+0x270>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fd f97c 	bl	80017d4 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e0:	f7fd f978 	bl	80017d4 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e180      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d03a      	beq.n	8004580 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d019      	beq.n	8004546 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004518:	f7fd f95c 	bl	80017d4 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004520:	f7fd f958 	bl	80017d4 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e160      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800453e:	2001      	movs	r0, #1
 8004540:	f000 fb00 	bl	8004b44 <RCC_Delay>
 8004544:	e01c      	b.n	8004580 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454c:	f7fd f942 	bl	80017d4 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004552:	e00f      	b.n	8004574 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004554:	f7fd f93e 	bl	80017d4 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d908      	bls.n	8004574 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e146      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
 8004566:	bf00      	nop
 8004568:	40021000 	.word	0x40021000
 800456c:	42420000 	.word	0x42420000
 8004570:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	4b92      	ldr	r3, [pc, #584]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e9      	bne.n	8004554 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80a6 	beq.w	80046da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458e:	2300      	movs	r3, #0
 8004590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004592:	4b8b      	ldr	r3, [pc, #556]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10d      	bne.n	80045ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459e:	4b88      	ldr	r3, [pc, #544]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	4a87      	ldr	r2, [pc, #540]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a8:	61d3      	str	r3, [r2, #28]
 80045aa:	4b85      	ldr	r3, [pc, #532]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ba:	4b82      	ldr	r3, [pc, #520]	; (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d118      	bne.n	80045f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c6:	4b7f      	ldr	r3, [pc, #508]	; (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a7e      	ldr	r2, [pc, #504]	; (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d2:	f7fd f8ff 	bl	80017d4 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045da:	f7fd f8fb 	bl	80017d4 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b64      	cmp	r3, #100	; 0x64
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e103      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	4b75      	ldr	r3, [pc, #468]	; (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d106      	bne.n	800460e <HAL_RCC_OscConfig+0x312>
 8004600:	4b6f      	ldr	r3, [pc, #444]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	4a6e      	ldr	r2, [pc, #440]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6213      	str	r3, [r2, #32]
 800460c:	e02d      	b.n	800466a <HAL_RCC_OscConfig+0x36e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0x334>
 8004616:	4b6a      	ldr	r3, [pc, #424]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4a69      	ldr	r2, [pc, #420]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800461c:	f023 0301 	bic.w	r3, r3, #1
 8004620:	6213      	str	r3, [r2, #32]
 8004622:	4b67      	ldr	r3, [pc, #412]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	4a66      	ldr	r2, [pc, #408]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	f023 0304 	bic.w	r3, r3, #4
 800462c:	6213      	str	r3, [r2, #32]
 800462e:	e01c      	b.n	800466a <HAL_RCC_OscConfig+0x36e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b05      	cmp	r3, #5
 8004636:	d10c      	bne.n	8004652 <HAL_RCC_OscConfig+0x356>
 8004638:	4b61      	ldr	r3, [pc, #388]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	4a60      	ldr	r2, [pc, #384]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800463e:	f043 0304 	orr.w	r3, r3, #4
 8004642:	6213      	str	r3, [r2, #32]
 8004644:	4b5e      	ldr	r3, [pc, #376]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4a5d      	ldr	r2, [pc, #372]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6213      	str	r3, [r2, #32]
 8004650:	e00b      	b.n	800466a <HAL_RCC_OscConfig+0x36e>
 8004652:	4b5b      	ldr	r3, [pc, #364]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	4a5a      	ldr	r2, [pc, #360]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	6213      	str	r3, [r2, #32]
 800465e:	4b58      	ldr	r3, [pc, #352]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	4a57      	ldr	r2, [pc, #348]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	f023 0304 	bic.w	r3, r3, #4
 8004668:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d015      	beq.n	800469e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004672:	f7fd f8af 	bl	80017d4 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004678:	e00a      	b.n	8004690 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467a:	f7fd f8ab 	bl	80017d4 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f241 3288 	movw	r2, #5000	; 0x1388
 8004688:	4293      	cmp	r3, r2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e0b1      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004690:	4b4b      	ldr	r3, [pc, #300]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ee      	beq.n	800467a <HAL_RCC_OscConfig+0x37e>
 800469c:	e014      	b.n	80046c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469e:	f7fd f899 	bl	80017d4 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f7fd f895 	bl	80017d4 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e09b      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046bc:	4b40      	ldr	r3, [pc, #256]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1ee      	bne.n	80046a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d105      	bne.n	80046da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ce:	4b3c      	ldr	r3, [pc, #240]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	4a3b      	ldr	r2, [pc, #236]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 8087 	beq.w	80047f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e4:	4b36      	ldr	r3, [pc, #216]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d061      	beq.n	80047b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d146      	bne.n	8004786 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f8:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <HAL_RCC_OscConfig+0x4cc>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fe:	f7fd f869 	bl	80017d4 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004706:	f7fd f865 	bl	80017d4 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e06d      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004718:	4b29      	ldr	r3, [pc, #164]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f0      	bne.n	8004706 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472c:	d108      	bne.n	8004740 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800472e:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	4921      	ldr	r1, [pc, #132]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	4313      	orrs	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004740:	4b1f      	ldr	r3, [pc, #124]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a19      	ldr	r1, [r3, #32]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	430b      	orrs	r3, r1
 8004752:	491b      	ldr	r1, [pc, #108]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004754:	4313      	orrs	r3, r2
 8004756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <HAL_RCC_OscConfig+0x4cc>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475e:	f7fd f839 	bl	80017d4 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004766:	f7fd f835 	bl	80017d4 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e03d      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004778:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x46a>
 8004784:	e035      	b.n	80047f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_RCC_OscConfig+0x4cc>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fd f822 	bl	80017d4 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004794:	f7fd f81e 	bl	80017d4 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e026      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x498>
 80047b2:	e01e      	b.n	80047f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d107      	bne.n	80047cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e019      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40007000 	.word	0x40007000
 80047c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_RCC_OscConfig+0x500>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d106      	bne.n	80047ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d001      	beq.n	80047f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40021000 	.word	0x40021000

08004800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0d0      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004814:	4b6a      	ldr	r3, [pc, #424]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d910      	bls.n	8004844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004822:	4b67      	ldr	r3, [pc, #412]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 0207 	bic.w	r2, r3, #7
 800482a:	4965      	ldr	r1, [pc, #404]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004832:	4b63      	ldr	r3, [pc, #396]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0b8      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d020      	beq.n	8004892 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800485c:	4b59      	ldr	r3, [pc, #356]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4a58      	ldr	r2, [pc, #352]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004866:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004874:	4b53      	ldr	r3, [pc, #332]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	4a52      	ldr	r2, [pc, #328]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800487a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800487e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004880:	4b50      	ldr	r3, [pc, #320]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	494d      	ldr	r1, [pc, #308]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d040      	beq.n	8004920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d107      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a6:	4b47      	ldr	r3, [pc, #284]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d115      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e07f      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d107      	bne.n	80048ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048be:	4b41      	ldr	r3, [pc, #260]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e073      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ce:	4b3d      	ldr	r3, [pc, #244]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e06b      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048de:	4b39      	ldr	r3, [pc, #228]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f023 0203 	bic.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4936      	ldr	r1, [pc, #216]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f0:	f7fc ff70 	bl	80017d4 <HAL_GetTick>
 80048f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f6:	e00a      	b.n	800490e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f8:	f7fc ff6c 	bl	80017d4 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	; 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e053      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	4b2d      	ldr	r3, [pc, #180]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 020c 	and.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	429a      	cmp	r2, r3
 800491e:	d1eb      	bne.n	80048f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004920:	4b27      	ldr	r3, [pc, #156]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d210      	bcs.n	8004950 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 0207 	bic.w	r2, r3, #7
 8004936:	4922      	ldr	r1, [pc, #136]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e032      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800495c:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4916      	ldr	r1, [pc, #88]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	490e      	ldr	r1, [pc, #56]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800498e:	f000 f821 	bl	80049d4 <HAL_RCC_GetSysClockFreq>
 8004992:	4602      	mov	r2, r0
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	091b      	lsrs	r3, r3, #4
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	490a      	ldr	r1, [pc, #40]	; (80049c8 <HAL_RCC_ClockConfig+0x1c8>)
 80049a0:	5ccb      	ldrb	r3, [r1, r3]
 80049a2:	fa22 f303 	lsr.w	r3, r2, r3
 80049a6:	4a09      	ldr	r2, [pc, #36]	; (80049cc <HAL_RCC_ClockConfig+0x1cc>)
 80049a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <HAL_RCC_ClockConfig+0x1d0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fc fe14 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40022000 	.word	0x40022000
 80049c4:	40021000 	.word	0x40021000
 80049c8:	0800d024 	.word	0x0800d024
 80049cc:	20000000 	.word	0x20000000
 80049d0:	20000004 	.word	0x20000004

080049d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	2300      	movs	r3, #0
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049ee:	4b1e      	ldr	r3, [pc, #120]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x94>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d002      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x30>
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d003      	beq.n	8004a0a <HAL_RCC_GetSysClockFreq+0x36>
 8004a02:	e027      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a04:	4b19      	ldr	r3, [pc, #100]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a06:	613b      	str	r3, [r7, #16]
      break;
 8004a08:	e027      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	0c9b      	lsrs	r3, r3, #18
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	4a17      	ldr	r2, [pc, #92]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a14:	5cd3      	ldrb	r3, [r2, r3]
 8004a16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d010      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a22:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	0c5b      	lsrs	r3, r3, #17
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	4a11      	ldr	r2, [pc, #68]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a2e:	5cd3      	ldrb	r3, [r2, r3]
 8004a30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a36:	fb03 f202 	mul.w	r2, r3, r2
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	e004      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	613b      	str	r3, [r7, #16]
      break;
 8004a52:	e002      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a54:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_RCC_GetSysClockFreq+0xa8>)
 8004a56:	613b      	str	r3, [r7, #16]
      break;
 8004a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a5a:	693b      	ldr	r3, [r7, #16]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	00f42400 	.word	0x00f42400
 8004a70:	0800d03c 	.word	0x0800d03c
 8004a74:	0800d04c 	.word	0x0800d04c
 8004a78:	003d0900 	.word	0x003d0900
 8004a7c:	007a1200 	.word	0x007a1200

08004a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a84:	4b02      	ldr	r3, [pc, #8]	; (8004a90 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	20000000 	.word	0x20000000

08004a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a98:	f7ff fff2 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	0a1b      	lsrs	r3, r3, #8
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	4903      	ldr	r1, [pc, #12]	; (8004ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aaa:	5ccb      	ldrb	r3, [r1, r3]
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	0800d034 	.word	0x0800d034

08004abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ac0:	f7ff ffde 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	4b05      	ldr	r3, [pc, #20]	; (8004adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	0adb      	lsrs	r3, r3, #11
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	4903      	ldr	r1, [pc, #12]	; (8004ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ad2:	5ccb      	ldrb	r3, [r1, r3]
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	0800d034 	.word	0x0800d034

08004ae4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	220f      	movs	r2, #15
 8004af2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004af4:	4b11      	ldr	r3, [pc, #68]	; (8004b3c <HAL_RCC_GetClockConfig+0x58>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 0203 	and.w	r2, r3, #3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b00:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <HAL_RCC_GetClockConfig+0x58>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <HAL_RCC_GetClockConfig+0x58>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b18:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <HAL_RCC_GetClockConfig+0x58>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	08db      	lsrs	r3, r3, #3
 8004b1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b26:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <HAL_RCC_GetClockConfig+0x5c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0207 	and.w	r2, r3, #7
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	40022000 	.word	0x40022000

08004b44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <RCC_Delay+0x34>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a0a      	ldr	r2, [pc, #40]	; (8004b7c <RCC_Delay+0x38>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	0a5b      	lsrs	r3, r3, #9
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b60:	bf00      	nop
  }
  while (Delay --);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1e5a      	subs	r2, r3, #1
 8004b66:	60fa      	str	r2, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f9      	bne.n	8004b60 <RCC_Delay+0x1c>
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr
 8004b78:	20000000 	.word	0x20000000
 8004b7c:	10624dd3 	.word	0x10624dd3

08004b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d07d      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ba0:	4b4f      	ldr	r3, [pc, #316]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10d      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bac:	4b4c      	ldr	r3, [pc, #304]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	4a4b      	ldr	r2, [pc, #300]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	61d3      	str	r3, [r2, #28]
 8004bb8:	4b49      	ldr	r3, [pc, #292]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc8:	4b46      	ldr	r3, [pc, #280]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d118      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bd4:	4b43      	ldr	r3, [pc, #268]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a42      	ldr	r2, [pc, #264]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be0:	f7fc fdf8 	bl	80017d4 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be6:	e008      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be8:	f7fc fdf4 	bl	80017d4 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	; 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e06d      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfa:	4b3a      	ldr	r3, [pc, #232]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c06:	4b36      	ldr	r3, [pc, #216]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d02e      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d027      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c24:	4b2e      	ldr	r3, [pc, #184]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c2e:	4b2e      	ldr	r3, [pc, #184]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c34:	4b2c      	ldr	r3, [pc, #176]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c3a:	4a29      	ldr	r2, [pc, #164]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d014      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4a:	f7fc fdc3 	bl	80017d4 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c50:	e00a      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c52:	f7fc fdbf 	bl	80017d4 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e036      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c68:	4b1d      	ldr	r3, [pc, #116]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0ee      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c74:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	4917      	ldr	r1, [pc, #92]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c86:	7dfb      	ldrb	r3, [r7, #23]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d105      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c8c:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ca4:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	490b      	ldr	r1, [pc, #44]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d008      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cc2:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	4904      	ldr	r1, [pc, #16]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	40007000 	.word	0x40007000
 8004ce8:	42420440 	.word	0x42420440

08004cec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	2300      	movs	r3, #0
 8004d06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b10      	cmp	r3, #16
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	f200 8089 	bhi.w	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d045      	beq.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d074      	beq.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004d22:	e081      	b.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 8004d24:	4b45      	ldr	r3, [pc, #276]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004d2a:	4b44      	ldr	r3, [pc, #272]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d07a      	beq.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	0c9b      	lsrs	r3, r3, #18
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	4a40      	ldr	r2, [pc, #256]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d40:	5cd3      	ldrb	r3, [r2, r3]
 8004d42:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d015      	beq.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d4e:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	0c5b      	lsrs	r3, r3, #17
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	4a3a      	ldr	r2, [pc, #232]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004d5a:	5cd3      	ldrb	r3, [r2, r3]
 8004d5c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00d      	beq.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004d68:	4a37      	ldr	r2, [pc, #220]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	fb02 f303 	mul.w	r3, r2, r3
 8004d76:	61fb      	str	r3, [r7, #28]
 8004d78:	e004      	b.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4a33      	ldr	r2, [pc, #204]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004d84:	4b2d      	ldr	r3, [pc, #180]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d90:	d102      	bne.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	61bb      	str	r3, [r7, #24]
      break;
 8004d96:	e049      	b.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	4a2c      	ldr	r2, [pc, #176]	; (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	085b      	lsrs	r3, r3, #1
 8004da4:	61bb      	str	r3, [r7, #24]
      break;
 8004da6:	e041      	b.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8004da8:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db8:	d108      	bne.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	e01e      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd6:	d109      	bne.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004dd8:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004de4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	e00e      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df6:	d11b      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004df8:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d015      	beq.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 8004e04:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e06:	61bb      	str	r3, [r7, #24]
      break;
 8004e08:	e012      	b.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004e0a:	e011      	b.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004e0c:	f7ff fe56 	bl	8004abc <HAL_RCC_GetPCLK2Freq>
 8004e10:	4602      	mov	r2, r0
 8004e12:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	0b9b      	lsrs	r3, r3, #14
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e24:	61bb      	str	r3, [r7, #24]
      break;
 8004e26:	e004      	b.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8004e28:	bf00      	nop
 8004e2a:	e002      	b.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8004e2c:	bf00      	nop
 8004e2e:	e000      	b.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8004e30:	bf00      	nop
    }
  }
  return (frequency);
 8004e32:	69bb      	ldr	r3, [r7, #24]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3720      	adds	r7, #32
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	0800d050 	.word	0x0800d050
 8004e44:	0800d060 	.word	0x0800d060
 8004e48:	00f42400 	.word	0x00f42400
 8004e4c:	003d0900 	.word	0x003d0900
 8004e50:	aaaaaaab 	.word	0xaaaaaaab
 8004e54:	0001e848 	.word	0x0001e848

08004e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e041      	b.n	8004eee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f839 	bl	8004ef6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f000 fb68 	bl	800556c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d001      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e03a      	b.n	8004f96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <HAL_TIM_Base_Start_IT+0x98>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00e      	beq.n	8004f60 <HAL_TIM_Base_Start_IT+0x58>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4a:	d009      	beq.n	8004f60 <HAL_TIM_Base_Start_IT+0x58>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <HAL_TIM_Base_Start_IT+0x58>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d111      	bne.n	8004f84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b06      	cmp	r3, #6
 8004f70:	d010      	beq.n	8004f94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0201 	orr.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f82:	e007      	b.n	8004f94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800

08004fac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e041      	b.n	8005042 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fc f9ea 	bl	80013ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f000 fabe 	bl	800556c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <HAL_TIM_PWM_Start+0x24>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e022      	b.n	80050b6 <HAL_TIM_PWM_Start+0x6a>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b04      	cmp	r3, #4
 8005074:	d109      	bne.n	800508a <HAL_TIM_PWM_Start+0x3e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	bf14      	ite	ne
 8005082:	2301      	movne	r3, #1
 8005084:	2300      	moveq	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e015      	b.n	80050b6 <HAL_TIM_PWM_Start+0x6a>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b08      	cmp	r3, #8
 800508e:	d109      	bne.n	80050a4 <HAL_TIM_PWM_Start+0x58>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	bf14      	ite	ne
 800509c:	2301      	movne	r3, #1
 800509e:	2300      	moveq	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e008      	b.n	80050b6 <HAL_TIM_PWM_Start+0x6a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	bf14      	ite	ne
 80050b0:	2301      	movne	r3, #1
 80050b2:	2300      	moveq	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e05e      	b.n	800517c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_PWM_Start+0x82>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050cc:	e013      	b.n	80050f6 <HAL_TIM_PWM_Start+0xaa>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d104      	bne.n	80050de <HAL_TIM_PWM_Start+0x92>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050dc:	e00b      	b.n	80050f6 <HAL_TIM_PWM_Start+0xaa>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_PWM_Start+0xa2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ec:	e003      	b.n	80050f6 <HAL_TIM_PWM_Start+0xaa>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2201      	movs	r2, #1
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fc1e 	bl	8005940 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1e      	ldr	r2, [pc, #120]	; (8005184 <HAL_TIM_PWM_Start+0x138>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d107      	bne.n	800511e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800511c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a18      	ldr	r2, [pc, #96]	; (8005184 <HAL_TIM_PWM_Start+0x138>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00e      	beq.n	8005146 <HAL_TIM_PWM_Start+0xfa>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005130:	d009      	beq.n	8005146 <HAL_TIM_PWM_Start+0xfa>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a14      	ldr	r2, [pc, #80]	; (8005188 <HAL_TIM_PWM_Start+0x13c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d004      	beq.n	8005146 <HAL_TIM_PWM_Start+0xfa>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a12      	ldr	r2, [pc, #72]	; (800518c <HAL_TIM_PWM_Start+0x140>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d111      	bne.n	800516a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b06      	cmp	r3, #6
 8005156:	d010      	beq.n	800517a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005168:	e007      	b.n	800517a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0201 	orr.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40000400 	.word	0x40000400
 800518c:	40000800 	.word	0x40000800

08005190 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d122      	bne.n	80051ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d11b      	bne.n	80051ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0202 	mvn.w	r2, #2
 80051bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f9af 	bl	8005536 <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f9a2 	bl	8005524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f9b1 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d122      	bne.n	8005240 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b04      	cmp	r3, #4
 8005206:	d11b      	bne.n	8005240 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0204 	mvn.w	r2, #4
 8005210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2202      	movs	r2, #2
 8005216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f985 	bl	8005536 <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f978 	bl	8005524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f987 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b08      	cmp	r3, #8
 800524c:	d122      	bne.n	8005294 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b08      	cmp	r3, #8
 800525a:	d11b      	bne.n	8005294 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0208 	mvn.w	r2, #8
 8005264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2204      	movs	r2, #4
 800526a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f95b 	bl	8005536 <HAL_TIM_IC_CaptureCallback>
 8005280:	e005      	b.n	800528e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f94e 	bl	8005524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f95d 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d122      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d11b      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0210 	mvn.w	r2, #16
 80052b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2208      	movs	r2, #8
 80052be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f931 	bl	8005536 <HAL_TIM_IC_CaptureCallback>
 80052d4:	e005      	b.n	80052e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f924 	bl	8005524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f933 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d10e      	bne.n	8005314 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	d107      	bne.n	8005314 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0201 	mvn.w	r2, #1
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fb ff44 	bl	800119c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	2b80      	cmp	r3, #128	; 0x80
 8005320:	d10e      	bne.n	8005340 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532c:	2b80      	cmp	r3, #128	; 0x80
 800532e:	d107      	bne.n	8005340 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fbdc 	bl	8005af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534a:	2b40      	cmp	r3, #64	; 0x40
 800534c:	d10e      	bne.n	800536c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	2b40      	cmp	r3, #64	; 0x40
 800535a:	d107      	bne.n	800536c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f8f7 	bl	800555a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b20      	cmp	r3, #32
 8005378:	d10e      	bne.n	8005398 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b20      	cmp	r3, #32
 8005386:	d107      	bne.n	8005398 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0220 	mvn.w	r2, #32
 8005390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fba7 	bl	8005ae6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e0ae      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b0c      	cmp	r3, #12
 80053ca:	f200 809f 	bhi.w	800550c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053ce:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	08005409 	.word	0x08005409
 80053d8:	0800550d 	.word	0x0800550d
 80053dc:	0800550d 	.word	0x0800550d
 80053e0:	0800550d 	.word	0x0800550d
 80053e4:	08005449 	.word	0x08005449
 80053e8:	0800550d 	.word	0x0800550d
 80053ec:	0800550d 	.word	0x0800550d
 80053f0:	0800550d 	.word	0x0800550d
 80053f4:	0800548b 	.word	0x0800548b
 80053f8:	0800550d 	.word	0x0800550d
 80053fc:	0800550d 	.word	0x0800550d
 8005400:	0800550d 	.word	0x0800550d
 8005404:	080054cb 	.word	0x080054cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 f90e 	bl	8005630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0208 	orr.w	r2, r2, #8
 8005422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0204 	bic.w	r2, r2, #4
 8005432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6999      	ldr	r1, [r3, #24]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	619a      	str	r2, [r3, #24]
      break;
 8005446:	e064      	b.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 f954 	bl	80056fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6999      	ldr	r1, [r3, #24]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	021a      	lsls	r2, r3, #8
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	619a      	str	r2, [r3, #24]
      break;
 8005488:	e043      	b.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 f99d 	bl	80057d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0208 	orr.w	r2, r2, #8
 80054a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0204 	bic.w	r2, r2, #4
 80054b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69d9      	ldr	r1, [r3, #28]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	61da      	str	r2, [r3, #28]
      break;
 80054c8:	e023      	b.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 f9e7 	bl	80058a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69da      	ldr	r2, [r3, #28]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69d9      	ldr	r1, [r3, #28]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	021a      	lsls	r2, r3, #8
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	61da      	str	r2, [r3, #28]
      break;
 800550a:	e002      	b.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	75fb      	strb	r3, [r7, #23]
      break;
 8005510:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800551a:	7dfb      	ldrb	r3, [r7, #23]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr

08005548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr

0800555a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a29      	ldr	r2, [pc, #164]	; (8005624 <TIM_Base_SetConfig+0xb8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00b      	beq.n	800559c <TIM_Base_SetConfig+0x30>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558a:	d007      	beq.n	800559c <TIM_Base_SetConfig+0x30>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a26      	ldr	r2, [pc, #152]	; (8005628 <TIM_Base_SetConfig+0xbc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_Base_SetConfig+0x30>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a25      	ldr	r2, [pc, #148]	; (800562c <TIM_Base_SetConfig+0xc0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d108      	bne.n	80055ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a1c      	ldr	r2, [pc, #112]	; (8005624 <TIM_Base_SetConfig+0xb8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00b      	beq.n	80055ce <TIM_Base_SetConfig+0x62>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055bc:	d007      	beq.n	80055ce <TIM_Base_SetConfig+0x62>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a19      	ldr	r2, [pc, #100]	; (8005628 <TIM_Base_SetConfig+0xbc>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_Base_SetConfig+0x62>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a18      	ldr	r2, [pc, #96]	; (800562c <TIM_Base_SetConfig+0xc0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d108      	bne.n	80055e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a07      	ldr	r2, [pc, #28]	; (8005624 <TIM_Base_SetConfig+0xb8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d103      	bne.n	8005614 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	615a      	str	r2, [r3, #20]
}
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	bc80      	pop	{r7}
 8005622:	4770      	bx	lr
 8005624:	40012c00 	.word	0x40012c00
 8005628:	40000400 	.word	0x40000400
 800562c:	40000800 	.word	0x40000800

08005630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f023 0201 	bic.w	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f023 0302 	bic.w	r3, r3, #2
 8005678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a1c      	ldr	r2, [pc, #112]	; (80056f8 <TIM_OC1_SetConfig+0xc8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d10c      	bne.n	80056a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f023 0308 	bic.w	r3, r3, #8
 8005692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f023 0304 	bic.w	r3, r3, #4
 80056a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <TIM_OC1_SetConfig+0xc8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d111      	bne.n	80056d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	621a      	str	r2, [r3, #32]
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40012c00 	.word	0x40012c00

080056fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	f023 0210 	bic.w	r2, r3, #16
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f023 0320 	bic.w	r3, r3, #32
 8005746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <TIM_OC2_SetConfig+0xd0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d10d      	bne.n	8005778 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a14      	ldr	r2, [pc, #80]	; (80057cc <TIM_OC2_SetConfig+0xd0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d113      	bne.n	80057a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800578e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr
 80057cc:	40012c00 	.word	0x40012c00

080057d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0303 	bic.w	r3, r3, #3
 8005806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <TIM_OC3_SetConfig+0xd0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d10d      	bne.n	800584a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005834:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a14      	ldr	r2, [pc, #80]	; (80058a0 <TIM_OC3_SetConfig+0xd0>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d113      	bne.n	800587a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	621a      	str	r2, [r3, #32]
}
 8005894:	bf00      	nop
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40012c00 	.word	0x40012c00

080058a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	021b      	lsls	r3, r3, #8
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	031b      	lsls	r3, r3, #12
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a0f      	ldr	r2, [pc, #60]	; (800593c <TIM_OC4_SetConfig+0x98>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d109      	bne.n	8005918 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800590a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	019b      	lsls	r3, r3, #6
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	621a      	str	r2, [r3, #32]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr
 800593c:	40012c00 	.word	0x40012c00

08005940 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	2201      	movs	r2, #1
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a1a      	ldr	r2, [r3, #32]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	43db      	mvns	r3, r3
 8005962:	401a      	ands	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a1a      	ldr	r2, [r3, #32]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	fa01 f303 	lsl.w	r3, r1, r3
 8005978:	431a      	orrs	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr

08005988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800599c:	2302      	movs	r3, #2
 800599e:	e046      	b.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a16      	ldr	r2, [pc, #88]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00e      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ec:	d009      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a12      	ldr	r2, [pc, #72]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d004      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a10      	ldr	r2, [pc, #64]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d10c      	bne.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800

08005a44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e03d      	b.n	8005adc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr

08005af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e042      	b.n	8005ba2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fb fcf3 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2224      	movs	r2, #36	; 0x24
 8005b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f82c 	bl	8005bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005be6:	f023 030c 	bic.w	r3, r3, #12
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6812      	ldr	r2, [r2, #0]
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699a      	ldr	r2, [r3, #24]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a2c      	ldr	r2, [pc, #176]	; (8005cc0 <UART_SetConfig+0x114>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d103      	bne.n	8005c1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c14:	f7fe ff52 	bl	8004abc <HAL_RCC_GetPCLK2Freq>
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	e002      	b.n	8005c22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c1c:	f7fe ff3a 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 8005c20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	009a      	lsls	r2, r3, #2
 8005c2c:	441a      	add	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c38:	4a22      	ldr	r2, [pc, #136]	; (8005cc4 <UART_SetConfig+0x118>)
 8005c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	0119      	lsls	r1, r3, #4
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	009a      	lsls	r2, r3, #2
 8005c4c:	441a      	add	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c58:	4b1a      	ldr	r3, [pc, #104]	; (8005cc4 <UART_SetConfig+0x118>)
 8005c5a:	fba3 0302 	umull	r0, r3, r3, r2
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	2064      	movs	r0, #100	; 0x64
 8005c62:	fb00 f303 	mul.w	r3, r0, r3
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	3332      	adds	r3, #50	; 0x32
 8005c6c:	4a15      	ldr	r2, [pc, #84]	; (8005cc4 <UART_SetConfig+0x118>)
 8005c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c78:	4419      	add	r1, r3
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	009a      	lsls	r2, r3, #2
 8005c84:	441a      	add	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c90:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <UART_SetConfig+0x118>)
 8005c92:	fba3 0302 	umull	r0, r3, r3, r2
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	2064      	movs	r0, #100	; 0x64
 8005c9a:	fb00 f303 	mul.w	r3, r0, r3
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	3332      	adds	r3, #50	; 0x32
 8005ca4:	4a07      	ldr	r2, [pc, #28]	; (8005cc4 <UART_SetConfig+0x118>)
 8005ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	f003 020f 	and.w	r2, r3, #15
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	40013800 	.word	0x40013800
 8005cc4:	51eb851f 	.word	0x51eb851f

08005cc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005cc8:	b084      	sub	sp, #16
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	f107 0014 	add.w	r0, r7, #20
 8005cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	b004      	add	sp, #16
 8005ce6:	4770      	bx	lr

08005ce8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005cf8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005cfc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bc80      	pop	{r7}
 8005d12:	4770      	bx	lr

08005d14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d1c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d20:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	43db      	mvns	r3, r3
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	4013      	ands	r3, r2
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bc80      	pop	{r7}
 8005d46:	4770      	bx	lr

08005d48 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr

08005d60 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d60:	b084      	sub	sp, #16
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	f107 0014 	add.w	r0, r7, #20
 8005d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	b004      	add	sp, #16
 8005d9e:	4770      	bx	lr

08005da0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b09d      	sub	sp, #116	; 0x74
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	78db      	ldrb	r3, [r3, #3]
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d81f      	bhi.n	8005e12 <USB_ActivateEndpoint+0x72>
 8005dd2:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <USB_ActivateEndpoint+0x38>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005de9 	.word	0x08005de9
 8005ddc:	08005e05 	.word	0x08005e05
 8005de0:	08005e1b 	.word	0x08005e1b
 8005de4:	08005df7 	.word	0x08005df7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005de8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005df0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005df4:	e012      	b.n	8005e1c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005df6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005dfa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005dfe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e02:	e00b      	b.n	8005e1c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005e04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e10:	e004      	b.n	8005e1c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005e18:	e000      	b.n	8005e1c <USB_ActivateEndpoint+0x7c>
      break;
 8005e1a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	441a      	add	r2, r3
 8005e26:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	441a      	add	r2, r3
 8005e6c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	7b1b      	ldrb	r3, [r3, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f040 8178 	bne.w	800617e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 8084 	beq.w	8005fa0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	011a      	lsls	r2, r3, #4
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	88db      	ldrh	r3, [r3, #6]
 8005ec0:	085b      	lsrs	r3, r3, #1
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	827b      	strh	r3, [r7, #18]
 8005eda:	8a7b      	ldrh	r3, [r7, #18]
 8005edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01b      	beq.n	8005f1c <USB_ActivateEndpoint+0x17c>
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	823b      	strh	r3, [r7, #16]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	441a      	add	r2, r3
 8005f06:	8a3b      	ldrh	r3, [r7, #16]
 8005f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	78db      	ldrb	r3, [r3, #3]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d020      	beq.n	8005f66 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f3a:	81bb      	strh	r3, [r7, #12]
 8005f3c:	89bb      	ldrh	r3, [r7, #12]
 8005f3e:	f083 0320 	eor.w	r3, r3, #32
 8005f42:	81bb      	strh	r3, [r7, #12]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	441a      	add	r2, r3
 8005f4e:	89bb      	ldrh	r3, [r7, #12]
 8005f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	8013      	strh	r3, [r2, #0]
 8005f64:	e2d5      	b.n	8006512 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f7c:	81fb      	strh	r3, [r7, #14]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	441a      	add	r2, r3
 8005f88:	89fb      	ldrh	r3, [r7, #14]
 8005f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	8013      	strh	r3, [r2, #0]
 8005f9e:	e2b8      	b.n	8006512 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	461a      	mov	r2, r3
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	4413      	add	r3, r2
 8005fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	011a      	lsls	r2, r3, #4
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	88db      	ldrh	r3, [r3, #6]
 8005fc8:	085b      	lsrs	r3, r3, #1
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	4413      	add	r3, r2
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	011a      	lsls	r2, r3, #4
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006002:	b29a      	uxth	r2, r3
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b3e      	cmp	r3, #62	; 0x3e
 800600e:	d91d      	bls.n	800604c <USB_ActivateEndpoint+0x2ac>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	66bb      	str	r3, [r7, #104]	; 0x68
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <USB_ActivateEndpoint+0x28a>
 8006024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006026:	3b01      	subs	r3, #1
 8006028:	66bb      	str	r3, [r7, #104]	; 0x68
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29a      	uxth	r2, r3
 8006030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006032:	b29b      	uxth	r3, r3
 8006034:	029b      	lsls	r3, r3, #10
 8006036:	b29b      	uxth	r3, r3
 8006038:	4313      	orrs	r3, r2
 800603a:	b29b      	uxth	r3, r3
 800603c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006044:	b29a      	uxth	r2, r3
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	801a      	strh	r2, [r3, #0]
 800604a:	e026      	b.n	800609a <USB_ActivateEndpoint+0x2fa>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <USB_ActivateEndpoint+0x2ca>
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006062:	b29a      	uxth	r2, r3
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	801a      	strh	r2, [r3, #0]
 8006068:	e017      	b.n	800609a <USB_ActivateEndpoint+0x2fa>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	085b      	lsrs	r3, r3, #1
 8006070:	66bb      	str	r3, [r7, #104]	; 0x68
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <USB_ActivateEndpoint+0x2e4>
 800607e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006080:	3301      	adds	r3, #1
 8006082:	66bb      	str	r3, [r7, #104]	; 0x68
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	b29a      	uxth	r2, r3
 800608a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800608c:	b29b      	uxth	r3, r3
 800608e:	029b      	lsls	r3, r3, #10
 8006090:	b29b      	uxth	r3, r3
 8006092:	4313      	orrs	r3, r2
 8006094:	b29a      	uxth	r2, r3
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80060a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01b      	beq.n	80060ea <USB_ActivateEndpoint+0x34a>
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c8:	843b      	strh	r3, [r7, #32]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	441a      	add	r2, r3
 80060d4:	8c3b      	ldrh	r3, [r7, #32]
 80060d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d124      	bne.n	800613c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006108:	83bb      	strh	r3, [r7, #28]
 800610a:	8bbb      	ldrh	r3, [r7, #28]
 800610c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006110:	83bb      	strh	r3, [r7, #28]
 8006112:	8bbb      	ldrh	r3, [r7, #28]
 8006114:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006118:	83bb      	strh	r3, [r7, #28]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	441a      	add	r2, r3
 8006124:	8bbb      	ldrh	r3, [r7, #28]
 8006126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006136:	b29b      	uxth	r3, r3
 8006138:	8013      	strh	r3, [r2, #0]
 800613a:	e1ea      	b.n	8006512 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	83fb      	strh	r3, [r7, #30]
 8006154:	8bfb      	ldrh	r3, [r7, #30]
 8006156:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800615a:	83fb      	strh	r3, [r7, #30]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	441a      	add	r2, r3
 8006166:	8bfb      	ldrh	r3, [r7, #30]
 8006168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800616c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006178:	b29b      	uxth	r3, r3
 800617a:	8013      	strh	r3, [r2, #0]
 800617c:	e1c9      	b.n	8006512 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	78db      	ldrb	r3, [r3, #3]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d11e      	bne.n	80061c4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	441a      	add	r2, r3
 80061aa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80061ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80061ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061be:	b29b      	uxth	r3, r3
 80061c0:	8013      	strh	r3, [r2, #0]
 80061c2:	e01d      	b.n	8006200 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80061d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	441a      	add	r2, r3
 80061e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80061ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800620a:	b29b      	uxth	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006210:	4413      	add	r3, r2
 8006212:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	011a      	lsls	r2, r3, #4
 800621a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800621c:	4413      	add	r3, r2
 800621e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006222:	65bb      	str	r3, [r7, #88]	; 0x58
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	891b      	ldrh	r3, [r3, #8]
 8006228:	085b      	lsrs	r3, r3, #1
 800622a:	b29b      	uxth	r3, r3
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	657b      	str	r3, [r7, #84]	; 0x54
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800623e:	b29b      	uxth	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006244:	4413      	add	r3, r2
 8006246:	657b      	str	r3, [r7, #84]	; 0x54
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	011a      	lsls	r2, r3, #4
 800624e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006250:	4413      	add	r3, r2
 8006252:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006256:	653b      	str	r3, [r7, #80]	; 0x50
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	895b      	ldrh	r3, [r3, #10]
 800625c:	085b      	lsrs	r3, r3, #1
 800625e:	b29b      	uxth	r3, r3
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006266:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f040 8093 	bne.w	8006398 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006282:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d01b      	beq.n	80062c6 <USB_ActivateEndpoint+0x526>
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	441a      	add	r2, r3
 80062b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80062b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80062d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80062d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01b      	beq.n	8006316 <USB_ActivateEndpoint+0x576>
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	441a      	add	r2, r3
 8006300:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006312:	b29b      	uxth	r3, r3
 8006314:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632c:	873b      	strh	r3, [r7, #56]	; 0x38
 800632e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006330:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006334:	873b      	strh	r3, [r7, #56]	; 0x38
 8006336:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006338:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800633c:	873b      	strh	r3, [r7, #56]	; 0x38
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	441a      	add	r2, r3
 8006348:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800634a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800634e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635a:	b29b      	uxth	r3, r3
 800635c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006374:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	441a      	add	r2, r3
 8006380:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800638a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800638e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006392:	b29b      	uxth	r3, r3
 8006394:	8013      	strh	r3, [r2, #0]
 8006396:	e0bc      	b.n	8006512 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80063a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80063ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01d      	beq.n	80063f0 <USB_ActivateEndpoint+0x650>
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	441a      	add	r2, r3
 80063d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80063dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006400:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01d      	beq.n	8006448 <USB_ActivateEndpoint+0x6a8>
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	b29b      	uxth	r3, r3
 800641a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006422:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	441a      	add	r2, r3
 8006430:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006440:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006444:	b29b      	uxth	r3, r3
 8006446:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	78db      	ldrb	r3, [r3, #3]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d024      	beq.n	800649a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006466:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800646a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800646e:	f083 0320 	eor.w	r3, r3, #32
 8006472:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	441a      	add	r2, r3
 8006480:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800648c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006494:	b29b      	uxth	r3, r3
 8006496:	8013      	strh	r3, [r2, #0]
 8006498:	e01d      	b.n	80064d6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	441a      	add	r2, r3
 80064be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80064c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	441a      	add	r2, r3
 80064fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80064fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800650a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650e:	b29b      	uxth	r3, r3
 8006510:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006512:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006516:	4618      	mov	r0, r3
 8006518:	3774      	adds	r7, #116	; 0x74
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr

08006520 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006520:	b480      	push	{r7}
 8006522:	b08d      	sub	sp, #52	; 0x34
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	7b1b      	ldrb	r3, [r3, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f040 808e 	bne.w	8006650 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d044      	beq.n	80065c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	81bb      	strh	r3, [r7, #12]
 800654a:	89bb      	ldrh	r3, [r7, #12]
 800654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01b      	beq.n	800658c <USB_DeactivateEndpoint+0x6c>
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656a:	817b      	strh	r3, [r7, #10]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	441a      	add	r2, r3
 8006576:	897b      	ldrh	r3, [r7, #10]
 8006578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800657c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006584:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006588:	b29b      	uxth	r3, r3
 800658a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	b29b      	uxth	r3, r3
 800659a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800659e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a2:	813b      	strh	r3, [r7, #8]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	441a      	add	r2, r3
 80065ae:	893b      	ldrh	r3, [r7, #8]
 80065b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	8013      	strh	r3, [r2, #0]
 80065c4:	e192      	b.n	80068ec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	827b      	strh	r3, [r7, #18]
 80065d4:	8a7b      	ldrh	r3, [r7, #18]
 80065d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d01b      	beq.n	8006616 <USB_DeactivateEndpoint+0xf6>
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f4:	823b      	strh	r3, [r7, #16]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	441a      	add	r2, r3
 8006600:	8a3b      	ldrh	r3, [r7, #16]
 8006602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800660e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006612:	b29b      	uxth	r3, r3
 8006614:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662c:	81fb      	strh	r3, [r7, #14]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	441a      	add	r2, r3
 8006638:	89fb      	ldrh	r3, [r7, #14]
 800663a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800663e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664a:	b29b      	uxth	r3, r3
 800664c:	8013      	strh	r3, [r2, #0]
 800664e:	e14d      	b.n	80068ec <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f040 80a5 	bne.w	80067a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	843b      	strh	r3, [r7, #32]
 8006668:	8c3b      	ldrh	r3, [r7, #32]
 800666a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d01b      	beq.n	80066aa <USB_DeactivateEndpoint+0x18a>
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006688:	83fb      	strh	r3, [r7, #30]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	441a      	add	r2, r3
 8006694:	8bfb      	ldrh	r3, [r7, #30]
 8006696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	83bb      	strh	r3, [r7, #28]
 80066b8:	8bbb      	ldrh	r3, [r7, #28]
 80066ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01b      	beq.n	80066fa <USB_DeactivateEndpoint+0x1da>
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d8:	837b      	strh	r3, [r7, #26]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	441a      	add	r2, r3
 80066e4:	8b7b      	ldrh	r3, [r7, #26]
 80066e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006710:	833b      	strh	r3, [r7, #24]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	441a      	add	r2, r3
 800671c:	8b3b      	ldrh	r3, [r7, #24]
 800671e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800672e:	b29b      	uxth	r3, r3
 8006730:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	b29b      	uxth	r3, r3
 8006740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006748:	82fb      	strh	r3, [r7, #22]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	441a      	add	r2, r3
 8006754:	8afb      	ldrh	r3, [r7, #22]
 8006756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800675e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006766:	b29b      	uxth	r3, r3
 8006768:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006780:	82bb      	strh	r3, [r7, #20]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	441a      	add	r2, r3
 800678c:	8abb      	ldrh	r3, [r7, #20]
 800678e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800679a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800679e:	b29b      	uxth	r3, r3
 80067a0:	8013      	strh	r3, [r2, #0]
 80067a2:	e0a3      	b.n	80068ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80067b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01b      	beq.n	80067f4 <USB_DeactivateEndpoint+0x2d4>
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	441a      	add	r2, r3
 80067de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80067e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006802:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01b      	beq.n	8006844 <USB_DeactivateEndpoint+0x324>
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006822:	853b      	strh	r3, [r7, #40]	; 0x28
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	441a      	add	r2, r3
 800682e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800683c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006840:	b29b      	uxth	r3, r3
 8006842:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	441a      	add	r2, r3
 8006866:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800686c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006870:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006878:	b29b      	uxth	r3, r3
 800687a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	b29b      	uxth	r3, r3
 800688a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006892:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	441a      	add	r2, r3
 800689e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	441a      	add	r2, r3
 80068d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3734      	adds	r7, #52	; 0x34
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr

080068f8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b0c2      	sub	sp, #264	; 0x108
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006902:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006906:	6018      	str	r0, [r3, #0]
 8006908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006910:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	785b      	ldrb	r3, [r3, #1]
 800691e:	2b01      	cmp	r3, #1
 8006920:	f040 86b7 	bne.w	8007692 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	699a      	ldr	r2, [r3, #24]
 8006930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	429a      	cmp	r2, r3
 800693e:	d908      	bls.n	8006952 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006950:	e007      	b.n	8006962 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	7b1b      	ldrb	r3, [r3, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d13a      	bne.n	80069e8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6959      	ldr	r1, [r3, #20]
 800697e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	88da      	ldrh	r2, [r3, #6]
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698e:	b29b      	uxth	r3, r3
 8006990:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006994:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006998:	6800      	ldr	r0, [r0, #0]
 800699a:	f001 fc9c 	bl	80082d6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800699e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	613b      	str	r3, [r7, #16]
 80069aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	461a      	mov	r2, r3
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	4413      	add	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]
 80069c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	011a      	lsls	r2, r3, #4
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	4413      	add	r3, r2
 80069d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	f000 be1f 	b.w	8007626 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80069e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	78db      	ldrb	r3, [r3, #3]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	f040 8462 	bne.w	80072be <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80069fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a1a      	ldr	r2, [r3, #32]
 8006a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	f240 83df 	bls.w	80071d6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	441a      	add	r2, r3
 8006a5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a68:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6a1a      	ldr	r2, [r3, #32]
 8006a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a84:	1ad2      	subs	r2, r2, r3
 8006a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 81c7 	beq.w	8006e48 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006abe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	785b      	ldrb	r3, [r3, #1]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d177      	bne.n	8006bc6 <USB_EPStartXfer+0x2ce>
 8006ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	461a      	mov	r2, r3
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	4413      	add	r3, r2
 8006af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	011a      	lsls	r2, r3, #4
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	801a      	strh	r2, [r3, #0]
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b26:	2b3e      	cmp	r3, #62	; 0x3e
 8006b28:	d921      	bls.n	8006b6e <USB_EPStartXfer+0x276>
 8006b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b38:	f003 031f 	and.w	r3, r3, #31
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <USB_EPStartXfer+0x252>
 8006b40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b44:	3b01      	subs	r3, #1
 8006b46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	029b      	lsls	r3, r3, #10
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	801a      	strh	r2, [r3, #0]
 8006b6c:	e050      	b.n	8006c10 <USB_EPStartXfer+0x318>
 8006b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10a      	bne.n	8006b8c <USB_EPStartXfer+0x294>
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	801a      	strh	r2, [r3, #0]
 8006b8a:	e041      	b.n	8006c10 <USB_EPStartXfer+0x318>
 8006b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b90:	085b      	lsrs	r3, r3, #1
 8006b92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d004      	beq.n	8006bac <USB_EPStartXfer+0x2b4>
 8006ba2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	029b      	lsls	r3, r3, #10
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	e024      	b.n	8006c10 <USB_EPStartXfer+0x318>
 8006bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	785b      	ldrb	r3, [r3, #1]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d11c      	bne.n	8006c10 <USB_EPStartXfer+0x318>
 8006bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	461a      	mov	r2, r3
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	4413      	add	r3, r2
 8006bec:	633b      	str	r3, [r7, #48]	; 0x30
 8006bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	011a      	lsls	r2, r3, #4
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	4413      	add	r3, r2
 8006c00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	895b      	ldrh	r3, [r3, #10]
 8006c1c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6959      	ldr	r1, [r3, #20]
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c3a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c3e:	6800      	ldr	r0, [r0, #0]
 8006c40:	f001 fb49 	bl	80082d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695a      	ldr	r2, [r3, #20]
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c54:	441a      	add	r2, r3
 8006c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6a1a      	ldr	r2, [r3, #32]
 8006c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d90f      	bls.n	8006c9e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6a1a      	ldr	r2, [r3, #32]
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c8e:	1ad2      	subs	r2, r2, r3
 8006c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	621a      	str	r2, [r3, #32]
 8006c9c:	e00e      	b.n	8006cbc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	785b      	ldrb	r3, [r3, #1]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d177      	bne.n	8006dbc <USB_EPStartXfer+0x4c4>
 8006ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	4413      	add	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	011a      	lsls	r2, r3, #4
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	4413      	add	r3, r2
 8006d02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	801a      	strh	r2, [r3, #0]
 8006d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1c:	2b3e      	cmp	r3, #62	; 0x3e
 8006d1e:	d921      	bls.n	8006d64 <USB_EPStartXfer+0x46c>
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d2e:	f003 031f 	and.w	r3, r3, #31
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d104      	bne.n	8006d40 <USB_EPStartXfer+0x448>
 8006d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	029b      	lsls	r3, r3, #10
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	4313      	orrs	r3, r2
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	801a      	strh	r2, [r3, #0]
 8006d62:	e056      	b.n	8006e12 <USB_EPStartXfer+0x51a>
 8006d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <USB_EPStartXfer+0x48a>
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	801a      	strh	r2, [r3, #0]
 8006d80:	e047      	b.n	8006e12 <USB_EPStartXfer+0x51a>
 8006d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d86:	085b      	lsrs	r3, r3, #1
 8006d88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d004      	beq.n	8006da2 <USB_EPStartXfer+0x4aa>
 8006d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	029b      	lsls	r3, r3, #10
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	4313      	orrs	r3, r2
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	801a      	strh	r2, [r3, #0]
 8006dba:	e02a      	b.n	8006e12 <USB_EPStartXfer+0x51a>
 8006dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	785b      	ldrb	r3, [r3, #1]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d122      	bne.n	8006e12 <USB_EPStartXfer+0x51a>
 8006dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	623b      	str	r3, [r7, #32]
 8006dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ddc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	4413      	add	r3, r2
 8006dee:	623b      	str	r3, [r7, #32]
 8006df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	011a      	lsls	r2, r3, #4
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	4413      	add	r3, r2
 8006e02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e06:	61fb      	str	r3, [r7, #28]
 8006e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	891b      	ldrh	r3, [r3, #8]
 8006e1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6959      	ldr	r1, [r3, #20]
 8006e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e3c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e40:	6800      	ldr	r0, [r0, #0]
 8006e42:	f001 fa48 	bl	80082d6 <USB_WritePMA>
 8006e46:	e3ee      	b.n	8007626 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	785b      	ldrb	r3, [r3, #1]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d177      	bne.n	8006f48 <USB_EPStartXfer+0x650>
 8006e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e78:	4413      	add	r3, r2
 8006e7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	011a      	lsls	r2, r3, #4
 8006e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e92:	647b      	str	r3, [r7, #68]	; 0x44
 8006e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea8:	2b3e      	cmp	r3, #62	; 0x3e
 8006eaa:	d921      	bls.n	8006ef0 <USB_EPStartXfer+0x5f8>
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d104      	bne.n	8006ecc <USB_EPStartXfer+0x5d4>
 8006ec2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	029b      	lsls	r3, r3, #10
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	4313      	orrs	r3, r2
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eec:	801a      	strh	r2, [r3, #0]
 8006eee:	e056      	b.n	8006f9e <USB_EPStartXfer+0x6a6>
 8006ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <USB_EPStartXfer+0x616>
 8006ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f0a:	801a      	strh	r2, [r3, #0]
 8006f0c:	e047      	b.n	8006f9e <USB_EPStartXfer+0x6a6>
 8006f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <USB_EPStartXfer+0x636>
 8006f24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f28:	3301      	adds	r3, #1
 8006f2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	029b      	lsls	r3, r3, #10
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	e02a      	b.n	8006f9e <USB_EPStartXfer+0x6a6>
 8006f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	785b      	ldrb	r3, [r3, #1]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d122      	bne.n	8006f9e <USB_EPStartXfer+0x6a6>
 8006f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	653b      	str	r3, [r7, #80]	; 0x50
 8006f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f78:	4413      	add	r3, r2
 8006f7a:	653b      	str	r3, [r7, #80]	; 0x50
 8006f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	011a      	lsls	r2, r3, #4
 8006f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	891b      	ldrh	r3, [r3, #8]
 8006faa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6959      	ldr	r1, [r3, #20]
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006fc4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006fc8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006fcc:	6800      	ldr	r0, [r0, #0]
 8006fce:	f001 f982 	bl	80082d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	695a      	ldr	r2, [r3, #20]
 8006fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe2:	441a      	add	r2, r3
 8006fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6a1a      	ldr	r2, [r3, #32]
 8006ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	429a      	cmp	r2, r3
 800700a:	d90f      	bls.n	800702c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800700c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6a1a      	ldr	r2, [r3, #32]
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701c:	1ad2      	subs	r2, r2, r3
 800701e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	621a      	str	r2, [r3, #32]
 800702a:	e00e      	b.n	800704a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800702c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800703c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2200      	movs	r2, #0
 8007048:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800704a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	643b      	str	r3, [r7, #64]	; 0x40
 8007056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	785b      	ldrb	r3, [r3, #1]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d177      	bne.n	8007156 <USB_EPStartXfer+0x85e>
 8007066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	63bb      	str	r3, [r7, #56]	; 0x38
 8007072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007080:	b29b      	uxth	r3, r3
 8007082:	461a      	mov	r2, r3
 8007084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007086:	4413      	add	r3, r2
 8007088:	63bb      	str	r3, [r7, #56]	; 0x38
 800708a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	011a      	lsls	r2, r3, #4
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	4413      	add	r3, r2
 800709c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070a0:	637b      	str	r3, [r7, #52]	; 0x34
 80070a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b6:	2b3e      	cmp	r3, #62	; 0x3e
 80070b8:	d921      	bls.n	80070fe <USB_EPStartXfer+0x806>
 80070ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070be:	095b      	lsrs	r3, r3, #5
 80070c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80070c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <USB_EPStartXfer+0x7e2>
 80070d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d4:	3b01      	subs	r3, #1
 80070d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80070da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29a      	uxth	r2, r3
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	029b      	lsls	r3, r3, #10
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	4313      	orrs	r3, r2
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	e050      	b.n	80071a0 <USB_EPStartXfer+0x8a8>
 80070fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <USB_EPStartXfer+0x824>
 8007106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007114:	b29a      	uxth	r2, r3
 8007116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007118:	801a      	strh	r2, [r3, #0]
 800711a:	e041      	b.n	80071a0 <USB_EPStartXfer+0x8a8>
 800711c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007120:	085b      	lsrs	r3, r3, #1
 8007122:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d004      	beq.n	800713c <USB_EPStartXfer+0x844>
 8007132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007136:	3301      	adds	r3, #1
 8007138:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800713c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	b29a      	uxth	r2, r3
 8007142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007146:	b29b      	uxth	r3, r3
 8007148:	029b      	lsls	r3, r3, #10
 800714a:	b29b      	uxth	r3, r3
 800714c:	4313      	orrs	r3, r2
 800714e:	b29a      	uxth	r2, r3
 8007150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007152:	801a      	strh	r2, [r3, #0]
 8007154:	e024      	b.n	80071a0 <USB_EPStartXfer+0x8a8>
 8007156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d11c      	bne.n	80071a0 <USB_EPStartXfer+0x8a8>
 8007166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007174:	b29b      	uxth	r3, r3
 8007176:	461a      	mov	r2, r3
 8007178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800717a:	4413      	add	r3, r2
 800717c:	643b      	str	r3, [r7, #64]	; 0x40
 800717e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	011a      	lsls	r2, r3, #4
 800718c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718e:	4413      	add	r3, r2
 8007190:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800719a:	b29a      	uxth	r2, r3
 800719c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800719e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80071a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	895b      	ldrh	r3, [r3, #10]
 80071ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6959      	ldr	r1, [r3, #20]
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071ce:	6800      	ldr	r0, [r0, #0]
 80071d0:	f001 f881 	bl	80082d6 <USB_WritePMA>
 80071d4:	e227      	b.n	8007626 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80071d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80071e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	b29b      	uxth	r3, r3
 8007204:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007214:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	441a      	add	r2, r3
 800722a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800722e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800723a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800723e:	b29b      	uxth	r3, r3
 8007240:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007246:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800724e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800725c:	b29b      	uxth	r3, r3
 800725e:	461a      	mov	r2, r3
 8007260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007262:	4413      	add	r3, r2
 8007264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	011a      	lsls	r2, r3, #4
 8007274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007276:	4413      	add	r3, r2
 8007278:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800727c:	65bb      	str	r3, [r7, #88]	; 0x58
 800727e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007282:	b29a      	uxth	r2, r3
 8007284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007286:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	891b      	ldrh	r3, [r3, #8]
 8007294:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6959      	ldr	r1, [r3, #20]
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072b6:	6800      	ldr	r0, [r0, #0]
 80072b8:	f001 f80d 	bl	80082d6 <USB_WritePMA>
 80072bc:	e1b3      	b.n	8007626 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80072be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6a1a      	ldr	r2, [r3, #32]
 80072ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ce:	1ad2      	subs	r2, r2, r3
 80072d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 80c6 	beq.w	8007490 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	673b      	str	r3, [r7, #112]	; 0x70
 8007310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	785b      	ldrb	r3, [r3, #1]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d177      	bne.n	8007410 <USB_EPStartXfer+0xb18>
 8007320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	66bb      	str	r3, [r7, #104]	; 0x68
 800732c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800733a:	b29b      	uxth	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007340:	4413      	add	r3, r2
 8007342:	66bb      	str	r3, [r7, #104]	; 0x68
 8007344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	011a      	lsls	r2, r3, #4
 8007352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007354:	4413      	add	r3, r2
 8007356:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800735a:	667b      	str	r3, [r7, #100]	; 0x64
 800735c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800735e:	881b      	ldrh	r3, [r3, #0]
 8007360:	b29b      	uxth	r3, r3
 8007362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007366:	b29a      	uxth	r2, r3
 8007368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800736a:	801a      	strh	r2, [r3, #0]
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007370:	2b3e      	cmp	r3, #62	; 0x3e
 8007372:	d921      	bls.n	80073b8 <USB_EPStartXfer+0xac0>
 8007374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007378:	095b      	lsrs	r3, r3, #5
 800737a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800737e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007382:	f003 031f 	and.w	r3, r3, #31
 8007386:	2b00      	cmp	r3, #0
 8007388:	d104      	bne.n	8007394 <USB_EPStartXfer+0xa9c>
 800738a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800738e:	3b01      	subs	r3, #1
 8007390:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29a      	uxth	r2, r3
 800739a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800739e:	b29b      	uxth	r3, r3
 80073a0:	029b      	lsls	r3, r3, #10
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	4313      	orrs	r3, r2
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	e050      	b.n	800745a <USB_EPStartXfer+0xb62>
 80073b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <USB_EPStartXfer+0xade>
 80073c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	e041      	b.n	800745a <USB_EPStartXfer+0xb62>
 80073d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80073e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d004      	beq.n	80073f6 <USB_EPStartXfer+0xafe>
 80073ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80073f0:	3301      	adds	r3, #1
 80073f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80073f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007400:	b29b      	uxth	r3, r3
 8007402:	029b      	lsls	r3, r3, #10
 8007404:	b29b      	uxth	r3, r3
 8007406:	4313      	orrs	r3, r2
 8007408:	b29a      	uxth	r2, r3
 800740a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800740c:	801a      	strh	r2, [r3, #0]
 800740e:	e024      	b.n	800745a <USB_EPStartXfer+0xb62>
 8007410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	785b      	ldrb	r3, [r3, #1]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d11c      	bne.n	800745a <USB_EPStartXfer+0xb62>
 8007420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007424:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800742e:	b29b      	uxth	r3, r3
 8007430:	461a      	mov	r2, r3
 8007432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007434:	4413      	add	r3, r2
 8007436:	673b      	str	r3, [r7, #112]	; 0x70
 8007438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	011a      	lsls	r2, r3, #4
 8007446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007448:	4413      	add	r3, r2
 800744a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800744e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007454:	b29a      	uxth	r2, r3
 8007456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007458:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800745a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800745e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	895b      	ldrh	r3, [r3, #10]
 8007466:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800746a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800746e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6959      	ldr	r1, [r3, #20]
 8007476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800747a:	b29b      	uxth	r3, r3
 800747c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007480:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007484:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007488:	6800      	ldr	r0, [r0, #0]
 800748a:	f000 ff24 	bl	80082d6 <USB_WritePMA>
 800748e:	e0ca      	b.n	8007626 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	785b      	ldrb	r3, [r3, #1]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d177      	bne.n	8007590 <USB_EPStartXfer+0xc98>
 80074a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80074ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074c0:	4413      	add	r3, r2
 80074c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80074c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	011a      	lsls	r2, r3, #4
 80074d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074d4:	4413      	add	r3, r2
 80074d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074da:	67bb      	str	r3, [r7, #120]	; 0x78
 80074dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ea:	801a      	strh	r2, [r3, #0]
 80074ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f0:	2b3e      	cmp	r3, #62	; 0x3e
 80074f2:	d921      	bls.n	8007538 <USB_EPStartXfer+0xc40>
 80074f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f8:	095b      	lsrs	r3, r3, #5
 80074fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007502:	f003 031f 	and.w	r3, r3, #31
 8007506:	2b00      	cmp	r3, #0
 8007508:	d104      	bne.n	8007514 <USB_EPStartXfer+0xc1c>
 800750a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800750e:	3b01      	subs	r3, #1
 8007510:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29a      	uxth	r2, r3
 800751a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800751e:	b29b      	uxth	r3, r3
 8007520:	029b      	lsls	r3, r3, #10
 8007522:	b29b      	uxth	r3, r3
 8007524:	4313      	orrs	r3, r2
 8007526:	b29b      	uxth	r3, r3
 8007528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800752c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007530:	b29a      	uxth	r2, r3
 8007532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007534:	801a      	strh	r2, [r3, #0]
 8007536:	e05c      	b.n	80075f2 <USB_EPStartXfer+0xcfa>
 8007538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <USB_EPStartXfer+0xc5e>
 8007540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	b29b      	uxth	r3, r3
 8007546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800754e:	b29a      	uxth	r2, r3
 8007550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007552:	801a      	strh	r2, [r3, #0]
 8007554:	e04d      	b.n	80075f2 <USB_EPStartXfer+0xcfa>
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800755a:	085b      	lsrs	r3, r3, #1
 800755c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <USB_EPStartXfer+0xc7e>
 800756c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007570:	3301      	adds	r3, #1
 8007572:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	b29a      	uxth	r2, r3
 800757c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007580:	b29b      	uxth	r3, r3
 8007582:	029b      	lsls	r3, r3, #10
 8007584:	b29b      	uxth	r3, r3
 8007586:	4313      	orrs	r3, r2
 8007588:	b29a      	uxth	r2, r3
 800758a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800758c:	801a      	strh	r2, [r3, #0]
 800758e:	e030      	b.n	80075f2 <USB_EPStartXfer+0xcfa>
 8007590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d128      	bne.n	80075f2 <USB_EPStartXfer+0xcfa>
 80075a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075bc:	b29b      	uxth	r3, r3
 80075be:	461a      	mov	r2, r3
 80075c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075c4:	4413      	add	r3, r2
 80075c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	011a      	lsls	r2, r3, #4
 80075d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075dc:	4413      	add	r3, r2
 80075de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	891b      	ldrh	r3, [r3, #8]
 80075fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6959      	ldr	r1, [r3, #20]
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007612:	b29b      	uxth	r3, r3
 8007614:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007618:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800761c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007620:	6800      	ldr	r0, [r0, #0]
 8007622:	f000 fe58 	bl	80082d6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800764c:	817b      	strh	r3, [r7, #10]
 800764e:	897b      	ldrh	r3, [r7, #10]
 8007650:	f083 0310 	eor.w	r3, r3, #16
 8007654:	817b      	strh	r3, [r7, #10]
 8007656:	897b      	ldrh	r3, [r7, #10]
 8007658:	f083 0320 	eor.w	r3, r3, #32
 800765c:	817b      	strh	r3, [r7, #10]
 800765e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	441a      	add	r2, r3
 8007678:	897b      	ldrh	r3, [r7, #10]
 800767a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800767e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768a:	b29b      	uxth	r3, r3
 800768c:	8013      	strh	r3, [r2, #0]
 800768e:	f000 bcde 	b.w	800804e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	7b1b      	ldrb	r3, [r3, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f040 80bb 	bne.w	800781a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80076a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	699a      	ldr	r2, [r3, #24]
 80076b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d917      	bls.n	80076f0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80076c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80076d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	699a      	ldr	r2, [r3, #24]
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e0:	1ad2      	subs	r2, r2, r3
 80076e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	619a      	str	r2, [r3, #24]
 80076ee:	e00e      	b.n	800770e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80076f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2200      	movs	r2, #0
 800770c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800770e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800771c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800772a:	b29b      	uxth	r3, r3
 800772c:	461a      	mov	r2, r3
 800772e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007732:	4413      	add	r3, r2
 8007734:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	011a      	lsls	r2, r3, #4
 8007746:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800774a:	4413      	add	r3, r2
 800774c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007750:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007760:	b29a      	uxth	r2, r3
 8007762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007766:	801a      	strh	r2, [r3, #0]
 8007768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800776c:	2b3e      	cmp	r3, #62	; 0x3e
 800776e:	d924      	bls.n	80077ba <USB_EPStartXfer+0xec2>
 8007770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007774:	095b      	lsrs	r3, r3, #5
 8007776:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800777a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777e:	f003 031f 	and.w	r3, r3, #31
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <USB_EPStartXfer+0xe98>
 8007786:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800778a:	3b01      	subs	r3, #1
 800778c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	b29a      	uxth	r2, r3
 8007798:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800779c:	b29b      	uxth	r3, r3
 800779e:	029b      	lsls	r3, r3, #10
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	4313      	orrs	r3, r2
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077b4:	801a      	strh	r2, [r3, #0]
 80077b6:	f000 bc10 	b.w	8007fda <USB_EPStartXfer+0x16e2>
 80077ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10c      	bne.n	80077dc <USB_EPStartXfer+0xee4>
 80077c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077d8:	801a      	strh	r2, [r3, #0]
 80077da:	e3fe      	b.n	8007fda <USB_EPStartXfer+0x16e2>
 80077dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e0:	085b      	lsrs	r3, r3, #1
 80077e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d004      	beq.n	80077fc <USB_EPStartXfer+0xf04>
 80077f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077f6:	3301      	adds	r3, #1
 80077f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	b29a      	uxth	r2, r3
 8007804:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007808:	b29b      	uxth	r3, r3
 800780a:	029b      	lsls	r3, r3, #10
 800780c:	b29b      	uxth	r3, r3
 800780e:	4313      	orrs	r3, r2
 8007810:	b29a      	uxth	r2, r3
 8007812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007816:	801a      	strh	r2, [r3, #0]
 8007818:	e3df      	b.n	8007fda <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800781a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	78db      	ldrb	r3, [r3, #3]
 8007826:	2b02      	cmp	r3, #2
 8007828:	f040 8218 	bne.w	8007c5c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800782c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f040 809d 	bne.w	8007978 <USB_EPStartXfer+0x1080>
 800783e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007842:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800784c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800785a:	b29b      	uxth	r3, r3
 800785c:	461a      	mov	r2, r3
 800785e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007862:	4413      	add	r3, r2
 8007864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	011a      	lsls	r2, r3, #4
 8007876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800787a:	4413      	add	r3, r2
 800787c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007880:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007884:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	b29b      	uxth	r3, r3
 800788c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007890:	b29a      	uxth	r2, r3
 8007892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007896:	801a      	strh	r2, [r3, #0]
 8007898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	2b3e      	cmp	r3, #62	; 0x3e
 80078a6:	d92b      	bls.n	8007900 <USB_EPStartXfer+0x1008>
 80078a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	095b      	lsrs	r3, r3, #5
 80078b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	f003 031f 	and.w	r3, r3, #31
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d104      	bne.n	80078d8 <USB_EPStartXfer+0xfe0>
 80078ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d2:	3b01      	subs	r3, #1
 80078d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	b29a      	uxth	r2, r3
 80078e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	029b      	lsls	r3, r3, #10
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	4313      	orrs	r3, r2
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80078fc:	801a      	strh	r2, [r3, #0]
 80078fe:	e070      	b.n	80079e2 <USB_EPStartXfer+0x10ea>
 8007900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10c      	bne.n	800792a <USB_EPStartXfer+0x1032>
 8007910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	b29b      	uxth	r3, r3
 8007918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800791c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007920:	b29a      	uxth	r2, r3
 8007922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007926:	801a      	strh	r2, [r3, #0]
 8007928:	e05b      	b.n	80079e2 <USB_EPStartXfer+0x10ea>
 800792a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	085b      	lsrs	r3, r3, #1
 8007938:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800793c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <USB_EPStartXfer+0x1062>
 8007950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007954:	3301      	adds	r3, #1
 8007956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800795a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	b29a      	uxth	r2, r3
 8007962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007966:	b29b      	uxth	r3, r3
 8007968:	029b      	lsls	r3, r3, #10
 800796a:	b29b      	uxth	r3, r3
 800796c:	4313      	orrs	r3, r2
 800796e:	b29a      	uxth	r2, r3
 8007970:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007974:	801a      	strh	r2, [r3, #0]
 8007976:	e034      	b.n	80079e2 <USB_EPStartXfer+0x10ea>
 8007978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800797c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d12c      	bne.n	80079e2 <USB_EPStartXfer+0x10ea>
 8007988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800799a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079ac:	4413      	add	r3, r2
 80079ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	011a      	lsls	r2, r3, #4
 80079c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079c4:	4413      	add	r3, r2
 80079c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	b29a      	uxth	r2, r3
 80079dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80079e0:	801a      	strh	r2, [r3, #0]
 80079e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80079f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	785b      	ldrb	r3, [r3, #1]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f040 809d 	bne.w	8007b3c <USB_EPStartXfer+0x1244>
 8007a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a26:	4413      	add	r3, r2
 8007a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	011a      	lsls	r2, r3, #4
 8007a3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a3e:	4413      	add	r3, r2
 8007a40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a5a:	801a      	strh	r2, [r3, #0]
 8007a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	2b3e      	cmp	r3, #62	; 0x3e
 8007a6a:	d92b      	bls.n	8007ac4 <USB_EPStartXfer+0x11cc>
 8007a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	095b      	lsrs	r3, r3, #5
 8007a7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f003 031f 	and.w	r3, r3, #31
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d104      	bne.n	8007a9c <USB_EPStartXfer+0x11a4>
 8007a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a96:	3b01      	subs	r3, #1
 8007a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	029b      	lsls	r3, r3, #10
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ac0:	801a      	strh	r2, [r3, #0]
 8007ac2:	e069      	b.n	8007b98 <USB_EPStartXfer+0x12a0>
 8007ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10c      	bne.n	8007aee <USB_EPStartXfer+0x11f6>
 8007ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007aea:	801a      	strh	r2, [r3, #0]
 8007aec:	e054      	b.n	8007b98 <USB_EPStartXfer+0x12a0>
 8007aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	085b      	lsrs	r3, r3, #1
 8007afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d004      	beq.n	8007b1e <USB_EPStartXfer+0x1226>
 8007b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b18:	3301      	adds	r3, #1
 8007b1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	029b      	lsls	r3, r3, #10
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	4313      	orrs	r3, r2
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b38:	801a      	strh	r2, [r3, #0]
 8007b3a:	e02d      	b.n	8007b98 <USB_EPStartXfer+0x12a0>
 8007b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	785b      	ldrb	r3, [r3, #1]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d125      	bne.n	8007b98 <USB_EPStartXfer+0x12a0>
 8007b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b62:	4413      	add	r3, r2
 8007b64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	011a      	lsls	r2, r3, #4
 8007b76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b96:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 8218 	beq.w	8007fda <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007bca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <USB_EPStartXfer+0x12ea>
 8007bd6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10d      	bne.n	8007bfe <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007be2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f040 81f5 	bne.w	8007fda <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007bf0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f040 81ee 	bne.w	8007fda <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c24:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	441a      	add	r2, r3
 8007c42:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	8013      	strh	r3, [r2, #0]
 8007c5a:	e1be      	b.n	8007fda <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	78db      	ldrb	r3, [r3, #3]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	f040 81b4 	bne.w	8007fd6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	699a      	ldr	r2, [r3, #24]
 8007c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d917      	bls.n	8007cba <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	699a      	ldr	r2, [r3, #24]
 8007ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007caa:	1ad2      	subs	r2, r2, r3
 8007cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	619a      	str	r2, [r3, #24]
 8007cb8:	e00e      	b.n	8007cd8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f040 8085 	bne.w	8007df4 <USB_EPStartXfer+0x14fc>
 8007cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d0e:	4413      	add	r3, r2
 8007d10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	011a      	lsls	r2, r3, #4
 8007d22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d26:	4413      	add	r3, r2
 8007d28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d42:	801a      	strh	r2, [r3, #0]
 8007d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d48:	2b3e      	cmp	r3, #62	; 0x3e
 8007d4a:	d923      	bls.n	8007d94 <USB_EPStartXfer+0x149c>
 8007d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d50:	095b      	lsrs	r3, r3, #5
 8007d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d5a:	f003 031f 	and.w	r3, r3, #31
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d104      	bne.n	8007d6c <USB_EPStartXfer+0x1474>
 8007d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d66:	3b01      	subs	r3, #1
 8007d68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	029b      	lsls	r3, r3, #10
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d90:	801a      	strh	r2, [r3, #0]
 8007d92:	e060      	b.n	8007e56 <USB_EPStartXfer+0x155e>
 8007d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10c      	bne.n	8007db6 <USB_EPStartXfer+0x14be>
 8007d9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007db2:	801a      	strh	r2, [r3, #0]
 8007db4:	e04f      	b.n	8007e56 <USB_EPStartXfer+0x155e>
 8007db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dba:	085b      	lsrs	r3, r3, #1
 8007dbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d004      	beq.n	8007dd6 <USB_EPStartXfer+0x14de>
 8007dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	029b      	lsls	r3, r3, #10
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	4313      	orrs	r3, r2
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007df0:	801a      	strh	r2, [r3, #0]
 8007df2:	e030      	b.n	8007e56 <USB_EPStartXfer+0x155e>
 8007df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	785b      	ldrb	r3, [r3, #1]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d128      	bne.n	8007e56 <USB_EPStartXfer+0x155e>
 8007e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	461a      	mov	r2, r3
 8007e24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e28:	4413      	add	r3, r2
 8007e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	011a      	lsls	r2, r3, #4
 8007e3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e40:	4413      	add	r3, r2
 8007e42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007e54:	801a      	strh	r2, [r3, #0]
 8007e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	785b      	ldrb	r3, [r3, #1]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f040 8085 	bne.w	8007f80 <USB_EPStartXfer+0x1688>
 8007e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	461a      	mov	r2, r3
 8007e96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	011a      	lsls	r2, r3, #4
 8007eae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ebc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ece:	801a      	strh	r2, [r3, #0]
 8007ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ed6:	d923      	bls.n	8007f20 <USB_EPStartXfer+0x1628>
 8007ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007edc:	095b      	lsrs	r3, r3, #5
 8007ede:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee6:	f003 031f 	and.w	r3, r3, #31
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d104      	bne.n	8007ef8 <USB_EPStartXfer+0x1600>
 8007eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ef8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	029b      	lsls	r3, r3, #10
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f1c:	801a      	strh	r2, [r3, #0]
 8007f1e:	e05c      	b.n	8007fda <USB_EPStartXfer+0x16e2>
 8007f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10c      	bne.n	8007f42 <USB_EPStartXfer+0x164a>
 8007f28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f2c:	881b      	ldrh	r3, [r3, #0]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	e04b      	b.n	8007fda <USB_EPStartXfer+0x16e2>
 8007f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f46:	085b      	lsrs	r3, r3, #1
 8007f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d004      	beq.n	8007f62 <USB_EPStartXfer+0x166a>
 8007f58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	029b      	lsls	r3, r3, #10
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	4313      	orrs	r3, r2
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f7c:	801a      	strh	r2, [r3, #0]
 8007f7e:	e02c      	b.n	8007fda <USB_EPStartXfer+0x16e2>
 8007f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	785b      	ldrb	r3, [r3, #1]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d124      	bne.n	8007fda <USB_EPStartXfer+0x16e2>
 8007f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	011a      	lsls	r2, r3, #4
 8007fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007fd2:	801a      	strh	r2, [r3, #0]
 8007fd4:	e001      	b.n	8007fda <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e03a      	b.n	8008050 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008000:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008004:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008008:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800800c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008010:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008014:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008018:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800801c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800802a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	441a      	add	r2, r3
 8008036:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800803a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800803e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800804a:	b29b      	uxth	r3, r3
 800804c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800805a:	b480      	push	{r7}
 800805c:	b085      	sub	sp, #20
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	785b      	ldrb	r3, [r3, #1]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d020      	beq.n	80080ae <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	b29b      	uxth	r3, r3
 800807a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008082:	81bb      	strh	r3, [r7, #12]
 8008084:	89bb      	ldrh	r3, [r7, #12]
 8008086:	f083 0310 	eor.w	r3, r3, #16
 800808a:	81bb      	strh	r3, [r7, #12]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	441a      	add	r2, r3
 8008096:	89bb      	ldrh	r3, [r7, #12]
 8008098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800809c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	8013      	strh	r3, [r2, #0]
 80080ac:	e01f      	b.n	80080ee <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c4:	81fb      	strh	r3, [r7, #14]
 80080c6:	89fb      	ldrh	r3, [r7, #14]
 80080c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080cc:	81fb      	strh	r3, [r7, #14]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	441a      	add	r2, r3
 80080d8:	89fb      	ldrh	r3, [r7, #14]
 80080da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bc80      	pop	{r7}
 80080f8:	4770      	bx	lr

080080fa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b087      	sub	sp, #28
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	7b1b      	ldrb	r3, [r3, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	f040 809d 	bne.w	8008248 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	785b      	ldrb	r3, [r3, #1]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d04c      	beq.n	80081b0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	823b      	strh	r3, [r7, #16]
 8008124:	8a3b      	ldrh	r3, [r7, #16]
 8008126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800812a:	2b00      	cmp	r3, #0
 800812c:	d01b      	beq.n	8008166 <USB_EPClearStall+0x6c>
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	b29b      	uxth	r3, r3
 800813c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008144:	81fb      	strh	r3, [r7, #14]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	441a      	add	r2, r3
 8008150:	89fb      	ldrh	r3, [r7, #14]
 8008152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800815a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800815e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008162:	b29b      	uxth	r3, r3
 8008164:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	78db      	ldrb	r3, [r3, #3]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d06c      	beq.n	8008248 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29b      	uxth	r3, r3
 800817c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008184:	81bb      	strh	r3, [r7, #12]
 8008186:	89bb      	ldrh	r3, [r7, #12]
 8008188:	f083 0320 	eor.w	r3, r3, #32
 800818c:	81bb      	strh	r3, [r7, #12]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	441a      	add	r2, r3
 8008198:	89bb      	ldrh	r3, [r7, #12]
 800819a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800819e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	8013      	strh	r3, [r2, #0]
 80081ae:	e04b      	b.n	8008248 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	82fb      	strh	r3, [r7, #22]
 80081be:	8afb      	ldrh	r3, [r7, #22]
 80081c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01b      	beq.n	8008200 <USB_EPClearStall+0x106>
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	881b      	ldrh	r3, [r3, #0]
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081de:	82bb      	strh	r3, [r7, #20]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	441a      	add	r2, r3
 80081ea:	8abb      	ldrh	r3, [r7, #20]
 80081ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	b29b      	uxth	r3, r3
 800820e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008216:	827b      	strh	r3, [r7, #18]
 8008218:	8a7b      	ldrh	r3, [r7, #18]
 800821a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800821e:	827b      	strh	r3, [r7, #18]
 8008220:	8a7b      	ldrh	r3, [r7, #18]
 8008222:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008226:	827b      	strh	r3, [r7, #18]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	441a      	add	r2, r3
 8008232:	8a7b      	ldrh	r3, [r7, #18]
 8008234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800823c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008244:	b29b      	uxth	r3, r3
 8008246:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	bc80      	pop	{r7}
 8008252:	4770      	bx	lr

08008254 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d103      	bne.n	800826e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2280      	movs	r2, #128	; 0x80
 800826a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	bc80      	pop	{r7}
 8008278:	4770      	bx	lr

0800827a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	bc80      	pop	{r7}
 800828c:	4770      	bx	lr

0800828e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	bc80      	pop	{r7}
 80082a0:	4770      	bx	lr

080082a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80082b4:	68fb      	ldr	r3, [r7, #12]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr

080082c0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bc80      	pop	{r7}
 80082d4:	4770      	bx	lr

080082d6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b08b      	sub	sp, #44	; 0x2c
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	4611      	mov	r1, r2
 80082e2:	461a      	mov	r2, r3
 80082e4:	460b      	mov	r3, r1
 80082e6:	80fb      	strh	r3, [r7, #6]
 80082e8:	4613      	mov	r3, r2
 80082ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80082ec:	88bb      	ldrh	r3, [r7, #4]
 80082ee:	3301      	adds	r3, #1
 80082f0:	085b      	lsrs	r3, r3, #1
 80082f2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082fc:	88fb      	ldrh	r3, [r7, #6]
 80082fe:	005a      	lsls	r2, r3, #1
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	4413      	add	r3, r2
 8008304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008308:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
 800830e:	e01e      	b.n	800834e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	3301      	adds	r3, #1
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	b21a      	sxth	r2, r3
 8008320:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008324:	4313      	orrs	r3, r2
 8008326:	b21b      	sxth	r3, r3
 8008328:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	8a7a      	ldrh	r2, [r7, #18]
 800832e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	3302      	adds	r3, #2
 8008334:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	3302      	adds	r3, #2
 800833a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	3301      	adds	r3, #1
 8008340:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	3301      	adds	r3, #1
 8008346:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	3b01      	subs	r3, #1
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1dd      	bne.n	8008310 <USB_WritePMA+0x3a>
  }
}
 8008354:	bf00      	nop
 8008356:	bf00      	nop
 8008358:	372c      	adds	r7, #44	; 0x2c
 800835a:	46bd      	mov	sp, r7
 800835c:	bc80      	pop	{r7}
 800835e:	4770      	bx	lr

08008360 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008360:	b480      	push	{r7}
 8008362:	b08b      	sub	sp, #44	; 0x2c
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4611      	mov	r1, r2
 800836c:	461a      	mov	r2, r3
 800836e:	460b      	mov	r3, r1
 8008370:	80fb      	strh	r3, [r7, #6]
 8008372:	4613      	mov	r3, r2
 8008374:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008376:	88bb      	ldrh	r3, [r7, #4]
 8008378:	085b      	lsrs	r3, r3, #1
 800837a:	b29b      	uxth	r3, r3
 800837c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008386:	88fb      	ldrh	r3, [r7, #6]
 8008388:	005a      	lsls	r2, r3, #1
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	4413      	add	r3, r2
 800838e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008392:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
 8008398:	e01b      	b.n	80083d2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	3302      	adds	r3, #2
 80083a6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	3301      	adds	r3, #1
 80083b4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	0a1b      	lsrs	r3, r3, #8
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	3301      	adds	r3, #1
 80083c4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	3302      	adds	r3, #2
 80083ca:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	3b01      	subs	r3, #1
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e0      	bne.n	800839a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80083d8:	88bb      	ldrh	r3, [r7, #4]
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	b29b      	uxth	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d007      	beq.n	80083f4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	701a      	strb	r2, [r3, #0]
  }
}
 80083f4:	bf00      	nop
 80083f6:	372c      	adds	r7, #44	; 0x2c
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bc80      	pop	{r7}
 80083fc:	4770      	bx	lr

080083fe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b084      	sub	sp, #16
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	460b      	mov	r3, r1
 8008408:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	7c1b      	ldrb	r3, [r3, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d115      	bne.n	8008442 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800841a:	2202      	movs	r2, #2
 800841c:	2181      	movs	r1, #129	; 0x81
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f004 fb37 	bl	800ca92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800842a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800842e:	2202      	movs	r2, #2
 8008430:	2101      	movs	r1, #1
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f004 fb2d 	bl	800ca92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008440:	e012      	b.n	8008468 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008442:	2340      	movs	r3, #64	; 0x40
 8008444:	2202      	movs	r2, #2
 8008446:	2181      	movs	r1, #129	; 0x81
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f004 fb22 	bl	800ca92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008454:	2340      	movs	r3, #64	; 0x40
 8008456:	2202      	movs	r2, #2
 8008458:	2101      	movs	r1, #1
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f004 fb19 	bl	800ca92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008468:	2308      	movs	r3, #8
 800846a:	2203      	movs	r2, #3
 800846c:	2182      	movs	r1, #130	; 0x82
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f004 fb0f 	bl	800ca92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800847a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800847e:	f004 fc2f 	bl	800cce0 <USBD_static_malloc>
 8008482:	4602      	mov	r2, r0
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008490:	2b00      	cmp	r3, #0
 8008492:	d102      	bne.n	800849a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008494:	2301      	movs	r3, #1
 8008496:	73fb      	strb	r3, [r7, #15]
 8008498:	e026      	b.n	80084e8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	7c1b      	ldrb	r3, [r3, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d109      	bne.n	80084d8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084ce:	2101      	movs	r1, #1
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f004 fbcf 	bl	800cc74 <USBD_LL_PrepareReceive>
 80084d6:	e007      	b.n	80084e8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084de:	2340      	movs	r3, #64	; 0x40
 80084e0:	2101      	movs	r1, #1
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f004 fbc6 	bl	800cc74 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008502:	2181      	movs	r1, #129	; 0x81
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f004 faea 	bl	800cade <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008510:	2101      	movs	r1, #1
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f004 fae3 	bl	800cade <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008520:	2182      	movs	r1, #130	; 0x82
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f004 fadb 	bl	800cade <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00e      	beq.n	8008556 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008548:	4618      	mov	r0, r3
 800854a:	f004 fbd5 	bl	800ccf8 <USBD_static_free>
    pdev->pClassData = NULL;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008556:	7bfb      	ldrb	r3, [r7, #15]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008570:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008586:	2b00      	cmp	r3, #0
 8008588:	d039      	beq.n	80085fe <USBD_CDC_Setup+0x9e>
 800858a:	2b20      	cmp	r3, #32
 800858c:	d17f      	bne.n	800868e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	88db      	ldrh	r3, [r3, #6]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d029      	beq.n	80085ea <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	b25b      	sxtb	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	da11      	bge.n	80085c4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80085ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	88d2      	ldrh	r2, [r2, #6]
 80085b2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80085b4:	6939      	ldr	r1, [r7, #16]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	88db      	ldrh	r3, [r3, #6]
 80085ba:	461a      	mov	r2, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 f9da 	bl	8009976 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80085c2:	e06b      	b.n	800869c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	785a      	ldrb	r2, [r3, #1]
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	88db      	ldrh	r3, [r3, #6]
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80085da:	6939      	ldr	r1, [r7, #16]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	88db      	ldrh	r3, [r3, #6]
 80085e0:	461a      	mov	r2, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f001 f9f5 	bl	80099d2 <USBD_CtlPrepareRx>
      break;
 80085e8:	e058      	b.n	800869c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	7850      	ldrb	r0, [r2, #1]
 80085f6:	2200      	movs	r2, #0
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	4798      	blx	r3
      break;
 80085fc:	e04e      	b.n	800869c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	785b      	ldrb	r3, [r3, #1]
 8008602:	2b0b      	cmp	r3, #11
 8008604:	d02e      	beq.n	8008664 <USBD_CDC_Setup+0x104>
 8008606:	2b0b      	cmp	r3, #11
 8008608:	dc38      	bgt.n	800867c <USBD_CDC_Setup+0x11c>
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <USBD_CDC_Setup+0xb4>
 800860e:	2b0a      	cmp	r3, #10
 8008610:	d014      	beq.n	800863c <USBD_CDC_Setup+0xdc>
 8008612:	e033      	b.n	800867c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861a:	2b03      	cmp	r3, #3
 800861c:	d107      	bne.n	800862e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800861e:	f107 030c 	add.w	r3, r7, #12
 8008622:	2202      	movs	r2, #2
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 f9a5 	bl	8009976 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800862c:	e02e      	b.n	800868c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 f936 	bl	80098a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008636:	2302      	movs	r3, #2
 8008638:	75fb      	strb	r3, [r7, #23]
          break;
 800863a:	e027      	b.n	800868c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008642:	2b03      	cmp	r3, #3
 8008644:	d107      	bne.n	8008656 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008646:	f107 030f 	add.w	r3, r7, #15
 800864a:	2201      	movs	r2, #1
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f001 f991 	bl	8009976 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008654:	e01a      	b.n	800868c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f001 f922 	bl	80098a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800865e:	2302      	movs	r3, #2
 8008660:	75fb      	strb	r3, [r7, #23]
          break;
 8008662:	e013      	b.n	800868c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800866a:	2b03      	cmp	r3, #3
 800866c:	d00d      	beq.n	800868a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 f916 	bl	80098a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008676:	2302      	movs	r3, #2
 8008678:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800867a:	e006      	b.n	800868a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 f90f 	bl	80098a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008684:	2302      	movs	r3, #2
 8008686:	75fb      	strb	r3, [r7, #23]
          break;
 8008688:	e000      	b.n	800868c <USBD_CDC_Setup+0x12c>
          break;
 800868a:	bf00      	nop
      }
      break;
 800868c:	e006      	b.n	800869c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f001 f906 	bl	80098a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008696:	2302      	movs	r3, #2
 8008698:	75fb      	strb	r3, [r7, #23]
      break;
 800869a:	bf00      	nop
  }

  return ret;
 800869c:	7dfb      	ldrb	r3, [r7, #23]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	460b      	mov	r3, r1
 80086b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086c0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d03a      	beq.n	8008742 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80086cc:	78fa      	ldrb	r2, [r7, #3]
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	4613      	mov	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	440b      	add	r3, r1
 80086da:	331c      	adds	r3, #28
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d029      	beq.n	8008736 <USBD_CDC_DataIn+0x90>
 80086e2:	78fa      	ldrb	r2, [r7, #3]
 80086e4:	6879      	ldr	r1, [r7, #4]
 80086e6:	4613      	mov	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	440b      	add	r3, r1
 80086f0:	331c      	adds	r3, #28
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	78f9      	ldrb	r1, [r7, #3]
 80086f6:	68b8      	ldr	r0, [r7, #8]
 80086f8:	460b      	mov	r3, r1
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	4403      	add	r3, r0
 8008702:	3338      	adds	r3, #56	; 0x38
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	fbb2 f1f3 	udiv	r1, r2, r3
 800870a:	fb01 f303 	mul.w	r3, r1, r3
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	2b00      	cmp	r3, #0
 8008712:	d110      	bne.n	8008736 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008714:	78fa      	ldrb	r2, [r7, #3]
 8008716:	6879      	ldr	r1, [r7, #4]
 8008718:	4613      	mov	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	440b      	add	r3, r1
 8008722:	331c      	adds	r3, #28
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008728:	78f9      	ldrb	r1, [r7, #3]
 800872a:	2300      	movs	r3, #0
 800872c:	2200      	movs	r2, #0
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f004 fa7d 	bl	800cc2e <USBD_LL_Transmit>
 8008734:	e003      	b.n	800873e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	e000      	b.n	8008744 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008742:	2302      	movs	r3, #2
  }
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f004 faa8 	bl	800ccba <USBD_LL_GetRxDataSize>
 800876a:	4602      	mov	r2, r0
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00d      	beq.n	8008798 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008790:	4611      	mov	r1, r2
 8008792:	4798      	blx	r3

    return USBD_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	e000      	b.n	800879a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008798:	2302      	movs	r3, #2
  }
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d015      	beq.n	80087e8 <USBD_CDC_EP0_RxReady+0x46>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80087c2:	2bff      	cmp	r3, #255	; 0xff
 80087c4:	d010      	beq.n	80087e8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80087d4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087dc:	b292      	uxth	r2, r2
 80087de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	22ff      	movs	r2, #255	; 0xff
 80087e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2243      	movs	r2, #67	; 0x43
 8008800:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008802:	4b03      	ldr	r3, [pc, #12]	; (8008810 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	bc80      	pop	{r7}
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	20000094 	.word	0x20000094

08008814 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2243      	movs	r2, #67	; 0x43
 8008820:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008822:	4b03      	ldr	r3, [pc, #12]	; (8008830 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	bc80      	pop	{r7}
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	20000050 	.word	0x20000050

08008834 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2243      	movs	r2, #67	; 0x43
 8008840:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008842:	4b03      	ldr	r3, [pc, #12]	; (8008850 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	bc80      	pop	{r7}
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	200000d8 	.word	0x200000d8

08008854 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	220a      	movs	r2, #10
 8008860:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008862:	4b03      	ldr	r3, [pc, #12]	; (8008870 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	bc80      	pop	{r7}
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	2000000c 	.word	0x2000000c

08008874 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800887e:	2302      	movs	r3, #2
 8008880:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d005      	beq.n	8008894 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008894:	7bfb      	ldrb	r3, [r7, #15]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	bc80      	pop	{r7}
 800889e:	4770      	bx	lr

080088a0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	4613      	mov	r3, r2
 80088ac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80088be:	88fa      	ldrh	r2, [r7, #6]
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	371c      	adds	r7, #28
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bc80      	pop	{r7}
 80088d0:	4770      	bx	lr

080088d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bc80      	pop	{r7}
 80088f6:	4770      	bx	lr

080088f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008906:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890e:	2b00      	cmp	r3, #0
 8008910:	d017      	beq.n	8008942 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	7c1b      	ldrb	r3, [r3, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d109      	bne.n	800892e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008924:	2101      	movs	r1, #1
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f004 f9a4 	bl	800cc74 <USBD_LL_PrepareReceive>
 800892c:	e007      	b.n	800893e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008934:	2340      	movs	r3, #64	; 0x40
 8008936:	2101      	movs	r1, #1
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f004 f99b 	bl	800cc74 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	e000      	b.n	8008944 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008942:	2302      	movs	r3, #2
  }
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4613      	mov	r3, r2
 8008958:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008960:	2302      	movs	r3, #2
 8008962:	e01a      	b.n	800899a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	79fa      	ldrb	r2, [r7, #7]
 8008990:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f004 f808 	bl	800c9a8 <USBD_LL_Init>

  return USBD_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b085      	sub	sp, #20
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d006      	beq.n	80089c4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	73fb      	strb	r3, [r7, #15]
 80089c2:	e001      	b.n	80089c8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80089c4:	2302      	movs	r3, #2
 80089c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bc80      	pop	{r7}
 80089d2:	4770      	bx	lr

080089d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f004 f83d 	bl	800ca5c <USBD_LL_Start>

  return USBD_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bc80      	pop	{r7}
 80089fe:	4770      	bx	lr

08008a00 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00c      	beq.n	8008a34 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	78fa      	ldrb	r2, [r7, #3]
 8008a24:	4611      	mov	r1, r2
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	4798      	blx	r3
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b082      	sub	sp, #8
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	460b      	mov	r3, r1
 8008a48:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	78fa      	ldrb	r2, [r7, #3]
 8008a54:	4611      	mov	r1, r2
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	4798      	blx	r3

  return USBD_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 fed7 	bl	800982a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008a98:	f003 031f 	and.w	r3, r3, #31
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d016      	beq.n	8008ace <USBD_LL_SetupStage+0x6a>
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d81c      	bhi.n	8008ade <USBD_LL_SetupStage+0x7a>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <USBD_LL_SetupStage+0x4a>
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d008      	beq.n	8008abe <USBD_LL_SetupStage+0x5a>
 8008aac:	e017      	b.n	8008ade <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f9ca 	bl	8008e50 <USBD_StdDevReq>
      break;
 8008abc:	e01a      	b.n	8008af4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa2c 	bl	8008f24 <USBD_StdItfReq>
      break;
 8008acc:	e012      	b.n	8008af4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fa6c 	bl	8008fb4 <USBD_StdEPReq>
      break;
 8008adc:	e00a      	b.n	8008af4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008ae4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f004 f815 	bl	800cb1c <USBD_LL_StallEP>
      break;
 8008af2:	bf00      	nop
  }

  return USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b086      	sub	sp, #24
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	460b      	mov	r3, r1
 8008b08:	607a      	str	r2, [r7, #4]
 8008b0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008b0c:	7afb      	ldrb	r3, [r7, #11]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d14b      	bne.n	8008baa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b18:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d134      	bne.n	8008b8e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	68da      	ldr	r2, [r3, #12]
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d919      	bls.n	8008b64 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	1ad2      	subs	r2, r2, r3
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	68da      	ldr	r2, [r3, #12]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d203      	bcs.n	8008b52 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	e002      	b.n	8008b58 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	461a      	mov	r2, r3
 8008b5a:	6879      	ldr	r1, [r7, #4]
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 ff56 	bl	8009a0e <USBD_CtlContinueRx>
 8008b62:	e038      	b.n	8008bd6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00a      	beq.n	8008b86 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d105      	bne.n	8008b86 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 ff53 	bl	8009a32 <USBD_CtlSendStatus>
 8008b8c:	e023      	b.n	8008bd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b94:	2b05      	cmp	r3, #5
 8008b96:	d11e      	bne.n	8008bd6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f003 ffba 	bl	800cb1c <USBD_LL_StallEP>
 8008ba8:	e015      	b.n	8008bd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00d      	beq.n	8008bd2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d108      	bne.n	8008bd2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	7afa      	ldrb	r2, [r7, #11]
 8008bca:	4611      	mov	r1, r2
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	4798      	blx	r3
 8008bd0:	e001      	b.n	8008bd6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	e000      	b.n	8008bd8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3718      	adds	r7, #24
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	460b      	mov	r3, r1
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008bee:	7afb      	ldrb	r3, [r7, #11]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d17f      	bne.n	8008cf4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	3314      	adds	r3, #20
 8008bf8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d15c      	bne.n	8008cbe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	68da      	ldr	r2, [r3, #12]
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d915      	bls.n	8008c3c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	68da      	ldr	r2, [r3, #12]
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	1ad2      	subs	r2, r2, r3
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	461a      	mov	r2, r3
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f000 fec0 	bl	80099ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2200      	movs	r2, #0
 8008c32:	2100      	movs	r1, #0
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f004 f81d 	bl	800cc74 <USBD_LL_PrepareReceive>
 8008c3a:	e04e      	b.n	8008cda <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	6912      	ldr	r2, [r2, #16]
 8008c44:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c48:	fb01 f202 	mul.w	r2, r1, r2
 8008c4c:	1a9b      	subs	r3, r3, r2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d11c      	bne.n	8008c8c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	689a      	ldr	r2, [r3, #8]
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d316      	bcc.n	8008c8c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	689a      	ldr	r2, [r3, #8]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d20f      	bcs.n	8008c8c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2100      	movs	r1, #0
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 fe9c 	bl	80099ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c7e:	2300      	movs	r3, #0
 8008c80:	2200      	movs	r2, #0
 8008c82:	2100      	movs	r1, #0
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f003 fff5 	bl	800cc74 <USBD_LL_PrepareReceive>
 8008c8a:	e026      	b.n	8008cda <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00a      	beq.n	8008cae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	d105      	bne.n	8008cae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008cae:	2180      	movs	r1, #128	; 0x80
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f003 ff33 	bl	800cb1c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f000 fece 	bl	8009a58 <USBD_CtlReceiveStatus>
 8008cbc:	e00d      	b.n	8008cda <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	d004      	beq.n	8008cd2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d103      	bne.n	8008cda <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008cd2:	2180      	movs	r1, #128	; 0x80
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f003 ff21 	bl	800cb1c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d11d      	bne.n	8008d20 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f7ff fe81 	bl	80089ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008cf2:	e015      	b.n	8008d20 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00d      	beq.n	8008d1c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d108      	bne.n	8008d1c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	7afa      	ldrb	r2, [r7, #11]
 8008d14:	4611      	mov	r1, r2
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	4798      	blx	r3
 8008d1a:	e001      	b.n	8008d20 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	e000      	b.n	8008d22 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d32:	2340      	movs	r3, #64	; 0x40
 8008d34:	2200      	movs	r2, #0
 8008d36:	2100      	movs	r1, #0
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f003 feaa 	bl	800ca92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2240      	movs	r2, #64	; 0x40
 8008d4a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d4e:	2340      	movs	r3, #64	; 0x40
 8008d50:	2200      	movs	r2, #0
 8008d52:	2180      	movs	r1, #128	; 0x80
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f003 fe9c 	bl	800ca92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2240      	movs	r2, #64	; 0x40
 8008d64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d009      	beq.n	8008da2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	6852      	ldr	r2, [r2, #4]
 8008d9a:	b2d2      	uxtb	r2, r2
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	4798      	blx	r3
  }

  return USBD_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	78fa      	ldrb	r2, [r7, #3]
 8008dbc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc80      	pop	{r7}
 8008dc8:	4770      	bx	lr

08008dca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2204      	movs	r2, #4
 8008de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bc80      	pop	{r7}
 8008df0:	4770      	bx	lr

08008df2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	d105      	bne.n	8008e10 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bc80      	pop	{r7}
 8008e1a:	4770      	bx	lr

08008e1c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d10b      	bne.n	8008e46 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d005      	beq.n	8008e46 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e66:	2b40      	cmp	r3, #64	; 0x40
 8008e68:	d005      	beq.n	8008e76 <USBD_StdDevReq+0x26>
 8008e6a:	2b40      	cmp	r3, #64	; 0x40
 8008e6c:	d84f      	bhi.n	8008f0e <USBD_StdDevReq+0xbe>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d009      	beq.n	8008e86 <USBD_StdDevReq+0x36>
 8008e72:	2b20      	cmp	r3, #32
 8008e74:	d14b      	bne.n	8008f0e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	4798      	blx	r3
      break;
 8008e84:	e048      	b.n	8008f18 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	785b      	ldrb	r3, [r3, #1]
 8008e8a:	2b09      	cmp	r3, #9
 8008e8c:	d839      	bhi.n	8008f02 <USBD_StdDevReq+0xb2>
 8008e8e:	a201      	add	r2, pc, #4	; (adr r2, 8008e94 <USBD_StdDevReq+0x44>)
 8008e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e94:	08008ee5 	.word	0x08008ee5
 8008e98:	08008ef9 	.word	0x08008ef9
 8008e9c:	08008f03 	.word	0x08008f03
 8008ea0:	08008eef 	.word	0x08008eef
 8008ea4:	08008f03 	.word	0x08008f03
 8008ea8:	08008ec7 	.word	0x08008ec7
 8008eac:	08008ebd 	.word	0x08008ebd
 8008eb0:	08008f03 	.word	0x08008f03
 8008eb4:	08008edb 	.word	0x08008edb
 8008eb8:	08008ed1 	.word	0x08008ed1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f9dc 	bl	800927c <USBD_GetDescriptor>
          break;
 8008ec4:	e022      	b.n	8008f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fb3f 	bl	800954c <USBD_SetAddress>
          break;
 8008ece:	e01d      	b.n	8008f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fb7e 	bl	80095d4 <USBD_SetConfig>
          break;
 8008ed8:	e018      	b.n	8008f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fc07 	bl	80096f0 <USBD_GetConfig>
          break;
 8008ee2:	e013      	b.n	8008f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fc37 	bl	800975a <USBD_GetStatus>
          break;
 8008eec:	e00e      	b.n	8008f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fc65 	bl	80097c0 <USBD_SetFeature>
          break;
 8008ef6:	e009      	b.n	8008f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fc74 	bl	80097e8 <USBD_ClrFeature>
          break;
 8008f00:	e004      	b.n	8008f0c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fccc 	bl	80098a2 <USBD_CtlError>
          break;
 8008f0a:	bf00      	nop
      }
      break;
 8008f0c:	e004      	b.n	8008f18 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fcc6 	bl	80098a2 <USBD_CtlError>
      break;
 8008f16:	bf00      	nop
  }

  return ret;
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop

08008f24 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f3a:	2b40      	cmp	r3, #64	; 0x40
 8008f3c:	d005      	beq.n	8008f4a <USBD_StdItfReq+0x26>
 8008f3e:	2b40      	cmp	r3, #64	; 0x40
 8008f40:	d82e      	bhi.n	8008fa0 <USBD_StdItfReq+0x7c>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <USBD_StdItfReq+0x26>
 8008f46:	2b20      	cmp	r3, #32
 8008f48:	d12a      	bne.n	8008fa0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f50:	3b01      	subs	r3, #1
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d81d      	bhi.n	8008f92 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	889b      	ldrh	r3, [r3, #4]
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d813      	bhi.n	8008f88 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	88db      	ldrh	r3, [r3, #6]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d110      	bne.n	8008f9c <USBD_StdItfReq+0x78>
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10d      	bne.n	8008f9c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fd56 	bl	8009a32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f86:	e009      	b.n	8008f9c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fc89 	bl	80098a2 <USBD_CtlError>
          break;
 8008f90:	e004      	b.n	8008f9c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fc84 	bl	80098a2 <USBD_CtlError>
          break;
 8008f9a:	e000      	b.n	8008f9e <USBD_StdItfReq+0x7a>
          break;
 8008f9c:	bf00      	nop
      }
      break;
 8008f9e:	e004      	b.n	8008faa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fc7d 	bl	80098a2 <USBD_CtlError>
      break;
 8008fa8:	bf00      	nop
  }

  return USBD_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	889b      	ldrh	r3, [r3, #4]
 8008fc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fd0:	2b40      	cmp	r3, #64	; 0x40
 8008fd2:	d007      	beq.n	8008fe4 <USBD_StdEPReq+0x30>
 8008fd4:	2b40      	cmp	r3, #64	; 0x40
 8008fd6:	f200 8146 	bhi.w	8009266 <USBD_StdEPReq+0x2b2>
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00a      	beq.n	8008ff4 <USBD_StdEPReq+0x40>
 8008fde:	2b20      	cmp	r3, #32
 8008fe0:	f040 8141 	bne.w	8009266 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	4798      	blx	r3
      break;
 8008ff2:	e13d      	b.n	8009270 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ffc:	2b20      	cmp	r3, #32
 8008ffe:	d10a      	bne.n	8009016 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	4798      	blx	r3
 800900e:	4603      	mov	r3, r0
 8009010:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	e12d      	b.n	8009272 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	785b      	ldrb	r3, [r3, #1]
 800901a:	2b03      	cmp	r3, #3
 800901c:	d007      	beq.n	800902e <USBD_StdEPReq+0x7a>
 800901e:	2b03      	cmp	r3, #3
 8009020:	f300 811b 	bgt.w	800925a <USBD_StdEPReq+0x2a6>
 8009024:	2b00      	cmp	r3, #0
 8009026:	d072      	beq.n	800910e <USBD_StdEPReq+0x15a>
 8009028:	2b01      	cmp	r3, #1
 800902a:	d03a      	beq.n	80090a2 <USBD_StdEPReq+0xee>
 800902c:	e115      	b.n	800925a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009034:	2b02      	cmp	r3, #2
 8009036:	d002      	beq.n	800903e <USBD_StdEPReq+0x8a>
 8009038:	2b03      	cmp	r3, #3
 800903a:	d015      	beq.n	8009068 <USBD_StdEPReq+0xb4>
 800903c:	e02b      	b.n	8009096 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00c      	beq.n	800905e <USBD_StdEPReq+0xaa>
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	2b80      	cmp	r3, #128	; 0x80
 8009048:	d009      	beq.n	800905e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f003 fd64 	bl	800cb1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009054:	2180      	movs	r1, #128	; 0x80
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f003 fd60 	bl	800cb1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800905c:	e020      	b.n	80090a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fc1e 	bl	80098a2 <USBD_CtlError>
              break;
 8009066:	e01b      	b.n	80090a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	885b      	ldrh	r3, [r3, #2]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10e      	bne.n	800908e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009070:	7bbb      	ldrb	r3, [r7, #14]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00b      	beq.n	800908e <USBD_StdEPReq+0xda>
 8009076:	7bbb      	ldrb	r3, [r7, #14]
 8009078:	2b80      	cmp	r3, #128	; 0x80
 800907a:	d008      	beq.n	800908e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	88db      	ldrh	r3, [r3, #6]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d104      	bne.n	800908e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f003 fd47 	bl	800cb1c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fccf 	bl	8009a32 <USBD_CtlSendStatus>

              break;
 8009094:	e004      	b.n	80090a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fc02 	bl	80098a2 <USBD_CtlError>
              break;
 800909e:	bf00      	nop
          }
          break;
 80090a0:	e0e0      	b.n	8009264 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d002      	beq.n	80090b2 <USBD_StdEPReq+0xfe>
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d015      	beq.n	80090dc <USBD_StdEPReq+0x128>
 80090b0:	e026      	b.n	8009100 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00c      	beq.n	80090d2 <USBD_StdEPReq+0x11e>
 80090b8:	7bbb      	ldrb	r3, [r7, #14]
 80090ba:	2b80      	cmp	r3, #128	; 0x80
 80090bc:	d009      	beq.n	80090d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80090be:	7bbb      	ldrb	r3, [r7, #14]
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f003 fd2a 	bl	800cb1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80090c8:	2180      	movs	r1, #128	; 0x80
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f003 fd26 	bl	800cb1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090d0:	e01c      	b.n	800910c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fbe4 	bl	80098a2 <USBD_CtlError>
              break;
 80090da:	e017      	b.n	800910c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	885b      	ldrh	r3, [r3, #2]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d112      	bne.n	800910a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d004      	beq.n	80090f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80090ee:	7bbb      	ldrb	r3, [r7, #14]
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f003 fd31 	bl	800cb5a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fc9a 	bl	8009a32 <USBD_CtlSendStatus>
              }
              break;
 80090fe:	e004      	b.n	800910a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fbcd 	bl	80098a2 <USBD_CtlError>
              break;
 8009108:	e000      	b.n	800910c <USBD_StdEPReq+0x158>
              break;
 800910a:	bf00      	nop
          }
          break;
 800910c:	e0aa      	b.n	8009264 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009114:	2b02      	cmp	r3, #2
 8009116:	d002      	beq.n	800911e <USBD_StdEPReq+0x16a>
 8009118:	2b03      	cmp	r3, #3
 800911a:	d032      	beq.n	8009182 <USBD_StdEPReq+0x1ce>
 800911c:	e097      	b.n	800924e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d007      	beq.n	8009134 <USBD_StdEPReq+0x180>
 8009124:	7bbb      	ldrb	r3, [r7, #14]
 8009126:	2b80      	cmp	r3, #128	; 0x80
 8009128:	d004      	beq.n	8009134 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fbb8 	bl	80098a2 <USBD_CtlError>
                break;
 8009132:	e091      	b.n	8009258 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009138:	2b00      	cmp	r3, #0
 800913a:	da0b      	bge.n	8009154 <USBD_StdEPReq+0x1a0>
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009142:	4613      	mov	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	3310      	adds	r3, #16
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	4413      	add	r3, r2
 8009150:	3304      	adds	r3, #4
 8009152:	e00b      	b.n	800916c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009154:	7bbb      	ldrb	r3, [r7, #14]
 8009156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800915a:	4613      	mov	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	4413      	add	r3, r2
 800916a:	3304      	adds	r3, #4
 800916c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2200      	movs	r2, #0
 8009172:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2202      	movs	r2, #2
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fbfb 	bl	8009976 <USBD_CtlSendData>
              break;
 8009180:	e06a      	b.n	8009258 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009186:	2b00      	cmp	r3, #0
 8009188:	da11      	bge.n	80091ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800918a:	7bbb      	ldrb	r3, [r7, #14]
 800918c:	f003 020f 	and.w	r2, r3, #15
 8009190:	6879      	ldr	r1, [r7, #4]
 8009192:	4613      	mov	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	440b      	add	r3, r1
 800919c:	3318      	adds	r3, #24
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d117      	bne.n	80091d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fb7b 	bl	80098a2 <USBD_CtlError>
                  break;
 80091ac:	e054      	b.n	8009258 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
 80091b0:	f003 020f 	and.w	r2, r3, #15
 80091b4:	6879      	ldr	r1, [r7, #4]
 80091b6:	4613      	mov	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	440b      	add	r3, r1
 80091c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d104      	bne.n	80091d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fb68 	bl	80098a2 <USBD_CtlError>
                  break;
 80091d2:	e041      	b.n	8009258 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	da0b      	bge.n	80091f4 <USBD_StdEPReq+0x240>
 80091dc:	7bbb      	ldrb	r3, [r7, #14]
 80091de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091e2:	4613      	mov	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	3310      	adds	r3, #16
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	4413      	add	r3, r2
 80091f0:	3304      	adds	r3, #4
 80091f2:	e00b      	b.n	800920c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091f4:	7bbb      	ldrb	r3, [r7, #14]
 80091f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091fa:	4613      	mov	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4413      	add	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	4413      	add	r3, r2
 800920a:	3304      	adds	r3, #4
 800920c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800920e:	7bbb      	ldrb	r3, [r7, #14]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <USBD_StdEPReq+0x266>
 8009214:	7bbb      	ldrb	r3, [r7, #14]
 8009216:	2b80      	cmp	r3, #128	; 0x80
 8009218:	d103      	bne.n	8009222 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	2200      	movs	r2, #0
 800921e:	601a      	str	r2, [r3, #0]
 8009220:	e00e      	b.n	8009240 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009222:	7bbb      	ldrb	r3, [r7, #14]
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f003 fcb6 	bl	800cb98 <USBD_LL_IsStallEP>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2201      	movs	r2, #1
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	e002      	b.n	8009240 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	2200      	movs	r2, #0
 800923e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2202      	movs	r2, #2
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fb95 	bl	8009976 <USBD_CtlSendData>
              break;
 800924c:	e004      	b.n	8009258 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fb26 	bl	80098a2 <USBD_CtlError>
              break;
 8009256:	bf00      	nop
          }
          break;
 8009258:	e004      	b.n	8009264 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fb20 	bl	80098a2 <USBD_CtlError>
          break;
 8009262:	bf00      	nop
      }
      break;
 8009264:	e004      	b.n	8009270 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fb1a 	bl	80098a2 <USBD_CtlError>
      break;
 800926e:	bf00      	nop
  }

  return ret;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800928a:	2300      	movs	r3, #0
 800928c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	885b      	ldrh	r3, [r3, #2]
 8009296:	0a1b      	lsrs	r3, r3, #8
 8009298:	b29b      	uxth	r3, r3
 800929a:	3b01      	subs	r3, #1
 800929c:	2b06      	cmp	r3, #6
 800929e:	f200 8128 	bhi.w	80094f2 <USBD_GetDescriptor+0x276>
 80092a2:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <USBD_GetDescriptor+0x2c>)
 80092a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a8:	080092c5 	.word	0x080092c5
 80092ac:	080092dd 	.word	0x080092dd
 80092b0:	0800931d 	.word	0x0800931d
 80092b4:	080094f3 	.word	0x080094f3
 80092b8:	080094f3 	.word	0x080094f3
 80092bc:	08009493 	.word	0x08009493
 80092c0:	080094bf 	.word	0x080094bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	7c12      	ldrb	r2, [r2, #16]
 80092d0:	f107 0108 	add.w	r1, r7, #8
 80092d4:	4610      	mov	r0, r2
 80092d6:	4798      	blx	r3
 80092d8:	60f8      	str	r0, [r7, #12]
      break;
 80092da:	e112      	b.n	8009502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	7c1b      	ldrb	r3, [r3, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10d      	bne.n	8009300 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ec:	f107 0208 	add.w	r2, r7, #8
 80092f0:	4610      	mov	r0, r2
 80092f2:	4798      	blx	r3
 80092f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3301      	adds	r3, #1
 80092fa:	2202      	movs	r2, #2
 80092fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80092fe:	e100      	b.n	8009502 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	f107 0208 	add.w	r2, r7, #8
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
 8009310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3301      	adds	r3, #1
 8009316:	2202      	movs	r2, #2
 8009318:	701a      	strb	r2, [r3, #0]
      break;
 800931a:	e0f2      	b.n	8009502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	885b      	ldrh	r3, [r3, #2]
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b05      	cmp	r3, #5
 8009324:	f200 80ac 	bhi.w	8009480 <USBD_GetDescriptor+0x204>
 8009328:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <USBD_GetDescriptor+0xb4>)
 800932a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932e:	bf00      	nop
 8009330:	08009349 	.word	0x08009349
 8009334:	0800937d 	.word	0x0800937d
 8009338:	080093b1 	.word	0x080093b1
 800933c:	080093e5 	.word	0x080093e5
 8009340:	08009419 	.word	0x08009419
 8009344:	0800944d 	.word	0x0800944d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00b      	beq.n	800936c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	7c12      	ldrb	r2, [r2, #16]
 8009360:	f107 0108 	add.w	r1, r7, #8
 8009364:	4610      	mov	r0, r2
 8009366:	4798      	blx	r3
 8009368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800936a:	e091      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fa97 	bl	80098a2 <USBD_CtlError>
            err++;
 8009374:	7afb      	ldrb	r3, [r7, #11]
 8009376:	3301      	adds	r3, #1
 8009378:	72fb      	strb	r3, [r7, #11]
          break;
 800937a:	e089      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00b      	beq.n	80093a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	7c12      	ldrb	r2, [r2, #16]
 8009394:	f107 0108 	add.w	r1, r7, #8
 8009398:	4610      	mov	r0, r2
 800939a:	4798      	blx	r3
 800939c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800939e:	e077      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fa7d 	bl	80098a2 <USBD_CtlError>
            err++;
 80093a8:	7afb      	ldrb	r3, [r7, #11]
 80093aa:	3301      	adds	r3, #1
 80093ac:	72fb      	strb	r3, [r7, #11]
          break;
 80093ae:	e06f      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00b      	beq.n	80093d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	7c12      	ldrb	r2, [r2, #16]
 80093c8:	f107 0108 	add.w	r1, r7, #8
 80093cc:	4610      	mov	r0, r2
 80093ce:	4798      	blx	r3
 80093d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093d2:	e05d      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fa63 	bl	80098a2 <USBD_CtlError>
            err++;
 80093dc:	7afb      	ldrb	r3, [r7, #11]
 80093de:	3301      	adds	r3, #1
 80093e0:	72fb      	strb	r3, [r7, #11]
          break;
 80093e2:	e055      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00b      	beq.n	8009408 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	7c12      	ldrb	r2, [r2, #16]
 80093fc:	f107 0108 	add.w	r1, r7, #8
 8009400:	4610      	mov	r0, r2
 8009402:	4798      	blx	r3
 8009404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009406:	e043      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fa49 	bl	80098a2 <USBD_CtlError>
            err++;
 8009410:	7afb      	ldrb	r3, [r7, #11]
 8009412:	3301      	adds	r3, #1
 8009414:	72fb      	strb	r3, [r7, #11]
          break;
 8009416:	e03b      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00b      	beq.n	800943c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	7c12      	ldrb	r2, [r2, #16]
 8009430:	f107 0108 	add.w	r1, r7, #8
 8009434:	4610      	mov	r0, r2
 8009436:	4798      	blx	r3
 8009438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800943a:	e029      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fa2f 	bl	80098a2 <USBD_CtlError>
            err++;
 8009444:	7afb      	ldrb	r3, [r7, #11]
 8009446:	3301      	adds	r3, #1
 8009448:	72fb      	strb	r3, [r7, #11]
          break;
 800944a:	e021      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00b      	beq.n	8009470 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	7c12      	ldrb	r2, [r2, #16]
 8009464:	f107 0108 	add.w	r1, r7, #8
 8009468:	4610      	mov	r0, r2
 800946a:	4798      	blx	r3
 800946c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800946e:	e00f      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fa15 	bl	80098a2 <USBD_CtlError>
            err++;
 8009478:	7afb      	ldrb	r3, [r7, #11]
 800947a:	3301      	adds	r3, #1
 800947c:	72fb      	strb	r3, [r7, #11]
          break;
 800947e:	e007      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa0d 	bl	80098a2 <USBD_CtlError>
          err++;
 8009488:	7afb      	ldrb	r3, [r7, #11]
 800948a:	3301      	adds	r3, #1
 800948c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800948e:	e038      	b.n	8009502 <USBD_GetDescriptor+0x286>
 8009490:	e037      	b.n	8009502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	7c1b      	ldrb	r3, [r3, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d109      	bne.n	80094ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a2:	f107 0208 	add.w	r2, r7, #8
 80094a6:	4610      	mov	r0, r2
 80094a8:	4798      	blx	r3
 80094aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094ac:	e029      	b.n	8009502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f9f6 	bl	80098a2 <USBD_CtlError>
        err++;
 80094b6:	7afb      	ldrb	r3, [r7, #11]
 80094b8:	3301      	adds	r3, #1
 80094ba:	72fb      	strb	r3, [r7, #11]
      break;
 80094bc:	e021      	b.n	8009502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	7c1b      	ldrb	r3, [r3, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10d      	bne.n	80094e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ce:	f107 0208 	add.w	r2, r7, #8
 80094d2:	4610      	mov	r0, r2
 80094d4:	4798      	blx	r3
 80094d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3301      	adds	r3, #1
 80094dc:	2207      	movs	r2, #7
 80094de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094e0:	e00f      	b.n	8009502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f9dc 	bl	80098a2 <USBD_CtlError>
        err++;
 80094ea:	7afb      	ldrb	r3, [r7, #11]
 80094ec:	3301      	adds	r3, #1
 80094ee:	72fb      	strb	r3, [r7, #11]
      break;
 80094f0:	e007      	b.n	8009502 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f9d4 	bl	80098a2 <USBD_CtlError>
      err++;
 80094fa:	7afb      	ldrb	r3, [r7, #11]
 80094fc:	3301      	adds	r3, #1
 80094fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009500:	bf00      	nop
  }

  if (err != 0U)
 8009502:	7afb      	ldrb	r3, [r7, #11]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d11c      	bne.n	8009542 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009508:	893b      	ldrh	r3, [r7, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d011      	beq.n	8009532 <USBD_GetDescriptor+0x2b6>
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	88db      	ldrh	r3, [r3, #6]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00d      	beq.n	8009532 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	88da      	ldrh	r2, [r3, #6]
 800951a:	893b      	ldrh	r3, [r7, #8]
 800951c:	4293      	cmp	r3, r2
 800951e:	bf28      	it	cs
 8009520:	4613      	movcs	r3, r2
 8009522:	b29b      	uxth	r3, r3
 8009524:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009526:	893b      	ldrh	r3, [r7, #8]
 8009528:	461a      	mov	r2, r3
 800952a:	68f9      	ldr	r1, [r7, #12]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fa22 	bl	8009976 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	88db      	ldrh	r3, [r3, #6]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d104      	bne.n	8009544 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fa79 	bl	8009a32 <USBD_CtlSendStatus>
 8009540:	e000      	b.n	8009544 <USBD_GetDescriptor+0x2c8>
    return;
 8009542:	bf00      	nop
    }
  }
}
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop

0800954c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	889b      	ldrh	r3, [r3, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d130      	bne.n	80095c0 <USBD_SetAddress+0x74>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	88db      	ldrh	r3, [r3, #6]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d12c      	bne.n	80095c0 <USBD_SetAddress+0x74>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	885b      	ldrh	r3, [r3, #2]
 800956a:	2b7f      	cmp	r3, #127	; 0x7f
 800956c:	d828      	bhi.n	80095c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	885b      	ldrh	r3, [r3, #2]
 8009572:	b2db      	uxtb	r3, r3
 8009574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009578:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009580:	2b03      	cmp	r3, #3
 8009582:	d104      	bne.n	800958e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009584:	6839      	ldr	r1, [r7, #0]
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f98b 	bl	80098a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800958c:	e01d      	b.n	80095ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7bfa      	ldrb	r2, [r7, #15]
 8009592:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f003 fb28 	bl	800cbf0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fa46 	bl	8009a32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095a6:	7bfb      	ldrb	r3, [r7, #15]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d004      	beq.n	80095b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2202      	movs	r2, #2
 80095b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095b4:	e009      	b.n	80095ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095be:	e004      	b.n	80095ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f96d 	bl	80098a2 <USBD_CtlError>
  }
}
 80095c8:	bf00      	nop
 80095ca:	bf00      	nop
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	885b      	ldrh	r3, [r3, #2]
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	4b41      	ldr	r3, [pc, #260]	; (80096ec <USBD_SetConfig+0x118>)
 80095e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80095e8:	4b40      	ldr	r3, [pc, #256]	; (80096ec <USBD_SetConfig+0x118>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d904      	bls.n	80095fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f955 	bl	80098a2 <USBD_CtlError>
 80095f8:	e075      	b.n	80096e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009600:	2b02      	cmp	r3, #2
 8009602:	d002      	beq.n	800960a <USBD_SetConfig+0x36>
 8009604:	2b03      	cmp	r3, #3
 8009606:	d023      	beq.n	8009650 <USBD_SetConfig+0x7c>
 8009608:	e062      	b.n	80096d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800960a:	4b38      	ldr	r3, [pc, #224]	; (80096ec <USBD_SetConfig+0x118>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d01a      	beq.n	8009648 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009612:	4b36      	ldr	r3, [pc, #216]	; (80096ec <USBD_SetConfig+0x118>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2203      	movs	r2, #3
 8009620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009624:	4b31      	ldr	r3, [pc, #196]	; (80096ec <USBD_SetConfig+0x118>)
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7ff f9e8 	bl	8008a00 <USBD_SetClassConfig>
 8009630:	4603      	mov	r3, r0
 8009632:	2b02      	cmp	r3, #2
 8009634:	d104      	bne.n	8009640 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f932 	bl	80098a2 <USBD_CtlError>
            return;
 800963e:	e052      	b.n	80096e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f9f6 	bl	8009a32 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009646:	e04e      	b.n	80096e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f9f2 	bl	8009a32 <USBD_CtlSendStatus>
        break;
 800964e:	e04a      	b.n	80096e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009650:	4b26      	ldr	r3, [pc, #152]	; (80096ec <USBD_SetConfig+0x118>)
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d112      	bne.n	800967e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009660:	4b22      	ldr	r3, [pc, #136]	; (80096ec <USBD_SetConfig+0x118>)
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	461a      	mov	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800966a:	4b20      	ldr	r3, [pc, #128]	; (80096ec <USBD_SetConfig+0x118>)
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7ff f9e4 	bl	8008a3e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f9db 	bl	8009a32 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800967c:	e033      	b.n	80096e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800967e:	4b1b      	ldr	r3, [pc, #108]	; (80096ec <USBD_SetConfig+0x118>)
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	429a      	cmp	r2, r3
 800968a:	d01d      	beq.n	80096c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff f9d2 	bl	8008a3e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800969a:	4b14      	ldr	r3, [pc, #80]	; (80096ec <USBD_SetConfig+0x118>)
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80096a4:	4b11      	ldr	r3, [pc, #68]	; (80096ec <USBD_SetConfig+0x118>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7ff f9a8 	bl	8008a00 <USBD_SetClassConfig>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d104      	bne.n	80096c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f8f2 	bl	80098a2 <USBD_CtlError>
            return;
 80096be:	e012      	b.n	80096e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f9b6 	bl	8009a32 <USBD_CtlSendStatus>
        break;
 80096c6:	e00e      	b.n	80096e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f9b2 	bl	8009a32 <USBD_CtlSendStatus>
        break;
 80096ce:	e00a      	b.n	80096e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f8e5 	bl	80098a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80096d8:	4b04      	ldr	r3, [pc, #16]	; (80096ec <USBD_SetConfig+0x118>)
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7ff f9ad 	bl	8008a3e <USBD_ClrClassConfig>
        break;
 80096e4:	bf00      	nop
    }
  }
}
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	200003cc 	.word	0x200003cc

080096f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	88db      	ldrh	r3, [r3, #6]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d004      	beq.n	800970c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f8cc 	bl	80098a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800970a:	e022      	b.n	8009752 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009712:	2b02      	cmp	r3, #2
 8009714:	dc02      	bgt.n	800971c <USBD_GetConfig+0x2c>
 8009716:	2b00      	cmp	r3, #0
 8009718:	dc03      	bgt.n	8009722 <USBD_GetConfig+0x32>
 800971a:	e015      	b.n	8009748 <USBD_GetConfig+0x58>
 800971c:	2b03      	cmp	r3, #3
 800971e:	d00b      	beq.n	8009738 <USBD_GetConfig+0x48>
 8009720:	e012      	b.n	8009748 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3308      	adds	r3, #8
 800972c:	2201      	movs	r2, #1
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f920 	bl	8009976 <USBD_CtlSendData>
        break;
 8009736:	e00c      	b.n	8009752 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	3304      	adds	r3, #4
 800973c:	2201      	movs	r2, #1
 800973e:	4619      	mov	r1, r3
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f918 	bl	8009976 <USBD_CtlSendData>
        break;
 8009746:	e004      	b.n	8009752 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f8a9 	bl	80098a2 <USBD_CtlError>
        break;
 8009750:	bf00      	nop
}
 8009752:	bf00      	nop
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b082      	sub	sp, #8
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800976a:	3b01      	subs	r3, #1
 800976c:	2b02      	cmp	r3, #2
 800976e:	d81e      	bhi.n	80097ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	88db      	ldrh	r3, [r3, #6]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d004      	beq.n	8009782 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f891 	bl	80098a2 <USBD_CtlError>
        break;
 8009780:	e01a      	b.n	80097b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800978e:	2b00      	cmp	r3, #0
 8009790:	d005      	beq.n	800979e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	f043 0202 	orr.w	r2, r3, #2
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	330c      	adds	r3, #12
 80097a2:	2202      	movs	r2, #2
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f8e5 	bl	8009976 <USBD_CtlSendData>
      break;
 80097ac:	e004      	b.n	80097b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f876 	bl	80098a2 <USBD_CtlError>
      break;
 80097b6:	bf00      	nop
  }
}
 80097b8:	bf00      	nop
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	885b      	ldrh	r3, [r3, #2]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d106      	bne.n	80097e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f929 	bl	8009a32 <USBD_CtlSendStatus>
  }
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f8:	3b01      	subs	r3, #1
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d80b      	bhi.n	8009816 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	885b      	ldrh	r3, [r3, #2]
 8009802:	2b01      	cmp	r3, #1
 8009804:	d10c      	bne.n	8009820 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f90f 	bl	8009a32 <USBD_CtlSendStatus>
      }
      break;
 8009814:	e004      	b.n	8009820 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009816:	6839      	ldr	r1, [r7, #0]
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 f842 	bl	80098a2 <USBD_CtlError>
      break;
 800981e:	e000      	b.n	8009822 <USBD_ClrFeature+0x3a>
      break;
 8009820:	bf00      	nop
  }
}
 8009822:	bf00      	nop
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800982a:	b480      	push	{r7}
 800982c:	b083      	sub	sp, #12
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	781a      	ldrb	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	785a      	ldrb	r2, [r3, #1]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	3302      	adds	r3, #2
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	b29a      	uxth	r2, r3
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	3303      	adds	r3, #3
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	b29b      	uxth	r3, r3
 8009854:	021b      	lsls	r3, r3, #8
 8009856:	b29b      	uxth	r3, r3
 8009858:	4413      	add	r3, r2
 800985a:	b29a      	uxth	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	3304      	adds	r3, #4
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	b29a      	uxth	r2, r3
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	3305      	adds	r3, #5
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	b29b      	uxth	r3, r3
 8009870:	021b      	lsls	r3, r3, #8
 8009872:	b29b      	uxth	r3, r3
 8009874:	4413      	add	r3, r2
 8009876:	b29a      	uxth	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	3306      	adds	r3, #6
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	b29a      	uxth	r2, r3
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	3307      	adds	r3, #7
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	b29b      	uxth	r3, r3
 800988c:	021b      	lsls	r3, r3, #8
 800988e:	b29b      	uxth	r3, r3
 8009890:	4413      	add	r3, r2
 8009892:	b29a      	uxth	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	80da      	strh	r2, [r3, #6]

}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	bc80      	pop	{r7}
 80098a0:	4770      	bx	lr

080098a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80098ac:	2180      	movs	r1, #128	; 0x80
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f003 f934 	bl	800cb1c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80098b4:	2100      	movs	r1, #0
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f003 f930 	bl	800cb1c <USBD_LL_StallEP>
}
 80098bc:	bf00      	nop
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098d0:	2300      	movs	r3, #0
 80098d2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d032      	beq.n	8009940 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 f834 	bl	8009948 <USBD_GetLen>
 80098e0:	4603      	mov	r3, r0
 80098e2:	3301      	adds	r3, #1
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	75fa      	strb	r2, [r7, #23]
 80098f4:	461a      	mov	r2, r3
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	4413      	add	r3, r2
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	7812      	ldrb	r2, [r2, #0]
 80098fe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009900:	7dfb      	ldrb	r3, [r7, #23]
 8009902:	1c5a      	adds	r2, r3, #1
 8009904:	75fa      	strb	r2, [r7, #23]
 8009906:	461a      	mov	r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	4413      	add	r3, r2
 800990c:	2203      	movs	r2, #3
 800990e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009910:	e012      	b.n	8009938 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	60fa      	str	r2, [r7, #12]
 8009918:	7dfa      	ldrb	r2, [r7, #23]
 800991a:	1c51      	adds	r1, r2, #1
 800991c:	75f9      	strb	r1, [r7, #23]
 800991e:	4611      	mov	r1, r2
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	440a      	add	r2, r1
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009928:	7dfb      	ldrb	r3, [r7, #23]
 800992a:	1c5a      	adds	r2, r3, #1
 800992c:	75fa      	strb	r2, [r7, #23]
 800992e:	461a      	mov	r2, r3
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	4413      	add	r3, r2
 8009934:	2200      	movs	r2, #0
 8009936:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1e8      	bne.n	8009912 <USBD_GetString+0x4e>
    }
  }
}
 8009940:	bf00      	nop
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009950:	2300      	movs	r3, #0
 8009952:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009954:	e005      	b.n	8009962 <USBD_GetLen+0x1a>
  {
    len++;
 8009956:	7bfb      	ldrb	r3, [r7, #15]
 8009958:	3301      	adds	r3, #1
 800995a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	3301      	adds	r3, #1
 8009960:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1f5      	bne.n	8009956 <USBD_GetLen+0xe>
  }

  return len;
 800996a:	7bfb      	ldrb	r3, [r7, #15]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	bc80      	pop	{r7}
 8009974:	4770      	bx	lr

08009976 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	60f8      	str	r0, [r7, #12]
 800997e:	60b9      	str	r1, [r7, #8]
 8009980:	4613      	mov	r3, r2
 8009982:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2202      	movs	r2, #2
 8009988:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800998c:	88fa      	ldrh	r2, [r7, #6]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009992:	88fa      	ldrh	r2, [r7, #6]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009998:	88fb      	ldrh	r3, [r7, #6]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	2100      	movs	r1, #0
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f003 f945 	bl	800cc2e <USBD_LL_Transmit>

  return USBD_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	4613      	mov	r3, r2
 80099ba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099bc:	88fb      	ldrh	r3, [r7, #6]
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	2100      	movs	r1, #0
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f003 f933 	bl	800cc2e <USBD_LL_Transmit>

  return USBD_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	60f8      	str	r0, [r7, #12]
 80099da:	60b9      	str	r1, [r7, #8]
 80099dc:	4613      	mov	r3, r2
 80099de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2203      	movs	r2, #3
 80099e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80099e8:	88fa      	ldrh	r2, [r7, #6]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80099f0:	88fa      	ldrh	r2, [r7, #6]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099f8:	88fb      	ldrh	r3, [r7, #6]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	2100      	movs	r1, #0
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f003 f938 	bl	800cc74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a1c:	88fb      	ldrh	r3, [r7, #6]
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	2100      	movs	r1, #0
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f003 f926 	bl	800cc74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2204      	movs	r2, #4
 8009a3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a42:	2300      	movs	r3, #0
 8009a44:	2200      	movs	r2, #0
 8009a46:	2100      	movs	r1, #0
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f003 f8f0 	bl	800cc2e <USBD_LL_Transmit>

  return USBD_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2205      	movs	r2, #5
 8009a64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a68:	2300      	movs	r3, #0
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f003 f900 	bl	800cc74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a86:	f3ef 8305 	mrs	r3, IPSR
 8009a8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10f      	bne.n	8009ab2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a92:	f3ef 8310 	mrs	r3, PRIMASK
 8009a96:	607b      	str	r3, [r7, #4]
  return(result);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d109      	bne.n	8009ab2 <osKernelInitialize+0x32>
 8009a9e:	4b10      	ldr	r3, [pc, #64]	; (8009ae0 <osKernelInitialize+0x60>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d109      	bne.n	8009aba <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009aa6:	f3ef 8311 	mrs	r3, BASEPRI
 8009aaa:	603b      	str	r3, [r7, #0]
  return(result);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009ab2:	f06f 0305 	mvn.w	r3, #5
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	e00c      	b.n	8009ad4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009aba:	4b09      	ldr	r3, [pc, #36]	; (8009ae0 <osKernelInitialize+0x60>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d105      	bne.n	8009ace <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009ac2:	4b07      	ldr	r3, [pc, #28]	; (8009ae0 <osKernelInitialize+0x60>)
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	e002      	b.n	8009ad4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009ace:	f04f 33ff 	mov.w	r3, #4294967295
 8009ad2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bc80      	pop	{r7}
 8009ade:	4770      	bx	lr
 8009ae0:	200003d0 	.word	0x200003d0

08009ae4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aea:	f3ef 8305 	mrs	r3, IPSR
 8009aee:	60bb      	str	r3, [r7, #8]
  return(result);
 8009af0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10f      	bne.n	8009b16 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009af6:	f3ef 8310 	mrs	r3, PRIMASK
 8009afa:	607b      	str	r3, [r7, #4]
  return(result);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d109      	bne.n	8009b16 <osKernelStart+0x32>
 8009b02:	4b11      	ldr	r3, [pc, #68]	; (8009b48 <osKernelStart+0x64>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d109      	bne.n	8009b1e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8009b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <osKernelStart+0x3a>
    stat = osErrorISR;
 8009b16:	f06f 0305 	mvn.w	r3, #5
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	e00e      	b.n	8009b3c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b1e:	4b0a      	ldr	r3, [pc, #40]	; (8009b48 <osKernelStart+0x64>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d107      	bne.n	8009b36 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8009b26:	4b08      	ldr	r3, [pc, #32]	; (8009b48 <osKernelStart+0x64>)
 8009b28:	2202      	movs	r2, #2
 8009b2a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009b2c:	f001 f890 	bl	800ac50 <vTaskStartScheduler>
      stat = osOK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	60fb      	str	r3, [r7, #12]
 8009b34:	e002      	b.n	8009b3c <osKernelStart+0x58>
    } else {
      stat = osError;
 8009b36:	f04f 33ff 	mov.w	r3, #4294967295
 8009b3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	200003d0 	.word	0x200003d0

08009b4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b092      	sub	sp, #72	; 0x48
 8009b50:	af04      	add	r7, sp, #16
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b5c:	f3ef 8305 	mrs	r3, IPSR
 8009b60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f040 8094 	bne.w	8009c92 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8009b6e:	623b      	str	r3, [r7, #32]
  return(result);
 8009b70:	6a3b      	ldr	r3, [r7, #32]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f040 808d 	bne.w	8009c92 <osThreadNew+0x146>
 8009b78:	4b48      	ldr	r3, [pc, #288]	; (8009c9c <osThreadNew+0x150>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d106      	bne.n	8009b8e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b80:	f3ef 8311 	mrs	r3, BASEPRI
 8009b84:	61fb      	str	r3, [r7, #28]
  return(result);
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f040 8082 	bne.w	8009c92 <osThreadNew+0x146>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d07e      	beq.n	8009c92 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8009b94:	2380      	movs	r3, #128	; 0x80
 8009b96:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8009b98:	2318      	movs	r3, #24
 8009b9a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8009ba0:	f107 031b 	add.w	r3, r7, #27
 8009ba4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8009ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8009baa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d045      	beq.n	8009c3e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <osThreadNew+0x74>
        name = attr->name;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d008      	beq.n	8009be6 <osThreadNew+0x9a>
 8009bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd6:	2b38      	cmp	r3, #56	; 0x38
 8009bd8:	d805      	bhi.n	8009be6 <osThreadNew+0x9a>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <osThreadNew+0x9e>
        return (NULL);
 8009be6:	2300      	movs	r3, #0
 8009be8:	e054      	b.n	8009c94 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d003      	beq.n	8009bfa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	089b      	lsrs	r3, r3, #2
 8009bf8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00e      	beq.n	8009c20 <osThreadNew+0xd4>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	2ba7      	cmp	r3, #167	; 0xa7
 8009c08:	d90a      	bls.n	8009c20 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d006      	beq.n	8009c20 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d002      	beq.n	8009c20 <osThreadNew+0xd4>
        mem = 1;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c1e:	e010      	b.n	8009c42 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10c      	bne.n	8009c42 <osThreadNew+0xf6>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d108      	bne.n	8009c42 <osThreadNew+0xf6>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d104      	bne.n	8009c42 <osThreadNew+0xf6>
          mem = 0;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c3c:	e001      	b.n	8009c42 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d110      	bne.n	8009c6a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c50:	9202      	str	r2, [sp, #8]
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 fe12 	bl	800a888 <xTaskCreateStatic>
 8009c64:	4603      	mov	r3, r0
 8009c66:	617b      	str	r3, [r7, #20]
 8009c68:	e013      	b.n	8009c92 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8009c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d110      	bne.n	8009c92 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	f107 0314 	add.w	r3, r7, #20
 8009c78:	9301      	str	r3, [sp, #4]
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f000 fe5c 	bl	800a940 <xTaskCreate>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d001      	beq.n	8009c92 <osThreadNew+0x146>
          hTask = NULL;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c92:	697b      	ldr	r3, [r7, #20]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3738      	adds	r7, #56	; 0x38
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	200003d0 	.word	0x200003d0

08009ca0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ca8:	f3ef 8305 	mrs	r3, IPSR
 8009cac:	613b      	str	r3, [r7, #16]
  return(result);
 8009cae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10f      	bne.n	8009cd4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8009cb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d109      	bne.n	8009cd4 <osDelay+0x34>
 8009cc0:	4b0d      	ldr	r3, [pc, #52]	; (8009cf8 <osDelay+0x58>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d109      	bne.n	8009cdc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009cc8:	f3ef 8311 	mrs	r3, BASEPRI
 8009ccc:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d003      	beq.n	8009cdc <osDelay+0x3c>
    stat = osErrorISR;
 8009cd4:	f06f 0305 	mvn.w	r3, #5
 8009cd8:	617b      	str	r3, [r7, #20]
 8009cda:	e007      	b.n	8009cec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <osDelay+0x4c>
      vTaskDelay(ticks);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 ff7e 	bl	800abe8 <vTaskDelay>
    }
  }

  return (stat);
 8009cec:	697b      	ldr	r3, [r7, #20]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3718      	adds	r7, #24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	200003d0 	.word	0x200003d0

08009cfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4a06      	ldr	r2, [pc, #24]	; (8009d24 <vApplicationGetIdleTaskMemory+0x28>)
 8009d0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	4a05      	ldr	r2, [pc, #20]	; (8009d28 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2280      	movs	r2, #128	; 0x80
 8009d18:	601a      	str	r2, [r3, #0]
}
 8009d1a:	bf00      	nop
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bc80      	pop	{r7}
 8009d22:	4770      	bx	lr
 8009d24:	200003d4 	.word	0x200003d4
 8009d28:	2000047c 	.word	0x2000047c

08009d2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4a07      	ldr	r2, [pc, #28]	; (8009d58 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	4a06      	ldr	r2, [pc, #24]	; (8009d5c <vApplicationGetTimerTaskMemory+0x30>)
 8009d42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d4a:	601a      	str	r2, [r3, #0]
}
 8009d4c:	bf00      	nop
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bc80      	pop	{r7}
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	2000067c 	.word	0x2000067c
 8009d5c:	20000724 	.word	0x20000724

08009d60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f103 0208 	add.w	r2, r3, #8
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f04f 32ff 	mov.w	r2, #4294967295
 8009d78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f103 0208 	add.w	r2, r3, #8
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f103 0208 	add.w	r2, r3, #8
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d94:	bf00      	nop
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bc80      	pop	{r7}
 8009d9c:	4770      	bx	lr

08009d9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b083      	sub	sp, #12
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bc80      	pop	{r7}
 8009db4:	4770      	bx	lr

08009db6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009db6:	b480      	push	{r7}
 8009db8:	b085      	sub	sp, #20
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	689a      	ldr	r2, [r3, #8]
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	1c5a      	adds	r2, r3, #1
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	601a      	str	r2, [r3, #0]
}
 8009df2:	bf00      	nop
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bc80      	pop	{r7}
 8009dfa:	4770      	bx	lr

08009dfc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e12:	d103      	bne.n	8009e1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	60fb      	str	r3, [r7, #12]
 8009e1a:	e00c      	b.n	8009e36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3308      	adds	r3, #8
 8009e20:	60fb      	str	r3, [r7, #12]
 8009e22:	e002      	b.n	8009e2a <vListInsert+0x2e>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d2f6      	bcs.n	8009e24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	685a      	ldr	r2, [r3, #4]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	601a      	str	r2, [r3, #0]
}
 8009e62:	bf00      	nop
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bc80      	pop	{r7}
 8009e6a:	4770      	bx	lr

08009e6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	6892      	ldr	r2, [r2, #8]
 8009e82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	6852      	ldr	r2, [r2, #4]
 8009e8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d103      	bne.n	8009ea0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	689a      	ldr	r2, [r3, #8]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	1e5a      	subs	r2, r3, #1
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bc80      	pop	{r7}
 8009ebc:	4770      	bx	lr
	...

08009ec0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10a      	bne.n	8009eea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ee6:	bf00      	nop
 8009ee8:	e7fe      	b.n	8009ee8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009eea:	f001 fff7 	bl	800bedc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef6:	68f9      	ldr	r1, [r7, #12]
 8009ef8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009efa:	fb01 f303 	mul.w	r3, r1, r3
 8009efe:	441a      	add	r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	68f9      	ldr	r1, [r7, #12]
 8009f1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f20:	fb01 f303 	mul.w	r3, r1, r3
 8009f24:	441a      	add	r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	22ff      	movs	r2, #255	; 0xff
 8009f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	22ff      	movs	r2, #255	; 0xff
 8009f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d114      	bne.n	8009f6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d01a      	beq.n	8009f7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3310      	adds	r3, #16
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 f91b 	bl	800b188 <xTaskRemoveFromEventList>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d012      	beq.n	8009f7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f58:	4b0c      	ldr	r3, [pc, #48]	; (8009f8c <xQueueGenericReset+0xcc>)
 8009f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	e009      	b.n	8009f7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3310      	adds	r3, #16
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff fef6 	bl	8009d60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	3324      	adds	r3, #36	; 0x24
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7ff fef1 	bl	8009d60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f7e:	f001 ffdd 	bl	800bf3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f82:	2301      	movs	r3, #1
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	e000ed04 	.word	0xe000ed04

08009f90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08e      	sub	sp, #56	; 0x38
 8009f94:	af02      	add	r7, sp, #8
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
 8009f9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10a      	bne.n	8009fba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fb6:	bf00      	nop
 8009fb8:	e7fe      	b.n	8009fb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10a      	bne.n	8009fd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fd2:	bf00      	nop
 8009fd4:	e7fe      	b.n	8009fd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <xQueueGenericCreateStatic+0x52>
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <xQueueGenericCreateStatic+0x56>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e000      	b.n	8009fe8 <xQueueGenericCreateStatic+0x58>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	623b      	str	r3, [r7, #32]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d102      	bne.n	800a00e <xQueueGenericCreateStatic+0x7e>
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d101      	bne.n	800a012 <xQueueGenericCreateStatic+0x82>
 800a00e:	2301      	movs	r3, #1
 800a010:	e000      	b.n	800a014 <xQueueGenericCreateStatic+0x84>
 800a012:	2300      	movs	r3, #0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10a      	bne.n	800a02e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	61fb      	str	r3, [r7, #28]
}
 800a02a:	bf00      	nop
 800a02c:	e7fe      	b.n	800a02c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a02e:	2350      	movs	r3, #80	; 0x50
 800a030:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	2b50      	cmp	r3, #80	; 0x50
 800a036:	d00a      	beq.n	800a04e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	61bb      	str	r3, [r7, #24]
}
 800a04a:	bf00      	nop
 800a04c:	e7fe      	b.n	800a04c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00d      	beq.n	800a074 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a060:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	4613      	mov	r3, r2
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	68b9      	ldr	r1, [r7, #8]
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 f805 	bl	800a07e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a076:	4618      	mov	r0, r3
 800a078:	3730      	adds	r7, #48	; 0x30
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	60f8      	str	r0, [r7, #12]
 800a086:	60b9      	str	r1, [r7, #8]
 800a088:	607a      	str	r2, [r7, #4]
 800a08a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d103      	bne.n	800a09a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	69ba      	ldr	r2, [r7, #24]
 800a096:	601a      	str	r2, [r3, #0]
 800a098:	e002      	b.n	800a0a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	69b8      	ldr	r0, [r7, #24]
 800a0b0:	f7ff ff06 	bl	8009ec0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	78fa      	ldrb	r2, [r7, #3]
 800a0b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0bc:	bf00      	nop
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08e      	sub	sp, #56	; 0x38
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10a      	bne.n	800a0f6 <xQueueGenericSend+0x32>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a0f2:	bf00      	nop
 800a0f4:	e7fe      	b.n	800a0f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d103      	bne.n	800a104 <xQueueGenericSend+0x40>
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <xQueueGenericSend+0x44>
 800a104:	2301      	movs	r3, #1
 800a106:	e000      	b.n	800a10a <xQueueGenericSend+0x46>
 800a108:	2300      	movs	r3, #0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10a      	bne.n	800a124 <xQueueGenericSend+0x60>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a120:	bf00      	nop
 800a122:	e7fe      	b.n	800a122 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2b02      	cmp	r3, #2
 800a128:	d103      	bne.n	800a132 <xQueueGenericSend+0x6e>
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d101      	bne.n	800a136 <xQueueGenericSend+0x72>
 800a132:	2301      	movs	r3, #1
 800a134:	e000      	b.n	800a138 <xQueueGenericSend+0x74>
 800a136:	2300      	movs	r3, #0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10a      	bne.n	800a152 <xQueueGenericSend+0x8e>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	623b      	str	r3, [r7, #32]
}
 800a14e:	bf00      	nop
 800a150:	e7fe      	b.n	800a150 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a152:	f001 f9df 	bl	800b514 <xTaskGetSchedulerState>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d102      	bne.n	800a162 <xQueueGenericSend+0x9e>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d101      	bne.n	800a166 <xQueueGenericSend+0xa2>
 800a162:	2301      	movs	r3, #1
 800a164:	e000      	b.n	800a168 <xQueueGenericSend+0xa4>
 800a166:	2300      	movs	r3, #0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10a      	bne.n	800a182 <xQueueGenericSend+0xbe>
	__asm volatile
 800a16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	61fb      	str	r3, [r7, #28]
}
 800a17e:	bf00      	nop
 800a180:	e7fe      	b.n	800a180 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a182:	f001 feab 	bl	800bedc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a18e:	429a      	cmp	r2, r3
 800a190:	d302      	bcc.n	800a198 <xQueueGenericSend+0xd4>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b02      	cmp	r3, #2
 800a196:	d129      	bne.n	800a1ec <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	68b9      	ldr	r1, [r7, #8]
 800a19c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a19e:	f000 fa07 	bl	800a5b0 <prvCopyDataToQueue>
 800a1a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d010      	beq.n	800a1ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ae:	3324      	adds	r3, #36	; 0x24
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 ffe9 	bl	800b188 <xTaskRemoveFromEventList>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d013      	beq.n	800a1e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a1bc:	4b3f      	ldr	r3, [pc, #252]	; (800a2bc <xQueueGenericSend+0x1f8>)
 800a1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	e00a      	b.n	800a1e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a1d4:	4b39      	ldr	r3, [pc, #228]	; (800a2bc <xQueueGenericSend+0x1f8>)
 800a1d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a1e4:	f001 feaa 	bl	800bf3c <vPortExitCritical>
				return pdPASS;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e063      	b.n	800a2b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d103      	bne.n	800a1fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1f2:	f001 fea3 	bl	800bf3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	e05c      	b.n	800a2b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d106      	bne.n	800a20e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a200:	f107 0314 	add.w	r3, r7, #20
 800a204:	4618      	mov	r0, r3
 800a206:	f001 f823 	bl	800b250 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a20a:	2301      	movs	r3, #1
 800a20c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a20e:	f001 fe95 	bl	800bf3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a212:	f000 fd8d 	bl	800ad30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a216:	f001 fe61 	bl	800bedc <vPortEnterCritical>
 800a21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a220:	b25b      	sxtb	r3, r3
 800a222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a226:	d103      	bne.n	800a230 <xQueueGenericSend+0x16c>
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a236:	b25b      	sxtb	r3, r3
 800a238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23c:	d103      	bne.n	800a246 <xQueueGenericSend+0x182>
 800a23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a246:	f001 fe79 	bl	800bf3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a24a:	1d3a      	adds	r2, r7, #4
 800a24c:	f107 0314 	add.w	r3, r7, #20
 800a250:	4611      	mov	r1, r2
 800a252:	4618      	mov	r0, r3
 800a254:	f001 f812 	bl	800b27c <xTaskCheckForTimeOut>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d124      	bne.n	800a2a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a25e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a260:	f000 fa9e 	bl	800a7a0 <prvIsQueueFull>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d018      	beq.n	800a29c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26c:	3310      	adds	r3, #16
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	4611      	mov	r1, r2
 800a272:	4618      	mov	r0, r3
 800a274:	f000 ff38 	bl	800b0e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a27a:	f000 fa29 	bl	800a6d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a27e:	f000 fd65 	bl	800ad4c <xTaskResumeAll>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	f47f af7c 	bne.w	800a182 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a28a:	4b0c      	ldr	r3, [pc, #48]	; (800a2bc <xQueueGenericSend+0x1f8>)
 800a28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a290:	601a      	str	r2, [r3, #0]
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	e772      	b.n	800a182 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a29c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a29e:	f000 fa17 	bl	800a6d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2a2:	f000 fd53 	bl	800ad4c <xTaskResumeAll>
 800a2a6:	e76c      	b.n	800a182 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2aa:	f000 fa11 	bl	800a6d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2ae:	f000 fd4d 	bl	800ad4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a2b2:	2300      	movs	r3, #0
		}
	}
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3738      	adds	r7, #56	; 0x38
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	e000ed04 	.word	0xe000ed04

0800a2c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b08e      	sub	sp, #56	; 0x38
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10a      	bne.n	800a2ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2ea:	bf00      	nop
 800a2ec:	e7fe      	b.n	800a2ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d103      	bne.n	800a2fc <xQueueGenericSendFromISR+0x3c>
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <xQueueGenericSendFromISR+0x40>
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e000      	b.n	800a302 <xQueueGenericSendFromISR+0x42>
 800a300:	2300      	movs	r3, #0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10a      	bne.n	800a31c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	623b      	str	r3, [r7, #32]
}
 800a318:	bf00      	nop
 800a31a:	e7fe      	b.n	800a31a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d103      	bne.n	800a32a <xQueueGenericSendFromISR+0x6a>
 800a322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a326:	2b01      	cmp	r3, #1
 800a328:	d101      	bne.n	800a32e <xQueueGenericSendFromISR+0x6e>
 800a32a:	2301      	movs	r3, #1
 800a32c:	e000      	b.n	800a330 <xQueueGenericSendFromISR+0x70>
 800a32e:	2300      	movs	r3, #0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10a      	bne.n	800a34a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	61fb      	str	r3, [r7, #28]
}
 800a346:	bf00      	nop
 800a348:	e7fe      	b.n	800a348 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a34a:	f001 fe89 	bl	800c060 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a34e:	f3ef 8211 	mrs	r2, BASEPRI
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	61ba      	str	r2, [r7, #24]
 800a364:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a366:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a368:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a372:	429a      	cmp	r2, r3
 800a374:	d302      	bcc.n	800a37c <xQueueGenericSendFromISR+0xbc>
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d12c      	bne.n	800a3d6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	68b9      	ldr	r1, [r7, #8]
 800a38a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a38c:	f000 f910 	bl	800a5b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a390:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a398:	d112      	bne.n	800a3c0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d016      	beq.n	800a3d0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	3324      	adds	r3, #36	; 0x24
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 feee 	bl	800b188 <xTaskRemoveFromEventList>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00e      	beq.n	800a3d0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00b      	beq.n	800a3d0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	e007      	b.n	800a3d0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	b25a      	sxtb	r2, r3
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a3d4:	e001      	b.n	800a3da <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	637b      	str	r3, [r7, #52]	; 0x34
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a3e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3738      	adds	r7, #56	; 0x38
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08c      	sub	sp, #48	; 0x30
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10a      	bne.n	800a420 <xQueueReceive+0x30>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	623b      	str	r3, [r7, #32]
}
 800a41c:	bf00      	nop
 800a41e:	e7fe      	b.n	800a41e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d103      	bne.n	800a42e <xQueueReceive+0x3e>
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <xQueueReceive+0x42>
 800a42e:	2301      	movs	r3, #1
 800a430:	e000      	b.n	800a434 <xQueueReceive+0x44>
 800a432:	2300      	movs	r3, #0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10a      	bne.n	800a44e <xQueueReceive+0x5e>
	__asm volatile
 800a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	61fb      	str	r3, [r7, #28]
}
 800a44a:	bf00      	nop
 800a44c:	e7fe      	b.n	800a44c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a44e:	f001 f861 	bl	800b514 <xTaskGetSchedulerState>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d102      	bne.n	800a45e <xQueueReceive+0x6e>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <xQueueReceive+0x72>
 800a45e:	2301      	movs	r3, #1
 800a460:	e000      	b.n	800a464 <xQueueReceive+0x74>
 800a462:	2300      	movs	r3, #0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10a      	bne.n	800a47e <xQueueReceive+0x8e>
	__asm volatile
 800a468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	61bb      	str	r3, [r7, #24]
}
 800a47a:	bf00      	nop
 800a47c:	e7fe      	b.n	800a47c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a47e:	f001 fd2d 	bl	800bedc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a486:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d01f      	beq.n	800a4ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a48e:	68b9      	ldr	r1, [r7, #8]
 800a490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a492:	f000 f8f7 	bl	800a684 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a498:	1e5a      	subs	r2, r3, #1
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00f      	beq.n	800a4c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	3310      	adds	r3, #16
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 fe6c 	bl	800b188 <xTaskRemoveFromEventList>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d007      	beq.n	800a4c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4b6:	4b3d      	ldr	r3, [pc, #244]	; (800a5ac <xQueueReceive+0x1bc>)
 800a4b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4c6:	f001 fd39 	bl	800bf3c <vPortExitCritical>
				return pdPASS;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e069      	b.n	800a5a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d103      	bne.n	800a4dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4d4:	f001 fd32 	bl	800bf3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	e062      	b.n	800a5a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d106      	bne.n	800a4f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4e2:	f107 0310 	add.w	r3, r7, #16
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 feb2 	bl	800b250 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4f0:	f001 fd24 	bl	800bf3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4f4:	f000 fc1c 	bl	800ad30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4f8:	f001 fcf0 	bl	800bedc <vPortEnterCritical>
 800a4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a502:	b25b      	sxtb	r3, r3
 800a504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a508:	d103      	bne.n	800a512 <xQueueReceive+0x122>
 800a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a518:	b25b      	sxtb	r3, r3
 800a51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51e:	d103      	bne.n	800a528 <xQueueReceive+0x138>
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	2200      	movs	r2, #0
 800a524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a528:	f001 fd08 	bl	800bf3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a52c:	1d3a      	adds	r2, r7, #4
 800a52e:	f107 0310 	add.w	r3, r7, #16
 800a532:	4611      	mov	r1, r2
 800a534:	4618      	mov	r0, r3
 800a536:	f000 fea1 	bl	800b27c <xTaskCheckForTimeOut>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d123      	bne.n	800a588 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a542:	f000 f917 	bl	800a774 <prvIsQueueEmpty>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d017      	beq.n	800a57c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	3324      	adds	r3, #36	; 0x24
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	4611      	mov	r1, r2
 800a554:	4618      	mov	r0, r3
 800a556:	f000 fdc7 	bl	800b0e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a55a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a55c:	f000 f8b8 	bl	800a6d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a560:	f000 fbf4 	bl	800ad4c <xTaskResumeAll>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d189      	bne.n	800a47e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a56a:	4b10      	ldr	r3, [pc, #64]	; (800a5ac <xQueueReceive+0x1bc>)
 800a56c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	e780      	b.n	800a47e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a57c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a57e:	f000 f8a7 	bl	800a6d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a582:	f000 fbe3 	bl	800ad4c <xTaskResumeAll>
 800a586:	e77a      	b.n	800a47e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a58a:	f000 f8a1 	bl	800a6d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a58e:	f000 fbdd 	bl	800ad4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a594:	f000 f8ee 	bl	800a774 <prvIsQueueEmpty>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f43f af6f 	beq.w	800a47e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3730      	adds	r7, #48	; 0x30
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	e000ed04 	.word	0xe000ed04

0800a5b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10d      	bne.n	800a5ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d14d      	bne.n	800a672 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 ffb8 	bl	800b550 <xTaskPriorityDisinherit>
 800a5e0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	605a      	str	r2, [r3, #4]
 800a5e8:	e043      	b.n	800a672 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d119      	bne.n	800a624 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6898      	ldr	r0, [r3, #8]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	68b9      	ldr	r1, [r7, #8]
 800a5fc:	f002 fc40 	bl	800ce80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	689a      	ldr	r2, [r3, #8]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a608:	441a      	add	r2, r3
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	689a      	ldr	r2, [r3, #8]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	429a      	cmp	r2, r3
 800a618:	d32b      	bcc.n	800a672 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	609a      	str	r2, [r3, #8]
 800a622:	e026      	b.n	800a672 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	68d8      	ldr	r0, [r3, #12]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62c:	461a      	mov	r2, r3
 800a62e:	68b9      	ldr	r1, [r7, #8]
 800a630:	f002 fc26 	bl	800ce80 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	68da      	ldr	r2, [r3, #12]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63c:	425b      	negs	r3, r3
 800a63e:	441a      	add	r2, r3
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	68da      	ldr	r2, [r3, #12]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d207      	bcs.n	800a660 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	685a      	ldr	r2, [r3, #4]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a658:	425b      	negs	r3, r3
 800a65a:	441a      	add	r2, r3
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b02      	cmp	r3, #2
 800a664:	d105      	bne.n	800a672 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	3b01      	subs	r3, #1
 800a670:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	1c5a      	adds	r2, r3, #1
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a67a:	697b      	ldr	r3, [r7, #20]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3718      	adds	r7, #24
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a692:	2b00      	cmp	r3, #0
 800a694:	d018      	beq.n	800a6c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68da      	ldr	r2, [r3, #12]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69e:	441a      	add	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68da      	ldr	r2, [r3, #12]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d303      	bcc.n	800a6b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68d9      	ldr	r1, [r3, #12]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	6838      	ldr	r0, [r7, #0]
 800a6c4:	f002 fbdc 	bl	800ce80 <memcpy>
	}
}
 800a6c8:	bf00      	nop
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a6d8:	f001 fc00 	bl	800bedc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6e4:	e011      	b.n	800a70a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d012      	beq.n	800a714 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	3324      	adds	r3, #36	; 0x24
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 fd48 	bl	800b188 <xTaskRemoveFromEventList>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a6fe:	f000 fe1f 	bl	800b340 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a702:	7bfb      	ldrb	r3, [r7, #15]
 800a704:	3b01      	subs	r3, #1
 800a706:	b2db      	uxtb	r3, r3
 800a708:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	dce9      	bgt.n	800a6e6 <prvUnlockQueue+0x16>
 800a712:	e000      	b.n	800a716 <prvUnlockQueue+0x46>
					break;
 800a714:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	22ff      	movs	r2, #255	; 0xff
 800a71a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a71e:	f001 fc0d 	bl	800bf3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a722:	f001 fbdb 	bl	800bedc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a72c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a72e:	e011      	b.n	800a754 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d012      	beq.n	800a75e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3310      	adds	r3, #16
 800a73c:	4618      	mov	r0, r3
 800a73e:	f000 fd23 	bl	800b188 <xTaskRemoveFromEventList>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d001      	beq.n	800a74c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a748:	f000 fdfa 	bl	800b340 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a74c:	7bbb      	ldrb	r3, [r7, #14]
 800a74e:	3b01      	subs	r3, #1
 800a750:	b2db      	uxtb	r3, r3
 800a752:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	dce9      	bgt.n	800a730 <prvUnlockQueue+0x60>
 800a75c:	e000      	b.n	800a760 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a75e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	22ff      	movs	r2, #255	; 0xff
 800a764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a768:	f001 fbe8 	bl	800bf3c <vPortExitCritical>
}
 800a76c:	bf00      	nop
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a77c:	f001 fbae 	bl	800bedc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a784:	2b00      	cmp	r3, #0
 800a786:	d102      	bne.n	800a78e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a788:	2301      	movs	r3, #1
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	e001      	b.n	800a792 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a78e:	2300      	movs	r3, #0
 800a790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a792:	f001 fbd3 	bl	800bf3c <vPortExitCritical>

	return xReturn;
 800a796:	68fb      	ldr	r3, [r7, #12]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7a8:	f001 fb98 	bl	800bedc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d102      	bne.n	800a7be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	e001      	b.n	800a7c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7c2:	f001 fbbb 	bl	800bf3c <vPortExitCritical>

	return xReturn;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60fb      	str	r3, [r7, #12]
 800a7de:	e014      	b.n	800a80a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a7e0:	4a0e      	ldr	r2, [pc, #56]	; (800a81c <vQueueAddToRegistry+0x4c>)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d10b      	bne.n	800a804 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a7ec:	490b      	ldr	r1, [pc, #44]	; (800a81c <vQueueAddToRegistry+0x4c>)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7f6:	4a09      	ldr	r2, [pc, #36]	; (800a81c <vQueueAddToRegistry+0x4c>)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	00db      	lsls	r3, r3, #3
 800a7fc:	4413      	add	r3, r2
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a802:	e006      	b.n	800a812 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3301      	adds	r3, #1
 800a808:	60fb      	str	r3, [r7, #12]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2b07      	cmp	r3, #7
 800a80e:	d9e7      	bls.n	800a7e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	bc80      	pop	{r7}
 800a81a:	4770      	bx	lr
 800a81c:	20000b24 	.word	0x20000b24

0800a820 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a830:	f001 fb54 	bl	800bedc <vPortEnterCritical>
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a83a:	b25b      	sxtb	r3, r3
 800a83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a840:	d103      	bne.n	800a84a <vQueueWaitForMessageRestricted+0x2a>
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a850:	b25b      	sxtb	r3, r3
 800a852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a856:	d103      	bne.n	800a860 <vQueueWaitForMessageRestricted+0x40>
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a860:	f001 fb6c 	bl	800bf3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d106      	bne.n	800a87a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	3324      	adds	r3, #36	; 0x24
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	68b9      	ldr	r1, [r7, #8]
 800a874:	4618      	mov	r0, r3
 800a876:	f000 fc5b 	bl	800b130 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a87a:	6978      	ldr	r0, [r7, #20]
 800a87c:	f7ff ff28 	bl	800a6d0 <prvUnlockQueue>
	}
 800a880:	bf00      	nop
 800a882:	3718      	adds	r7, #24
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b08e      	sub	sp, #56	; 0x38
 800a88c:	af04      	add	r7, sp, #16
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
 800a894:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d10a      	bne.n	800a8b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a0:	f383 8811 	msr	BASEPRI, r3
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	623b      	str	r3, [r7, #32]
}
 800a8ae:	bf00      	nop
 800a8b0:	e7fe      	b.n	800a8b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10a      	bne.n	800a8ce <xTaskCreateStatic+0x46>
	__asm volatile
 800a8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	61fb      	str	r3, [r7, #28]
}
 800a8ca:	bf00      	nop
 800a8cc:	e7fe      	b.n	800a8cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a8ce:	23a8      	movs	r3, #168	; 0xa8
 800a8d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	2ba8      	cmp	r3, #168	; 0xa8
 800a8d6:	d00a      	beq.n	800a8ee <xTaskCreateStatic+0x66>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	61bb      	str	r3, [r7, #24]
}
 800a8ea:	bf00      	nop
 800a8ec:	e7fe      	b.n	800a8ec <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d01e      	beq.n	800a932 <xTaskCreateStatic+0xaa>
 800a8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d01b      	beq.n	800a932 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a902:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	2202      	movs	r2, #2
 800a908:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a90c:	2300      	movs	r3, #0
 800a90e:	9303      	str	r3, [sp, #12]
 800a910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a912:	9302      	str	r3, [sp, #8]
 800a914:	f107 0314 	add.w	r3, r7, #20
 800a918:	9301      	str	r3, [sp, #4]
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	68b9      	ldr	r1, [r7, #8]
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f000 f851 	bl	800a9cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a92a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a92c:	f000 f8ec 	bl	800ab08 <prvAddNewTaskToReadyList>
 800a930:	e001      	b.n	800a936 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a932:	2300      	movs	r3, #0
 800a934:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a936:	697b      	ldr	r3, [r7, #20]
	}
 800a938:	4618      	mov	r0, r3
 800a93a:	3728      	adds	r7, #40	; 0x28
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a940:	b580      	push	{r7, lr}
 800a942:	b08c      	sub	sp, #48	; 0x30
 800a944:	af04      	add	r7, sp, #16
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	603b      	str	r3, [r7, #0]
 800a94c:	4613      	mov	r3, r2
 800a94e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a950:	88fb      	ldrh	r3, [r7, #6]
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4618      	mov	r0, r3
 800a956:	f001 fbc1 	bl	800c0dc <pvPortMalloc>
 800a95a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00e      	beq.n	800a980 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a962:	20a8      	movs	r0, #168	; 0xa8
 800a964:	f001 fbba 	bl	800c0dc <pvPortMalloc>
 800a968:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d003      	beq.n	800a978 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	697a      	ldr	r2, [r7, #20]
 800a974:	631a      	str	r2, [r3, #48]	; 0x30
 800a976:	e005      	b.n	800a984 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a978:	6978      	ldr	r0, [r7, #20]
 800a97a:	f001 fc73 	bl	800c264 <vPortFree>
 800a97e:	e001      	b.n	800a984 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a980:	2300      	movs	r3, #0
 800a982:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d017      	beq.n	800a9ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a992:	88fa      	ldrh	r2, [r7, #6]
 800a994:	2300      	movs	r3, #0
 800a996:	9303      	str	r3, [sp, #12]
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	9302      	str	r3, [sp, #8]
 800a99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	68b9      	ldr	r1, [r7, #8]
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 f80f 	bl	800a9cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9ae:	69f8      	ldr	r0, [r7, #28]
 800a9b0:	f000 f8aa 	bl	800ab08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	61bb      	str	r3, [r7, #24]
 800a9b8:	e002      	b.n	800a9c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a9be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a9c0:	69bb      	ldr	r3, [r7, #24]
	}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3720      	adds	r7, #32
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
	...

0800a9cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b088      	sub	sp, #32
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
 800a9d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	21a5      	movs	r1, #165	; 0xa5
 800a9e6:	f002 f9c7 	bl	800cd78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	f023 0307 	bic.w	r3, r3, #7
 800aa02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	f003 0307 	and.w	r3, r3, #7
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00a      	beq.n	800aa24 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aa0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa12:	f383 8811 	msr	BASEPRI, r3
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	617b      	str	r3, [r7, #20]
}
 800aa20:	bf00      	nop
 800aa22:	e7fe      	b.n	800aa22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa24:	2300      	movs	r3, #0
 800aa26:	61fb      	str	r3, [r7, #28]
 800aa28:	e012      	b.n	800aa50 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	4413      	add	r3, r2
 800aa30:	7819      	ldrb	r1, [r3, #0]
 800aa32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	4413      	add	r3, r2
 800aa38:	3334      	adds	r3, #52	; 0x34
 800aa3a:	460a      	mov	r2, r1
 800aa3c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	4413      	add	r3, r2
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d006      	beq.n	800aa58 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	61fb      	str	r3, [r7, #28]
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	2b0f      	cmp	r3, #15
 800aa54:	d9e9      	bls.n	800aa2a <prvInitialiseNewTask+0x5e>
 800aa56:	e000      	b.n	800aa5a <prvInitialiseNewTask+0x8e>
		{
			break;
 800aa58:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa64:	2b37      	cmp	r3, #55	; 0x37
 800aa66:	d901      	bls.n	800aa6c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa68:	2337      	movs	r3, #55	; 0x37
 800aa6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa80:	3304      	adds	r3, #4
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7ff f98b 	bl	8009d9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8a:	3318      	adds	r3, #24
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7ff f986 	bl	8009d9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaa6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaba:	3354      	adds	r3, #84	; 0x54
 800aabc:	224c      	movs	r2, #76	; 0x4c
 800aabe:	2100      	movs	r1, #0
 800aac0:	4618      	mov	r0, r3
 800aac2:	f002 f959 	bl	800cd78 <memset>
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	4a0c      	ldr	r2, [pc, #48]	; (800aafc <prvInitialiseNewTask+0x130>)
 800aaca:	659a      	str	r2, [r3, #88]	; 0x58
 800aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aace:	4a0c      	ldr	r2, [pc, #48]	; (800ab00 <prvInitialiseNewTask+0x134>)
 800aad0:	65da      	str	r2, [r3, #92]	; 0x5c
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	4a0b      	ldr	r2, [pc, #44]	; (800ab04 <prvInitialiseNewTask+0x138>)
 800aad6:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	68f9      	ldr	r1, [r7, #12]
 800aadc:	69b8      	ldr	r0, [r7, #24]
 800aade:	f001 f90b 	bl	800bcf8 <pxPortInitialiseStack>
 800aae2:	4602      	mov	r2, r0
 800aae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d002      	beq.n	800aaf4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaf2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aaf4:	bf00      	nop
 800aaf6:	3720      	adds	r7, #32
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	20002f84 	.word	0x20002f84
 800ab00:	20002fec 	.word	0x20002fec
 800ab04:	20003054 	.word	0x20003054

0800ab08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab10:	f001 f9e4 	bl	800bedc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab14:	4b2d      	ldr	r3, [pc, #180]	; (800abcc <prvAddNewTaskToReadyList+0xc4>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	4a2c      	ldr	r2, [pc, #176]	; (800abcc <prvAddNewTaskToReadyList+0xc4>)
 800ab1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab1e:	4b2c      	ldr	r3, [pc, #176]	; (800abd0 <prvAddNewTaskToReadyList+0xc8>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d109      	bne.n	800ab3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab26:	4a2a      	ldr	r2, [pc, #168]	; (800abd0 <prvAddNewTaskToReadyList+0xc8>)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab2c:	4b27      	ldr	r3, [pc, #156]	; (800abcc <prvAddNewTaskToReadyList+0xc4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d110      	bne.n	800ab56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab34:	f000 fc28 	bl	800b388 <prvInitialiseTaskLists>
 800ab38:	e00d      	b.n	800ab56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab3a:	4b26      	ldr	r3, [pc, #152]	; (800abd4 <prvAddNewTaskToReadyList+0xcc>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d109      	bne.n	800ab56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab42:	4b23      	ldr	r3, [pc, #140]	; (800abd0 <prvAddNewTaskToReadyList+0xc8>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d802      	bhi.n	800ab56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab50:	4a1f      	ldr	r2, [pc, #124]	; (800abd0 <prvAddNewTaskToReadyList+0xc8>)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab56:	4b20      	ldr	r3, [pc, #128]	; (800abd8 <prvAddNewTaskToReadyList+0xd0>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	4a1e      	ldr	r2, [pc, #120]	; (800abd8 <prvAddNewTaskToReadyList+0xd0>)
 800ab5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab60:	4b1d      	ldr	r3, [pc, #116]	; (800abd8 <prvAddNewTaskToReadyList+0xd0>)
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6c:	4b1b      	ldr	r3, [pc, #108]	; (800abdc <prvAddNewTaskToReadyList+0xd4>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d903      	bls.n	800ab7c <prvAddNewTaskToReadyList+0x74>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab78:	4a18      	ldr	r2, [pc, #96]	; (800abdc <prvAddNewTaskToReadyList+0xd4>)
 800ab7a:	6013      	str	r3, [r2, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab80:	4613      	mov	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4a15      	ldr	r2, [pc, #84]	; (800abe0 <prvAddNewTaskToReadyList+0xd8>)
 800ab8a:	441a      	add	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	3304      	adds	r3, #4
 800ab90:	4619      	mov	r1, r3
 800ab92:	4610      	mov	r0, r2
 800ab94:	f7ff f90f 	bl	8009db6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab98:	f001 f9d0 	bl	800bf3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab9c:	4b0d      	ldr	r3, [pc, #52]	; (800abd4 <prvAddNewTaskToReadyList+0xcc>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00e      	beq.n	800abc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aba4:	4b0a      	ldr	r3, [pc, #40]	; (800abd0 <prvAddNewTaskToReadyList+0xc8>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abae:	429a      	cmp	r2, r3
 800abb0:	d207      	bcs.n	800abc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800abb2:	4b0c      	ldr	r3, [pc, #48]	; (800abe4 <prvAddNewTaskToReadyList+0xdc>)
 800abb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abb8:	601a      	str	r2, [r3, #0]
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abc2:	bf00      	nop
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	20001038 	.word	0x20001038
 800abd0:	20000b64 	.word	0x20000b64
 800abd4:	20001044 	.word	0x20001044
 800abd8:	20001054 	.word	0x20001054
 800abdc:	20001040 	.word	0x20001040
 800abe0:	20000b68 	.word	0x20000b68
 800abe4:	e000ed04 	.word	0xe000ed04

0800abe8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800abf0:	2300      	movs	r3, #0
 800abf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d017      	beq.n	800ac2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800abfa:	4b13      	ldr	r3, [pc, #76]	; (800ac48 <vTaskDelay+0x60>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00a      	beq.n	800ac18 <vTaskDelay+0x30>
	__asm volatile
 800ac02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	60bb      	str	r3, [r7, #8]
}
 800ac14:	bf00      	nop
 800ac16:	e7fe      	b.n	800ac16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac18:	f000 f88a 	bl	800ad30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fd04 	bl	800b62c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac24:	f000 f892 	bl	800ad4c <xTaskResumeAll>
 800ac28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d107      	bne.n	800ac40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ac30:	4b06      	ldr	r3, [pc, #24]	; (800ac4c <vTaskDelay+0x64>)
 800ac32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac36:	601a      	str	r2, [r3, #0]
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac40:	bf00      	nop
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	20001060 	.word	0x20001060
 800ac4c:	e000ed04 	.word	0xe000ed04

0800ac50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b08a      	sub	sp, #40	; 0x28
 800ac54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac5e:	463a      	mov	r2, r7
 800ac60:	1d39      	adds	r1, r7, #4
 800ac62:	f107 0308 	add.w	r3, r7, #8
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7ff f848 	bl	8009cfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac6c:	6839      	ldr	r1, [r7, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	9202      	str	r2, [sp, #8]
 800ac74:	9301      	str	r3, [sp, #4]
 800ac76:	2300      	movs	r3, #0
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	460a      	mov	r2, r1
 800ac7e:	4924      	ldr	r1, [pc, #144]	; (800ad10 <vTaskStartScheduler+0xc0>)
 800ac80:	4824      	ldr	r0, [pc, #144]	; (800ad14 <vTaskStartScheduler+0xc4>)
 800ac82:	f7ff fe01 	bl	800a888 <xTaskCreateStatic>
 800ac86:	4603      	mov	r3, r0
 800ac88:	4a23      	ldr	r2, [pc, #140]	; (800ad18 <vTaskStartScheduler+0xc8>)
 800ac8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac8c:	4b22      	ldr	r3, [pc, #136]	; (800ad18 <vTaskStartScheduler+0xc8>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac94:	2301      	movs	r3, #1
 800ac96:	617b      	str	r3, [r7, #20]
 800ac98:	e001      	b.n	800ac9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d102      	bne.n	800acaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aca4:	f000 fd16 	bl	800b6d4 <xTimerCreateTimerTask>
 800aca8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b01      	cmp	r3, #1
 800acae:	d11b      	bne.n	800ace8 <vTaskStartScheduler+0x98>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	613b      	str	r3, [r7, #16]
}
 800acc2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800acc4:	4b15      	ldr	r3, [pc, #84]	; (800ad1c <vTaskStartScheduler+0xcc>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	3354      	adds	r3, #84	; 0x54
 800acca:	4a15      	ldr	r2, [pc, #84]	; (800ad20 <vTaskStartScheduler+0xd0>)
 800accc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800acce:	4b15      	ldr	r3, [pc, #84]	; (800ad24 <vTaskStartScheduler+0xd4>)
 800acd0:	f04f 32ff 	mov.w	r2, #4294967295
 800acd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800acd6:	4b14      	ldr	r3, [pc, #80]	; (800ad28 <vTaskStartScheduler+0xd8>)
 800acd8:	2201      	movs	r2, #1
 800acda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800acdc:	4b13      	ldr	r3, [pc, #76]	; (800ad2c <vTaskStartScheduler+0xdc>)
 800acde:	2200      	movs	r2, #0
 800ace0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ace2:	f001 f889 	bl	800bdf8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ace6:	e00e      	b.n	800ad06 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acee:	d10a      	bne.n	800ad06 <vTaskStartScheduler+0xb6>
	__asm volatile
 800acf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	60fb      	str	r3, [r7, #12]
}
 800ad02:	bf00      	nop
 800ad04:	e7fe      	b.n	800ad04 <vTaskStartScheduler+0xb4>
}
 800ad06:	bf00      	nop
 800ad08:	3718      	adds	r7, #24
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	0800cf7c 	.word	0x0800cf7c
 800ad14:	0800b359 	.word	0x0800b359
 800ad18:	2000105c 	.word	0x2000105c
 800ad1c:	20000b64 	.word	0x20000b64
 800ad20:	200001cc 	.word	0x200001cc
 800ad24:	20001058 	.word	0x20001058
 800ad28:	20001044 	.word	0x20001044
 800ad2c:	2000103c 	.word	0x2000103c

0800ad30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad30:	b480      	push	{r7}
 800ad32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ad34:	4b04      	ldr	r3, [pc, #16]	; (800ad48 <vTaskSuspendAll+0x18>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	4a03      	ldr	r2, [pc, #12]	; (800ad48 <vTaskSuspendAll+0x18>)
 800ad3c:	6013      	str	r3, [r2, #0]
}
 800ad3e:	bf00      	nop
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bc80      	pop	{r7}
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20001060 	.word	0x20001060

0800ad4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad56:	2300      	movs	r3, #0
 800ad58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad5a:	4b42      	ldr	r3, [pc, #264]	; (800ae64 <xTaskResumeAll+0x118>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d10a      	bne.n	800ad78 <xTaskResumeAll+0x2c>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	f383 8811 	msr	BASEPRI, r3
 800ad6a:	f3bf 8f6f 	isb	sy
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	603b      	str	r3, [r7, #0]
}
 800ad74:	bf00      	nop
 800ad76:	e7fe      	b.n	800ad76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad78:	f001 f8b0 	bl	800bedc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad7c:	4b39      	ldr	r3, [pc, #228]	; (800ae64 <xTaskResumeAll+0x118>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	4a38      	ldr	r2, [pc, #224]	; (800ae64 <xTaskResumeAll+0x118>)
 800ad84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad86:	4b37      	ldr	r3, [pc, #220]	; (800ae64 <xTaskResumeAll+0x118>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d162      	bne.n	800ae54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad8e:	4b36      	ldr	r3, [pc, #216]	; (800ae68 <xTaskResumeAll+0x11c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d05e      	beq.n	800ae54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad96:	e02f      	b.n	800adf8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ad98:	4b34      	ldr	r3, [pc, #208]	; (800ae6c <xTaskResumeAll+0x120>)
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	3318      	adds	r3, #24
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7ff f861 	bl	8009e6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	3304      	adds	r3, #4
 800adae:	4618      	mov	r0, r3
 800adb0:	f7ff f85c 	bl	8009e6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb8:	4b2d      	ldr	r3, [pc, #180]	; (800ae70 <xTaskResumeAll+0x124>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d903      	bls.n	800adc8 <xTaskResumeAll+0x7c>
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	4a2a      	ldr	r2, [pc, #168]	; (800ae70 <xTaskResumeAll+0x124>)
 800adc6:	6013      	str	r3, [r2, #0]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adcc:	4613      	mov	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4413      	add	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4a27      	ldr	r2, [pc, #156]	; (800ae74 <xTaskResumeAll+0x128>)
 800add6:	441a      	add	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	3304      	adds	r3, #4
 800addc:	4619      	mov	r1, r3
 800adde:	4610      	mov	r0, r2
 800ade0:	f7fe ffe9 	bl	8009db6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade8:	4b23      	ldr	r3, [pc, #140]	; (800ae78 <xTaskResumeAll+0x12c>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adee:	429a      	cmp	r2, r3
 800adf0:	d302      	bcc.n	800adf8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800adf2:	4b22      	ldr	r3, [pc, #136]	; (800ae7c <xTaskResumeAll+0x130>)
 800adf4:	2201      	movs	r2, #1
 800adf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adf8:	4b1c      	ldr	r3, [pc, #112]	; (800ae6c <xTaskResumeAll+0x120>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1cb      	bne.n	800ad98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d001      	beq.n	800ae0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae06:	f000 fb61 	bl	800b4cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ae0a:	4b1d      	ldr	r3, [pc, #116]	; (800ae80 <xTaskResumeAll+0x134>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d010      	beq.n	800ae38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae16:	f000 f845 	bl	800aea4 <xTaskIncrementTick>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d002      	beq.n	800ae26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ae20:	4b16      	ldr	r3, [pc, #88]	; (800ae7c <xTaskResumeAll+0x130>)
 800ae22:	2201      	movs	r2, #1
 800ae24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1f1      	bne.n	800ae16 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800ae32:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <xTaskResumeAll+0x134>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae38:	4b10      	ldr	r3, [pc, #64]	; (800ae7c <xTaskResumeAll+0x130>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d009      	beq.n	800ae54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae40:	2301      	movs	r3, #1
 800ae42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae44:	4b0f      	ldr	r3, [pc, #60]	; (800ae84 <xTaskResumeAll+0x138>)
 800ae46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae4a:	601a      	str	r2, [r3, #0]
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae54:	f001 f872 	bl	800bf3c <vPortExitCritical>

	return xAlreadyYielded;
 800ae58:	68bb      	ldr	r3, [r7, #8]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	20001060 	.word	0x20001060
 800ae68:	20001038 	.word	0x20001038
 800ae6c:	20000ff8 	.word	0x20000ff8
 800ae70:	20001040 	.word	0x20001040
 800ae74:	20000b68 	.word	0x20000b68
 800ae78:	20000b64 	.word	0x20000b64
 800ae7c:	2000104c 	.word	0x2000104c
 800ae80:	20001048 	.word	0x20001048
 800ae84:	e000ed04 	.word	0xe000ed04

0800ae88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae8e:	4b04      	ldr	r3, [pc, #16]	; (800aea0 <xTaskGetTickCount+0x18>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae94:	687b      	ldr	r3, [r7, #4]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	370c      	adds	r7, #12
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bc80      	pop	{r7}
 800ae9e:	4770      	bx	lr
 800aea0:	2000103c 	.word	0x2000103c

0800aea4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeae:	4b51      	ldr	r3, [pc, #324]	; (800aff4 <xTaskIncrementTick+0x150>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f040 808e 	bne.w	800afd4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aeb8:	4b4f      	ldr	r3, [pc, #316]	; (800aff8 <xTaskIncrementTick+0x154>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3301      	adds	r3, #1
 800aebe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aec0:	4a4d      	ldr	r2, [pc, #308]	; (800aff8 <xTaskIncrementTick+0x154>)
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d120      	bne.n	800af0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aecc:	4b4b      	ldr	r3, [pc, #300]	; (800affc <xTaskIncrementTick+0x158>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00a      	beq.n	800aeec <xTaskIncrementTick+0x48>
	__asm volatile
 800aed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeda:	f383 8811 	msr	BASEPRI, r3
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	603b      	str	r3, [r7, #0]
}
 800aee8:	bf00      	nop
 800aeea:	e7fe      	b.n	800aeea <xTaskIncrementTick+0x46>
 800aeec:	4b43      	ldr	r3, [pc, #268]	; (800affc <xTaskIncrementTick+0x158>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	60fb      	str	r3, [r7, #12]
 800aef2:	4b43      	ldr	r3, [pc, #268]	; (800b000 <xTaskIncrementTick+0x15c>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a41      	ldr	r2, [pc, #260]	; (800affc <xTaskIncrementTick+0x158>)
 800aef8:	6013      	str	r3, [r2, #0]
 800aefa:	4a41      	ldr	r2, [pc, #260]	; (800b000 <xTaskIncrementTick+0x15c>)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6013      	str	r3, [r2, #0]
 800af00:	4b40      	ldr	r3, [pc, #256]	; (800b004 <xTaskIncrementTick+0x160>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	3301      	adds	r3, #1
 800af06:	4a3f      	ldr	r2, [pc, #252]	; (800b004 <xTaskIncrementTick+0x160>)
 800af08:	6013      	str	r3, [r2, #0]
 800af0a:	f000 fadf 	bl	800b4cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af0e:	4b3e      	ldr	r3, [pc, #248]	; (800b008 <xTaskIncrementTick+0x164>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	429a      	cmp	r2, r3
 800af16:	d34e      	bcc.n	800afb6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af18:	4b38      	ldr	r3, [pc, #224]	; (800affc <xTaskIncrementTick+0x158>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d101      	bne.n	800af26 <xTaskIncrementTick+0x82>
 800af22:	2301      	movs	r3, #1
 800af24:	e000      	b.n	800af28 <xTaskIncrementTick+0x84>
 800af26:	2300      	movs	r3, #0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d004      	beq.n	800af36 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af2c:	4b36      	ldr	r3, [pc, #216]	; (800b008 <xTaskIncrementTick+0x164>)
 800af2e:	f04f 32ff 	mov.w	r2, #4294967295
 800af32:	601a      	str	r2, [r3, #0]
					break;
 800af34:	e03f      	b.n	800afb6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800af36:	4b31      	ldr	r3, [pc, #196]	; (800affc <xTaskIncrementTick+0x158>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d203      	bcs.n	800af56 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af4e:	4a2e      	ldr	r2, [pc, #184]	; (800b008 <xTaskIncrementTick+0x164>)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6013      	str	r3, [r2, #0]
						break;
 800af54:	e02f      	b.n	800afb6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	3304      	adds	r3, #4
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fe ff86 	bl	8009e6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af64:	2b00      	cmp	r3, #0
 800af66:	d004      	beq.n	800af72 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	3318      	adds	r3, #24
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fe ff7d 	bl	8009e6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af76:	4b25      	ldr	r3, [pc, #148]	; (800b00c <xTaskIncrementTick+0x168>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d903      	bls.n	800af86 <xTaskIncrementTick+0xe2>
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af82:	4a22      	ldr	r2, [pc, #136]	; (800b00c <xTaskIncrementTick+0x168>)
 800af84:	6013      	str	r3, [r2, #0]
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4a1f      	ldr	r2, [pc, #124]	; (800b010 <xTaskIncrementTick+0x16c>)
 800af94:	441a      	add	r2, r3
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	3304      	adds	r3, #4
 800af9a:	4619      	mov	r1, r3
 800af9c:	4610      	mov	r0, r2
 800af9e:	f7fe ff0a 	bl	8009db6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa6:	4b1b      	ldr	r3, [pc, #108]	; (800b014 <xTaskIncrementTick+0x170>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afac:	429a      	cmp	r2, r3
 800afae:	d3b3      	bcc.n	800af18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800afb0:	2301      	movs	r3, #1
 800afb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afb4:	e7b0      	b.n	800af18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800afb6:	4b17      	ldr	r3, [pc, #92]	; (800b014 <xTaskIncrementTick+0x170>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afbc:	4914      	ldr	r1, [pc, #80]	; (800b010 <xTaskIncrementTick+0x16c>)
 800afbe:	4613      	mov	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	440b      	add	r3, r1
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d907      	bls.n	800afde <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800afce:	2301      	movs	r3, #1
 800afd0:	617b      	str	r3, [r7, #20]
 800afd2:	e004      	b.n	800afde <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800afd4:	4b10      	ldr	r3, [pc, #64]	; (800b018 <xTaskIncrementTick+0x174>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3301      	adds	r3, #1
 800afda:	4a0f      	ldr	r2, [pc, #60]	; (800b018 <xTaskIncrementTick+0x174>)
 800afdc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800afde:	4b0f      	ldr	r3, [pc, #60]	; (800b01c <xTaskIncrementTick+0x178>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d001      	beq.n	800afea <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800afe6:	2301      	movs	r3, #1
 800afe8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800afea:	697b      	ldr	r3, [r7, #20]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3718      	adds	r7, #24
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	20001060 	.word	0x20001060
 800aff8:	2000103c 	.word	0x2000103c
 800affc:	20000ff0 	.word	0x20000ff0
 800b000:	20000ff4 	.word	0x20000ff4
 800b004:	20001050 	.word	0x20001050
 800b008:	20001058 	.word	0x20001058
 800b00c:	20001040 	.word	0x20001040
 800b010:	20000b68 	.word	0x20000b68
 800b014:	20000b64 	.word	0x20000b64
 800b018:	20001048 	.word	0x20001048
 800b01c:	2000104c 	.word	0x2000104c

0800b020 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b026:	4b2a      	ldr	r3, [pc, #168]	; (800b0d0 <vTaskSwitchContext+0xb0>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d003      	beq.n	800b036 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b02e:	4b29      	ldr	r3, [pc, #164]	; (800b0d4 <vTaskSwitchContext+0xb4>)
 800b030:	2201      	movs	r2, #1
 800b032:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b034:	e046      	b.n	800b0c4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b036:	4b27      	ldr	r3, [pc, #156]	; (800b0d4 <vTaskSwitchContext+0xb4>)
 800b038:	2200      	movs	r2, #0
 800b03a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b03c:	4b26      	ldr	r3, [pc, #152]	; (800b0d8 <vTaskSwitchContext+0xb8>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	60fb      	str	r3, [r7, #12]
 800b042:	e010      	b.n	800b066 <vTaskSwitchContext+0x46>
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10a      	bne.n	800b060 <vTaskSwitchContext+0x40>
	__asm volatile
 800b04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	607b      	str	r3, [r7, #4]
}
 800b05c:	bf00      	nop
 800b05e:	e7fe      	b.n	800b05e <vTaskSwitchContext+0x3e>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	3b01      	subs	r3, #1
 800b064:	60fb      	str	r3, [r7, #12]
 800b066:	491d      	ldr	r1, [pc, #116]	; (800b0dc <vTaskSwitchContext+0xbc>)
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	4613      	mov	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	4413      	add	r3, r2
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	440b      	add	r3, r1
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d0e4      	beq.n	800b044 <vTaskSwitchContext+0x24>
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	4613      	mov	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	4413      	add	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	4a15      	ldr	r2, [pc, #84]	; (800b0dc <vTaskSwitchContext+0xbc>)
 800b086:	4413      	add	r3, r2
 800b088:	60bb      	str	r3, [r7, #8]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	685a      	ldr	r2, [r3, #4]
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	605a      	str	r2, [r3, #4]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	685a      	ldr	r2, [r3, #4]
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	3308      	adds	r3, #8
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d104      	bne.n	800b0aa <vTaskSwitchContext+0x8a>
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	605a      	str	r2, [r3, #4]
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	4a0b      	ldr	r2, [pc, #44]	; (800b0e0 <vTaskSwitchContext+0xc0>)
 800b0b2:	6013      	str	r3, [r2, #0]
 800b0b4:	4a08      	ldr	r2, [pc, #32]	; (800b0d8 <vTaskSwitchContext+0xb8>)
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0ba:	4b09      	ldr	r3, [pc, #36]	; (800b0e0 <vTaskSwitchContext+0xc0>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	3354      	adds	r3, #84	; 0x54
 800b0c0:	4a08      	ldr	r2, [pc, #32]	; (800b0e4 <vTaskSwitchContext+0xc4>)
 800b0c2:	6013      	str	r3, [r2, #0]
}
 800b0c4:	bf00      	nop
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bc80      	pop	{r7}
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	20001060 	.word	0x20001060
 800b0d4:	2000104c 	.word	0x2000104c
 800b0d8:	20001040 	.word	0x20001040
 800b0dc:	20000b68 	.word	0x20000b68
 800b0e0:	20000b64 	.word	0x20000b64
 800b0e4:	200001cc 	.word	0x200001cc

0800b0e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10a      	bne.n	800b10e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fc:	f383 8811 	msr	BASEPRI, r3
 800b100:	f3bf 8f6f 	isb	sy
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	60fb      	str	r3, [r7, #12]
}
 800b10a:	bf00      	nop
 800b10c:	e7fe      	b.n	800b10c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b10e:	4b07      	ldr	r3, [pc, #28]	; (800b12c <vTaskPlaceOnEventList+0x44>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	3318      	adds	r3, #24
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7fe fe70 	bl	8009dfc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b11c:	2101      	movs	r1, #1
 800b11e:	6838      	ldr	r0, [r7, #0]
 800b120:	f000 fa84 	bl	800b62c <prvAddCurrentTaskToDelayedList>
}
 800b124:	bf00      	nop
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	20000b64 	.word	0x20000b64

0800b130 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d10a      	bne.n	800b158 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b146:	f383 8811 	msr	BASEPRI, r3
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	617b      	str	r3, [r7, #20]
}
 800b154:	bf00      	nop
 800b156:	e7fe      	b.n	800b156 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b158:	4b0a      	ldr	r3, [pc, #40]	; (800b184 <vTaskPlaceOnEventListRestricted+0x54>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	3318      	adds	r3, #24
 800b15e:	4619      	mov	r1, r3
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f7fe fe28 	bl	8009db6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b16c:	f04f 33ff 	mov.w	r3, #4294967295
 800b170:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b172:	6879      	ldr	r1, [r7, #4]
 800b174:	68b8      	ldr	r0, [r7, #8]
 800b176:	f000 fa59 	bl	800b62c <prvAddCurrentTaskToDelayedList>
	}
 800b17a:	bf00      	nop
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	20000b64 	.word	0x20000b64

0800b188 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b086      	sub	sp, #24
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10a      	bne.n	800b1b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	60fb      	str	r3, [r7, #12]
}
 800b1b0:	bf00      	nop
 800b1b2:	e7fe      	b.n	800b1b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	3318      	adds	r3, #24
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fe fe57 	bl	8009e6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1be:	4b1e      	ldr	r3, [pc, #120]	; (800b238 <xTaskRemoveFromEventList+0xb0>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d11d      	bne.n	800b202 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	3304      	adds	r3, #4
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fe fe4e 	bl	8009e6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d4:	4b19      	ldr	r3, [pc, #100]	; (800b23c <xTaskRemoveFromEventList+0xb4>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d903      	bls.n	800b1e4 <xTaskRemoveFromEventList+0x5c>
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e0:	4a16      	ldr	r2, [pc, #88]	; (800b23c <xTaskRemoveFromEventList+0xb4>)
 800b1e2:	6013      	str	r3, [r2, #0]
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4413      	add	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4a13      	ldr	r2, [pc, #76]	; (800b240 <xTaskRemoveFromEventList+0xb8>)
 800b1f2:	441a      	add	r2, r3
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	4610      	mov	r0, r2
 800b1fc:	f7fe fddb 	bl	8009db6 <vListInsertEnd>
 800b200:	e005      	b.n	800b20e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	3318      	adds	r3, #24
 800b206:	4619      	mov	r1, r3
 800b208:	480e      	ldr	r0, [pc, #56]	; (800b244 <xTaskRemoveFromEventList+0xbc>)
 800b20a:	f7fe fdd4 	bl	8009db6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b212:	4b0d      	ldr	r3, [pc, #52]	; (800b248 <xTaskRemoveFromEventList+0xc0>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b218:	429a      	cmp	r2, r3
 800b21a:	d905      	bls.n	800b228 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b21c:	2301      	movs	r3, #1
 800b21e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b220:	4b0a      	ldr	r3, [pc, #40]	; (800b24c <xTaskRemoveFromEventList+0xc4>)
 800b222:	2201      	movs	r2, #1
 800b224:	601a      	str	r2, [r3, #0]
 800b226:	e001      	b.n	800b22c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b228:	2300      	movs	r3, #0
 800b22a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b22c:	697b      	ldr	r3, [r7, #20]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3718      	adds	r7, #24
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	20001060 	.word	0x20001060
 800b23c:	20001040 	.word	0x20001040
 800b240:	20000b68 	.word	0x20000b68
 800b244:	20000ff8 	.word	0x20000ff8
 800b248:	20000b64 	.word	0x20000b64
 800b24c:	2000104c 	.word	0x2000104c

0800b250 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b258:	4b06      	ldr	r3, [pc, #24]	; (800b274 <vTaskInternalSetTimeOutState+0x24>)
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b260:	4b05      	ldr	r3, [pc, #20]	; (800b278 <vTaskInternalSetTimeOutState+0x28>)
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	605a      	str	r2, [r3, #4]
}
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bc80      	pop	{r7}
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	20001050 	.word	0x20001050
 800b278:	2000103c 	.word	0x2000103c

0800b27c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10a      	bne.n	800b2a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b290:	f383 8811 	msr	BASEPRI, r3
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	613b      	str	r3, [r7, #16]
}
 800b29e:	bf00      	nop
 800b2a0:	e7fe      	b.n	800b2a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10a      	bne.n	800b2be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ac:	f383 8811 	msr	BASEPRI, r3
 800b2b0:	f3bf 8f6f 	isb	sy
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	60fb      	str	r3, [r7, #12]
}
 800b2ba:	bf00      	nop
 800b2bc:	e7fe      	b.n	800b2bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b2be:	f000 fe0d 	bl	800bedc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b2c2:	4b1d      	ldr	r3, [pc, #116]	; (800b338 <xTaskCheckForTimeOut+0xbc>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	69ba      	ldr	r2, [r7, #24]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2da:	d102      	bne.n	800b2e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	61fb      	str	r3, [r7, #28]
 800b2e0:	e023      	b.n	800b32a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	4b15      	ldr	r3, [pc, #84]	; (800b33c <xTaskCheckForTimeOut+0xc0>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d007      	beq.n	800b2fe <xTaskCheckForTimeOut+0x82>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	69ba      	ldr	r2, [r7, #24]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d302      	bcc.n	800b2fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	61fb      	str	r3, [r7, #28]
 800b2fc:	e015      	b.n	800b32a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	697a      	ldr	r2, [r7, #20]
 800b304:	429a      	cmp	r2, r3
 800b306:	d20b      	bcs.n	800b320 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	1ad2      	subs	r2, r2, r3
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7ff ff9b 	bl	800b250 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b31a:	2300      	movs	r3, #0
 800b31c:	61fb      	str	r3, [r7, #28]
 800b31e:	e004      	b.n	800b32a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b326:	2301      	movs	r3, #1
 800b328:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b32a:	f000 fe07 	bl	800bf3c <vPortExitCritical>

	return xReturn;
 800b32e:	69fb      	ldr	r3, [r7, #28]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3720      	adds	r7, #32
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	2000103c 	.word	0x2000103c
 800b33c:	20001050 	.word	0x20001050

0800b340 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b340:	b480      	push	{r7}
 800b342:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b344:	4b03      	ldr	r3, [pc, #12]	; (800b354 <vTaskMissedYield+0x14>)
 800b346:	2201      	movs	r2, #1
 800b348:	601a      	str	r2, [r3, #0]
}
 800b34a:	bf00      	nop
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bc80      	pop	{r7}
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	2000104c 	.word	0x2000104c

0800b358 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b360:	f000 f852 	bl	800b408 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b364:	4b06      	ldr	r3, [pc, #24]	; (800b380 <prvIdleTask+0x28>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d9f9      	bls.n	800b360 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b36c:	4b05      	ldr	r3, [pc, #20]	; (800b384 <prvIdleTask+0x2c>)
 800b36e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	f3bf 8f4f 	dsb	sy
 800b378:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b37c:	e7f0      	b.n	800b360 <prvIdleTask+0x8>
 800b37e:	bf00      	nop
 800b380:	20000b68 	.word	0x20000b68
 800b384:	e000ed04 	.word	0xe000ed04

0800b388 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b38e:	2300      	movs	r3, #0
 800b390:	607b      	str	r3, [r7, #4]
 800b392:	e00c      	b.n	800b3ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	4613      	mov	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	4413      	add	r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4a12      	ldr	r2, [pc, #72]	; (800b3e8 <prvInitialiseTaskLists+0x60>)
 800b3a0:	4413      	add	r3, r2
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fe fcdc 	bl	8009d60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	607b      	str	r3, [r7, #4]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b37      	cmp	r3, #55	; 0x37
 800b3b2:	d9ef      	bls.n	800b394 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b3b4:	480d      	ldr	r0, [pc, #52]	; (800b3ec <prvInitialiseTaskLists+0x64>)
 800b3b6:	f7fe fcd3 	bl	8009d60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b3ba:	480d      	ldr	r0, [pc, #52]	; (800b3f0 <prvInitialiseTaskLists+0x68>)
 800b3bc:	f7fe fcd0 	bl	8009d60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3c0:	480c      	ldr	r0, [pc, #48]	; (800b3f4 <prvInitialiseTaskLists+0x6c>)
 800b3c2:	f7fe fccd 	bl	8009d60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3c6:	480c      	ldr	r0, [pc, #48]	; (800b3f8 <prvInitialiseTaskLists+0x70>)
 800b3c8:	f7fe fcca 	bl	8009d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b3cc:	480b      	ldr	r0, [pc, #44]	; (800b3fc <prvInitialiseTaskLists+0x74>)
 800b3ce:	f7fe fcc7 	bl	8009d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b3d2:	4b0b      	ldr	r3, [pc, #44]	; (800b400 <prvInitialiseTaskLists+0x78>)
 800b3d4:	4a05      	ldr	r2, [pc, #20]	; (800b3ec <prvInitialiseTaskLists+0x64>)
 800b3d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b3d8:	4b0a      	ldr	r3, [pc, #40]	; (800b404 <prvInitialiseTaskLists+0x7c>)
 800b3da:	4a05      	ldr	r2, [pc, #20]	; (800b3f0 <prvInitialiseTaskLists+0x68>)
 800b3dc:	601a      	str	r2, [r3, #0]
}
 800b3de:	bf00      	nop
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	20000b68 	.word	0x20000b68
 800b3ec:	20000fc8 	.word	0x20000fc8
 800b3f0:	20000fdc 	.word	0x20000fdc
 800b3f4:	20000ff8 	.word	0x20000ff8
 800b3f8:	2000100c 	.word	0x2000100c
 800b3fc:	20001024 	.word	0x20001024
 800b400:	20000ff0 	.word	0x20000ff0
 800b404:	20000ff4 	.word	0x20000ff4

0800b408 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b40e:	e019      	b.n	800b444 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b410:	f000 fd64 	bl	800bedc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b414:	4b10      	ldr	r3, [pc, #64]	; (800b458 <prvCheckTasksWaitingTermination+0x50>)
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3304      	adds	r3, #4
 800b420:	4618      	mov	r0, r3
 800b422:	f7fe fd23 	bl	8009e6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b426:	4b0d      	ldr	r3, [pc, #52]	; (800b45c <prvCheckTasksWaitingTermination+0x54>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	3b01      	subs	r3, #1
 800b42c:	4a0b      	ldr	r2, [pc, #44]	; (800b45c <prvCheckTasksWaitingTermination+0x54>)
 800b42e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b430:	4b0b      	ldr	r3, [pc, #44]	; (800b460 <prvCheckTasksWaitingTermination+0x58>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	3b01      	subs	r3, #1
 800b436:	4a0a      	ldr	r2, [pc, #40]	; (800b460 <prvCheckTasksWaitingTermination+0x58>)
 800b438:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b43a:	f000 fd7f 	bl	800bf3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f810 	bl	800b464 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b444:	4b06      	ldr	r3, [pc, #24]	; (800b460 <prvCheckTasksWaitingTermination+0x58>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1e1      	bne.n	800b410 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b44c:	bf00      	nop
 800b44e:	bf00      	nop
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	2000100c 	.word	0x2000100c
 800b45c:	20001038 	.word	0x20001038
 800b460:	20001020 	.word	0x20001020

0800b464 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	3354      	adds	r3, #84	; 0x54
 800b470:	4618      	mov	r0, r3
 800b472:	f001 fc89 	bl	800cd88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d108      	bne.n	800b492 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b484:	4618      	mov	r0, r3
 800b486:	f000 feed 	bl	800c264 <vPortFree>
				vPortFree( pxTCB );
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 feea 	bl	800c264 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b490:	e018      	b.n	800b4c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d103      	bne.n	800b4a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fee1 	bl	800c264 <vPortFree>
	}
 800b4a2:	e00f      	b.n	800b4c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b4aa:	2b02      	cmp	r3, #2
 800b4ac:	d00a      	beq.n	800b4c4 <prvDeleteTCB+0x60>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	60fb      	str	r3, [r7, #12]
}
 800b4c0:	bf00      	nop
 800b4c2:	e7fe      	b.n	800b4c2 <prvDeleteTCB+0x5e>
	}
 800b4c4:	bf00      	nop
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4d2:	4b0e      	ldr	r3, [pc, #56]	; (800b50c <prvResetNextTaskUnblockTime+0x40>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d101      	bne.n	800b4e0 <prvResetNextTaskUnblockTime+0x14>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e000      	b.n	800b4e2 <prvResetNextTaskUnblockTime+0x16>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d004      	beq.n	800b4f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4e6:	4b0a      	ldr	r3, [pc, #40]	; (800b510 <prvResetNextTaskUnblockTime+0x44>)
 800b4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b4ee:	e008      	b.n	800b502 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b4f0:	4b06      	ldr	r3, [pc, #24]	; (800b50c <prvResetNextTaskUnblockTime+0x40>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	4a04      	ldr	r2, [pc, #16]	; (800b510 <prvResetNextTaskUnblockTime+0x44>)
 800b500:	6013      	str	r3, [r2, #0]
}
 800b502:	bf00      	nop
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	bc80      	pop	{r7}
 800b50a:	4770      	bx	lr
 800b50c:	20000ff0 	.word	0x20000ff0
 800b510:	20001058 	.word	0x20001058

0800b514 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b51a:	4b0b      	ldr	r3, [pc, #44]	; (800b548 <xTaskGetSchedulerState+0x34>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d102      	bne.n	800b528 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b522:	2301      	movs	r3, #1
 800b524:	607b      	str	r3, [r7, #4]
 800b526:	e008      	b.n	800b53a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b528:	4b08      	ldr	r3, [pc, #32]	; (800b54c <xTaskGetSchedulerState+0x38>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d102      	bne.n	800b536 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b530:	2302      	movs	r3, #2
 800b532:	607b      	str	r3, [r7, #4]
 800b534:	e001      	b.n	800b53a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b536:	2300      	movs	r3, #0
 800b538:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b53a:	687b      	ldr	r3, [r7, #4]
	}
 800b53c:	4618      	mov	r0, r3
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	bc80      	pop	{r7}
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	20001044 	.word	0x20001044
 800b54c:	20001060 	.word	0x20001060

0800b550 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b550:	b580      	push	{r7, lr}
 800b552:	b086      	sub	sp, #24
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b55c:	2300      	movs	r3, #0
 800b55e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d056      	beq.n	800b614 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b566:	4b2e      	ldr	r3, [pc, #184]	; (800b620 <xTaskPriorityDisinherit+0xd0>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	693a      	ldr	r2, [r7, #16]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d00a      	beq.n	800b586 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	60fb      	str	r3, [r7, #12]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10a      	bne.n	800b5a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	60bb      	str	r3, [r7, #8]
}
 800b5a0:	bf00      	nop
 800b5a2:	e7fe      	b.n	800b5a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5a8:	1e5a      	subs	r2, r3, #1
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d02c      	beq.n	800b614 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d128      	bne.n	800b614 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fe fc50 	bl	8009e6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e4:	4b0f      	ldr	r3, [pc, #60]	; (800b624 <xTaskPriorityDisinherit+0xd4>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d903      	bls.n	800b5f4 <xTaskPriorityDisinherit+0xa4>
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f0:	4a0c      	ldr	r2, [pc, #48]	; (800b624 <xTaskPriorityDisinherit+0xd4>)
 800b5f2:	6013      	str	r3, [r2, #0]
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4413      	add	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	4a09      	ldr	r2, [pc, #36]	; (800b628 <xTaskPriorityDisinherit+0xd8>)
 800b602:	441a      	add	r2, r3
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	3304      	adds	r3, #4
 800b608:	4619      	mov	r1, r3
 800b60a:	4610      	mov	r0, r2
 800b60c:	f7fe fbd3 	bl	8009db6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b610:	2301      	movs	r3, #1
 800b612:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b614:	697b      	ldr	r3, [r7, #20]
	}
 800b616:	4618      	mov	r0, r3
 800b618:	3718      	adds	r7, #24
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20000b64 	.word	0x20000b64
 800b624:	20001040 	.word	0x20001040
 800b628:	20000b68 	.word	0x20000b68

0800b62c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b636:	4b21      	ldr	r3, [pc, #132]	; (800b6bc <prvAddCurrentTaskToDelayedList+0x90>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b63c:	4b20      	ldr	r3, [pc, #128]	; (800b6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	3304      	adds	r3, #4
 800b642:	4618      	mov	r0, r3
 800b644:	f7fe fc12 	bl	8009e6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b64e:	d10a      	bne.n	800b666 <prvAddCurrentTaskToDelayedList+0x3a>
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d007      	beq.n	800b666 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b656:	4b1a      	ldr	r3, [pc, #104]	; (800b6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	3304      	adds	r3, #4
 800b65c:	4619      	mov	r1, r3
 800b65e:	4819      	ldr	r0, [pc, #100]	; (800b6c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b660:	f7fe fba9 	bl	8009db6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b664:	e026      	b.n	800b6b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4413      	add	r3, r2
 800b66c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b66e:	4b14      	ldr	r3, [pc, #80]	; (800b6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	68ba      	ldr	r2, [r7, #8]
 800b674:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d209      	bcs.n	800b692 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b67e:	4b12      	ldr	r3, [pc, #72]	; (800b6c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	4b0f      	ldr	r3, [pc, #60]	; (800b6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	3304      	adds	r3, #4
 800b688:	4619      	mov	r1, r3
 800b68a:	4610      	mov	r0, r2
 800b68c:	f7fe fbb6 	bl	8009dfc <vListInsert>
}
 800b690:	e010      	b.n	800b6b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b692:	4b0e      	ldr	r3, [pc, #56]	; (800b6cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	4b0a      	ldr	r3, [pc, #40]	; (800b6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	3304      	adds	r3, #4
 800b69c:	4619      	mov	r1, r3
 800b69e:	4610      	mov	r0, r2
 800b6a0:	f7fe fbac 	bl	8009dfc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b6a4:	4b0a      	ldr	r3, [pc, #40]	; (800b6d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68ba      	ldr	r2, [r7, #8]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d202      	bcs.n	800b6b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b6ae:	4a08      	ldr	r2, [pc, #32]	; (800b6d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	6013      	str	r3, [r2, #0]
}
 800b6b4:	bf00      	nop
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	2000103c 	.word	0x2000103c
 800b6c0:	20000b64 	.word	0x20000b64
 800b6c4:	20001024 	.word	0x20001024
 800b6c8:	20000ff4 	.word	0x20000ff4
 800b6cc:	20000ff0 	.word	0x20000ff0
 800b6d0:	20001058 	.word	0x20001058

0800b6d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b08a      	sub	sp, #40	; 0x28
 800b6d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b6de:	f000 facb 	bl	800bc78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b6e2:	4b1c      	ldr	r3, [pc, #112]	; (800b754 <xTimerCreateTimerTask+0x80>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d021      	beq.n	800b72e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b6f2:	1d3a      	adds	r2, r7, #4
 800b6f4:	f107 0108 	add.w	r1, r7, #8
 800b6f8:	f107 030c 	add.w	r3, r7, #12
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fe fb15 	bl	8009d2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b702:	6879      	ldr	r1, [r7, #4]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	9202      	str	r2, [sp, #8]
 800b70a:	9301      	str	r3, [sp, #4]
 800b70c:	2302      	movs	r3, #2
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	2300      	movs	r3, #0
 800b712:	460a      	mov	r2, r1
 800b714:	4910      	ldr	r1, [pc, #64]	; (800b758 <xTimerCreateTimerTask+0x84>)
 800b716:	4811      	ldr	r0, [pc, #68]	; (800b75c <xTimerCreateTimerTask+0x88>)
 800b718:	f7ff f8b6 	bl	800a888 <xTaskCreateStatic>
 800b71c:	4603      	mov	r3, r0
 800b71e:	4a10      	ldr	r2, [pc, #64]	; (800b760 <xTimerCreateTimerTask+0x8c>)
 800b720:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b722:	4b0f      	ldr	r3, [pc, #60]	; (800b760 <xTimerCreateTimerTask+0x8c>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b72a:	2301      	movs	r3, #1
 800b72c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10a      	bne.n	800b74a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	613b      	str	r3, [r7, #16]
}
 800b746:	bf00      	nop
 800b748:	e7fe      	b.n	800b748 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b74a:	697b      	ldr	r3, [r7, #20]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3718      	adds	r7, #24
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	20001094 	.word	0x20001094
 800b758:	0800cf84 	.word	0x0800cf84
 800b75c:	0800b881 	.word	0x0800b881
 800b760:	20001098 	.word	0x20001098

0800b764 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b08a      	sub	sp, #40	; 0x28
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b772:	2300      	movs	r3, #0
 800b774:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d10a      	bne.n	800b792 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b780:	f383 8811 	msr	BASEPRI, r3
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	623b      	str	r3, [r7, #32]
}
 800b78e:	bf00      	nop
 800b790:	e7fe      	b.n	800b790 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b792:	4b1a      	ldr	r3, [pc, #104]	; (800b7fc <xTimerGenericCommand+0x98>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d02a      	beq.n	800b7f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	2b05      	cmp	r3, #5
 800b7aa:	dc18      	bgt.n	800b7de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b7ac:	f7ff feb2 	bl	800b514 <xTaskGetSchedulerState>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b02      	cmp	r3, #2
 800b7b4:	d109      	bne.n	800b7ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b7b6:	4b11      	ldr	r3, [pc, #68]	; (800b7fc <xTimerGenericCommand+0x98>)
 800b7b8:	6818      	ldr	r0, [r3, #0]
 800b7ba:	f107 0110 	add.w	r1, r7, #16
 800b7be:	2300      	movs	r3, #0
 800b7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7c2:	f7fe fc7f 	bl	800a0c4 <xQueueGenericSend>
 800b7c6:	6278      	str	r0, [r7, #36]	; 0x24
 800b7c8:	e012      	b.n	800b7f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b7ca:	4b0c      	ldr	r3, [pc, #48]	; (800b7fc <xTimerGenericCommand+0x98>)
 800b7cc:	6818      	ldr	r0, [r3, #0]
 800b7ce:	f107 0110 	add.w	r1, r7, #16
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f7fe fc75 	bl	800a0c4 <xQueueGenericSend>
 800b7da:	6278      	str	r0, [r7, #36]	; 0x24
 800b7dc:	e008      	b.n	800b7f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b7de:	4b07      	ldr	r3, [pc, #28]	; (800b7fc <xTimerGenericCommand+0x98>)
 800b7e0:	6818      	ldr	r0, [r3, #0]
 800b7e2:	f107 0110 	add.w	r1, r7, #16
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	683a      	ldr	r2, [r7, #0]
 800b7ea:	f7fe fd69 	bl	800a2c0 <xQueueGenericSendFromISR>
 800b7ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3728      	adds	r7, #40	; 0x28
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	20001094 	.word	0x20001094

0800b800 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b088      	sub	sp, #32
 800b804:	af02      	add	r7, sp, #8
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b80a:	4b1c      	ldr	r3, [pc, #112]	; (800b87c <prvProcessExpiredTimer+0x7c>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	3304      	adds	r3, #4
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fe fb27 	bl	8009e6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	69db      	ldr	r3, [r3, #28]
 800b822:	2b01      	cmp	r3, #1
 800b824:	d122      	bne.n	800b86c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	699a      	ldr	r2, [r3, #24]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	18d1      	adds	r1, r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	6978      	ldr	r0, [r7, #20]
 800b834:	f000 f8c8 	bl	800b9c8 <prvInsertTimerInActiveList>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d016      	beq.n	800b86c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b83e:	2300      	movs	r3, #0
 800b840:	9300      	str	r3, [sp, #0]
 800b842:	2300      	movs	r3, #0
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	2100      	movs	r1, #0
 800b848:	6978      	ldr	r0, [r7, #20]
 800b84a:	f7ff ff8b 	bl	800b764 <xTimerGenericCommand>
 800b84e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10a      	bne.n	800b86c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	60fb      	str	r3, [r7, #12]
}
 800b868:	bf00      	nop
 800b86a:	e7fe      	b.n	800b86a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	6978      	ldr	r0, [r7, #20]
 800b872:	4798      	blx	r3
}
 800b874:	bf00      	nop
 800b876:	3718      	adds	r7, #24
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	2000108c 	.word	0x2000108c

0800b880 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b888:	f107 0308 	add.w	r3, r7, #8
 800b88c:	4618      	mov	r0, r3
 800b88e:	f000 f857 	bl	800b940 <prvGetNextExpireTime>
 800b892:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	4619      	mov	r1, r3
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f000 f803 	bl	800b8a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b89e:	f000 f8d5 	bl	800ba4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8a2:	e7f1      	b.n	800b888 <prvTimerTask+0x8>

0800b8a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b8ae:	f7ff fa3f 	bl	800ad30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8b2:	f107 0308 	add.w	r3, r7, #8
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 f866 	bl	800b988 <prvSampleTimeNow>
 800b8bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d130      	bne.n	800b926 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d10a      	bne.n	800b8e0 <prvProcessTimerOrBlockTask+0x3c>
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d806      	bhi.n	800b8e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b8d2:	f7ff fa3b 	bl	800ad4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b8d6:	68f9      	ldr	r1, [r7, #12]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f7ff ff91 	bl	800b800 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b8de:	e024      	b.n	800b92a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d008      	beq.n	800b8f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b8e6:	4b13      	ldr	r3, [pc, #76]	; (800b934 <prvProcessTimerOrBlockTask+0x90>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	bf0c      	ite	eq
 800b8f0:	2301      	moveq	r3, #1
 800b8f2:	2300      	movne	r3, #0
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b8f8:	4b0f      	ldr	r3, [pc, #60]	; (800b938 <prvProcessTimerOrBlockTask+0x94>)
 800b8fa:	6818      	ldr	r0, [r3, #0]
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	4619      	mov	r1, r3
 800b906:	f7fe ff8b 	bl	800a820 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b90a:	f7ff fa1f 	bl	800ad4c <xTaskResumeAll>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10a      	bne.n	800b92a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b914:	4b09      	ldr	r3, [pc, #36]	; (800b93c <prvProcessTimerOrBlockTask+0x98>)
 800b916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b91a:	601a      	str	r2, [r3, #0]
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	f3bf 8f6f 	isb	sy
}
 800b924:	e001      	b.n	800b92a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b926:	f7ff fa11 	bl	800ad4c <xTaskResumeAll>
}
 800b92a:	bf00      	nop
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	20001090 	.word	0x20001090
 800b938:	20001094 	.word	0x20001094
 800b93c:	e000ed04 	.word	0xe000ed04

0800b940 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b948:	4b0e      	ldr	r3, [pc, #56]	; (800b984 <prvGetNextExpireTime+0x44>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	bf0c      	ite	eq
 800b952:	2301      	moveq	r3, #1
 800b954:	2300      	movne	r3, #0
 800b956:	b2db      	uxtb	r3, r3
 800b958:	461a      	mov	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d105      	bne.n	800b972 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b966:	4b07      	ldr	r3, [pc, #28]	; (800b984 <prvGetNextExpireTime+0x44>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	60fb      	str	r3, [r7, #12]
 800b970:	e001      	b.n	800b976 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b972:	2300      	movs	r3, #0
 800b974:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b976:	68fb      	ldr	r3, [r7, #12]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bc80      	pop	{r7}
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	2000108c 	.word	0x2000108c

0800b988 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b990:	f7ff fa7a 	bl	800ae88 <xTaskGetTickCount>
 800b994:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b996:	4b0b      	ldr	r3, [pc, #44]	; (800b9c4 <prvSampleTimeNow+0x3c>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d205      	bcs.n	800b9ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b9a0:	f000 f908 	bl	800bbb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	601a      	str	r2, [r3, #0]
 800b9aa:	e002      	b.n	800b9b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b9b2:	4a04      	ldr	r2, [pc, #16]	; (800b9c4 <prvSampleTimeNow+0x3c>)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	2000109c 	.word	0x2000109c

0800b9c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
 800b9d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b9e6:	68ba      	ldr	r2, [r7, #8]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d812      	bhi.n	800ba14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	1ad2      	subs	r2, r2, r3
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d302      	bcc.n	800ba02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	617b      	str	r3, [r7, #20]
 800ba00:	e01b      	b.n	800ba3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba02:	4b10      	ldr	r3, [pc, #64]	; (800ba44 <prvInsertTimerInActiveList+0x7c>)
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	3304      	adds	r3, #4
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	f7fe f9f5 	bl	8009dfc <vListInsert>
 800ba12:	e012      	b.n	800ba3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d206      	bcs.n	800ba2a <prvInsertTimerInActiveList+0x62>
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d302      	bcc.n	800ba2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba24:	2301      	movs	r3, #1
 800ba26:	617b      	str	r3, [r7, #20]
 800ba28:	e007      	b.n	800ba3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba2a:	4b07      	ldr	r3, [pc, #28]	; (800ba48 <prvInsertTimerInActiveList+0x80>)
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	3304      	adds	r3, #4
 800ba32:	4619      	mov	r1, r3
 800ba34:	4610      	mov	r0, r2
 800ba36:	f7fe f9e1 	bl	8009dfc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba3a:	697b      	ldr	r3, [r7, #20]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3718      	adds	r7, #24
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	20001090 	.word	0x20001090
 800ba48:	2000108c 	.word	0x2000108c

0800ba4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b08e      	sub	sp, #56	; 0x38
 800ba50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba52:	e09d      	b.n	800bb90 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	da18      	bge.n	800ba8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba5a:	1d3b      	adds	r3, r7, #4
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ba60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10a      	bne.n	800ba7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ba66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6a:	f383 8811 	msr	BASEPRI, r3
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f3bf 8f4f 	dsb	sy
 800ba76:	61fb      	str	r3, [r7, #28]
}
 800ba78:	bf00      	nop
 800ba7a:	e7fe      	b.n	800ba7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ba7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba82:	6850      	ldr	r0, [r2, #4]
 800ba84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba86:	6892      	ldr	r2, [r2, #8]
 800ba88:	4611      	mov	r1, r2
 800ba8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	db7e      	blt.n	800bb90 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d004      	beq.n	800baa8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa0:	3304      	adds	r3, #4
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fe f9e2 	bl	8009e6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800baa8:	463b      	mov	r3, r7
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff ff6c 	bl	800b988 <prvSampleTimeNow>
 800bab0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b09      	cmp	r3, #9
 800bab6:	d86a      	bhi.n	800bb8e <prvProcessReceivedCommands+0x142>
 800bab8:	a201      	add	r2, pc, #4	; (adr r2, 800bac0 <prvProcessReceivedCommands+0x74>)
 800baba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800babe:	bf00      	nop
 800bac0:	0800bae9 	.word	0x0800bae9
 800bac4:	0800bae9 	.word	0x0800bae9
 800bac8:	0800bae9 	.word	0x0800bae9
 800bacc:	0800bb91 	.word	0x0800bb91
 800bad0:	0800bb45 	.word	0x0800bb45
 800bad4:	0800bb7d 	.word	0x0800bb7d
 800bad8:	0800bae9 	.word	0x0800bae9
 800badc:	0800bae9 	.word	0x0800bae9
 800bae0:	0800bb91 	.word	0x0800bb91
 800bae4:	0800bb45 	.word	0x0800bb45
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	18d1      	adds	r1, r2, r3
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baf6:	f7ff ff67 	bl	800b9c8 <prvInsertTimerInActiveList>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d047      	beq.n	800bb90 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb06:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0a:	69db      	ldr	r3, [r3, #28]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d13f      	bne.n	800bb90 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb10:	68ba      	ldr	r2, [r7, #8]
 800bb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb14:	699b      	ldr	r3, [r3, #24]
 800bb16:	441a      	add	r2, r3
 800bb18:	2300      	movs	r3, #0
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	2100      	movs	r1, #0
 800bb20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb22:	f7ff fe1f 	bl	800b764 <xTimerGenericCommand>
 800bb26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb28:	6a3b      	ldr	r3, [r7, #32]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d130      	bne.n	800bb90 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800bb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	61bb      	str	r3, [r7, #24]
}
 800bb40:	bf00      	nop
 800bb42:	e7fe      	b.n	800bb42 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bb44:	68ba      	ldr	r2, [r7, #8]
 800bb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4c:	699b      	ldr	r3, [r3, #24]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10a      	bne.n	800bb68 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	617b      	str	r3, [r7, #20]
}
 800bb64:	bf00      	nop
 800bb66:	e7fe      	b.n	800bb66 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6a:	699a      	ldr	r2, [r3, #24]
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6e:	18d1      	adds	r1, r2, r3
 800bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb76:	f7ff ff27 	bl	800b9c8 <prvInsertTimerInActiveList>
					break;
 800bb7a:	e009      	b.n	800bb90 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d104      	bne.n	800bb90 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800bb86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb88:	f000 fb6c 	bl	800c264 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bb8c:	e000      	b.n	800bb90 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800bb8e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb90:	4b07      	ldr	r3, [pc, #28]	; (800bbb0 <prvProcessReceivedCommands+0x164>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	1d39      	adds	r1, r7, #4
 800bb96:	2200      	movs	r2, #0
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fe fc29 	bl	800a3f0 <xQueueReceive>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f47f af57 	bne.w	800ba54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bba6:	bf00      	nop
 800bba8:	bf00      	nop
 800bbaa:	3730      	adds	r7, #48	; 0x30
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	20001094 	.word	0x20001094

0800bbb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b088      	sub	sp, #32
 800bbb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbba:	e045      	b.n	800bc48 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbbc:	4b2c      	ldr	r3, [pc, #176]	; (800bc70 <prvSwitchTimerLists+0xbc>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbc6:	4b2a      	ldr	r3, [pc, #168]	; (800bc70 <prvSwitchTimerLists+0xbc>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	3304      	adds	r3, #4
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7fe f949 	bl	8009e6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d12e      	bne.n	800bc48 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	693a      	ldr	r2, [r7, #16]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d90e      	bls.n	800bc1a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	68ba      	ldr	r2, [r7, #8]
 800bc00:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc08:	4b19      	ldr	r3, [pc, #100]	; (800bc70 <prvSwitchTimerLists+0xbc>)
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	4619      	mov	r1, r3
 800bc12:	4610      	mov	r0, r2
 800bc14:	f7fe f8f2 	bl	8009dfc <vListInsert>
 800bc18:	e016      	b.n	800bc48 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	2300      	movs	r3, #0
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	2100      	movs	r1, #0
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f7ff fd9d 	bl	800b764 <xTimerGenericCommand>
 800bc2a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10a      	bne.n	800bc48 <prvSwitchTimerLists+0x94>
	__asm volatile
 800bc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	603b      	str	r3, [r7, #0]
}
 800bc44:	bf00      	nop
 800bc46:	e7fe      	b.n	800bc46 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc48:	4b09      	ldr	r3, [pc, #36]	; (800bc70 <prvSwitchTimerLists+0xbc>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1b4      	bne.n	800bbbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bc52:	4b07      	ldr	r3, [pc, #28]	; (800bc70 <prvSwitchTimerLists+0xbc>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bc58:	4b06      	ldr	r3, [pc, #24]	; (800bc74 <prvSwitchTimerLists+0xc0>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a04      	ldr	r2, [pc, #16]	; (800bc70 <prvSwitchTimerLists+0xbc>)
 800bc5e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bc60:	4a04      	ldr	r2, [pc, #16]	; (800bc74 <prvSwitchTimerLists+0xc0>)
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	6013      	str	r3, [r2, #0]
}
 800bc66:	bf00      	nop
 800bc68:	3718      	adds	r7, #24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	2000108c 	.word	0x2000108c
 800bc74:	20001090 	.word	0x20001090

0800bc78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bc7e:	f000 f92d 	bl	800bedc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bc82:	4b15      	ldr	r3, [pc, #84]	; (800bcd8 <prvCheckForValidListAndQueue+0x60>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d120      	bne.n	800bccc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc8a:	4814      	ldr	r0, [pc, #80]	; (800bcdc <prvCheckForValidListAndQueue+0x64>)
 800bc8c:	f7fe f868 	bl	8009d60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc90:	4813      	ldr	r0, [pc, #76]	; (800bce0 <prvCheckForValidListAndQueue+0x68>)
 800bc92:	f7fe f865 	bl	8009d60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc96:	4b13      	ldr	r3, [pc, #76]	; (800bce4 <prvCheckForValidListAndQueue+0x6c>)
 800bc98:	4a10      	ldr	r2, [pc, #64]	; (800bcdc <prvCheckForValidListAndQueue+0x64>)
 800bc9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc9c:	4b12      	ldr	r3, [pc, #72]	; (800bce8 <prvCheckForValidListAndQueue+0x70>)
 800bc9e:	4a10      	ldr	r2, [pc, #64]	; (800bce0 <prvCheckForValidListAndQueue+0x68>)
 800bca0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bca2:	2300      	movs	r3, #0
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	4b11      	ldr	r3, [pc, #68]	; (800bcec <prvCheckForValidListAndQueue+0x74>)
 800bca8:	4a11      	ldr	r2, [pc, #68]	; (800bcf0 <prvCheckForValidListAndQueue+0x78>)
 800bcaa:	2110      	movs	r1, #16
 800bcac:	200a      	movs	r0, #10
 800bcae:	f7fe f96f 	bl	8009f90 <xQueueGenericCreateStatic>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	4a08      	ldr	r2, [pc, #32]	; (800bcd8 <prvCheckForValidListAndQueue+0x60>)
 800bcb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bcb8:	4b07      	ldr	r3, [pc, #28]	; (800bcd8 <prvCheckForValidListAndQueue+0x60>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d005      	beq.n	800bccc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bcc0:	4b05      	ldr	r3, [pc, #20]	; (800bcd8 <prvCheckForValidListAndQueue+0x60>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	490b      	ldr	r1, [pc, #44]	; (800bcf4 <prvCheckForValidListAndQueue+0x7c>)
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe fd82 	bl	800a7d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bccc:	f000 f936 	bl	800bf3c <vPortExitCritical>
}
 800bcd0:	bf00      	nop
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	20001094 	.word	0x20001094
 800bcdc:	20001064 	.word	0x20001064
 800bce0:	20001078 	.word	0x20001078
 800bce4:	2000108c 	.word	0x2000108c
 800bce8:	20001090 	.word	0x20001090
 800bcec:	20001140 	.word	0x20001140
 800bcf0:	200010a0 	.word	0x200010a0
 800bcf4:	0800cf8c 	.word	0x0800cf8c

0800bcf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	3b04      	subs	r3, #4
 800bd08:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bd10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3b04      	subs	r3, #4
 800bd16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	f023 0201 	bic.w	r2, r3, #1
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	3b04      	subs	r3, #4
 800bd26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bd28:	4a08      	ldr	r2, [pc, #32]	; (800bd4c <pxPortInitialiseStack+0x54>)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	3b14      	subs	r3, #20
 800bd32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	3b20      	subs	r3, #32
 800bd3e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd40:	68fb      	ldr	r3, [r7, #12]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3714      	adds	r7, #20
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bc80      	pop	{r7}
 800bd4a:	4770      	bx	lr
 800bd4c:	0800bd51 	.word	0x0800bd51

0800bd50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bd56:	2300      	movs	r3, #0
 800bd58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd5a:	4b12      	ldr	r3, [pc, #72]	; (800bda4 <prvTaskExitError+0x54>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd62:	d00a      	beq.n	800bd7a <prvTaskExitError+0x2a>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	60fb      	str	r3, [r7, #12]
}
 800bd76:	bf00      	nop
 800bd78:	e7fe      	b.n	800bd78 <prvTaskExitError+0x28>
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	60bb      	str	r3, [r7, #8]
}
 800bd8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bd8e:	bf00      	nop
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d0fc      	beq.n	800bd90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bd96:	bf00      	nop
 800bd98:	bf00      	nop
 800bd9a:	3714      	adds	r7, #20
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bc80      	pop	{r7}
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	2000011c 	.word	0x2000011c
	...

0800bdb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bdb0:	4b07      	ldr	r3, [pc, #28]	; (800bdd0 <pxCurrentTCBConst2>)
 800bdb2:	6819      	ldr	r1, [r3, #0]
 800bdb4:	6808      	ldr	r0, [r1, #0]
 800bdb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bdba:	f380 8809 	msr	PSP, r0
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f04f 0000 	mov.w	r0, #0
 800bdc6:	f380 8811 	msr	BASEPRI, r0
 800bdca:	f04e 0e0d 	orr.w	lr, lr, #13
 800bdce:	4770      	bx	lr

0800bdd0 <pxCurrentTCBConst2>:
 800bdd0:	20000b64 	.word	0x20000b64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bdd4:	bf00      	nop
 800bdd6:	bf00      	nop

0800bdd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800bdd8:	4806      	ldr	r0, [pc, #24]	; (800bdf4 <prvPortStartFirstTask+0x1c>)
 800bdda:	6800      	ldr	r0, [r0, #0]
 800bddc:	6800      	ldr	r0, [r0, #0]
 800bdde:	f380 8808 	msr	MSP, r0
 800bde2:	b662      	cpsie	i
 800bde4:	b661      	cpsie	f
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	df00      	svc	0
 800bdf0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bdf2:	bf00      	nop
 800bdf4:	e000ed08 	.word	0xe000ed08

0800bdf8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bdfe:	4b32      	ldr	r3, [pc, #200]	; (800bec8 <xPortStartScheduler+0xd0>)
 800be00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	b2db      	uxtb	r3, r3
 800be08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	22ff      	movs	r2, #255	; 0xff
 800be0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	b2db      	uxtb	r3, r3
 800be16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be18:	78fb      	ldrb	r3, [r7, #3]
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800be20:	b2da      	uxtb	r2, r3
 800be22:	4b2a      	ldr	r3, [pc, #168]	; (800becc <xPortStartScheduler+0xd4>)
 800be24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be26:	4b2a      	ldr	r3, [pc, #168]	; (800bed0 <xPortStartScheduler+0xd8>)
 800be28:	2207      	movs	r2, #7
 800be2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be2c:	e009      	b.n	800be42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800be2e:	4b28      	ldr	r3, [pc, #160]	; (800bed0 <xPortStartScheduler+0xd8>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	3b01      	subs	r3, #1
 800be34:	4a26      	ldr	r2, [pc, #152]	; (800bed0 <xPortStartScheduler+0xd8>)
 800be36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be38:	78fb      	ldrb	r3, [r7, #3]
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	005b      	lsls	r3, r3, #1
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be42:	78fb      	ldrb	r3, [r7, #3]
 800be44:	b2db      	uxtb	r3, r3
 800be46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be4a:	2b80      	cmp	r3, #128	; 0x80
 800be4c:	d0ef      	beq.n	800be2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be4e:	4b20      	ldr	r3, [pc, #128]	; (800bed0 <xPortStartScheduler+0xd8>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f1c3 0307 	rsb	r3, r3, #7
 800be56:	2b04      	cmp	r3, #4
 800be58:	d00a      	beq.n	800be70 <xPortStartScheduler+0x78>
	__asm volatile
 800be5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	60bb      	str	r3, [r7, #8]
}
 800be6c:	bf00      	nop
 800be6e:	e7fe      	b.n	800be6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be70:	4b17      	ldr	r3, [pc, #92]	; (800bed0 <xPortStartScheduler+0xd8>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	021b      	lsls	r3, r3, #8
 800be76:	4a16      	ldr	r2, [pc, #88]	; (800bed0 <xPortStartScheduler+0xd8>)
 800be78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be7a:	4b15      	ldr	r3, [pc, #84]	; (800bed0 <xPortStartScheduler+0xd8>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be82:	4a13      	ldr	r2, [pc, #76]	; (800bed0 <xPortStartScheduler+0xd8>)
 800be84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be8e:	4b11      	ldr	r3, [pc, #68]	; (800bed4 <xPortStartScheduler+0xdc>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a10      	ldr	r2, [pc, #64]	; (800bed4 <xPortStartScheduler+0xdc>)
 800be94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800be98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be9a:	4b0e      	ldr	r3, [pc, #56]	; (800bed4 <xPortStartScheduler+0xdc>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4a0d      	ldr	r2, [pc, #52]	; (800bed4 <xPortStartScheduler+0xdc>)
 800bea0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bea4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bea6:	f000 f8b9 	bl	800c01c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800beaa:	4b0b      	ldr	r3, [pc, #44]	; (800bed8 <xPortStartScheduler+0xe0>)
 800beac:	2200      	movs	r2, #0
 800beae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800beb0:	f7ff ff92 	bl	800bdd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800beb4:	f7ff f8b4 	bl	800b020 <vTaskSwitchContext>
	prvTaskExitError();
 800beb8:	f7ff ff4a 	bl	800bd50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3710      	adds	r7, #16
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	e000e400 	.word	0xe000e400
 800becc:	20001190 	.word	0x20001190
 800bed0:	20001194 	.word	0x20001194
 800bed4:	e000ed20 	.word	0xe000ed20
 800bed8:	2000011c 	.word	0x2000011c

0800bedc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
	__asm volatile
 800bee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee6:	f383 8811 	msr	BASEPRI, r3
 800beea:	f3bf 8f6f 	isb	sy
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	607b      	str	r3, [r7, #4]
}
 800bef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bef6:	4b0f      	ldr	r3, [pc, #60]	; (800bf34 <vPortEnterCritical+0x58>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	3301      	adds	r3, #1
 800befc:	4a0d      	ldr	r2, [pc, #52]	; (800bf34 <vPortEnterCritical+0x58>)
 800befe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf00:	4b0c      	ldr	r3, [pc, #48]	; (800bf34 <vPortEnterCritical+0x58>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d10f      	bne.n	800bf28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf08:	4b0b      	ldr	r3, [pc, #44]	; (800bf38 <vPortEnterCritical+0x5c>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00a      	beq.n	800bf28 <vPortEnterCritical+0x4c>
	__asm volatile
 800bf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	603b      	str	r3, [r7, #0]
}
 800bf24:	bf00      	nop
 800bf26:	e7fe      	b.n	800bf26 <vPortEnterCritical+0x4a>
	}
}
 800bf28:	bf00      	nop
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bc80      	pop	{r7}
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	2000011c 	.word	0x2000011c
 800bf38:	e000ed04 	.word	0xe000ed04

0800bf3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf42:	4b11      	ldr	r3, [pc, #68]	; (800bf88 <vPortExitCritical+0x4c>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10a      	bne.n	800bf60 <vPortExitCritical+0x24>
	__asm volatile
 800bf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	607b      	str	r3, [r7, #4]
}
 800bf5c:	bf00      	nop
 800bf5e:	e7fe      	b.n	800bf5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bf60:	4b09      	ldr	r3, [pc, #36]	; (800bf88 <vPortExitCritical+0x4c>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	3b01      	subs	r3, #1
 800bf66:	4a08      	ldr	r2, [pc, #32]	; (800bf88 <vPortExitCritical+0x4c>)
 800bf68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf6a:	4b07      	ldr	r3, [pc, #28]	; (800bf88 <vPortExitCritical+0x4c>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d105      	bne.n	800bf7e <vPortExitCritical+0x42>
 800bf72:	2300      	movs	r3, #0
 800bf74:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	f383 8811 	msr	BASEPRI, r3
}
 800bf7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf7e:	bf00      	nop
 800bf80:	370c      	adds	r7, #12
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bc80      	pop	{r7}
 800bf86:	4770      	bx	lr
 800bf88:	2000011c 	.word	0x2000011c
 800bf8c:	00000000 	.word	0x00000000

0800bf90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf90:	f3ef 8009 	mrs	r0, PSP
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	4b0d      	ldr	r3, [pc, #52]	; (800bfd0 <pxCurrentTCBConst>)
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bfa0:	6010      	str	r0, [r2, #0]
 800bfa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800bfa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bfaa:	f380 8811 	msr	BASEPRI, r0
 800bfae:	f7ff f837 	bl	800b020 <vTaskSwitchContext>
 800bfb2:	f04f 0000 	mov.w	r0, #0
 800bfb6:	f380 8811 	msr	BASEPRI, r0
 800bfba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bfbe:	6819      	ldr	r1, [r3, #0]
 800bfc0:	6808      	ldr	r0, [r1, #0]
 800bfc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bfc6:	f380 8809 	msr	PSP, r0
 800bfca:	f3bf 8f6f 	isb	sy
 800bfce:	4770      	bx	lr

0800bfd0 <pxCurrentTCBConst>:
 800bfd0:	20000b64 	.word	0x20000b64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bfd4:	bf00      	nop
 800bfd6:	bf00      	nop

0800bfd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
	__asm volatile
 800bfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe2:	f383 8811 	msr	BASEPRI, r3
 800bfe6:	f3bf 8f6f 	isb	sy
 800bfea:	f3bf 8f4f 	dsb	sy
 800bfee:	607b      	str	r3, [r7, #4]
}
 800bff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bff2:	f7fe ff57 	bl	800aea4 <xTaskIncrementTick>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d003      	beq.n	800c004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bffc:	4b06      	ldr	r3, [pc, #24]	; (800c018 <SysTick_Handler+0x40>)
 800bffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c002:	601a      	str	r2, [r3, #0]
 800c004:	2300      	movs	r3, #0
 800c006:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	f383 8811 	msr	BASEPRI, r3
}
 800c00e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c010:	bf00      	nop
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	e000ed04 	.word	0xe000ed04

0800c01c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c01c:	b480      	push	{r7}
 800c01e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c020:	4b0a      	ldr	r3, [pc, #40]	; (800c04c <vPortSetupTimerInterrupt+0x30>)
 800c022:	2200      	movs	r2, #0
 800c024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c026:	4b0a      	ldr	r3, [pc, #40]	; (800c050 <vPortSetupTimerInterrupt+0x34>)
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c02c:	4b09      	ldr	r3, [pc, #36]	; (800c054 <vPortSetupTimerInterrupt+0x38>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a09      	ldr	r2, [pc, #36]	; (800c058 <vPortSetupTimerInterrupt+0x3c>)
 800c032:	fba2 2303 	umull	r2, r3, r2, r3
 800c036:	099b      	lsrs	r3, r3, #6
 800c038:	4a08      	ldr	r2, [pc, #32]	; (800c05c <vPortSetupTimerInterrupt+0x40>)
 800c03a:	3b01      	subs	r3, #1
 800c03c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c03e:	4b03      	ldr	r3, [pc, #12]	; (800c04c <vPortSetupTimerInterrupt+0x30>)
 800c040:	2207      	movs	r2, #7
 800c042:	601a      	str	r2, [r3, #0]
}
 800c044:	bf00      	nop
 800c046:	46bd      	mov	sp, r7
 800c048:	bc80      	pop	{r7}
 800c04a:	4770      	bx	lr
 800c04c:	e000e010 	.word	0xe000e010
 800c050:	e000e018 	.word	0xe000e018
 800c054:	20000000 	.word	0x20000000
 800c058:	10624dd3 	.word	0x10624dd3
 800c05c:	e000e014 	.word	0xe000e014

0800c060 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c066:	f3ef 8305 	mrs	r3, IPSR
 800c06a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2b0f      	cmp	r3, #15
 800c070:	d914      	bls.n	800c09c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c072:	4a16      	ldr	r2, [pc, #88]	; (800c0cc <vPortValidateInterruptPriority+0x6c>)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	4413      	add	r3, r2
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c07c:	4b14      	ldr	r3, [pc, #80]	; (800c0d0 <vPortValidateInterruptPriority+0x70>)
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	7afa      	ldrb	r2, [r7, #11]
 800c082:	429a      	cmp	r2, r3
 800c084:	d20a      	bcs.n	800c09c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	607b      	str	r3, [r7, #4]
}
 800c098:	bf00      	nop
 800c09a:	e7fe      	b.n	800c09a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c09c:	4b0d      	ldr	r3, [pc, #52]	; (800c0d4 <vPortValidateInterruptPriority+0x74>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c0a4:	4b0c      	ldr	r3, [pc, #48]	; (800c0d8 <vPortValidateInterruptPriority+0x78>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d90a      	bls.n	800c0c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b0:	f383 8811 	msr	BASEPRI, r3
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	603b      	str	r3, [r7, #0]
}
 800c0be:	bf00      	nop
 800c0c0:	e7fe      	b.n	800c0c0 <vPortValidateInterruptPriority+0x60>
	}
 800c0c2:	bf00      	nop
 800c0c4:	3714      	adds	r7, #20
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bc80      	pop	{r7}
 800c0ca:	4770      	bx	lr
 800c0cc:	e000e3f0 	.word	0xe000e3f0
 800c0d0:	20001190 	.word	0x20001190
 800c0d4:	e000ed0c 	.word	0xe000ed0c
 800c0d8:	20001194 	.word	0x20001194

0800c0dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b08a      	sub	sp, #40	; 0x28
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c0e8:	f7fe fe22 	bl	800ad30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c0ec:	4b58      	ldr	r3, [pc, #352]	; (800c250 <pvPortMalloc+0x174>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d101      	bne.n	800c0f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c0f4:	f000 f910 	bl	800c318 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c0f8:	4b56      	ldr	r3, [pc, #344]	; (800c254 <pvPortMalloc+0x178>)
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4013      	ands	r3, r2
 800c100:	2b00      	cmp	r3, #0
 800c102:	f040 808e 	bne.w	800c222 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d01d      	beq.n	800c148 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c10c:	2208      	movs	r2, #8
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4413      	add	r3, r2
 800c112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f003 0307 	and.w	r3, r3, #7
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d014      	beq.n	800c148 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f023 0307 	bic.w	r3, r3, #7
 800c124:	3308      	adds	r3, #8
 800c126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f003 0307 	and.w	r3, r3, #7
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00a      	beq.n	800c148 <pvPortMalloc+0x6c>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	617b      	str	r3, [r7, #20]
}
 800c144:	bf00      	nop
 800c146:	e7fe      	b.n	800c146 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d069      	beq.n	800c222 <pvPortMalloc+0x146>
 800c14e:	4b42      	ldr	r3, [pc, #264]	; (800c258 <pvPortMalloc+0x17c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	429a      	cmp	r2, r3
 800c156:	d864      	bhi.n	800c222 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c158:	4b40      	ldr	r3, [pc, #256]	; (800c25c <pvPortMalloc+0x180>)
 800c15a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c15c:	4b3f      	ldr	r3, [pc, #252]	; (800c25c <pvPortMalloc+0x180>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c162:	e004      	b.n	800c16e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c166:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	429a      	cmp	r2, r3
 800c176:	d903      	bls.n	800c180 <pvPortMalloc+0xa4>
 800c178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1f1      	bne.n	800c164 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c180:	4b33      	ldr	r3, [pc, #204]	; (800c250 <pvPortMalloc+0x174>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c186:	429a      	cmp	r2, r3
 800c188:	d04b      	beq.n	800c222 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c18a:	6a3b      	ldr	r3, [r7, #32]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2208      	movs	r2, #8
 800c190:	4413      	add	r3, r2
 800c192:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	6a3b      	ldr	r3, [r7, #32]
 800c19a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19e:	685a      	ldr	r2, [r3, #4]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	1ad2      	subs	r2, r2, r3
 800c1a4:	2308      	movs	r3, #8
 800c1a6:	005b      	lsls	r3, r3, #1
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d91f      	bls.n	800c1ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c1ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	f003 0307 	and.w	r3, r3, #7
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00a      	beq.n	800c1d4 <pvPortMalloc+0xf8>
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	613b      	str	r3, [r7, #16]
}
 800c1d0:	bf00      	nop
 800c1d2:	e7fe      	b.n	800c1d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d6:	685a      	ldr	r2, [r3, #4]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	1ad2      	subs	r2, r2, r3
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c1e6:	69b8      	ldr	r0, [r7, #24]
 800c1e8:	f000 f8f8 	bl	800c3dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c1ec:	4b1a      	ldr	r3, [pc, #104]	; (800c258 <pvPortMalloc+0x17c>)
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	1ad3      	subs	r3, r2, r3
 800c1f6:	4a18      	ldr	r2, [pc, #96]	; (800c258 <pvPortMalloc+0x17c>)
 800c1f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c1fa:	4b17      	ldr	r3, [pc, #92]	; (800c258 <pvPortMalloc+0x17c>)
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	4b18      	ldr	r3, [pc, #96]	; (800c260 <pvPortMalloc+0x184>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	429a      	cmp	r2, r3
 800c204:	d203      	bcs.n	800c20e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c206:	4b14      	ldr	r3, [pc, #80]	; (800c258 <pvPortMalloc+0x17c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a15      	ldr	r2, [pc, #84]	; (800c260 <pvPortMalloc+0x184>)
 800c20c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	685a      	ldr	r2, [r3, #4]
 800c212:	4b10      	ldr	r3, [pc, #64]	; (800c254 <pvPortMalloc+0x178>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	431a      	orrs	r2, r3
 800c218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	2200      	movs	r2, #0
 800c220:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c222:	f7fe fd93 	bl	800ad4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	f003 0307 	and.w	r3, r3, #7
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00a      	beq.n	800c246 <pvPortMalloc+0x16a>
	__asm volatile
 800c230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c234:	f383 8811 	msr	BASEPRI, r3
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	60fb      	str	r3, [r7, #12]
}
 800c242:	bf00      	nop
 800c244:	e7fe      	b.n	800c244 <pvPortMalloc+0x168>
	return pvReturn;
 800c246:	69fb      	ldr	r3, [r7, #28]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3728      	adds	r7, #40	; 0x28
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	20001da0 	.word	0x20001da0
 800c254:	20001dac 	.word	0x20001dac
 800c258:	20001da4 	.word	0x20001da4
 800c25c:	20001d98 	.word	0x20001d98
 800c260:	20001da8 	.word	0x20001da8

0800c264 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b086      	sub	sp, #24
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d048      	beq.n	800c308 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c276:	2308      	movs	r3, #8
 800c278:	425b      	negs	r3, r3
 800c27a:	697a      	ldr	r2, [r7, #20]
 800c27c:	4413      	add	r3, r2
 800c27e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	685a      	ldr	r2, [r3, #4]
 800c288:	4b21      	ldr	r3, [pc, #132]	; (800c310 <vPortFree+0xac>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4013      	ands	r3, r2
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10a      	bne.n	800c2a8 <vPortFree+0x44>
	__asm volatile
 800c292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c296:	f383 8811 	msr	BASEPRI, r3
 800c29a:	f3bf 8f6f 	isb	sy
 800c29e:	f3bf 8f4f 	dsb	sy
 800c2a2:	60fb      	str	r3, [r7, #12]
}
 800c2a4:	bf00      	nop
 800c2a6:	e7fe      	b.n	800c2a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00a      	beq.n	800c2c6 <vPortFree+0x62>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	60bb      	str	r3, [r7, #8]
}
 800c2c2:	bf00      	nop
 800c2c4:	e7fe      	b.n	800c2c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	685a      	ldr	r2, [r3, #4]
 800c2ca:	4b11      	ldr	r3, [pc, #68]	; (800c310 <vPortFree+0xac>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4013      	ands	r3, r2
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d019      	beq.n	800c308 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d115      	bne.n	800c308 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	685a      	ldr	r2, [r3, #4]
 800c2e0:	4b0b      	ldr	r3, [pc, #44]	; (800c310 <vPortFree+0xac>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	43db      	mvns	r3, r3
 800c2e6:	401a      	ands	r2, r3
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c2ec:	f7fe fd20 	bl	800ad30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	685a      	ldr	r2, [r3, #4]
 800c2f4:	4b07      	ldr	r3, [pc, #28]	; (800c314 <vPortFree+0xb0>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	4a06      	ldr	r2, [pc, #24]	; (800c314 <vPortFree+0xb0>)
 800c2fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2fe:	6938      	ldr	r0, [r7, #16]
 800c300:	f000 f86c 	bl	800c3dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c304:	f7fe fd22 	bl	800ad4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c308:	bf00      	nop
 800c30a:	3718      	adds	r7, #24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	20001dac 	.word	0x20001dac
 800c314:	20001da4 	.word	0x20001da4

0800c318 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c31e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c322:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c324:	4b27      	ldr	r3, [pc, #156]	; (800c3c4 <prvHeapInit+0xac>)
 800c326:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f003 0307 	and.w	r3, r3, #7
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00c      	beq.n	800c34c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	3307      	adds	r3, #7
 800c336:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f023 0307 	bic.w	r3, r3, #7
 800c33e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	1ad3      	subs	r3, r2, r3
 800c346:	4a1f      	ldr	r2, [pc, #124]	; (800c3c4 <prvHeapInit+0xac>)
 800c348:	4413      	add	r3, r2
 800c34a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c350:	4a1d      	ldr	r2, [pc, #116]	; (800c3c8 <prvHeapInit+0xb0>)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c356:	4b1c      	ldr	r3, [pc, #112]	; (800c3c8 <prvHeapInit+0xb0>)
 800c358:	2200      	movs	r2, #0
 800c35a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	4413      	add	r3, r2
 800c362:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c364:	2208      	movs	r2, #8
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	1a9b      	subs	r3, r3, r2
 800c36a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f023 0307 	bic.w	r3, r3, #7
 800c372:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	4a15      	ldr	r2, [pc, #84]	; (800c3cc <prvHeapInit+0xb4>)
 800c378:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c37a:	4b14      	ldr	r3, [pc, #80]	; (800c3cc <prvHeapInit+0xb4>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2200      	movs	r2, #0
 800c380:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c382:	4b12      	ldr	r3, [pc, #72]	; (800c3cc <prvHeapInit+0xb4>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2200      	movs	r2, #0
 800c388:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	1ad2      	subs	r2, r2, r3
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c398:	4b0c      	ldr	r3, [pc, #48]	; (800c3cc <prvHeapInit+0xb4>)
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	4a0a      	ldr	r2, [pc, #40]	; (800c3d0 <prvHeapInit+0xb8>)
 800c3a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	4a09      	ldr	r2, [pc, #36]	; (800c3d4 <prvHeapInit+0xbc>)
 800c3ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3b0:	4b09      	ldr	r3, [pc, #36]	; (800c3d8 <prvHeapInit+0xc0>)
 800c3b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c3b6:	601a      	str	r2, [r3, #0]
}
 800c3b8:	bf00      	nop
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bc80      	pop	{r7}
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	20001198 	.word	0x20001198
 800c3c8:	20001d98 	.word	0x20001d98
 800c3cc:	20001da0 	.word	0x20001da0
 800c3d0:	20001da8 	.word	0x20001da8
 800c3d4:	20001da4 	.word	0x20001da4
 800c3d8:	20001dac 	.word	0x20001dac

0800c3dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c3e4:	4b27      	ldr	r3, [pc, #156]	; (800c484 <prvInsertBlockIntoFreeList+0xa8>)
 800c3e6:	60fb      	str	r3, [r7, #12]
 800c3e8:	e002      	b.n	800c3f0 <prvInsertBlockIntoFreeList+0x14>
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	60fb      	str	r3, [r7, #12]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d8f7      	bhi.n	800c3ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	68ba      	ldr	r2, [r7, #8]
 800c404:	4413      	add	r3, r2
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d108      	bne.n	800c41e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	685a      	ldr	r2, [r3, #4]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	441a      	add	r2, r3
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	441a      	add	r2, r3
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d118      	bne.n	800c464 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	4b14      	ldr	r3, [pc, #80]	; (800c488 <prvInsertBlockIntoFreeList+0xac>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d00d      	beq.n	800c45a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	685a      	ldr	r2, [r3, #4]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	441a      	add	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	601a      	str	r2, [r3, #0]
 800c458:	e008      	b.n	800c46c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c45a:	4b0b      	ldr	r3, [pc, #44]	; (800c488 <prvInsertBlockIntoFreeList+0xac>)
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	601a      	str	r2, [r3, #0]
 800c462:	e003      	b.n	800c46c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	429a      	cmp	r2, r3
 800c472:	d002      	beq.n	800c47a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c47a:	bf00      	nop
 800c47c:	3714      	adds	r7, #20
 800c47e:	46bd      	mov	sp, r7
 800c480:	bc80      	pop	{r7}
 800c482:	4770      	bx	lr
 800c484:	20001d98 	.word	0x20001d98
 800c488:	20001da0 	.word	0x20001da0

0800c48c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c490:	2200      	movs	r2, #0
 800c492:	4912      	ldr	r1, [pc, #72]	; (800c4dc <MX_USB_DEVICE_Init+0x50>)
 800c494:	4812      	ldr	r0, [pc, #72]	; (800c4e0 <MX_USB_DEVICE_Init+0x54>)
 800c496:	f7fc fa59 	bl	800894c <USBD_Init>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d001      	beq.n	800c4a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c4a0:	f7f4 fe8e 	bl	80011c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c4a4:	490f      	ldr	r1, [pc, #60]	; (800c4e4 <MX_USB_DEVICE_Init+0x58>)
 800c4a6:	480e      	ldr	r0, [pc, #56]	; (800c4e0 <MX_USB_DEVICE_Init+0x54>)
 800c4a8:	f7fc fa7b 	bl	80089a2 <USBD_RegisterClass>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d001      	beq.n	800c4b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c4b2:	f7f4 fe85 	bl	80011c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c4b6:	490c      	ldr	r1, [pc, #48]	; (800c4e8 <MX_USB_DEVICE_Init+0x5c>)
 800c4b8:	4809      	ldr	r0, [pc, #36]	; (800c4e0 <MX_USB_DEVICE_Init+0x54>)
 800c4ba:	f7fc f9db 	bl	8008874 <USBD_CDC_RegisterInterface>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d001      	beq.n	800c4c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c4c4:	f7f4 fe7c 	bl	80011c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c4c8:	4805      	ldr	r0, [pc, #20]	; (800c4e0 <MX_USB_DEVICE_Init+0x54>)
 800c4ca:	f7fc fa83 	bl	80089d4 <USBD_Start>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d001      	beq.n	800c4d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c4d4:	f7f4 fe74 	bl	80011c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c4d8:	bf00      	nop
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	20000130 	.word	0x20000130
 800c4e0:	20001db0 	.word	0x20001db0
 800c4e4:	20000018 	.word	0x20000018
 800c4e8:	20000120 	.word	0x20000120

0800c4ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	4905      	ldr	r1, [pc, #20]	; (800c508 <CDC_Init_FS+0x1c>)
 800c4f4:	4805      	ldr	r0, [pc, #20]	; (800c50c <CDC_Init_FS+0x20>)
 800c4f6:	f7fc f9d3 	bl	80088a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c4fa:	4905      	ldr	r1, [pc, #20]	; (800c510 <CDC_Init_FS+0x24>)
 800c4fc:	4803      	ldr	r0, [pc, #12]	; (800c50c <CDC_Init_FS+0x20>)
 800c4fe:	f7fc f9e8 	bl	80088d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c502:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c504:	4618      	mov	r0, r3
 800c506:	bd80      	pop	{r7, pc}
 800c508:	20002474 	.word	0x20002474
 800c50c:	20001db0 	.word	0x20001db0
 800c510:	20002074 	.word	0x20002074

0800c514 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c514:	b480      	push	{r7}
 800c516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c518:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bc80      	pop	{r7}
 800c520:	4770      	bx	lr
	...

0800c524 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	6039      	str	r1, [r7, #0]
 800c52e:	71fb      	strb	r3, [r7, #7]
 800c530:	4613      	mov	r3, r2
 800c532:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c534:	79fb      	ldrb	r3, [r7, #7]
 800c536:	2b23      	cmp	r3, #35	; 0x23
 800c538:	d84a      	bhi.n	800c5d0 <CDC_Control_FS+0xac>
 800c53a:	a201      	add	r2, pc, #4	; (adr r2, 800c540 <CDC_Control_FS+0x1c>)
 800c53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c540:	0800c5d1 	.word	0x0800c5d1
 800c544:	0800c5d1 	.word	0x0800c5d1
 800c548:	0800c5d1 	.word	0x0800c5d1
 800c54c:	0800c5d1 	.word	0x0800c5d1
 800c550:	0800c5d1 	.word	0x0800c5d1
 800c554:	0800c5d1 	.word	0x0800c5d1
 800c558:	0800c5d1 	.word	0x0800c5d1
 800c55c:	0800c5d1 	.word	0x0800c5d1
 800c560:	0800c5d1 	.word	0x0800c5d1
 800c564:	0800c5d1 	.word	0x0800c5d1
 800c568:	0800c5d1 	.word	0x0800c5d1
 800c56c:	0800c5d1 	.word	0x0800c5d1
 800c570:	0800c5d1 	.word	0x0800c5d1
 800c574:	0800c5d1 	.word	0x0800c5d1
 800c578:	0800c5d1 	.word	0x0800c5d1
 800c57c:	0800c5d1 	.word	0x0800c5d1
 800c580:	0800c5d1 	.word	0x0800c5d1
 800c584:	0800c5d1 	.word	0x0800c5d1
 800c588:	0800c5d1 	.word	0x0800c5d1
 800c58c:	0800c5d1 	.word	0x0800c5d1
 800c590:	0800c5d1 	.word	0x0800c5d1
 800c594:	0800c5d1 	.word	0x0800c5d1
 800c598:	0800c5d1 	.word	0x0800c5d1
 800c59c:	0800c5d1 	.word	0x0800c5d1
 800c5a0:	0800c5d1 	.word	0x0800c5d1
 800c5a4:	0800c5d1 	.word	0x0800c5d1
 800c5a8:	0800c5d1 	.word	0x0800c5d1
 800c5ac:	0800c5d1 	.word	0x0800c5d1
 800c5b0:	0800c5d1 	.word	0x0800c5d1
 800c5b4:	0800c5d1 	.word	0x0800c5d1
 800c5b8:	0800c5d1 	.word	0x0800c5d1
 800c5bc:	0800c5d1 	.word	0x0800c5d1
 800c5c0:	0800c5d1 	.word	0x0800c5d1
 800c5c4:	0800c5d1 	.word	0x0800c5d1
 800c5c8:	0800c5d1 	.word	0x0800c5d1
 800c5cc:	0800c5d1 	.word	0x0800c5d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c5d0:	bf00      	nop
  }

  return (USBD_OK);
 800c5d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bc80      	pop	{r7}
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop

0800c5e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c5ea:	6879      	ldr	r1, [r7, #4]
 800c5ec:	4805      	ldr	r0, [pc, #20]	; (800c604 <CDC_Receive_FS+0x24>)
 800c5ee:	f7fc f970 	bl	80088d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c5f2:	4804      	ldr	r0, [pc, #16]	; (800c604 <CDC_Receive_FS+0x24>)
 800c5f4:	f7fc f980 	bl	80088f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c5f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	20001db0 	.word	0x20001db0

0800c608 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	4603      	mov	r3, r0
 800c610:	6039      	str	r1, [r7, #0]
 800c612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	2212      	movs	r2, #18
 800c618:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c61a:	4b03      	ldr	r3, [pc, #12]	; (800c628 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	bc80      	pop	{r7}
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	2000014c 	.word	0x2000014c

0800c62c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	4603      	mov	r3, r0
 800c634:	6039      	str	r1, [r7, #0]
 800c636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	2204      	movs	r2, #4
 800c63c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c63e:	4b03      	ldr	r3, [pc, #12]	; (800c64c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c640:	4618      	mov	r0, r3
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	bc80      	pop	{r7}
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	20000160 	.word	0x20000160

0800c650 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	4603      	mov	r3, r0
 800c658:	6039      	str	r1, [r7, #0]
 800c65a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c65c:	79fb      	ldrb	r3, [r7, #7]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d105      	bne.n	800c66e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c662:	683a      	ldr	r2, [r7, #0]
 800c664:	4907      	ldr	r1, [pc, #28]	; (800c684 <USBD_FS_ProductStrDescriptor+0x34>)
 800c666:	4808      	ldr	r0, [pc, #32]	; (800c688 <USBD_FS_ProductStrDescriptor+0x38>)
 800c668:	f7fd f92c 	bl	80098c4 <USBD_GetString>
 800c66c:	e004      	b.n	800c678 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	4904      	ldr	r1, [pc, #16]	; (800c684 <USBD_FS_ProductStrDescriptor+0x34>)
 800c672:	4805      	ldr	r0, [pc, #20]	; (800c688 <USBD_FS_ProductStrDescriptor+0x38>)
 800c674:	f7fd f926 	bl	80098c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c678:	4b02      	ldr	r3, [pc, #8]	; (800c684 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	20002874 	.word	0x20002874
 800c688:	0800cf94 	.word	0x0800cf94

0800c68c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	4603      	mov	r3, r0
 800c694:	6039      	str	r1, [r7, #0]
 800c696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c698:	683a      	ldr	r2, [r7, #0]
 800c69a:	4904      	ldr	r1, [pc, #16]	; (800c6ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c69c:	4804      	ldr	r0, [pc, #16]	; (800c6b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c69e:	f7fd f911 	bl	80098c4 <USBD_GetString>
  return USBD_StrDesc;
 800c6a2:	4b02      	ldr	r3, [pc, #8]	; (800c6ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3708      	adds	r7, #8
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	20002874 	.word	0x20002874
 800c6b0:	0800cfac 	.word	0x0800cfac

0800c6b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	6039      	str	r1, [r7, #0]
 800c6be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	221a      	movs	r2, #26
 800c6c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c6c6:	f000 f843 	bl	800c750 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c6ca:	4b02      	ldr	r3, [pc, #8]	; (800c6d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	20000164 	.word	0x20000164

0800c6d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	4603      	mov	r3, r0
 800c6e0:	6039      	str	r1, [r7, #0]
 800c6e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c6e4:	79fb      	ldrb	r3, [r7, #7]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d105      	bne.n	800c6f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	4907      	ldr	r1, [pc, #28]	; (800c70c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6ee:	4808      	ldr	r0, [pc, #32]	; (800c710 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6f0:	f7fd f8e8 	bl	80098c4 <USBD_GetString>
 800c6f4:	e004      	b.n	800c700 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	4904      	ldr	r1, [pc, #16]	; (800c70c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6fa:	4805      	ldr	r0, [pc, #20]	; (800c710 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6fc:	f7fd f8e2 	bl	80098c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c700:	4b02      	ldr	r3, [pc, #8]	; (800c70c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c702:	4618      	mov	r0, r3
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	20002874 	.word	0x20002874
 800c710:	0800cfc0 	.word	0x0800cfc0

0800c714 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	4603      	mov	r3, r0
 800c71c:	6039      	str	r1, [r7, #0]
 800c71e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c720:	79fb      	ldrb	r3, [r7, #7]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d105      	bne.n	800c732 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c726:	683a      	ldr	r2, [r7, #0]
 800c728:	4907      	ldr	r1, [pc, #28]	; (800c748 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c72a:	4808      	ldr	r0, [pc, #32]	; (800c74c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c72c:	f7fd f8ca 	bl	80098c4 <USBD_GetString>
 800c730:	e004      	b.n	800c73c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c732:	683a      	ldr	r2, [r7, #0]
 800c734:	4904      	ldr	r1, [pc, #16]	; (800c748 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c736:	4805      	ldr	r0, [pc, #20]	; (800c74c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c738:	f7fd f8c4 	bl	80098c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c73c:	4b02      	ldr	r3, [pc, #8]	; (800c748 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	20002874 	.word	0x20002874
 800c74c:	0800cfcc 	.word	0x0800cfcc

0800c750 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c756:	4b0f      	ldr	r3, [pc, #60]	; (800c794 <Get_SerialNum+0x44>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c75c:	4b0e      	ldr	r3, [pc, #56]	; (800c798 <Get_SerialNum+0x48>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c762:	4b0e      	ldr	r3, [pc, #56]	; (800c79c <Get_SerialNum+0x4c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4413      	add	r3, r2
 800c76e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d009      	beq.n	800c78a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c776:	2208      	movs	r2, #8
 800c778:	4909      	ldr	r1, [pc, #36]	; (800c7a0 <Get_SerialNum+0x50>)
 800c77a:	68f8      	ldr	r0, [r7, #12]
 800c77c:	f000 f814 	bl	800c7a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c780:	2204      	movs	r2, #4
 800c782:	4908      	ldr	r1, [pc, #32]	; (800c7a4 <Get_SerialNum+0x54>)
 800c784:	68b8      	ldr	r0, [r7, #8]
 800c786:	f000 f80f 	bl	800c7a8 <IntToUnicode>
  }
}
 800c78a:	bf00      	nop
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	1ffff7e8 	.word	0x1ffff7e8
 800c798:	1ffff7ec 	.word	0x1ffff7ec
 800c79c:	1ffff7f0 	.word	0x1ffff7f0
 800c7a0:	20000166 	.word	0x20000166
 800c7a4:	20000176 	.word	0x20000176

0800c7a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b087      	sub	sp, #28
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	75fb      	strb	r3, [r7, #23]
 800c7be:	e027      	b.n	800c810 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	0f1b      	lsrs	r3, r3, #28
 800c7c4:	2b09      	cmp	r3, #9
 800c7c6:	d80b      	bhi.n	800c7e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	0f1b      	lsrs	r3, r3, #28
 800c7cc:	b2da      	uxtb	r2, r3
 800c7ce:	7dfb      	ldrb	r3, [r7, #23]
 800c7d0:	005b      	lsls	r3, r3, #1
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	440b      	add	r3, r1
 800c7d8:	3230      	adds	r2, #48	; 0x30
 800c7da:	b2d2      	uxtb	r2, r2
 800c7dc:	701a      	strb	r2, [r3, #0]
 800c7de:	e00a      	b.n	800c7f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	0f1b      	lsrs	r3, r3, #28
 800c7e4:	b2da      	uxtb	r2, r3
 800c7e6:	7dfb      	ldrb	r3, [r7, #23]
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	440b      	add	r3, r1
 800c7f0:	3237      	adds	r2, #55	; 0x37
 800c7f2:	b2d2      	uxtb	r2, r2
 800c7f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	011b      	lsls	r3, r3, #4
 800c7fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c7fc:	7dfb      	ldrb	r3, [r7, #23]
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	3301      	adds	r3, #1
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	4413      	add	r3, r2
 800c806:	2200      	movs	r2, #0
 800c808:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c80a:	7dfb      	ldrb	r3, [r7, #23]
 800c80c:	3301      	adds	r3, #1
 800c80e:	75fb      	strb	r3, [r7, #23]
 800c810:	7dfa      	ldrb	r2, [r7, #23]
 800c812:	79fb      	ldrb	r3, [r7, #7]
 800c814:	429a      	cmp	r2, r3
 800c816:	d3d3      	bcc.n	800c7c0 <IntToUnicode+0x18>
  }
}
 800c818:	bf00      	nop
 800c81a:	bf00      	nop
 800c81c:	371c      	adds	r7, #28
 800c81e:	46bd      	mov	sp, r7
 800c820:	bc80      	pop	{r7}
 800c822:	4770      	bx	lr

0800c824 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a0d      	ldr	r2, [pc, #52]	; (800c868 <HAL_PCD_MspInit+0x44>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d113      	bne.n	800c85e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c836:	4b0d      	ldr	r3, [pc, #52]	; (800c86c <HAL_PCD_MspInit+0x48>)
 800c838:	69db      	ldr	r3, [r3, #28]
 800c83a:	4a0c      	ldr	r2, [pc, #48]	; (800c86c <HAL_PCD_MspInit+0x48>)
 800c83c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c840:	61d3      	str	r3, [r2, #28]
 800c842:	4b0a      	ldr	r3, [pc, #40]	; (800c86c <HAL_PCD_MspInit+0x48>)
 800c844:	69db      	ldr	r3, [r3, #28]
 800c846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c84a:	60fb      	str	r3, [r7, #12]
 800c84c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800c84e:	2200      	movs	r2, #0
 800c850:	2105      	movs	r1, #5
 800c852:	2014      	movs	r0, #20
 800c854:	f7f5 fca9 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c858:	2014      	movs	r0, #20
 800c85a:	f7f5 fcc2 	bl	80021e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c85e:	bf00      	nop
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	40005c00 	.word	0x40005c00
 800c86c:	40021000 	.word	0x40021000

0800c870 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c884:	4619      	mov	r1, r3
 800c886:	4610      	mov	r0, r2
 800c888:	f7fc f8ec 	bl	8008a64 <USBD_LL_SetupStage>
}
 800c88c:	bf00      	nop
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	460b      	mov	r3, r1
 800c89e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800c8a6:	78fa      	ldrb	r2, [r7, #3]
 800c8a8:	6879      	ldr	r1, [r7, #4]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	4413      	add	r3, r2
 800c8b0:	00db      	lsls	r3, r3, #3
 800c8b2:	440b      	add	r3, r1
 800c8b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	78fb      	ldrb	r3, [r7, #3]
 800c8bc:	4619      	mov	r1, r3
 800c8be:	f7fc f91e 	bl	8008afe <USBD_LL_DataOutStage>
}
 800c8c2:	bf00      	nop
 800c8c4:	3708      	adds	r7, #8
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b082      	sub	sp, #8
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800c8dc:	78fa      	ldrb	r2, [r7, #3]
 800c8de:	6879      	ldr	r1, [r7, #4]
 800c8e0:	4613      	mov	r3, r2
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	4413      	add	r3, r2
 800c8e6:	00db      	lsls	r3, r3, #3
 800c8e8:	440b      	add	r3, r1
 800c8ea:	333c      	adds	r3, #60	; 0x3c
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	78fb      	ldrb	r3, [r7, #3]
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	f7fc f975 	bl	8008be0 <USBD_LL_DataInStage>
}
 800c8f6:	bf00      	nop
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b082      	sub	sp, #8
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fc fa85 	bl	8008e1c <USBD_LL_SOF>
}
 800c912:	bf00      	nop
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b084      	sub	sp, #16
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c922:	2301      	movs	r3, #1
 800c924:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	2b02      	cmp	r3, #2
 800c92c:	d001      	beq.n	800c932 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c92e:	f7f4 fc47 	bl	80011c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800c938:	7bfa      	ldrb	r2, [r7, #15]
 800c93a:	4611      	mov	r1, r2
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7fc fa35 	bl	8008dac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fc f9ee 	bl	8008d2a <USBD_LL_Reset>
}
 800c94e:	bf00      	nop
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
	...

0800c958 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800c966:	4618      	mov	r0, r3
 800c968:	f7fc fa2f 	bl	8008dca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d005      	beq.n	800c980 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c974:	4b04      	ldr	r3, [pc, #16]	; (800c988 <HAL_PCD_SuspendCallback+0x30>)
 800c976:	691b      	ldr	r3, [r3, #16]
 800c978:	4a03      	ldr	r2, [pc, #12]	; (800c988 <HAL_PCD_SuspendCallback+0x30>)
 800c97a:	f043 0306 	orr.w	r3, r3, #6
 800c97e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c980:	bf00      	nop
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	e000ed00 	.word	0xe000ed00

0800c98c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fc fa29 	bl	8008df2 <USBD_LL_Resume>
}
 800c9a0:	bf00      	nop
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c9b0:	4a28      	ldr	r2, [pc, #160]	; (800ca54 <USBD_LL_Init+0xac>)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a26      	ldr	r2, [pc, #152]	; (800ca54 <USBD_LL_Init+0xac>)
 800c9bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c9c0:	4b24      	ldr	r3, [pc, #144]	; (800ca54 <USBD_LL_Init+0xac>)
 800c9c2:	4a25      	ldr	r2, [pc, #148]	; (800ca58 <USBD_LL_Init+0xb0>)
 800c9c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c9c6:	4b23      	ldr	r3, [pc, #140]	; (800ca54 <USBD_LL_Init+0xac>)
 800c9c8:	2208      	movs	r2, #8
 800c9ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c9cc:	4b21      	ldr	r3, [pc, #132]	; (800ca54 <USBD_LL_Init+0xac>)
 800c9ce:	2202      	movs	r2, #2
 800c9d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c9d2:	4b20      	ldr	r3, [pc, #128]	; (800ca54 <USBD_LL_Init+0xac>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c9d8:	4b1e      	ldr	r3, [pc, #120]	; (800ca54 <USBD_LL_Init+0xac>)
 800c9da:	2200      	movs	r2, #0
 800c9dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c9de:	4b1d      	ldr	r3, [pc, #116]	; (800ca54 <USBD_LL_Init+0xac>)
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c9e4:	481b      	ldr	r0, [pc, #108]	; (800ca54 <USBD_LL_Init+0xac>)
 800c9e6:	f7f5 ff1b 	bl	8002820 <HAL_PCD_Init>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d001      	beq.n	800c9f4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c9f0:	f7f4 fbe6 	bl	80011c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9fa:	2318      	movs	r3, #24
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	2100      	movs	r1, #0
 800ca00:	f7f7 fc3a 	bl	8004278 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca0a:	2358      	movs	r3, #88	; 0x58
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	2180      	movs	r1, #128	; 0x80
 800ca10:	f7f7 fc32 	bl	8004278 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca1a:	23c0      	movs	r3, #192	; 0xc0
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	2181      	movs	r1, #129	; 0x81
 800ca20:	f7f7 fc2a 	bl	8004278 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca2a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ca2e:	2200      	movs	r2, #0
 800ca30:	2101      	movs	r1, #1
 800ca32:	f7f7 fc21 	bl	8004278 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca40:	2200      	movs	r2, #0
 800ca42:	2182      	movs	r1, #130	; 0x82
 800ca44:	f7f7 fc18 	bl	8004278 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	20002a74 	.word	0x20002a74
 800ca58:	40005c00 	.word	0x40005c00

0800ca5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca64:	2300      	movs	r3, #0
 800ca66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7f5 ffd3 	bl	8002a1e <HAL_PCD_Start>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 f94e 	bl	800cd20 <USBD_Get_USB_Status>
 800ca84:	4603      	mov	r3, r0
 800ca86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b084      	sub	sp, #16
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
 800ca9a:	4608      	mov	r0, r1
 800ca9c:	4611      	mov	r1, r2
 800ca9e:	461a      	mov	r2, r3
 800caa0:	4603      	mov	r3, r0
 800caa2:	70fb      	strb	r3, [r7, #3]
 800caa4:	460b      	mov	r3, r1
 800caa6:	70bb      	strb	r3, [r7, #2]
 800caa8:	4613      	mov	r3, r2
 800caaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caac:	2300      	movs	r3, #0
 800caae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cab0:	2300      	movs	r3, #0
 800cab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800caba:	78bb      	ldrb	r3, [r7, #2]
 800cabc:	883a      	ldrh	r2, [r7, #0]
 800cabe:	78f9      	ldrb	r1, [r7, #3]
 800cac0:	f7f6 f928 	bl	8002d14 <HAL_PCD_EP_Open>
 800cac4:	4603      	mov	r3, r0
 800cac6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cac8:	7bfb      	ldrb	r3, [r7, #15]
 800caca:	4618      	mov	r0, r3
 800cacc:	f000 f928 	bl	800cd20 <USBD_Get_USB_Status>
 800cad0:	4603      	mov	r3, r0
 800cad2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cad4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b084      	sub	sp, #16
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
 800cae6:	460b      	mov	r3, r1
 800cae8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caea:	2300      	movs	r3, #0
 800caec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caee:	2300      	movs	r3, #0
 800caf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800caf8:	78fa      	ldrb	r2, [r7, #3]
 800cafa:	4611      	mov	r1, r2
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7f6 f966 	bl	8002dce <HAL_PCD_EP_Close>
 800cb02:	4603      	mov	r3, r0
 800cb04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb06:	7bfb      	ldrb	r3, [r7, #15]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f000 f909 	bl	800cd20 <USBD_Get_USB_Status>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb12:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	460b      	mov	r3, r1
 800cb26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb36:	78fa      	ldrb	r2, [r7, #3]
 800cb38:	4611      	mov	r1, r2
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7f6 fa0e 	bl	8002f5c <HAL_PCD_EP_SetStall>
 800cb40:	4603      	mov	r3, r0
 800cb42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb44:	7bfb      	ldrb	r3, [r7, #15]
 800cb46:	4618      	mov	r0, r3
 800cb48:	f000 f8ea 	bl	800cd20 <USBD_Get_USB_Status>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb50:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b084      	sub	sp, #16
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
 800cb62:	460b      	mov	r3, r1
 800cb64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb66:	2300      	movs	r3, #0
 800cb68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb74:	78fa      	ldrb	r2, [r7, #3]
 800cb76:	4611      	mov	r1, r2
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7f6 fa4f 	bl	800301c <HAL_PCD_EP_ClrStall>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb82:	7bfb      	ldrb	r3, [r7, #15]
 800cb84:	4618      	mov	r0, r3
 800cb86:	f000 f8cb 	bl	800cd20 <USBD_Get_USB_Status>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3710      	adds	r7, #16
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	460b      	mov	r3, r1
 800cba2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cbac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	da0c      	bge.n	800cbce <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cbb4:	78fb      	ldrb	r3, [r7, #3]
 800cbb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbba:	68f9      	ldr	r1, [r7, #12]
 800cbbc:	1c5a      	adds	r2, r3, #1
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	00db      	lsls	r3, r3, #3
 800cbc6:	440b      	add	r3, r1
 800cbc8:	3302      	adds	r3, #2
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	e00b      	b.n	800cbe6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cbce:	78fb      	ldrb	r3, [r7, #3]
 800cbd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbd4:	68f9      	ldr	r1, [r7, #12]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	4413      	add	r3, r2
 800cbdc:	00db      	lsls	r3, r3, #3
 800cbde:	440b      	add	r3, r1
 800cbe0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cbe4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3714      	adds	r7, #20
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bc80      	pop	{r7}
 800cbee:	4770      	bx	lr

0800cbf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc00:	2300      	movs	r3, #0
 800cc02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc0a:	78fa      	ldrb	r2, [r7, #3]
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7f6 f85b 	bl	8002cca <HAL_PCD_SetAddress>
 800cc14:	4603      	mov	r3, r0
 800cc16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f000 f880 	bl	800cd20 <USBD_Get_USB_Status>
 800cc20:	4603      	mov	r3, r0
 800cc22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b086      	sub	sp, #24
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	60f8      	str	r0, [r7, #12]
 800cc36:	607a      	str	r2, [r7, #4]
 800cc38:	461a      	mov	r2, r3
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	72fb      	strb	r3, [r7, #11]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc42:	2300      	movs	r3, #0
 800cc44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc46:	2300      	movs	r3, #0
 800cc48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cc50:	893b      	ldrh	r3, [r7, #8]
 800cc52:	7af9      	ldrb	r1, [r7, #11]
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	f7f6 f94a 	bl	8002eee <HAL_PCD_EP_Transmit>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc5e:	7dfb      	ldrb	r3, [r7, #23]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f000 f85d 	bl	800cd20 <USBD_Get_USB_Status>
 800cc66:	4603      	mov	r3, r0
 800cc68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc6a:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	607a      	str	r2, [r7, #4]
 800cc7e:	461a      	mov	r2, r3
 800cc80:	460b      	mov	r3, r1
 800cc82:	72fb      	strb	r3, [r7, #11]
 800cc84:	4613      	mov	r3, r2
 800cc86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cc96:	893b      	ldrh	r3, [r7, #8]
 800cc98:	7af9      	ldrb	r1, [r7, #11]
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	f7f6 f8df 	bl	8002e5e <HAL_PCD_EP_Receive>
 800cca0:	4603      	mov	r3, r0
 800cca2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cca4:	7dfb      	ldrb	r3, [r7, #23]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 f83a 	bl	800cd20 <USBD_Get_USB_Status>
 800ccac:	4603      	mov	r3, r0
 800ccae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ccb0:	7dbb      	ldrb	r3, [r7, #22]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3718      	adds	r7, #24
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b082      	sub	sp, #8
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cccc:	78fa      	ldrb	r2, [r7, #3]
 800ccce:	4611      	mov	r1, r2
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7f6 f8f5 	bl	8002ec0 <HAL_PCD_EP_GetRxCount>
 800ccd6:	4603      	mov	r3, r0
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3708      	adds	r7, #8
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b083      	sub	sp, #12
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cce8:	4b02      	ldr	r3, [pc, #8]	; (800ccf4 <USBD_static_malloc+0x14>)
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	370c      	adds	r7, #12
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bc80      	pop	{r7}
 800ccf2:	4770      	bx	lr
 800ccf4:	20002d64 	.word	0x20002d64

0800ccf8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]

}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bc80      	pop	{r7}
 800cd08:	4770      	bx	lr

0800cd0a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd0a:	b480      	push	{r7}
 800cd0c:	b083      	sub	sp, #12
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
 800cd12:	460b      	mov	r3, r1
 800cd14:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cd16:	bf00      	nop
 800cd18:	370c      	adds	r7, #12
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bc80      	pop	{r7}
 800cd1e:	4770      	bx	lr

0800cd20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	4603      	mov	r3, r0
 800cd28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cd2e:	79fb      	ldrb	r3, [r7, #7]
 800cd30:	2b03      	cmp	r3, #3
 800cd32:	d817      	bhi.n	800cd64 <USBD_Get_USB_Status+0x44>
 800cd34:	a201      	add	r2, pc, #4	; (adr r2, 800cd3c <USBD_Get_USB_Status+0x1c>)
 800cd36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd3a:	bf00      	nop
 800cd3c:	0800cd4d 	.word	0x0800cd4d
 800cd40:	0800cd53 	.word	0x0800cd53
 800cd44:	0800cd59 	.word	0x0800cd59
 800cd48:	0800cd5f 	.word	0x0800cd5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd50:	e00b      	b.n	800cd6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd52:	2302      	movs	r3, #2
 800cd54:	73fb      	strb	r3, [r7, #15]
    break;
 800cd56:	e008      	b.n	800cd6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd5c:	e005      	b.n	800cd6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd5e:	2302      	movs	r3, #2
 800cd60:	73fb      	strb	r3, [r7, #15]
    break;
 800cd62:	e002      	b.n	800cd6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cd64:	2302      	movs	r3, #2
 800cd66:	73fb      	strb	r3, [r7, #15]
    break;
 800cd68:	bf00      	nop
  }
  return usb_status;
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3714      	adds	r7, #20
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bc80      	pop	{r7}
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop

0800cd78 <memset>:
 800cd78:	4603      	mov	r3, r0
 800cd7a:	4402      	add	r2, r0
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d100      	bne.n	800cd82 <memset+0xa>
 800cd80:	4770      	bx	lr
 800cd82:	f803 1b01 	strb.w	r1, [r3], #1
 800cd86:	e7f9      	b.n	800cd7c <memset+0x4>

0800cd88 <_reclaim_reent>:
 800cd88:	4b29      	ldr	r3, [pc, #164]	; (800ce30 <_reclaim_reent+0xa8>)
 800cd8a:	b570      	push	{r4, r5, r6, lr}
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4604      	mov	r4, r0
 800cd90:	4283      	cmp	r3, r0
 800cd92:	d04b      	beq.n	800ce2c <_reclaim_reent+0xa4>
 800cd94:	69c3      	ldr	r3, [r0, #28]
 800cd96:	b143      	cbz	r3, 800cdaa <_reclaim_reent+0x22>
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d144      	bne.n	800ce28 <_reclaim_reent+0xa0>
 800cd9e:	69e3      	ldr	r3, [r4, #28]
 800cda0:	6819      	ldr	r1, [r3, #0]
 800cda2:	b111      	cbz	r1, 800cdaa <_reclaim_reent+0x22>
 800cda4:	4620      	mov	r0, r4
 800cda6:	f000 f879 	bl	800ce9c <_free_r>
 800cdaa:	6961      	ldr	r1, [r4, #20]
 800cdac:	b111      	cbz	r1, 800cdb4 <_reclaim_reent+0x2c>
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f000 f874 	bl	800ce9c <_free_r>
 800cdb4:	69e1      	ldr	r1, [r4, #28]
 800cdb6:	b111      	cbz	r1, 800cdbe <_reclaim_reent+0x36>
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f000 f86f 	bl	800ce9c <_free_r>
 800cdbe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cdc0:	b111      	cbz	r1, 800cdc8 <_reclaim_reent+0x40>
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f000 f86a 	bl	800ce9c <_free_r>
 800cdc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdca:	b111      	cbz	r1, 800cdd2 <_reclaim_reent+0x4a>
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f000 f865 	bl	800ce9c <_free_r>
 800cdd2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cdd4:	b111      	cbz	r1, 800cddc <_reclaim_reent+0x54>
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f000 f860 	bl	800ce9c <_free_r>
 800cddc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cdde:	b111      	cbz	r1, 800cde6 <_reclaim_reent+0x5e>
 800cde0:	4620      	mov	r0, r4
 800cde2:	f000 f85b 	bl	800ce9c <_free_r>
 800cde6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cde8:	b111      	cbz	r1, 800cdf0 <_reclaim_reent+0x68>
 800cdea:	4620      	mov	r0, r4
 800cdec:	f000 f856 	bl	800ce9c <_free_r>
 800cdf0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cdf2:	b111      	cbz	r1, 800cdfa <_reclaim_reent+0x72>
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	f000 f851 	bl	800ce9c <_free_r>
 800cdfa:	6a23      	ldr	r3, [r4, #32]
 800cdfc:	b1b3      	cbz	r3, 800ce2c <_reclaim_reent+0xa4>
 800cdfe:	4620      	mov	r0, r4
 800ce00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce04:	4718      	bx	r3
 800ce06:	5949      	ldr	r1, [r1, r5]
 800ce08:	b941      	cbnz	r1, 800ce1c <_reclaim_reent+0x94>
 800ce0a:	3504      	adds	r5, #4
 800ce0c:	69e3      	ldr	r3, [r4, #28]
 800ce0e:	2d80      	cmp	r5, #128	; 0x80
 800ce10:	68d9      	ldr	r1, [r3, #12]
 800ce12:	d1f8      	bne.n	800ce06 <_reclaim_reent+0x7e>
 800ce14:	4620      	mov	r0, r4
 800ce16:	f000 f841 	bl	800ce9c <_free_r>
 800ce1a:	e7c0      	b.n	800cd9e <_reclaim_reent+0x16>
 800ce1c:	680e      	ldr	r6, [r1, #0]
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f000 f83c 	bl	800ce9c <_free_r>
 800ce24:	4631      	mov	r1, r6
 800ce26:	e7ef      	b.n	800ce08 <_reclaim_reent+0x80>
 800ce28:	2500      	movs	r5, #0
 800ce2a:	e7ef      	b.n	800ce0c <_reclaim_reent+0x84>
 800ce2c:	bd70      	pop	{r4, r5, r6, pc}
 800ce2e:	bf00      	nop
 800ce30:	200001cc 	.word	0x200001cc

0800ce34 <__libc_init_array>:
 800ce34:	b570      	push	{r4, r5, r6, lr}
 800ce36:	2600      	movs	r6, #0
 800ce38:	4d0c      	ldr	r5, [pc, #48]	; (800ce6c <__libc_init_array+0x38>)
 800ce3a:	4c0d      	ldr	r4, [pc, #52]	; (800ce70 <__libc_init_array+0x3c>)
 800ce3c:	1b64      	subs	r4, r4, r5
 800ce3e:	10a4      	asrs	r4, r4, #2
 800ce40:	42a6      	cmp	r6, r4
 800ce42:	d109      	bne.n	800ce58 <__libc_init_array+0x24>
 800ce44:	f000 f87e 	bl	800cf44 <_init>
 800ce48:	2600      	movs	r6, #0
 800ce4a:	4d0a      	ldr	r5, [pc, #40]	; (800ce74 <__libc_init_array+0x40>)
 800ce4c:	4c0a      	ldr	r4, [pc, #40]	; (800ce78 <__libc_init_array+0x44>)
 800ce4e:	1b64      	subs	r4, r4, r5
 800ce50:	10a4      	asrs	r4, r4, #2
 800ce52:	42a6      	cmp	r6, r4
 800ce54:	d105      	bne.n	800ce62 <__libc_init_array+0x2e>
 800ce56:	bd70      	pop	{r4, r5, r6, pc}
 800ce58:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce5c:	4798      	blx	r3
 800ce5e:	3601      	adds	r6, #1
 800ce60:	e7ee      	b.n	800ce40 <__libc_init_array+0xc>
 800ce62:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce66:	4798      	blx	r3
 800ce68:	3601      	adds	r6, #1
 800ce6a:	e7f2      	b.n	800ce52 <__libc_init_array+0x1e>
 800ce6c:	0800d064 	.word	0x0800d064
 800ce70:	0800d064 	.word	0x0800d064
 800ce74:	0800d064 	.word	0x0800d064
 800ce78:	0800d068 	.word	0x0800d068

0800ce7c <__retarget_lock_acquire_recursive>:
 800ce7c:	4770      	bx	lr

0800ce7e <__retarget_lock_release_recursive>:
 800ce7e:	4770      	bx	lr

0800ce80 <memcpy>:
 800ce80:	440a      	add	r2, r1
 800ce82:	4291      	cmp	r1, r2
 800ce84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce88:	d100      	bne.n	800ce8c <memcpy+0xc>
 800ce8a:	4770      	bx	lr
 800ce8c:	b510      	push	{r4, lr}
 800ce8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce92:	4291      	cmp	r1, r2
 800ce94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce98:	d1f9      	bne.n	800ce8e <memcpy+0xe>
 800ce9a:	bd10      	pop	{r4, pc}

0800ce9c <_free_r>:
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	4605      	mov	r5, r0
 800cea0:	2900      	cmp	r1, #0
 800cea2:	d040      	beq.n	800cf26 <_free_r+0x8a>
 800cea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cea8:	1f0c      	subs	r4, r1, #4
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	bfb8      	it	lt
 800ceae:	18e4      	addlt	r4, r4, r3
 800ceb0:	f000 f83c 	bl	800cf2c <__malloc_lock>
 800ceb4:	4a1c      	ldr	r2, [pc, #112]	; (800cf28 <_free_r+0x8c>)
 800ceb6:	6813      	ldr	r3, [r2, #0]
 800ceb8:	b933      	cbnz	r3, 800cec8 <_free_r+0x2c>
 800ceba:	6063      	str	r3, [r4, #4]
 800cebc:	6014      	str	r4, [r2, #0]
 800cebe:	4628      	mov	r0, r5
 800cec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cec4:	f000 b838 	b.w	800cf38 <__malloc_unlock>
 800cec8:	42a3      	cmp	r3, r4
 800ceca:	d908      	bls.n	800cede <_free_r+0x42>
 800cecc:	6820      	ldr	r0, [r4, #0]
 800cece:	1821      	adds	r1, r4, r0
 800ced0:	428b      	cmp	r3, r1
 800ced2:	bf01      	itttt	eq
 800ced4:	6819      	ldreq	r1, [r3, #0]
 800ced6:	685b      	ldreq	r3, [r3, #4]
 800ced8:	1809      	addeq	r1, r1, r0
 800ceda:	6021      	streq	r1, [r4, #0]
 800cedc:	e7ed      	b.n	800ceba <_free_r+0x1e>
 800cede:	461a      	mov	r2, r3
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	b10b      	cbz	r3, 800cee8 <_free_r+0x4c>
 800cee4:	42a3      	cmp	r3, r4
 800cee6:	d9fa      	bls.n	800cede <_free_r+0x42>
 800cee8:	6811      	ldr	r1, [r2, #0]
 800ceea:	1850      	adds	r0, r2, r1
 800ceec:	42a0      	cmp	r0, r4
 800ceee:	d10b      	bne.n	800cf08 <_free_r+0x6c>
 800cef0:	6820      	ldr	r0, [r4, #0]
 800cef2:	4401      	add	r1, r0
 800cef4:	1850      	adds	r0, r2, r1
 800cef6:	4283      	cmp	r3, r0
 800cef8:	6011      	str	r1, [r2, #0]
 800cefa:	d1e0      	bne.n	800cebe <_free_r+0x22>
 800cefc:	6818      	ldr	r0, [r3, #0]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	4408      	add	r0, r1
 800cf02:	6010      	str	r0, [r2, #0]
 800cf04:	6053      	str	r3, [r2, #4]
 800cf06:	e7da      	b.n	800cebe <_free_r+0x22>
 800cf08:	d902      	bls.n	800cf10 <_free_r+0x74>
 800cf0a:	230c      	movs	r3, #12
 800cf0c:	602b      	str	r3, [r5, #0]
 800cf0e:	e7d6      	b.n	800cebe <_free_r+0x22>
 800cf10:	6820      	ldr	r0, [r4, #0]
 800cf12:	1821      	adds	r1, r4, r0
 800cf14:	428b      	cmp	r3, r1
 800cf16:	bf01      	itttt	eq
 800cf18:	6819      	ldreq	r1, [r3, #0]
 800cf1a:	685b      	ldreq	r3, [r3, #4]
 800cf1c:	1809      	addeq	r1, r1, r0
 800cf1e:	6021      	streq	r1, [r4, #0]
 800cf20:	6063      	str	r3, [r4, #4]
 800cf22:	6054      	str	r4, [r2, #4]
 800cf24:	e7cb      	b.n	800cebe <_free_r+0x22>
 800cf26:	bd38      	pop	{r3, r4, r5, pc}
 800cf28:	200030c0 	.word	0x200030c0

0800cf2c <__malloc_lock>:
 800cf2c:	4801      	ldr	r0, [pc, #4]	; (800cf34 <__malloc_lock+0x8>)
 800cf2e:	f7ff bfa5 	b.w	800ce7c <__retarget_lock_acquire_recursive>
 800cf32:	bf00      	nop
 800cf34:	200030bc 	.word	0x200030bc

0800cf38 <__malloc_unlock>:
 800cf38:	4801      	ldr	r0, [pc, #4]	; (800cf40 <__malloc_unlock+0x8>)
 800cf3a:	f7ff bfa0 	b.w	800ce7e <__retarget_lock_release_recursive>
 800cf3e:	bf00      	nop
 800cf40:	200030bc 	.word	0x200030bc

0800cf44 <_init>:
 800cf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf46:	bf00      	nop
 800cf48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf4a:	bc08      	pop	{r3}
 800cf4c:	469e      	mov	lr, r3
 800cf4e:	4770      	bx	lr

0800cf50 <_fini>:
 800cf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf52:	bf00      	nop
 800cf54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf56:	bc08      	pop	{r3}
 800cf58:	469e      	mov	lr, r3
 800cf5a:	4770      	bx	lr
