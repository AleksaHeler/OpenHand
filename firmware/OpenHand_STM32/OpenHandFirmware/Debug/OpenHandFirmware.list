
OpenHandFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1ec  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800d2fc  0800d2fc  0001d2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3f0  0800d3f0  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d3f0  0800d3f0  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d3f0  0800d3f0  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3f0  0800d3f0  0001d3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3f4  0800d3f4  0001d3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800d3f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003328  200001d0  0800d5c8  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200034f8  0800d5c8  000234f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002431a  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051ba  00000000  00000000  00044556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001df0  00000000  00000000  00049710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001742  00000000  00000000  0004b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006558  00000000  00000000  0004cc42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000251cc  00000000  00000000  0005319a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0e32  00000000  00000000  00078366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008228  00000000  00000000  00119198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001213c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d2e4 	.word	0x0800d2e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800d2e4 	.word	0x0800d2e4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <main_f_Init_v>:
/**
 *  @todo Description
 *  @note Called once during boot
 */
void main_f_Init_v(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	/* Start all PWM channels */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000930:	2100      	movs	r1, #0
 8000932:	4811      	ldr	r0, [pc, #68]	; (8000978 <main_f_Init_v+0x4c>)
 8000934:	f004 fd5a 	bl	80053ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000938:	2104      	movs	r1, #4
 800093a:	480f      	ldr	r0, [pc, #60]	; (8000978 <main_f_Init_v+0x4c>)
 800093c:	f004 fd56 	bl	80053ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000940:	2108      	movs	r1, #8
 8000942:	480d      	ldr	r0, [pc, #52]	; (8000978 <main_f_Init_v+0x4c>)
 8000944:	f004 fd52 	bl	80053ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000948:	2100      	movs	r1, #0
 800094a:	480c      	ldr	r0, [pc, #48]	; (800097c <main_f_Init_v+0x50>)
 800094c:	f004 fd4e 	bl	80053ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000950:	2108      	movs	r1, #8
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <main_f_Init_v+0x50>)
 8000954:	f004 fd4a 	bl	80053ec <HAL_TIM_PWM_Start>

  // Read user button, if it's high, go to EMG mode
  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET)
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <main_f_Init_v+0x54>)
 800095c:	f002 f85a 	bl	8002a14 <HAL_GPIO_ReadPin>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d103      	bne.n	800096e <main_f_Init_v+0x42>
  {
	my_mode = 1;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <main_f_Init_v+0x58>)
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
  }
  else
  {
	my_mode = 0;
  }
}
 800096c:	e002      	b.n	8000974 <main_f_Init_v+0x48>
	my_mode = 0;
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <main_f_Init_v+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200002b4 	.word	0x200002b4
 800097c:	200002fc 	.word	0x200002fc
 8000980:	40010c00 	.word	0x40010c00
 8000984:	20000798 	.word	0x20000798

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098c:	f000 fffc 	bl	8001988 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000990:	f000 f834 	bl	80009fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000994:	f000 faa6 	bl	8000ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000998:	f000 fa86 	bl	8000ea8 <MX_DMA_Init>
  MX_I2C1_Init();
 800099c:	f000 f92e 	bl	8000bfc <MX_I2C1_Init>
  MX_ADC1_Init();
 80009a0:	f000 f88a 	bl	8000ab8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80009a4:	f000 fa56 	bl	8000e54 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80009a8:	f000 f956 	bl	8000c58 <MX_TIM1_Init>
  MX_TIM3_Init();
 80009ac:	f000 f9ee 	bl	8000d8c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  main_f_Init_v();
 80009b0:	f7ff ffbc 	bl	800092c <main_f_Init_v>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009b4:	f009 fa34 	bl	8009e20 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of hand_control */
  hand_controlHandle = osThreadNew(hand_control_function, NULL, &hand_control_attributes);
 80009b8:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <main+0x5c>)
 80009ba:	2100      	movs	r1, #0
 80009bc:	480a      	ldr	r0, [pc, #40]	; (80009e8 <main+0x60>)
 80009be:	f009 fa95 	bl	8009eec <osThreadNew>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a09      	ldr	r2, [pc, #36]	; (80009ec <main+0x64>)
 80009c6:	6013      	str	r3, [r2, #0]

  /* creation of system_health */
  system_healthHandle = osThreadNew(system_health_function, NULL, &system_health_attributes);
 80009c8:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <main+0x68>)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <main+0x6c>)
 80009ce:	f009 fa8d 	bl	8009eec <osThreadNew>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <main+0x70>)
 80009d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009d8:	f009 fa54 	bl	8009e84 <osKernelStart>
 80009dc:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80009de:	4618      	mov	r0, r3
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	0800d37c 	.word	0x0800d37c
 80009e8:	08001061 	.word	0x08001061
 80009ec:	2000038c 	.word	0x2000038c
 80009f0:	0800d3a0 	.word	0x0800d3a0
 80009f4:	08001339 	.word	0x08001339
 80009f8:	20000390 	.word	0x20000390

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b094      	sub	sp, #80	; 0x50
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a06:	2228      	movs	r2, #40	; 0x28
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f00c fb84 	bl	800d118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000a36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a40:	2302      	movs	r3, #2
 8000a42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a4a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 fed7 	bl	8004808 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a60:	f000 fc8c 	bl	800137c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a74:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	2102      	movs	r1, #2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f004 f943 	bl	8004d0c <HAL_RCC_ClockConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a8c:	f000 fc76 	bl	800137c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000a90:	2312      	movs	r3, #18
 8000a92:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a98:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f004 faf3 	bl	800508c <HAL_RCCEx_PeriphCLKConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000aac:	f000 fc66 	bl	800137c <Error_Handler>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3750      	adds	r7, #80	; 0x50
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ac8:	4b4a      	ldr	r3, [pc, #296]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000aca:	4a4b      	ldr	r2, [pc, #300]	; (8000bf8 <MX_ADC1_Init+0x140>)
 8000acc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ace:	4b49      	ldr	r3, [pc, #292]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ad4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ad6:	4b47      	ldr	r3, [pc, #284]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000adc:	4b45      	ldr	r3, [pc, #276]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae2:	4b44      	ldr	r3, [pc, #272]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000ae4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ae8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aea:	4b42      	ldr	r3, [pc, #264]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000af0:	4b40      	ldr	r3, [pc, #256]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000af2:	2208      	movs	r2, #8
 8000af4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af6:	483f      	ldr	r0, [pc, #252]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000af8:	f000 ff78 	bl	80019ec <HAL_ADC_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b02:	f000 fc3b 	bl	800137c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4837      	ldr	r0, [pc, #220]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000b18:	f001 f930 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b22:	f000 fc2b 	bl	800137c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	4830      	ldr	r0, [pc, #192]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000b34:	f001 f922 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000b3e:	f000 fc1d 	bl	800137c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b42:	2303      	movs	r3, #3
 8000b44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b46:	2303      	movs	r3, #3
 8000b48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4829      	ldr	r0, [pc, #164]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000b50:	f001 f914 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000b5a:	f000 fc0f 	bl	800137c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b62:	2304      	movs	r3, #4
 8000b64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4822      	ldr	r0, [pc, #136]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000b6c:	f001 f906 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000b76:	f000 fc01 	bl	800137c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b7a:	230a      	movs	r3, #10
 8000b7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	481b      	ldr	r0, [pc, #108]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000b88:	f001 f8f8 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b92:	f000 fbf3 	bl	800137c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b96:	230b      	movs	r3, #11
 8000b98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b9a:	2306      	movs	r3, #6
 8000b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4814      	ldr	r0, [pc, #80]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000ba4:	f001 f8ea 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000bae:	f000 fbe5 	bl	800137c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000bc0:	f001 f8dc 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000bca:	f000 fbd7 	bl	800137c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000bce:	230d      	movs	r3, #13
 8000bd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <MX_ADC1_Init+0x13c>)
 8000bdc:	f001 f8ce 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000be6:	f000 fbc9 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200001ec 	.word	0x200001ec
 8000bf8:	40012400 	.word	0x40012400

08000bfc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_I2C1_Init+0x50>)
 8000c02:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <MX_I2C1_Init+0x54>)
 8000c04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_I2C1_Init+0x50>)
 8000c08:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <MX_I2C1_Init+0x58>)
 8000c0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_I2C1_Init+0x50>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_I2C1_Init+0x50>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_I2C1_Init+0x50>)
 8000c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_I2C1_Init+0x50>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_I2C1_Init+0x50>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_I2C1_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_I2C1_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_I2C1_Init+0x50>)
 8000c3a:	f001 ff33 	bl	8002aa4 <HAL_I2C_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c44:	f000 fb9a 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000260 	.word	0x20000260
 8000c50:	40005400 	.word	0x40005400
 8000c54:	000186a0 	.word	0x000186a0

08000c58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b092      	sub	sp, #72	; 0x48
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
 8000c78:	615a      	str	r2, [r3, #20]
 8000c7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2220      	movs	r2, #32
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f00c fa48 	bl	800d118 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c88:	4b3e      	ldr	r3, [pc, #248]	; (8000d84 <MX_TIM1_Init+0x12c>)
 8000c8a:	4a3f      	ldr	r2, [pc, #252]	; (8000d88 <MX_TIM1_Init+0x130>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000c8e:	4b3d      	ldr	r3, [pc, #244]	; (8000d84 <MX_TIM1_Init+0x12c>)
 8000c90:	220f      	movs	r2, #15
 8000c92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b3b      	ldr	r3, [pc, #236]	; (8000d84 <MX_TIM1_Init+0x12c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000c9a:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <MX_TIM1_Init+0x12c>)
 8000c9c:	2263      	movs	r2, #99	; 0x63
 8000c9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca0:	4b38      	ldr	r3, [pc, #224]	; (8000d84 <MX_TIM1_Init+0x12c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ca6:	4b37      	ldr	r3, [pc, #220]	; (8000d84 <MX_TIM1_Init+0x12c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cac:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <MX_TIM1_Init+0x12c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cb2:	4834      	ldr	r0, [pc, #208]	; (8000d84 <MX_TIM1_Init+0x12c>)
 8000cb4:	f004 fb4a 	bl	800534c <HAL_TIM_PWM_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000cbe:	f000 fb5d 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cce:	4619      	mov	r1, r3
 8000cd0:	482c      	ldr	r0, [pc, #176]	; (8000d84 <MX_TIM1_Init+0x12c>)
 8000cd2:	f005 f829 	bl	8005d28 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000cdc:	f000 fb4e 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce0:	2360      	movs	r3, #96	; 0x60
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cec:	2300      	movs	r3, #0
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	481f      	ldr	r0, [pc, #124]	; (8000d84 <MX_TIM1_Init+0x12c>)
 8000d06:	f004 fd1b 	bl	8005740 <HAL_TIM_PWM_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000d10:	f000 fb34 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	2204      	movs	r2, #4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4819      	ldr	r0, [pc, #100]	; (8000d84 <MX_TIM1_Init+0x12c>)
 8000d1e:	f004 fd0f 	bl	8005740 <HAL_TIM_PWM_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000d28:	f000 fb28 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	2208      	movs	r2, #8
 8000d32:	4619      	mov	r1, r3
 8000d34:	4813      	ldr	r0, [pc, #76]	; (8000d84 <MX_TIM1_Init+0x12c>)
 8000d36:	f004 fd03 	bl	8005740 <HAL_TIM_PWM_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000d40:	f000 fb1c 	bl	800137c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4619      	mov	r1, r3
 8000d66:	4807      	ldr	r0, [pc, #28]	; (8000d84 <MX_TIM1_Init+0x12c>)
 8000d68:	f005 f83c 	bl	8005de4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000d72:	f000 fb03 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <MX_TIM1_Init+0x12c>)
 8000d78:	f000 fc42 	bl	8001600 <HAL_TIM_MspPostInit>

}
 8000d7c:	bf00      	nop
 8000d7e:	3748      	adds	r7, #72	; 0x48
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200002b4 	.word	0x200002b4
 8000d88:	40012c00 	.word	0x40012c00

08000d8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]
 8000daa:	615a      	str	r2, [r3, #20]
 8000dac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dae:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <MX_TIM3_Init+0xc0>)
 8000db0:	4a27      	ldr	r2, [pc, #156]	; (8000e50 <MX_TIM3_Init+0xc4>)
 8000db2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000db4:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <MX_TIM3_Init+0xc0>)
 8000db6:	220f      	movs	r2, #15
 8000db8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <MX_TIM3_Init+0xc0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <MX_TIM3_Init+0xc0>)
 8000dc2:	2263      	movs	r2, #99	; 0x63
 8000dc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <MX_TIM3_Init+0xc0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <MX_TIM3_Init+0xc0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dd2:	481e      	ldr	r0, [pc, #120]	; (8000e4c <MX_TIM3_Init+0xc0>)
 8000dd4:	f004 faba 	bl	800534c <HAL_TIM_PWM_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000dde:	f000 facd 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dea:	f107 0320 	add.w	r3, r7, #32
 8000dee:	4619      	mov	r1, r3
 8000df0:	4816      	ldr	r0, [pc, #88]	; (8000e4c <MX_TIM3_Init+0xc0>)
 8000df2:	f004 ff99 	bl	8005d28 <HAL_TIMEx_MasterConfigSynchronization>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000dfc:	f000 fabe 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e00:	2360      	movs	r3, #96	; 0x60
 8000e02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	4619      	mov	r1, r3
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <MX_TIM3_Init+0xc0>)
 8000e18:	f004 fc92 	bl	8005740 <HAL_TIM_PWM_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000e22:	f000 faab 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2208      	movs	r2, #8
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4807      	ldr	r0, [pc, #28]	; (8000e4c <MX_TIM3_Init+0xc0>)
 8000e2e:	f004 fc87 	bl	8005740 <HAL_TIM_PWM_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e38:	f000 faa0 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <MX_TIM3_Init+0xc0>)
 8000e3e:	f000 fbdf 	bl	8001600 <HAL_TIM_MspPostInit>

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200002fc 	.word	0x200002fc
 8000e50:	40000400 	.word	0x40000400

08000e54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <MX_USART3_UART_Init+0x50>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e8c:	f005 f80d 	bl	8005eaa <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e96:	f000 fa71 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000344 	.word	0x20000344
 8000ea4:	40004800 	.word	0x40004800

08000ea8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_DMA_Init+0x38>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <MX_DMA_Init+0x38>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6153      	str	r3, [r2, #20]
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_DMA_Init+0x38>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2105      	movs	r1, #5
 8000eca:	200b      	movs	r0, #11
 8000ecc:	f001 fa05 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ed0:	200b      	movs	r0, #11
 8000ed2:	f001 fa1e 	bl	8002312 <HAL_NVIC_EnableIRQ>

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef8:	4b4d      	ldr	r3, [pc, #308]	; (8001030 <MX_GPIO_Init+0x14c>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a4c      	ldr	r2, [pc, #304]	; (8001030 <MX_GPIO_Init+0x14c>)
 8000efe:	f043 0320 	orr.w	r3, r3, #32
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b4a      	ldr	r3, [pc, #296]	; (8001030 <MX_GPIO_Init+0x14c>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0320 	and.w	r3, r3, #32
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f10:	4b47      	ldr	r3, [pc, #284]	; (8001030 <MX_GPIO_Init+0x14c>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a46      	ldr	r2, [pc, #280]	; (8001030 <MX_GPIO_Init+0x14c>)
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b44      	ldr	r3, [pc, #272]	; (8001030 <MX_GPIO_Init+0x14c>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0310 	and.w	r3, r3, #16
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b41      	ldr	r3, [pc, #260]	; (8001030 <MX_GPIO_Init+0x14c>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a40      	ldr	r2, [pc, #256]	; (8001030 <MX_GPIO_Init+0x14c>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b3e      	ldr	r3, [pc, #248]	; (8001030 <MX_GPIO_Init+0x14c>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f40:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <MX_GPIO_Init+0x14c>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a3a      	ldr	r2, [pc, #232]	; (8001030 <MX_GPIO_Init+0x14c>)
 8000f46:	f043 0308 	orr.w	r3, r3, #8
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b38      	ldr	r3, [pc, #224]	; (8001030 <MX_GPIO_Init+0x14c>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HAPTIC_EN_GPIO_Port, HAPTIC_EN_Pin, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	4835      	ldr	r0, [pc, #212]	; (8001034 <MX_GPIO_Init+0x150>)
 8000f5e:	f001 fd70 	bl	8002a42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_01_EN_GPIO_Port, MOTOR_01_EN_Pin, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2120      	movs	r1, #32
 8000f66:	4834      	ldr	r0, [pc, #208]	; (8001038 <MX_GPIO_Init+0x154>)
 8000f68:	f001 fd6b 	bl	8002a42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_02_EN_Pin|MOTOR_03_EN_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f240 4102 	movw	r1, #1026	; 0x402
 8000f72:	4832      	ldr	r0, [pc, #200]	; (800103c <MX_GPIO_Init+0x158>)
 8000f74:	f001 fd65 	bl	8002a42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HAPTIC_01_DIR_Pin|HAPTIC_02_DIR_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f24a 0160 	movw	r1, #41056	; 0xa060
 8000f7e:	482f      	ldr	r0, [pc, #188]	; (800103c <MX_GPIO_Init+0x158>)
 8000f80:	f001 fd5f 	bl	8002a42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_01_DIR_Pin|MOTOR_02_DIR_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000f8a:	482b      	ldr	r0, [pc, #172]	; (8001038 <MX_GPIO_Init+0x154>)
 8000f8c:	f001 fd59 	bl	8002a42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_03_DIR_GPIO_Port, MOTOR_03_DIR_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f96:	4827      	ldr	r0, [pc, #156]	; (8001034 <MX_GPIO_Init+0x150>)
 8000f98:	f001 fd53 	bl	8002a42 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HAPTIC_EN_Pin MOTOR_03_DIR_Pin */
  GPIO_InitStruct.Pin = HAPTIC_EN_Pin|MOTOR_03_DIR_Pin;
 8000f9c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	481f      	ldr	r0, [pc, #124]	; (8001034 <MX_GPIO_Init+0x150>)
 8000fb6:	f001 fba9 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : HAPTIC_FAULT_Pin */
  GPIO_InitStruct.Pin = HAPTIC_FAULT_Pin;
 8000fba:	2310      	movs	r3, #16
 8000fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HAPTIC_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4619      	mov	r1, r3
 8000fcc:	481a      	ldr	r0, [pc, #104]	; (8001038 <MX_GPIO_Init+0x154>)
 8000fce:	f001 fb9d 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_01_EN_Pin MOTOR_01_DIR_Pin MOTOR_02_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_01_EN_Pin|MOTOR_01_DIR_Pin|MOTOR_02_DIR_Pin;
 8000fd2:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4813      	ldr	r0, [pc, #76]	; (8001038 <MX_GPIO_Init+0x154>)
 8000fec:	f001 fb8e 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_01_FAULT_Pin MOTOR_02_FAULT_Pin MOTOR_03_FAULT_Pin BTN_01_Pin */
  GPIO_InitStruct.Pin = MOTOR_01_FAULT_Pin|MOTOR_02_FAULT_Pin|MOTOR_03_FAULT_Pin|BTN_01_Pin;
 8000ff0:	f640 0385 	movw	r3, #2181	; 0x885
 8000ff4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4619      	mov	r1, r3
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_GPIO_Init+0x158>)
 8001006:	f001 fb81 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_02_EN_Pin MOTOR_03_EN_Pin HAPTIC_01_DIR_Pin HAPTIC_02_DIR_Pin
                           LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = MOTOR_02_EN_Pin|MOTOR_03_EN_Pin|HAPTIC_01_DIR_Pin|HAPTIC_02_DIR_Pin
 800100a:	f24a 4362 	movw	r3, #42082	; 0xa462
 800100e:	613b      	str	r3, [r7, #16]
                          |LED_01_Pin|LED_02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2302      	movs	r3, #2
 800101a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_GPIO_Init+0x158>)
 8001024:	f001 fb72 	bl	800270c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000
 8001034:	40010800 	.word	0x40010800
 8001038:	40011000 	.word	0x40011000
 800103c:	40010c00 	.word	0x40010c00

08001040 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  adcConversionComplete = 1;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_ADC_ConvCpltCallback+0x18>)
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	20000794 	.word	0x20000794
 800105c:	00000000 	.word	0x00000000

08001060 <hand_control_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_hand_control_function */
void hand_control_function(void *argument)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001068:	f00b fbe0 	bl	800c82c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  uint32_t last_10ms = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t my_emg = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  uint32_t my_batt = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
  uint32_t i = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
  double my_pwm = 0;
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9c7 2302 	strd	r2, r3, [r7, #8]
    // batt_f_Handle_v();
    // motor_f_Handle_v();

    /* All of this should be moved to separate drivers... */
    /* Firstly, ignore everything unless 10ms has passed, and it's our time to work */
    if(HAL_GetTick() - last_10ms > (10-1))
 8001088:	f000 fca6 	bl	80019d8 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b09      	cmp	r3, #9
 8001094:	f240 8122 	bls.w	80012dc <hand_control_function+0x27c>
    {
      last_10ms = HAL_GetTick();
 8001098:	f000 fc9e 	bl	80019d8 <HAL_GetTick>
 800109c:	61f8      	str	r0, [r7, #28]
//      HAL_ADC_Start(&hadc2);
//      HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
//      my_pot = HAL_ADC_GetValue(&hadc2);

      // Start reading of all channels
      HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultsDMA, adcChannelCount);
 800109e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a2:	461a      	mov	r2, r3
 80010a4:	4996      	ldr	r1, [pc, #600]	; (8001300 <hand_control_function+0x2a0>)
 80010a6:	4897      	ldr	r0, [pc, #604]	; (8001304 <hand_control_function+0x2a4>)
 80010a8:	f000 fd78 	bl	8001b9c <HAL_ADC_Start_DMA>
      // Wait for that to finish
//      while(adcConversionComplete == 0) {}
//      adcConversionComplete = 0;

      my_pot = adcResultsDMA[0][1];
 80010ac:	4b94      	ldr	r3, [pc, #592]	; (8001300 <hand_control_function+0x2a0>)
 80010ae:	885b      	ldrh	r3, [r3, #2]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b94      	ldr	r3, [pc, #592]	; (8001308 <hand_control_function+0x2a8>)
 80010b6:	601a      	str	r2, [r3, #0]

      my_batt = adcResultsDMA[0][4];
 80010b8:	4b91      	ldr	r3, [pc, #580]	; (8001300 <hand_control_function+0x2a0>)
 80010ba:	891b      	ldrh	r3, [r3, #8]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	613b      	str	r3, [r7, #16]
      my_batt_volt = ( ( (my_batt / 4096.0) * 3.3 ) * 5.7 ); // 47k and 10k voltage divider -> 5.7 factor
 80010c0:	6938      	ldr	r0, [r7, #16]
 80010c2:	f7ff f987 	bl	80003d4 <__aeabi_ui2d>
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	4b90      	ldr	r3, [pc, #576]	; (800130c <hand_control_function+0x2ac>)
 80010cc:	f7ff fb26 	bl	800071c <__aeabi_ddiv>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	a383      	add	r3, pc, #524	; (adr r3, 80012e8 <hand_control_function+0x288>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff f9f3 	bl	80004c8 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	a381      	add	r3, pc, #516	; (adr r3, 80012f0 <hand_control_function+0x290>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	f7ff f9ea 	bl	80004c8 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4985      	ldr	r1, [pc, #532]	; (8001310 <hand_control_function+0x2b0>)
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]

      my_hall = adcResultsDMA[0][5];
 80010fe:	4b80      	ldr	r3, [pc, #512]	; (8001300 <hand_control_function+0x2a0>)
 8001100:	895b      	ldrh	r3, [r3, #10]
 8001102:	b29b      	uxth	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	4b83      	ldr	r3, [pc, #524]	; (8001314 <hand_control_function+0x2b4>)
 8001108:	601a      	str	r2, [r3, #0]

      emg_max = 0;
 800110a:	4b83      	ldr	r3, [pc, #524]	; (8001318 <hand_control_function+0x2b8>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
      for(i = 0; i < 64; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	e018      	b.n	8001148 <hand_control_function+0xe8>
      {
		  if (adcResultsDMA[i][3] > emg_max)
 8001116:	4a7a      	ldr	r2, [pc, #488]	; (8001300 <hand_control_function+0x2a0>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	4413      	add	r3, r2
 800111e:	3306      	adds	r3, #6
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	4b7c      	ldr	r3, [pc, #496]	; (8001318 <hand_control_function+0x2b8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d909      	bls.n	8001142 <hand_control_function+0xe2>
		  {
			  emg_max = adcResultsDMA[i][3];
 800112e:	4a74      	ldr	r2, [pc, #464]	; (8001300 <hand_control_function+0x2a0>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	4413      	add	r3, r2
 8001136:	3306      	adds	r3, #6
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	b29b      	uxth	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	4b76      	ldr	r3, [pc, #472]	; (8001318 <hand_control_function+0x2b8>)
 8001140:	601a      	str	r2, [r3, #0]
      for(i = 0; i < 64; i++)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	3301      	adds	r3, #1
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2b3f      	cmp	r3, #63	; 0x3f
 800114c:	d9e3      	bls.n	8001116 <hand_control_function+0xb6>
		  }
      }
      my_emg = emg_max;
 800114e:	4b72      	ldr	r3, [pc, #456]	; (8001318 <hand_control_function+0x2b8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	617b      	str	r3, [r7, #20]
      // my_emg = adcResultsDMA[3];

      /* Set DIR for all motors to given value (from button) */
      /* And PWM for all motors to given value (from potentiometer) */
      // if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET)
      if ((my_mode  == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) || (my_mode  == 1 && my_emg > adcResultsDMA[0][0]))
 8001154:	4b71      	ldr	r3, [pc, #452]	; (800131c <hand_control_function+0x2bc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d106      	bne.n	800116a <hand_control_function+0x10a>
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	4870      	ldr	r0, [pc, #448]	; (8001320 <hand_control_function+0x2c0>)
 8001160:	f001 fc58 	bl	8002a14 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00a      	beq.n	8001180 <hand_control_function+0x120>
 800116a:	4b6c      	ldr	r3, [pc, #432]	; (800131c <hand_control_function+0x2bc>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d15a      	bne.n	8001228 <hand_control_function+0x1c8>
 8001172:	4b63      	ldr	r3, [pc, #396]	; (8001300 <hand_control_function+0x2a0>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	461a      	mov	r2, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	4293      	cmp	r3, r2
 800117e:	d953      	bls.n	8001228 <hand_control_function+0x1c8>
      {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001186:	4867      	ldr	r0, [pc, #412]	; (8001324 <hand_control_function+0x2c4>)
 8001188:	f001 fc5b 	bl	8002a42 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001192:	4863      	ldr	r0, [pc, #396]	; (8001320 <hand_control_function+0x2c0>)
 8001194:	f001 fc55 	bl	8002a42 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800119e:	4860      	ldr	r0, [pc, #384]	; (8001320 <hand_control_function+0x2c0>)
 80011a0:	f001 fc4f 	bl	8002a42 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	485f      	ldr	r0, [pc, #380]	; (8001328 <hand_control_function+0x2c8>)
 80011aa:	f001 fc4a 	bl	8002a42 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b4:	485c      	ldr	r0, [pc, #368]	; (8001328 <hand_control_function+0x2c8>)
 80011b6:	f001 fc44 	bl	8002a42 <HAL_GPIO_WritePin>

        my_pwm = (double)my_pot / 40.96;
 80011ba:	4b53      	ldr	r3, [pc, #332]	; (8001308 <hand_control_function+0x2a8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f908 	bl	80003d4 <__aeabi_ui2d>
 80011c4:	a34c      	add	r3, pc, #304	; (adr r3, 80012f8 <hand_control_function+0x298>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff faa7 	bl	800071c <__aeabi_ddiv>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
        TIM1->CCR1 = (uint16_t)my_pwm;
 80011d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011da:	f7ff fb87 	bl	80008ec <__aeabi_d2uiz>
 80011de:	4603      	mov	r3, r0
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b52      	ldr	r3, [pc, #328]	; (800132c <hand_control_function+0x2cc>)
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR2 = (uint16_t)my_pwm;
 80011e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ea:	f7ff fb7f 	bl	80008ec <__aeabi_d2uiz>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	4b4e      	ldr	r3, [pc, #312]	; (800132c <hand_control_function+0x2cc>)
 80011f4:	639a      	str	r2, [r3, #56]	; 0x38
        TIM1->CCR3 = (uint16_t)my_pwm;
 80011f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011fa:	f7ff fb77 	bl	80008ec <__aeabi_d2uiz>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b4a      	ldr	r3, [pc, #296]	; (800132c <hand_control_function+0x2cc>)
 8001204:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM3->CCR1 = (uint16_t)my_pwm;
 8001206:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800120a:	f7ff fb6f 	bl	80008ec <__aeabi_d2uiz>
 800120e:	4603      	mov	r3, r0
 8001210:	b29a      	uxth	r2, r3
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <hand_control_function+0x2d0>)
 8001214:	635a      	str	r2, [r3, #52]	; 0x34
        TIM3->CCR3 = (uint16_t)my_pwm;
 8001216:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800121a:	f7ff fb67 	bl	80008ec <__aeabi_d2uiz>
 800121e:	4603      	mov	r3, r0
 8001220:	b29a      	uxth	r2, r3
 8001222:	4b43      	ldr	r3, [pc, #268]	; (8001330 <hand_control_function+0x2d0>)
 8001224:	63da      	str	r2, [r3, #60]	; 0x3c
 8001226:	e059      	b.n	80012dc <hand_control_function+0x27c>
      }
      else
      {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800122e:	483d      	ldr	r0, [pc, #244]	; (8001324 <hand_control_function+0x2c4>)
 8001230:	f001 fc07 	bl	8002a42 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123a:	4839      	ldr	r0, [pc, #228]	; (8001320 <hand_control_function+0x2c0>)
 800123c:	f001 fc01 	bl	8002a42 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001246:	4836      	ldr	r0, [pc, #216]	; (8001320 <hand_control_function+0x2c0>)
 8001248:	f001 fbfb 	bl	8002a42 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	4835      	ldr	r0, [pc, #212]	; (8001328 <hand_control_function+0x2c8>)
 8001252:	f001 fbf6 	bl	8002a42 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125c:	4832      	ldr	r0, [pc, #200]	; (8001328 <hand_control_function+0x2c8>)
 800125e:	f001 fbf0 	bl	8002a42 <HAL_GPIO_WritePin>

        my_pwm = 100.0 - (double)my_pot / 40.96;
 8001262:	4b29      	ldr	r3, [pc, #164]	; (8001308 <hand_control_function+0x2a8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f8b4 	bl	80003d4 <__aeabi_ui2d>
 800126c:	a322      	add	r3, pc, #136	; (adr r3, 80012f8 <hand_control_function+0x298>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	f7ff fa53 	bl	800071c <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	f04f 0000 	mov.w	r0, #0
 800127e:	492d      	ldr	r1, [pc, #180]	; (8001334 <hand_control_function+0x2d4>)
 8001280:	f7fe ff6a 	bl	8000158 <__aeabi_dsub>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	e9c7 2302 	strd	r2, r3, [r7, #8]
        TIM1->CCR1 = (uint16_t)my_pwm;
 800128c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001290:	f7ff fb2c 	bl	80008ec <__aeabi_d2uiz>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <hand_control_function+0x2cc>)
 800129a:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR2 = (uint16_t)my_pwm;
 800129c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012a0:	f7ff fb24 	bl	80008ec <__aeabi_d2uiz>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b20      	ldr	r3, [pc, #128]	; (800132c <hand_control_function+0x2cc>)
 80012aa:	639a      	str	r2, [r3, #56]	; 0x38
        TIM1->CCR3 = (uint16_t)my_pwm;
 80012ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012b0:	f7ff fb1c 	bl	80008ec <__aeabi_d2uiz>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <hand_control_function+0x2cc>)
 80012ba:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM3->CCR1 = (uint16_t)my_pwm;
 80012bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012c0:	f7ff fb14 	bl	80008ec <__aeabi_d2uiz>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <hand_control_function+0x2d0>)
 80012ca:	635a      	str	r2, [r3, #52]	; 0x34
        TIM3->CCR3 = (uint16_t)my_pwm;
 80012cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012d0:	f7ff fb0c 	bl	80008ec <__aeabi_d2uiz>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <hand_control_function+0x2d0>)
 80012da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Wait 1ms to let other tasks do their thing! */
    osDelay(1);
 80012dc:	2001      	movs	r0, #1
 80012de:	f008 feaf 	bl	800a040 <osDelay>
    if(HAL_GetTick() - last_10ms > (10-1))
 80012e2:	e6d1      	b.n	8001088 <hand_control_function+0x28>
 80012e4:	f3af 8000 	nop.w
 80012e8:	66666666 	.word	0x66666666
 80012ec:	400a6666 	.word	0x400a6666
 80012f0:	cccccccd 	.word	0xcccccccd
 80012f4:	4016cccc 	.word	0x4016cccc
 80012f8:	47ae147b 	.word	0x47ae147b
 80012fc:	40447ae1 	.word	0x40447ae1
 8001300:	20000394 	.word	0x20000394
 8001304:	200001ec 	.word	0x200001ec
 8001308:	2000079c 	.word	0x2000079c
 800130c:	40b00000 	.word	0x40b00000
 8001310:	200007a8 	.word	0x200007a8
 8001314:	200007a0 	.word	0x200007a0
 8001318:	200007b0 	.word	0x200007b0
 800131c:	20000798 	.word	0x20000798
 8001320:	40010c00 	.word	0x40010c00
 8001324:	40010800 	.word	0x40010800
 8001328:	40011000 	.word	0x40011000
 800132c:	40012c00 	.word	0x40012c00
 8001330:	40000400 	.word	0x40000400
 8001334:	40590000 	.word	0x40590000

08001338 <system_health_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_system_health_function */
void system_health_function(void *argument)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN system_health_function */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	4804      	ldr	r0, [pc, #16]	; (8001354 <system_health_function+0x1c>)
 8001344:	f001 fb95 	bl	8002a72 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001348:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800134c:	f008 fe78 	bl	800a040 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001350:	e7f6      	b.n	8001340 <system_health_function+0x8>
 8001352:	bf00      	nop
 8001354:	40010c00 	.word	0x40010c00

08001358 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800136a:	f000 fb23 	bl	80019b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40000800 	.word	0x40000800

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_MspInit+0x68>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <HAL_MspInit+0x68>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6193      	str	r3, [r2, #24]
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_MspInit+0x68>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_MspInit+0x68>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <HAL_MspInit+0x68>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <HAL_MspInit+0x68>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	210f      	movs	r1, #15
 80013c2:	f06f 0001 	mvn.w	r0, #1
 80013c6:	f000 ff88 	bl	80022da <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_MspInit+0x6c>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_MspInit+0x6c>)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000

080013f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a34      	ldr	r2, [pc, #208]	; (80014e4 <HAL_ADC_MspInit+0xec>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d160      	bne.n	80014da <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001418:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <HAL_ADC_MspInit+0xf0>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a32      	ldr	r2, [pc, #200]	; (80014e8 <HAL_ADC_MspInit+0xf0>)
 800141e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <HAL_ADC_MspInit+0xf0>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HAL_ADC_MspInit+0xf0>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a2c      	ldr	r2, [pc, #176]	; (80014e8 <HAL_ADC_MspInit+0xf0>)
 8001436:	f043 0310 	orr.w	r3, r3, #16
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <HAL_ADC_MspInit+0xf0>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <HAL_ADC_MspInit+0xf0>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <HAL_ADC_MspInit+0xf0>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <HAL_ADC_MspInit+0xf0>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATT_SENSE_Pin|HALL_SENSE_01_Pin|HALL_SENSE_02_Pin|HALL_SENSE_03_Pin;
 8001460:	230f      	movs	r3, #15
 8001462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001464:	2303      	movs	r3, #3
 8001466:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	4619      	mov	r1, r3
 800146e:	481f      	ldr	r0, [pc, #124]	; (80014ec <HAL_ADC_MspInit+0xf4>)
 8001470:	f001 f94c 	bl	800270c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TRIM_POT_02_Pin|TRIM_POT_01_Pin|EMG_01_Pin|EMG_02_Pin;
 8001474:	231e      	movs	r3, #30
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001478:	2303      	movs	r3, #3
 800147a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0318 	add.w	r3, r7, #24
 8001480:	4619      	mov	r1, r3
 8001482:	481b      	ldr	r0, [pc, #108]	; (80014f0 <HAL_ADC_MspInit+0xf8>)
 8001484:	f001 f942 	bl	800270c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <HAL_ADC_MspInit+0xfc>)
 800148a:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <HAL_ADC_MspInit+0x100>)
 800148c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_ADC_MspInit+0xfc>)
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <HAL_ADC_MspInit+0xfc>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_ADC_MspInit+0xfc>)
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014b2:	2220      	movs	r2, #32
 80014b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014c0:	f000 ff36 	bl	8002330 <HAL_DMA_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 80014ca:	f7ff ff57 	bl	800137c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014d2:	621a      	str	r2, [r3, #32]
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40012400 	.word	0x40012400
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40011000 	.word	0x40011000
 80014f0:	40010800 	.word	0x40010800
 80014f4:	2000021c 	.word	0x2000021c
 80014f8:	40020008 	.word	0x40020008

080014fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_I2C_MspInit+0x90>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d132      	bne.n	8001582 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <HAL_I2C_MspInit+0x94>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <HAL_I2C_MspInit+0x94>)
 8001522:	f043 0308 	orr.w	r3, r3, #8
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_I2C_MspInit+0x94>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001534:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153a:	2312      	movs	r3, #18
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4812      	ldr	r0, [pc, #72]	; (8001594 <HAL_I2C_MspInit+0x98>)
 800154a:	f001 f8df 	bl	800270c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_I2C_MspInit+0x9c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	f043 0302 	orr.w	r3, r3, #2
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
 8001564:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <HAL_I2C_MspInit+0x9c>)
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_I2C_MspInit+0x94>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_I2C_MspInit+0x94>)
 8001570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001574:	61d3      	str	r3, [r2, #28]
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_I2C_MspInit+0x94>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3728      	adds	r7, #40	; 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40005400 	.word	0x40005400
 8001590:	40021000 	.word	0x40021000
 8001594:	40010c00 	.word	0x40010c00
 8001598:	40010000 	.word	0x40010000

0800159c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <HAL_TIM_PWM_MspInit+0x58>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10c      	bne.n	80015c8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80015b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015b8:	6193      	str	r3, [r2, #24]
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015c6:	e010      	b.n	80015ea <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <HAL_TIM_PWM_MspInit+0x60>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d10b      	bne.n	80015ea <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	61d3      	str	r3, [r2, #28]
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	40012c00 	.word	0x40012c00
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40000400 	.word	0x40000400

08001600 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a35      	ldr	r2, [pc, #212]	; (80016f0 <HAL_TIM_MspPostInit+0xf0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d132      	bne.n	8001686 <HAL_TIM_MspPostInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001620:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <HAL_TIM_MspPostInit+0xf4>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a33      	ldr	r2, [pc, #204]	; (80016f4 <HAL_TIM_MspPostInit+0xf4>)
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <HAL_TIM_MspPostInit+0xf4>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <HAL_TIM_MspPostInit+0xf4>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a2d      	ldr	r2, [pc, #180]	; (80016f4 <HAL_TIM_MspPostInit+0xf4>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_TIM_MspPostInit+0xf4>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HAPTIC_01_PWM_Pin;
 8001650:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2302      	movs	r3, #2
 800165c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HAPTIC_01_PWM_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	4824      	ldr	r0, [pc, #144]	; (80016f8 <HAL_TIM_MspPostInit+0xf8>)
 8001666:	f001 f851 	bl	800270c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_02_PWM_Pin|MOTOR_03_PWM_Pin;
 800166a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800166e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2302      	movs	r3, #2
 8001676:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	481f      	ldr	r0, [pc, #124]	; (80016fc <HAL_TIM_MspPostInit+0xfc>)
 8001680:	f001 f844 	bl	800270c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001684:	e02f      	b.n	80016e6 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <HAL_TIM_MspPostInit+0x100>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d12a      	bne.n	80016e6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_TIM_MspPostInit+0xf4>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <HAL_TIM_MspPostInit+0xf4>)
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_TIM_MspPostInit+0xf4>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HAPTIC_02_PWM_Pin|MOTOR_01_PWM_Pin;
 80016a8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2302      	movs	r3, #2
 80016b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4811      	ldr	r0, [pc, #68]	; (8001704 <HAL_TIM_MspPostInit+0x104>)
 80016be:	f001 f825 	bl	800270c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_TIM_MspPostInit+0x108>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
 80016e0:	4a09      	ldr	r2, [pc, #36]	; (8001708 <HAL_TIM_MspPostInit+0x108>)
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	6053      	str	r3, [r2, #4]
}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40012c00 	.word	0x40012c00
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010c00 	.word	0x40010c00
 80016fc:	40010800 	.word	0x40010800
 8001700:	40000400 	.word	0x40000400
 8001704:	40011000 	.word	0x40011000
 8001708:	40010000 	.word	0x40010000

0800170c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a25      	ldr	r2, [pc, #148]	; (80017bc <HAL_UART_MspInit+0xb0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d143      	bne.n	80017b4 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_UART_MspInit+0xb4>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <HAL_UART_MspInit+0xb4>)
 8001732:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001736:	61d3      	str	r3, [r2, #28]
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_UART_MspInit+0xb4>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_UART_MspInit+0xb4>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_UART_MspInit+0xb4>)
 800174a:	f043 0310 	orr.w	r3, r3, #16
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_UART_MspInit+0xb4>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800175c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	4814      	ldr	r0, [pc, #80]	; (80017c4 <HAL_UART_MspInit+0xb8>)
 8001772:	f000 ffcb 	bl	800270c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001776:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800177a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	480e      	ldr	r0, [pc, #56]	; (80017c4 <HAL_UART_MspInit+0xb8>)
 800178c:	f000 ffbe 	bl	800270c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_UART_MspInit+0xbc>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	f043 0310 	orr.w	r3, r3, #16
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
 80017ae:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <HAL_UART_MspInit+0xbc>)
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40004800 	.word	0x40004800
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40011000 	.word	0x40011000
 80017c8:	40010000 	.word	0x40010000

080017cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08e      	sub	sp, #56	; 0x38
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80017e2:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <HAL_InitTick+0xe8>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a33      	ldr	r2, [pc, #204]	; (80018b4 <HAL_InitTick+0xe8>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b31      	ldr	r3, [pc, #196]	; (80018b4 <HAL_InitTick+0xe8>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017fa:	f107 0210 	add.w	r2, r7, #16
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f003 fbf3 	bl	8004ff0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001810:	2b00      	cmp	r3, #0
 8001812:	d103      	bne.n	800181c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001814:	f003 fbc4 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8001818:	6378      	str	r0, [r7, #52]	; 0x34
 800181a:	e004      	b.n	8001826 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800181c:	f003 fbc0 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8001820:	4603      	mov	r3, r0
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	4a23      	ldr	r2, [pc, #140]	; (80018b8 <HAL_InitTick+0xec>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0c9b      	lsrs	r3, r3, #18
 8001830:	3b01      	subs	r3, #1
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_InitTick+0xf0>)
 8001836:	4a22      	ldr	r2, [pc, #136]	; (80018c0 <HAL_InitTick+0xf4>)
 8001838:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HAL_InitTick+0xf0>)
 800183c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001840:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001842:	4a1e      	ldr	r2, [pc, #120]	; (80018bc <HAL_InitTick+0xf0>)
 8001844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001846:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <HAL_InitTick+0xf0>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HAL_InitTick+0xf0>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_InitTick+0xf0>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800185a:	4818      	ldr	r0, [pc, #96]	; (80018bc <HAL_InitTick+0xf0>)
 800185c:	f003 fccc 	bl	80051f8 <HAL_TIM_Base_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001866:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800186a:	2b00      	cmp	r3, #0
 800186c:	d11b      	bne.n	80018a6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800186e:	4813      	ldr	r0, [pc, #76]	; (80018bc <HAL_InitTick+0xf0>)
 8001870:	f003 fd1a 	bl	80052a8 <HAL_TIM_Base_Start_IT>
 8001874:	4603      	mov	r3, r0
 8001876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800187a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800187e:	2b00      	cmp	r3, #0
 8001880:	d111      	bne.n	80018a6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001882:	201e      	movs	r0, #30
 8001884:	f000 fd45 	bl	8002312 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b0f      	cmp	r3, #15
 800188c:	d808      	bhi.n	80018a0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800188e:	2200      	movs	r2, #0
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	201e      	movs	r0, #30
 8001894:	f000 fd21 	bl	80022da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_InitTick+0xf8>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e002      	b.n	80018a6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3738      	adds	r7, #56	; 0x38
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	431bde83 	.word	0x431bde83
 80018bc:	200007b4 	.word	0x200007b4
 80018c0:	40000800 	.word	0x40000800
 80018c4:	20000004 	.word	0x20000004

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <NMI_Handler+0x4>

080018ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <MemManage_Handler+0x4>

080018da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
	...

080018f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <DMA1_Channel1_IRQHandler+0x10>)
 80018fa:	f000 fdd3 	bl	80024a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000021c 	.word	0x2000021c

08001908 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800190e:	f001 fb32 	bl	8002f76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20002ea8 	.word	0x20002ea8

0800191c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <TIM4_IRQHandler+0x10>)
 8001922:	f003 fe05 	bl	8005530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200007b4 	.word	0x200007b4

08001930 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800193c:	f7ff fff8 	bl	8001930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001942:	490c      	ldr	r1, [pc, #48]	; (8001974 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001944:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001958:	4c09      	ldr	r4, [pc, #36]	; (8001980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001966:	f00b fc35 	bl	800d1d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800196a:	f7ff f80d 	bl	8000988 <main>
  bx lr
 800196e:	4770      	bx	lr
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001978:	0800d3f8 	.word	0x0800d3f8
  ldr r2, =_sbss
 800197c:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001980:	200034f8 	.word	0x200034f8

08001984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC1_2_IRQHandler>
	...

08001988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <HAL_Init+0x28>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <HAL_Init+0x28>)
 8001992:	f043 0310 	orr.w	r3, r3, #16
 8001996:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001998:	2003      	movs	r0, #3
 800199a:	f000 fc93 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199e:	200f      	movs	r0, #15
 80019a0:	f7ff ff14 	bl	80017cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a4:	f7ff fcf0 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40022000 	.word	0x40022000

080019b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_IncTick+0x1c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_IncTick+0x20>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a03      	ldr	r2, [pc, #12]	; (80019d4 <HAL_IncTick+0x20>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20000008 	.word	0x20000008
 80019d4:	200007fc 	.word	0x200007fc

080019d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return uwTick;
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <HAL_GetTick+0x10>)
 80019de:	681b      	ldr	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	200007fc 	.word	0x200007fc

080019ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0be      	b.n	8001b8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d109      	bne.n	8001a30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fce4 	bl	80013f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 faf5 	bl	8002020 <ADC_ConversionStop_Disable>
 8001a36:	4603      	mov	r3, r0
 8001a38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f040 8099 	bne.w	8001b7a <HAL_ADC_Init+0x18e>
 8001a48:	7dfb      	ldrb	r3, [r7, #23]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 8095 	bne.w	8001b7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	f043 0202 	orr.w	r2, r3, #2
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7b1b      	ldrb	r3, [r3, #12]
 8001a72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a84:	d003      	beq.n	8001a8e <HAL_ADC_Init+0xa2>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d102      	bne.n	8001a94 <HAL_ADC_Init+0xa8>
 8001a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a92:	e000      	b.n	8001a96 <HAL_ADC_Init+0xaa>
 8001a94:	2300      	movs	r3, #0
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7d1b      	ldrb	r3, [r3, #20]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d119      	bne.n	8001ad8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7b1b      	ldrb	r3, [r3, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	035a      	lsls	r2, r3, #13
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	e00b      	b.n	8001ad8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f043 0220 	orr.w	r2, r3, #32
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <HAL_ADC_Init+0x1a8>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	430b      	orrs	r3, r1
 8001afe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b08:	d003      	beq.n	8001b12 <HAL_ADC_Init+0x126>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d104      	bne.n	8001b1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	051b      	lsls	r3, r3, #20
 8001b1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_ADC_Init+0x1ac>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d10b      	bne.n	8001b58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	f043 0201 	orr.w	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b56:	e018      	b.n	8001b8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	f023 0312 	bic.w	r3, r3, #18
 8001b60:	f043 0210 	orr.w	r2, r3, #16
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	f043 0201 	orr.w	r2, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b78:	e007      	b.n	8001b8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7e:	f043 0210 	orr.w	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	ffe1f7fd 	.word	0xffe1f7fd
 8001b98:	ff1f0efe 	.word	0xff1f0efe

08001b9c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a64      	ldr	r2, [pc, #400]	; (8001d44 <HAL_ADC_Start_DMA+0x1a8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d004      	beq.n	8001bc0 <HAL_ADC_Start_DMA+0x24>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a63      	ldr	r2, [pc, #396]	; (8001d48 <HAL_ADC_Start_DMA+0x1ac>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d106      	bne.n	8001bce <HAL_ADC_Start_DMA+0x32>
 8001bc0:	4b60      	ldr	r3, [pc, #384]	; (8001d44 <HAL_ADC_Start_DMA+0x1a8>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f040 80b3 	bne.w	8001d34 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_ADC_Start_DMA+0x40>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e0ae      	b.n	8001d3a <HAL_ADC_Start_DMA+0x19e>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 f9c1 	bl	8001f6c <ADC_Enable>
 8001bea:	4603      	mov	r3, r0
 8001bec:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f040 809a 	bne.w	8001d2a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a4e      	ldr	r2, [pc, #312]	; (8001d48 <HAL_ADC_Start_DMA+0x1ac>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d105      	bne.n	8001c20 <HAL_ADC_Start_DMA+0x84>
 8001c14:	4b4b      	ldr	r3, [pc, #300]	; (8001d44 <HAL_ADC_Start_DMA+0x1a8>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d115      	bne.n	8001c4c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d026      	beq.n	8001c88 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c4a:	e01d      	b.n	8001c88 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a39      	ldr	r2, [pc, #228]	; (8001d44 <HAL_ADC_Start_DMA+0x1a8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d004      	beq.n	8001c6c <HAL_ADC_Start_DMA+0xd0>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a38      	ldr	r2, [pc, #224]	; (8001d48 <HAL_ADC_Start_DMA+0x1ac>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d10d      	bne.n	8001c88 <HAL_ADC_Start_DMA+0xec>
 8001c6c:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <HAL_ADC_Start_DMA+0x1a8>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	f023 0206 	bic.w	r2, r3, #6
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ca0:	e002      	b.n	8001ca8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a25      	ldr	r2, [pc, #148]	; (8001d4c <HAL_ADC_Start_DMA+0x1b0>)
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <HAL_ADC_Start_DMA+0x1b4>)
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <HAL_ADC_Start_DMA+0x1b8>)
 8001cc6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0202 	mvn.w	r2, #2
 8001cd0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ce0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a18      	ldr	r0, [r3, #32]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	334c      	adds	r3, #76	; 0x4c
 8001cec:	4619      	mov	r1, r3
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f000 fb77 	bl	80023e4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d00:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d04:	d108      	bne.n	8001d18 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d14:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d16:	e00f      	b.n	8001d38 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d26:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d28:	e006      	b.n	8001d38 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001d32:	e001      	b.n	8001d38 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40012400 	.word	0x40012400
 8001d48:	40012800 	.word	0x40012800
 8001d4c:	080020a3 	.word	0x080020a3
 8001d50:	0800211f 	.word	0x0800211f
 8001d54:	0800213b 	.word	0x0800213b

08001d58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr

08001d6a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x20>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e0dc      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x1da>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b06      	cmp	r3, #6
 8001daa:	d81c      	bhi.n	8001de6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b05      	subs	r3, #5
 8001dbe:	221f      	movs	r2, #31
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	4019      	ands	r1, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3b05      	subs	r3, #5
 8001dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	635a      	str	r2, [r3, #52]	; 0x34
 8001de4:	e03c      	b.n	8001e60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	d81c      	bhi.n	8001e28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3b23      	subs	r3, #35	; 0x23
 8001e00:	221f      	movs	r2, #31
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	4019      	ands	r1, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	3b23      	subs	r3, #35	; 0x23
 8001e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	631a      	str	r2, [r3, #48]	; 0x30
 8001e26:	e01b      	b.n	8001e60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	3b41      	subs	r3, #65	; 0x41
 8001e3a:	221f      	movs	r2, #31
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	4019      	ands	r1, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	3b41      	subs	r3, #65	; 0x41
 8001e54:	fa00 f203 	lsl.w	r2, r0, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b09      	cmp	r3, #9
 8001e66:	d91c      	bls.n	8001ea2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68d9      	ldr	r1, [r3, #12]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	3b1e      	subs	r3, #30
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	4019      	ands	r1, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	6898      	ldr	r0, [r3, #8]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	3b1e      	subs	r3, #30
 8001e94:	fa00 f203 	lsl.w	r2, r0, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	60da      	str	r2, [r3, #12]
 8001ea0:	e019      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6919      	ldr	r1, [r3, #16]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	2207      	movs	r2, #7
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	4019      	ands	r1, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6898      	ldr	r0, [r3, #8]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	fa00 f203 	lsl.w	r2, r0, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b10      	cmp	r3, #16
 8001edc:	d003      	beq.n	8001ee6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ee2:	2b11      	cmp	r3, #17
 8001ee4:	d132      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <HAL_ADC_ConfigChannel+0x1e4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d125      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d126      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f0c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d11a      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	0c9a      	lsrs	r2, r3, #18
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f2c:	e002      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f9      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x1b2>
 8001f3a:	e007      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	f043 0220 	orr.w	r2, r3, #32
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	40012400 	.word	0x40012400
 8001f64:	20000000 	.word	0x20000000
 8001f68:	431bde83 	.word	0x431bde83

08001f6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d040      	beq.n	800200c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <ADC_Enable+0xac>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1f      	ldr	r2, [pc, #124]	; (800201c <ADC_Enable+0xb0>)
 8001fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa4:	0c9b      	lsrs	r3, r3, #18
 8001fa6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fa8:	e002      	b.n	8001fb0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f9      	bne.n	8001faa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fb6:	f7ff fd0f 	bl	80019d8 <HAL_GetTick>
 8001fba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fbc:	e01f      	b.n	8001ffe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fbe:	f7ff fd0b 	bl	80019d8 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d918      	bls.n	8001ffe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d011      	beq.n	8001ffe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	f043 0210 	orr.w	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e007      	b.n	800200e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d1d8      	bne.n	8001fbe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000000 	.word	0x20000000
 800201c:	431bde83 	.word	0x431bde83

08002020 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d12e      	bne.n	8002098 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0201 	bic.w	r2, r2, #1
 8002048:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800204a:	f7ff fcc5 	bl	80019d8 <HAL_GetTick>
 800204e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002050:	e01b      	b.n	800208a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002052:	f7ff fcc1 	bl	80019d8 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d914      	bls.n	800208a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b01      	cmp	r3, #1
 800206c:	d10d      	bne.n	800208a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	f043 0210 	orr.w	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e007      	b.n	800209a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d0dc      	beq.n	8002052 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d127      	bne.n	800210c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80020d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020d6:	d115      	bne.n	8002104 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d111      	bne.n	8002104 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7fe ff9b 	bl	8001040 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800210a:	e004      	b.n	8002116 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7ff fe13 	bl	8001d58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	f043 0204 	orr.w	r2, r3, #4
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f7ff fe02 	bl	8001d6a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a2:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	60d3      	str	r3, [r2, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db0b      	blt.n	80021fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4906      	ldr	r1, [pc, #24]	; (8002208 <__NVIC_EnableIRQ+0x34>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2001      	movs	r0, #1
 80021f6:	fa00 f202 	lsl.w	r2, r0, r2
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db0a      	blt.n	8002236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	490c      	ldr	r1, [pc, #48]	; (8002258 <__NVIC_SetPriority+0x4c>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	440b      	add	r3, r1
 8002230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002234:	e00a      	b.n	800224c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4908      	ldr	r1, [pc, #32]	; (800225c <__NVIC_SetPriority+0x50>)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3b04      	subs	r3, #4
 8002244:	0112      	lsls	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	440b      	add	r3, r1
 800224a:	761a      	strb	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000e100 	.word	0xe000e100
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f1c3 0307 	rsb	r3, r3, #7
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf28      	it	cs
 800227e:	2304      	movcs	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3304      	adds	r3, #4
 8002286:	2b06      	cmp	r3, #6
 8002288:	d902      	bls.n	8002290 <NVIC_EncodePriority+0x30>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b03      	subs	r3, #3
 800228e:	e000      	b.n	8002292 <NVIC_EncodePriority+0x32>
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	4313      	orrs	r3, r2
         );
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff4f 	bl	8002170 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff64 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ffb2 	bl	8002260 <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff81 	bl	800220c <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff57 	bl	80021d4 <__NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e043      	b.n	80023ce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_DMA_Init+0xa8>)
 800234e:	4413      	add	r3, r2
 8002350:	4a22      	ldr	r2, [pc, #136]	; (80023dc <HAL_DMA_Init+0xac>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	009a      	lsls	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a1f      	ldr	r2, [pc, #124]	; (80023e0 <HAL_DMA_Init+0xb0>)
 8002362:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800237a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800237e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002388:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002394:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	bffdfff8 	.word	0xbffdfff8
 80023dc:	cccccccd 	.word	0xcccccccd
 80023e0:	40020000 	.word	0x40020000

080023e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_DMA_Start_IT+0x20>
 8002400:	2302      	movs	r3, #2
 8002402:	e04b      	b.n	800249c <HAL_DMA_Start_IT+0xb8>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d13a      	bne.n	800248e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f937 	bl	80026b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 020e 	orr.w	r2, r2, #14
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e00f      	b.n	800247c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0204 	bic.w	r2, r2, #4
 800246a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 020a 	orr.w	r2, r2, #10
 800247a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e005      	b.n	800249a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002496:	2302      	movs	r3, #2
 8002498:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800249a:	7dfb      	ldrb	r3, [r7, #23]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	2204      	movs	r2, #4
 80024c2:	409a      	lsls	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d04f      	beq.n	800256c <HAL_DMA_IRQHandler+0xc8>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d04a      	beq.n	800256c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d107      	bne.n	80024f4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0204 	bic.w	r2, r2, #4
 80024f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a66      	ldr	r2, [pc, #408]	; (8002694 <HAL_DMA_IRQHandler+0x1f0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d029      	beq.n	8002552 <HAL_DMA_IRQHandler+0xae>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a65      	ldr	r2, [pc, #404]	; (8002698 <HAL_DMA_IRQHandler+0x1f4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d022      	beq.n	800254e <HAL_DMA_IRQHandler+0xaa>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a63      	ldr	r2, [pc, #396]	; (800269c <HAL_DMA_IRQHandler+0x1f8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d01a      	beq.n	8002548 <HAL_DMA_IRQHandler+0xa4>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a62      	ldr	r2, [pc, #392]	; (80026a0 <HAL_DMA_IRQHandler+0x1fc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d012      	beq.n	8002542 <HAL_DMA_IRQHandler+0x9e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a60      	ldr	r2, [pc, #384]	; (80026a4 <HAL_DMA_IRQHandler+0x200>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00a      	beq.n	800253c <HAL_DMA_IRQHandler+0x98>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a5f      	ldr	r2, [pc, #380]	; (80026a8 <HAL_DMA_IRQHandler+0x204>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d102      	bne.n	8002536 <HAL_DMA_IRQHandler+0x92>
 8002530:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002534:	e00e      	b.n	8002554 <HAL_DMA_IRQHandler+0xb0>
 8002536:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800253a:	e00b      	b.n	8002554 <HAL_DMA_IRQHandler+0xb0>
 800253c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002540:	e008      	b.n	8002554 <HAL_DMA_IRQHandler+0xb0>
 8002542:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002546:	e005      	b.n	8002554 <HAL_DMA_IRQHandler+0xb0>
 8002548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800254c:	e002      	b.n	8002554 <HAL_DMA_IRQHandler+0xb0>
 800254e:	2340      	movs	r3, #64	; 0x40
 8002550:	e000      	b.n	8002554 <HAL_DMA_IRQHandler+0xb0>
 8002552:	2304      	movs	r3, #4
 8002554:	4a55      	ldr	r2, [pc, #340]	; (80026ac <HAL_DMA_IRQHandler+0x208>)
 8002556:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8094 	beq.w	800268a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800256a:	e08e      	b.n	800268a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2202      	movs	r2, #2
 8002572:	409a      	lsls	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d056      	beq.n	800262a <HAL_DMA_IRQHandler+0x186>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d051      	beq.n	800262a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 020a 	bic.w	r2, r2, #10
 80025a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a38      	ldr	r2, [pc, #224]	; (8002694 <HAL_DMA_IRQHandler+0x1f0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d029      	beq.n	800260a <HAL_DMA_IRQHandler+0x166>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a37      	ldr	r2, [pc, #220]	; (8002698 <HAL_DMA_IRQHandler+0x1f4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d022      	beq.n	8002606 <HAL_DMA_IRQHandler+0x162>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a35      	ldr	r2, [pc, #212]	; (800269c <HAL_DMA_IRQHandler+0x1f8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01a      	beq.n	8002600 <HAL_DMA_IRQHandler+0x15c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a34      	ldr	r2, [pc, #208]	; (80026a0 <HAL_DMA_IRQHandler+0x1fc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d012      	beq.n	80025fa <HAL_DMA_IRQHandler+0x156>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a32      	ldr	r2, [pc, #200]	; (80026a4 <HAL_DMA_IRQHandler+0x200>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00a      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x150>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a31      	ldr	r2, [pc, #196]	; (80026a8 <HAL_DMA_IRQHandler+0x204>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d102      	bne.n	80025ee <HAL_DMA_IRQHandler+0x14a>
 80025e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025ec:	e00e      	b.n	800260c <HAL_DMA_IRQHandler+0x168>
 80025ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f2:	e00b      	b.n	800260c <HAL_DMA_IRQHandler+0x168>
 80025f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f8:	e008      	b.n	800260c <HAL_DMA_IRQHandler+0x168>
 80025fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025fe:	e005      	b.n	800260c <HAL_DMA_IRQHandler+0x168>
 8002600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002604:	e002      	b.n	800260c <HAL_DMA_IRQHandler+0x168>
 8002606:	2320      	movs	r3, #32
 8002608:	e000      	b.n	800260c <HAL_DMA_IRQHandler+0x168>
 800260a:	2302      	movs	r3, #2
 800260c:	4a27      	ldr	r2, [pc, #156]	; (80026ac <HAL_DMA_IRQHandler+0x208>)
 800260e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	d034      	beq.n	800268a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002628:	e02f      	b.n	800268a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	2208      	movs	r2, #8
 8002630:	409a      	lsls	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d028      	beq.n	800268c <HAL_DMA_IRQHandler+0x1e8>
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d023      	beq.n	800268c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 020e 	bic.w	r2, r2, #14
 8002652:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265c:	2101      	movs	r1, #1
 800265e:	fa01 f202 	lsl.w	r2, r1, r2
 8002662:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	2b00      	cmp	r3, #0
 8002680:	d004      	beq.n	800268c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	4798      	blx	r3
    }
  }
  return;
 800268a:	bf00      	nop
 800268c:	bf00      	nop
}
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40020008 	.word	0x40020008
 8002698:	4002001c 	.word	0x4002001c
 800269c:	40020030 	.word	0x40020030
 80026a0:	40020044 	.word	0x40020044
 80026a4:	40020058 	.word	0x40020058
 80026a8:	4002006c 	.word	0x4002006c
 80026ac:	40020000 	.word	0x40020000

080026b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	2101      	movs	r1, #1
 80026c8:	fa01 f202 	lsl.w	r2, r1, r2
 80026cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d108      	bne.n	80026f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026ee:	e007      	b.n	8002700 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	60da      	str	r2, [r3, #12]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
	...

0800270c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800270c:	b480      	push	{r7}
 800270e:	b08b      	sub	sp, #44	; 0x2c
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800271a:	2300      	movs	r3, #0
 800271c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271e:	e169      	b.n	80029f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002720:	2201      	movs	r2, #1
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	429a      	cmp	r2, r3
 800273a:	f040 8158 	bne.w	80029ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4a9a      	ldr	r2, [pc, #616]	; (80029ac <HAL_GPIO_Init+0x2a0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d05e      	beq.n	8002806 <HAL_GPIO_Init+0xfa>
 8002748:	4a98      	ldr	r2, [pc, #608]	; (80029ac <HAL_GPIO_Init+0x2a0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d875      	bhi.n	800283a <HAL_GPIO_Init+0x12e>
 800274e:	4a98      	ldr	r2, [pc, #608]	; (80029b0 <HAL_GPIO_Init+0x2a4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d058      	beq.n	8002806 <HAL_GPIO_Init+0xfa>
 8002754:	4a96      	ldr	r2, [pc, #600]	; (80029b0 <HAL_GPIO_Init+0x2a4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d86f      	bhi.n	800283a <HAL_GPIO_Init+0x12e>
 800275a:	4a96      	ldr	r2, [pc, #600]	; (80029b4 <HAL_GPIO_Init+0x2a8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d052      	beq.n	8002806 <HAL_GPIO_Init+0xfa>
 8002760:	4a94      	ldr	r2, [pc, #592]	; (80029b4 <HAL_GPIO_Init+0x2a8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d869      	bhi.n	800283a <HAL_GPIO_Init+0x12e>
 8002766:	4a94      	ldr	r2, [pc, #592]	; (80029b8 <HAL_GPIO_Init+0x2ac>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d04c      	beq.n	8002806 <HAL_GPIO_Init+0xfa>
 800276c:	4a92      	ldr	r2, [pc, #584]	; (80029b8 <HAL_GPIO_Init+0x2ac>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d863      	bhi.n	800283a <HAL_GPIO_Init+0x12e>
 8002772:	4a92      	ldr	r2, [pc, #584]	; (80029bc <HAL_GPIO_Init+0x2b0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d046      	beq.n	8002806 <HAL_GPIO_Init+0xfa>
 8002778:	4a90      	ldr	r2, [pc, #576]	; (80029bc <HAL_GPIO_Init+0x2b0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d85d      	bhi.n	800283a <HAL_GPIO_Init+0x12e>
 800277e:	2b12      	cmp	r3, #18
 8002780:	d82a      	bhi.n	80027d8 <HAL_GPIO_Init+0xcc>
 8002782:	2b12      	cmp	r3, #18
 8002784:	d859      	bhi.n	800283a <HAL_GPIO_Init+0x12e>
 8002786:	a201      	add	r2, pc, #4	; (adr r2, 800278c <HAL_GPIO_Init+0x80>)
 8002788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278c:	08002807 	.word	0x08002807
 8002790:	080027e1 	.word	0x080027e1
 8002794:	080027f3 	.word	0x080027f3
 8002798:	08002835 	.word	0x08002835
 800279c:	0800283b 	.word	0x0800283b
 80027a0:	0800283b 	.word	0x0800283b
 80027a4:	0800283b 	.word	0x0800283b
 80027a8:	0800283b 	.word	0x0800283b
 80027ac:	0800283b 	.word	0x0800283b
 80027b0:	0800283b 	.word	0x0800283b
 80027b4:	0800283b 	.word	0x0800283b
 80027b8:	0800283b 	.word	0x0800283b
 80027bc:	0800283b 	.word	0x0800283b
 80027c0:	0800283b 	.word	0x0800283b
 80027c4:	0800283b 	.word	0x0800283b
 80027c8:	0800283b 	.word	0x0800283b
 80027cc:	0800283b 	.word	0x0800283b
 80027d0:	080027e9 	.word	0x080027e9
 80027d4:	080027fd 	.word	0x080027fd
 80027d8:	4a79      	ldr	r2, [pc, #484]	; (80029c0 <HAL_GPIO_Init+0x2b4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027de:	e02c      	b.n	800283a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	623b      	str	r3, [r7, #32]
          break;
 80027e6:	e029      	b.n	800283c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	3304      	adds	r3, #4
 80027ee:	623b      	str	r3, [r7, #32]
          break;
 80027f0:	e024      	b.n	800283c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	3308      	adds	r3, #8
 80027f8:	623b      	str	r3, [r7, #32]
          break;
 80027fa:	e01f      	b.n	800283c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	330c      	adds	r3, #12
 8002802:	623b      	str	r3, [r7, #32]
          break;
 8002804:	e01a      	b.n	800283c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800280e:	2304      	movs	r3, #4
 8002810:	623b      	str	r3, [r7, #32]
          break;
 8002812:	e013      	b.n	800283c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800281c:	2308      	movs	r3, #8
 800281e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	611a      	str	r2, [r3, #16]
          break;
 8002826:	e009      	b.n	800283c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002828:	2308      	movs	r3, #8
 800282a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	615a      	str	r2, [r3, #20]
          break;
 8002832:	e003      	b.n	800283c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002834:	2300      	movs	r3, #0
 8002836:	623b      	str	r3, [r7, #32]
          break;
 8002838:	e000      	b.n	800283c <HAL_GPIO_Init+0x130>
          break;
 800283a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2bff      	cmp	r3, #255	; 0xff
 8002840:	d801      	bhi.n	8002846 <HAL_GPIO_Init+0x13a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	e001      	b.n	800284a <HAL_GPIO_Init+0x13e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3304      	adds	r3, #4
 800284a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2bff      	cmp	r3, #255	; 0xff
 8002850:	d802      	bhi.n	8002858 <HAL_GPIO_Init+0x14c>
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	e002      	b.n	800285e <HAL_GPIO_Init+0x152>
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	3b08      	subs	r3, #8
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	210f      	movs	r1, #15
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	fa01 f303 	lsl.w	r3, r1, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	401a      	ands	r2, r3
 8002870:	6a39      	ldr	r1, [r7, #32]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	431a      	orrs	r2, r3
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80b1 	beq.w	80029ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800288c:	4b4d      	ldr	r3, [pc, #308]	; (80029c4 <HAL_GPIO_Init+0x2b8>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4a4c      	ldr	r2, [pc, #304]	; (80029c4 <HAL_GPIO_Init+0x2b8>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6193      	str	r3, [r2, #24]
 8002898:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <HAL_GPIO_Init+0x2b8>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028a4:	4a48      	ldr	r2, [pc, #288]	; (80029c8 <HAL_GPIO_Init+0x2bc>)
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	3302      	adds	r3, #2
 80028ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	220f      	movs	r2, #15
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4013      	ands	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a40      	ldr	r2, [pc, #256]	; (80029cc <HAL_GPIO_Init+0x2c0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d013      	beq.n	80028f8 <HAL_GPIO_Init+0x1ec>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3f      	ldr	r2, [pc, #252]	; (80029d0 <HAL_GPIO_Init+0x2c4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00d      	beq.n	80028f4 <HAL_GPIO_Init+0x1e8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a3e      	ldr	r2, [pc, #248]	; (80029d4 <HAL_GPIO_Init+0x2c8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d007      	beq.n	80028f0 <HAL_GPIO_Init+0x1e4>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a3d      	ldr	r2, [pc, #244]	; (80029d8 <HAL_GPIO_Init+0x2cc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_GPIO_Init+0x1e0>
 80028e8:	2303      	movs	r3, #3
 80028ea:	e006      	b.n	80028fa <HAL_GPIO_Init+0x1ee>
 80028ec:	2304      	movs	r3, #4
 80028ee:	e004      	b.n	80028fa <HAL_GPIO_Init+0x1ee>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e002      	b.n	80028fa <HAL_GPIO_Init+0x1ee>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_GPIO_Init+0x1ee>
 80028f8:	2300      	movs	r3, #0
 80028fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fc:	f002 0203 	and.w	r2, r2, #3
 8002900:	0092      	lsls	r2, r2, #2
 8002902:	4093      	lsls	r3, r2
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800290a:	492f      	ldr	r1, [pc, #188]	; (80029c8 <HAL_GPIO_Init+0x2bc>)
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	3302      	adds	r3, #2
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d006      	beq.n	8002932 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002924:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	492c      	ldr	r1, [pc, #176]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	608b      	str	r3, [r1, #8]
 8002930:	e006      	b.n	8002940 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002932:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	43db      	mvns	r3, r3
 800293a:	4928      	ldr	r1, [pc, #160]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 800293c:	4013      	ands	r3, r2
 800293e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d006      	beq.n	800295a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800294c:	4b23      	ldr	r3, [pc, #140]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	4922      	ldr	r1, [pc, #136]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	60cb      	str	r3, [r1, #12]
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	43db      	mvns	r3, r3
 8002962:	491e      	ldr	r1, [pc, #120]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 8002964:	4013      	ands	r3, r2
 8002966:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	4918      	ldr	r1, [pc, #96]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002982:	4b16      	ldr	r3, [pc, #88]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	43db      	mvns	r3, r3
 800298a:	4914      	ldr	r1, [pc, #80]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 800298c:	4013      	ands	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d021      	beq.n	80029e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	490e      	ldr	r1, [pc, #56]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]
 80029a8:	e021      	b.n	80029ee <HAL_GPIO_Init+0x2e2>
 80029aa:	bf00      	nop
 80029ac:	10320000 	.word	0x10320000
 80029b0:	10310000 	.word	0x10310000
 80029b4:	10220000 	.word	0x10220000
 80029b8:	10210000 	.word	0x10210000
 80029bc:	10120000 	.word	0x10120000
 80029c0:	10110000 	.word	0x10110000
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40010800 	.word	0x40010800
 80029d0:	40010c00 	.word	0x40010c00
 80029d4:	40011000 	.word	0x40011000
 80029d8:	40011400 	.word	0x40011400
 80029dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_GPIO_Init+0x304>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	4909      	ldr	r1, [pc, #36]	; (8002a10 <HAL_GPIO_Init+0x304>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	3301      	adds	r3, #1
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f47f ae8e 	bne.w	8002720 <HAL_GPIO_Init+0x14>
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	372c      	adds	r7, #44	; 0x2c
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	40010400 	.word	0x40010400

08002a14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	887b      	ldrh	r3, [r7, #2]
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	e001      	b.n	8002a36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	807b      	strh	r3, [r7, #2]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a52:	787b      	ldrb	r3, [r7, #1]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a58:	887a      	ldrh	r2, [r7, #2]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a5e:	e003      	b.n	8002a68 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a60:	887b      	ldrh	r3, [r7, #2]
 8002a62:	041a      	lsls	r2, r3, #16
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	611a      	str	r2, [r3, #16]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a84:	887a      	ldrh	r2, [r7, #2]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	041a      	lsls	r2, r3, #16
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	887b      	ldrh	r3, [r7, #2]
 8002a92:	400b      	ands	r3, r1
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	611a      	str	r2, [r3, #16]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e12b      	b.n	8002d0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe fd16 	bl	80014fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2224      	movs	r2, #36	; 0x24
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002af6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b08:	f002 fa4a 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8002b0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4a81      	ldr	r2, [pc, #516]	; (8002d18 <HAL_I2C_Init+0x274>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d807      	bhi.n	8002b28 <HAL_I2C_Init+0x84>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a80      	ldr	r2, [pc, #512]	; (8002d1c <HAL_I2C_Init+0x278>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	bf94      	ite	ls
 8002b20:	2301      	movls	r3, #1
 8002b22:	2300      	movhi	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e006      	b.n	8002b36 <HAL_I2C_Init+0x92>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a7d      	ldr	r2, [pc, #500]	; (8002d20 <HAL_I2C_Init+0x27c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	bf94      	ite	ls
 8002b30:	2301      	movls	r3, #1
 8002b32:	2300      	movhi	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0e7      	b.n	8002d0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a78      	ldr	r2, [pc, #480]	; (8002d24 <HAL_I2C_Init+0x280>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	0c9b      	lsrs	r3, r3, #18
 8002b48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a6a      	ldr	r2, [pc, #424]	; (8002d18 <HAL_I2C_Init+0x274>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d802      	bhi.n	8002b78 <HAL_I2C_Init+0xd4>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3301      	adds	r3, #1
 8002b76:	e009      	b.n	8002b8c <HAL_I2C_Init+0xe8>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	4a69      	ldr	r2, [pc, #420]	; (8002d28 <HAL_I2C_Init+0x284>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	430b      	orrs	r3, r1
 8002b92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	495c      	ldr	r1, [pc, #368]	; (8002d18 <HAL_I2C_Init+0x274>)
 8002ba8:	428b      	cmp	r3, r1
 8002baa:	d819      	bhi.n	8002be0 <HAL_I2C_Init+0x13c>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1e59      	subs	r1, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bba:	1c59      	adds	r1, r3, #1
 8002bbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_I2C_Init+0x138>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1e59      	subs	r1, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bda:	e051      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002bdc:	2304      	movs	r3, #4
 8002bde:	e04f      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d111      	bne.n	8002c0c <HAL_I2C_Init+0x168>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e58      	subs	r0, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	440b      	add	r3, r1
 8002bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e012      	b.n	8002c32 <HAL_I2C_Init+0x18e>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1e58      	subs	r0, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	0099      	lsls	r1, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Init+0x196>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e022      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10e      	bne.n	8002c60 <HAL_I2C_Init+0x1bc>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e58      	subs	r0, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6859      	ldr	r1, [r3, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	440b      	add	r3, r1
 8002c50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c54:	3301      	adds	r3, #1
 8002c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c5e:	e00f      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1e58      	subs	r0, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	0099      	lsls	r1, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	6809      	ldr	r1, [r1, #0]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6911      	ldr	r1, [r2, #16]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68d2      	ldr	r2, [r2, #12]
 8002cba:	4311      	orrs	r1, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	000186a0 	.word	0x000186a0
 8002d1c:	001e847f 	.word	0x001e847f
 8002d20:	003d08ff 	.word	0x003d08ff
 8002d24:	431bde83 	.word	0x431bde83
 8002d28:	10624dd3 	.word	0x10624dd3

08002d2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d2e:	b08b      	sub	sp, #44	; 0x2c
 8002d30:	af06      	add	r7, sp, #24
 8002d32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0f1      	b.n	8002f22 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f009 ff36 	bl	800cbc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 f9a5 	bl	80060b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	687e      	ldr	r6, [r7, #4]
 8002d72:	466d      	mov	r5, sp
 8002d74:	f106 0410 	add.w	r4, r6, #16
 8002d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	602b      	str	r3, [r5, #0]
 8002d80:	1d33      	adds	r3, r6, #4
 8002d82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d84:	6838      	ldr	r0, [r7, #0]
 8002d86:	f003 f96f 	bl	8006068 <USB_CoreInit>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0c2      	b.n	8002f22 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 f9a0 	bl	80060e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	e040      	b.n	8002e30 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	440b      	add	r3, r1
 8002dd4:	7bfa      	ldrb	r2, [r7, #15]
 8002dd6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	440b      	add	r3, r1
 8002de8:	3303      	adds	r3, #3
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dee:	7bfa      	ldrb	r2, [r7, #15]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3338      	adds	r3, #56	; 0x38
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e02:	7bfa      	ldrb	r2, [r7, #15]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	333c      	adds	r3, #60	; 0x3c
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	440b      	add	r3, r1
 8002e24:	3340      	adds	r3, #64	; 0x40
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d3b9      	bcc.n	8002dae <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
 8002e3e:	e044      	b.n	8002eca <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	440b      	add	r3, r1
 8002e4e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e56:	7bfa      	ldrb	r2, [r7, #15]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	440b      	add	r3, r1
 8002e64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e82:	7bfa      	ldrb	r2, [r7, #15]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	440b      	add	r3, r1
 8002e90:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	440b      	add	r3, r1
 8002ea6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eae:	7bfa      	ldrb	r2, [r7, #15]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	440b      	add	r3, r1
 8002ebc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d3b5      	bcc.n	8002e40 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	687e      	ldr	r6, [r7, #4]
 8002edc:	466d      	mov	r5, sp
 8002ede:	f106 0410 	add.w	r4, r6, #16
 8002ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	602b      	str	r3, [r5, #0]
 8002eea:	1d33      	adds	r3, r6, #4
 8002eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eee:	6838      	ldr	r0, [r7, #0]
 8002ef0:	f003 f906 	bl	8006100 <USB_DevInit>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00d      	b.n	8002f22 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f005 fb87 	bl	800862e <USB_DevDisconnect>

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_PCD_Start+0x16>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e016      	b.n	8002f6e <HAL_PCD_Start+0x44>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 f89b 	bl	8006088 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002f52:	2101      	movs	r1, #1
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f00a f8a8 	bl	800d0aa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f005 fb5b 	bl	800861a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b088      	sub	sp, #32
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f005 fb5d 	bl	8008642 <USB_ReadInterrupts>
 8002f88:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fb1b 	bl	80035d0 <PCD_EP_ISR_Handler>

    return;
 8002f9a:	e119      	b.n	80031d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d013      	beq.n	8002fce <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb8:	b292      	uxth	r2, r2
 8002fba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f009 fe7b 	bl	800ccba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f905 	bl	80031d6 <HAL_PCD_SetAddress>

    return;
 8002fcc:	e100      	b.n	80031d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00c      	beq.n	8002ff2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fea:	b292      	uxth	r2, r2
 8002fec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ff0:	e0ee      	b.n	80031d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00c      	beq.n	8003016 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003004:	b29a      	uxth	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800300e:	b292      	uxth	r2, r2
 8003010:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003014:	e0dc      	b.n	80031d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d027      	beq.n	8003070 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003028:	b29a      	uxth	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0204 	bic.w	r2, r2, #4
 8003032:	b292      	uxth	r2, r2
 8003034:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003040:	b29a      	uxth	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0208 	bic.w	r2, r2, #8
 800304a:	b292      	uxth	r2, r2
 800304c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f009 fe6b 	bl	800cd2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800305e:	b29a      	uxth	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003068:	b292      	uxth	r2, r2
 800306a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800306e:	e0af      	b.n	80031d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8083 	beq.w	8003182 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800307c:	2300      	movs	r3, #0
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e010      	b.n	80030a4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	7ffb      	ldrb	r3, [r7, #31]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	441a      	add	r2, r3
 800308e:	7ffb      	ldrb	r3, [r7, #31]
 8003090:	8812      	ldrh	r2, [r2, #0]
 8003092:	b292      	uxth	r2, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	3320      	adds	r3, #32
 8003098:	443b      	add	r3, r7
 800309a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800309e:	7ffb      	ldrb	r3, [r7, #31]
 80030a0:	3301      	adds	r3, #1
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	7ffb      	ldrb	r3, [r7, #31]
 80030a6:	2b07      	cmp	r3, #7
 80030a8:	d9eb      	bls.n	8003082 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	b292      	uxth	r2, r2
 80030be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	b292      	uxth	r2, r2
 80030d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80030da:	bf00      	nop
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f6      	beq.n	80030dc <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003100:	b292      	uxth	r2, r2
 8003102:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003106:	2300      	movs	r3, #0
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e00f      	b.n	800312c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800310c:	7ffb      	ldrb	r3, [r7, #31]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	4611      	mov	r1, r2
 8003114:	7ffa      	ldrb	r2, [r7, #31]
 8003116:	0092      	lsls	r2, r2, #2
 8003118:	440a      	add	r2, r1
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	3320      	adds	r3, #32
 800311e:	443b      	add	r3, r7
 8003120:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003124:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003126:	7ffb      	ldrb	r3, [r7, #31]
 8003128:	3301      	adds	r3, #1
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	7ffb      	ldrb	r3, [r7, #31]
 800312e:	2b07      	cmp	r3, #7
 8003130:	d9ec      	bls.n	800310c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800313a:	b29a      	uxth	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0208 	orr.w	r2, r2, #8
 8003144:	b292      	uxth	r2, r2
 8003146:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003152:	b29a      	uxth	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800315c:	b292      	uxth	r2, r2
 800315e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800316a:	b29a      	uxth	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0204 	orr.w	r2, r2, #4
 8003174:	b292      	uxth	r2, r2
 8003176:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f009 fdbc 	bl	800ccf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003180:	e026      	b.n	80031d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00f      	beq.n	80031ac <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003194:	b29a      	uxth	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800319e:	b292      	uxth	r2, r2
 80031a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f009 fd7a 	bl	800cc9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80031aa:	e011      	b.n	80031d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00c      	beq.n	80031d0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031be:	b29a      	uxth	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031c8:	b292      	uxth	r2, r2
 80031ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80031ce:	bf00      	nop
  }
}
 80031d0:	3720      	adds	r7, #32
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_PCD_SetAddress+0x1a>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e013      	b.n	8003218 <HAL_PCD_SetAddress+0x42>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f005 f9f3 	bl	80085f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	4608      	mov	r0, r1
 800322a:	4611      	mov	r1, r2
 800322c:	461a      	mov	r2, r3
 800322e:	4603      	mov	r3, r0
 8003230:	70fb      	strb	r3, [r7, #3]
 8003232:	460b      	mov	r3, r1
 8003234:	803b      	strh	r3, [r7, #0]
 8003236:	4613      	mov	r3, r2
 8003238:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800323e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003242:	2b00      	cmp	r3, #0
 8003244:	da0e      	bge.n	8003264 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	705a      	strb	r2, [r3, #1]
 8003262:	e00e      	b.n	8003282 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	f003 0207 	and.w	r2, r3, #7
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4413      	add	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800328e:	883a      	ldrh	r2, [r7, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	78ba      	ldrb	r2, [r7, #2]
 8003298:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800329a:	78bb      	ldrb	r3, [r7, #2]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d102      	bne.n	80032a6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_PCD_EP_Open+0x94>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e00e      	b.n	80032d2 <HAL_PCD_EP_Open+0xb2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68f9      	ldr	r1, [r7, #12]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 ff3c 	bl	8006140 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80032d0:	7afb      	ldrb	r3, [r7, #11]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	da0e      	bge.n	800330c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	705a      	strb	r2, [r3, #1]
 800330a:	e00e      	b.n	800332a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	f003 0207 	and.w	r2, r3, #7
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	b2da      	uxtb	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_PCD_EP_Close+0x6a>
 8003340:	2302      	movs	r3, #2
 8003342:	e00e      	b.n	8003362 <HAL_PCD_EP_Close+0x88>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68f9      	ldr	r1, [r7, #12]
 8003352:	4618      	mov	r0, r3
 8003354:	f003 fab4 	bl	80068c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b086      	sub	sp, #24
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	460b      	mov	r3, r1
 8003378:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800337a:	7afb      	ldrb	r3, [r7, #11]
 800337c:	f003 0207 	and.w	r2, r3, #7
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4413      	add	r3, r2
 8003390:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2200      	movs	r2, #0
 80033a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2200      	movs	r2, #0
 80033a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033aa:	7afb      	ldrb	r3, [r7, #11]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6979      	ldr	r1, [r7, #20]
 80033bc:	4618      	mov	r0, r3
 80033be:	f003 fc6b 	bl	8006c98 <USB_EPStartXfer>

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	f003 0207 	and.w	r2, r3, #7
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	440b      	add	r3, r1
 80033ea:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	460b      	mov	r3, r1
 8003408:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800340a:	7afb      	ldrb	r3, [r7, #11]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4413      	add	r3, r2
 800341e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2200      	movs	r2, #0
 800343e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2201      	movs	r2, #1
 8003444:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003446:	7afb      	ldrb	r3, [r7, #11]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	b2da      	uxtb	r2, r3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6979      	ldr	r1, [r7, #20]
 8003458:	4618      	mov	r0, r3
 800345a:	f003 fc1d 	bl	8006c98 <USB_EPStartXfer>

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	f003 0207 	and.w	r2, r3, #7
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	429a      	cmp	r2, r3
 8003480:	d901      	bls.n	8003486 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e04c      	b.n	8003520 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800348a:	2b00      	cmp	r3, #0
 800348c:	da0e      	bge.n	80034ac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	705a      	strb	r2, [r3, #1]
 80034aa:	e00c      	b.n	80034c6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_PCD_EP_SetStall+0x7e>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e01c      	b.n	8003520 <HAL_PCD_EP_SetStall+0xb8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f004 ff80 	bl	80083fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	2b00      	cmp	r3, #0
 8003502:	d108      	bne.n	8003516 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f005 f8a5 	bl	8008660 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	f003 020f 	and.w	r2, r3, #15
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	429a      	cmp	r2, r3
 8003540:	d901      	bls.n	8003546 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e040      	b.n	80035c8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003546:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800354a:	2b00      	cmp	r3, #0
 800354c:	da0e      	bge.n	800356c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	705a      	strb	r2, [r3, #1]
 800356a:	e00e      	b.n	800358a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	f003 0207 	and.w	r2, r3, #7
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	b2da      	uxtb	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_PCD_EP_ClrStall+0x82>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e00e      	b.n	80035c8 <HAL_PCD_EP_ClrStall+0xa0>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68f9      	ldr	r1, [r7, #12]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f004 ff6e 	bl	800849a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b096      	sub	sp, #88	; 0x58
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035d8:	e3bf      	b.n	8003d5a <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80035e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80035f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f040 8179 	bne.w	80038f0 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80035fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	2b00      	cmp	r3, #0
 8003608:	d152      	bne.n	80036b0 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
 8003612:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361a:	81fb      	strh	r3, [r7, #14]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	89fb      	ldrh	r3, [r7, #14]
 8003622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800362a:	b29b      	uxth	r3, r3
 800362c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3328      	adds	r3, #40	; 0x28
 8003632:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800363c:	b29b      	uxth	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	3302      	adds	r3, #2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800365c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	441a      	add	r2, r3
 800366a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800366e:	2100      	movs	r1, #0
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f009 fafa 	bl	800cc6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 836b 	beq.w	8003d5a <PCD_EP_ISR_Handler+0x78a>
 8003684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	f040 8366 	bne.w	8003d5a <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003694:	b2db      	uxtb	r3, r3
 8003696:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800369a:	b2da      	uxtb	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	b292      	uxth	r2, r2
 80036a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036ae:	e354      	b.n	8003d5a <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036b6:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80036c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80036c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d034      	beq.n	8003738 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	3306      	adds	r3, #6
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003706:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800370a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800370c:	b29b      	uxth	r3, r3
 800370e:	f004 fff7 	bl	8008700 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	b29a      	uxth	r2, r3
 800371a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800371e:	4013      	ands	r3, r2
 8003720:	823b      	strh	r3, [r7, #16]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	8a3a      	ldrh	r2, [r7, #16]
 8003728:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800372c:	b292      	uxth	r2, r2
 800372e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f009 fa6d 	bl	800cc10 <HAL_PCD_SetupStageCallback>
 8003736:	e310      	b.n	8003d5a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003738:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800373c:	2b00      	cmp	r3, #0
 800373e:	f280 830c 	bge.w	8003d5a <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29a      	uxth	r2, r3
 800374a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800374e:	4013      	ands	r3, r2
 8003750:	83fb      	strh	r3, [r7, #30]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	8bfa      	ldrh	r2, [r7, #30]
 8003758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800375c:	b292      	uxth	r2, r2
 800375e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003768:	b29b      	uxth	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	3306      	adds	r3, #6
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800378a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800378c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d019      	beq.n	80037c8 <PCD_EP_ISR_Handler+0x1f8>
 8003794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d015      	beq.n	80037c8 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a2:	6959      	ldr	r1, [r3, #20]
 80037a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80037a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037aa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f004 ffa7 	bl	8008700 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80037b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	441a      	add	r2, r3
 80037bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037be:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80037c0:	2100      	movs	r1, #0
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f009 fa36 	bl	800cc34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80037d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f040 82bd 	bne.w	8003d5a <PCD_EP_ISR_Handler+0x78a>
 80037e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037e4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80037e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037ec:	f000 82b5 	beq.w	8003d5a <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037fe:	b29b      	uxth	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	4413      	add	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800381a:	b29a      	uxth	r2, r3
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	801a      	strh	r2, [r3, #0]
 8003820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b3e      	cmp	r3, #62	; 0x3e
 8003826:	d91d      	bls.n	8003864 <PCD_EP_ISR_Handler+0x294>
 8003828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	647b      	str	r3, [r7, #68]	; 0x44
 8003830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <PCD_EP_ISR_Handler+0x272>
 800383c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383e:	3b01      	subs	r3, #1
 8003840:	647b      	str	r3, [r7, #68]	; 0x44
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	b29a      	uxth	r2, r3
 8003848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800384a:	b29b      	uxth	r3, r3
 800384c:	029b      	lsls	r3, r3, #10
 800384e:	b29b      	uxth	r3, r3
 8003850:	4313      	orrs	r3, r2
 8003852:	b29b      	uxth	r3, r3
 8003854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800385c:	b29a      	uxth	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	801a      	strh	r2, [r3, #0]
 8003862:	e026      	b.n	80038b2 <PCD_EP_ISR_Handler+0x2e2>
 8003864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10a      	bne.n	8003882 <PCD_EP_ISR_Handler+0x2b2>
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800387a:	b29a      	uxth	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	801a      	strh	r2, [r3, #0]
 8003880:	e017      	b.n	80038b2 <PCD_EP_ISR_Handler+0x2e2>
 8003882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	647b      	str	r3, [r7, #68]	; 0x44
 800388a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <PCD_EP_ISR_Handler+0x2cc>
 8003896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003898:	3301      	adds	r3, #1
 800389a:	647b      	str	r3, [r7, #68]	; 0x44
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	029b      	lsls	r3, r3, #10
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	4313      	orrs	r3, r2
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	827b      	strh	r3, [r7, #18]
 80038c4:	8a7b      	ldrh	r3, [r7, #18]
 80038c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80038ca:	827b      	strh	r3, [r7, #18]
 80038cc:	8a7b      	ldrh	r3, [r7, #18]
 80038ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038d2:	827b      	strh	r3, [r7, #18]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	8a7b      	ldrh	r3, [r7, #18]
 80038da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	8013      	strh	r3, [r2, #0]
 80038ee:	e234      	b.n	8003d5a <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003904:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003908:	2b00      	cmp	r3, #0
 800390a:	f280 80fc 	bge.w	8003b06 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	b29a      	uxth	r2, r3
 8003920:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003924:	4013      	ands	r3, r2
 8003926:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800393c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003940:	b292      	uxth	r2, r2
 8003942:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003944:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800395a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800395c:	7b1b      	ldrb	r3, [r3, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d125      	bne.n	80039ae <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800396a:	b29b      	uxth	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	3306      	adds	r3, #6
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800398e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 8092 	beq.w	8003abc <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800399e:	6959      	ldr	r1, [r3, #20]
 80039a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a2:	88da      	ldrh	r2, [r3, #6]
 80039a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80039a8:	f004 feaa 	bl	8008700 <USB_ReadPMA>
 80039ac:	e086      	b.n	8003abc <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80039ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b0:	78db      	ldrb	r3, [r3, #3]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d10a      	bne.n	80039cc <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80039b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80039ba:	461a      	mov	r2, r3
 80039bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f9d9 	bl	8003d76 <HAL_PCD_EP_DB_Receive>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80039ca:	e077      	b.n	8003abc <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	441a      	add	r2, r3
 80039f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80039fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d024      	beq.n	8003a74 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3302      	adds	r3, #2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a52:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003a56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d02e      	beq.n	8003abc <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a64:	6959      	ldr	r1, [r3, #20]
 8003a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a68:	891a      	ldrh	r2, [r3, #8]
 8003a6a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003a6e:	f004 fe47 	bl	8008700 <USB_ReadPMA>
 8003a72:	e023      	b.n	8003abc <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4413      	add	r3, r2
 8003a88:	3306      	adds	r3, #6
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a9c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003aa0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aae:	6959      	ldr	r1, [r3, #20]
 8003ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab2:	895a      	ldrh	r2, [r3, #10]
 8003ab4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003ab8:	f004 fe22 	bl	8008700 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003ac4:	441a      	add	r2, r3
 8003ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003ad2:	441a      	add	r2, r3
 8003ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <PCD_EP_ISR_Handler+0x51c>
 8003ae0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d206      	bcs.n	8003afa <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	4619      	mov	r1, r3
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f009 f89e 	bl	800cc34 <HAL_PCD_DataOutStageCallback>
 8003af8:	e005      	b.n	8003b06 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b00:	4618      	mov	r0, r3
 8003b02:	f003 f8c9 	bl	8006c98 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003b06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8123 	beq.w	8003d5a <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003b14:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4413      	add	r3, r2
 8003b26:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	441a      	add	r2, r3
 8003b54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b66:	78db      	ldrb	r3, [r3, #3]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	f040 80a2 	bne.w	8003cb2 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b70:	2200      	movs	r2, #0
 8003b72:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b76:	7b1b      	ldrb	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8093 	beq.w	8003ca4 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d046      	beq.n	8003c18 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b8c:	785b      	ldrb	r3, [r3, #1]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d126      	bne.n	8003be0 <PCD_EP_ISR_Handler+0x610>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	4413      	add	r3, r2
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8003baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	011a      	lsls	r2, r3, #4
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bb8:	623b      	str	r3, [r7, #32]
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	e061      	b.n	8003ca4 <PCD_EP_ISR_Handler+0x6d4>
 8003be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be2:	785b      	ldrb	r3, [r3, #1]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d15d      	bne.n	8003ca4 <PCD_EP_ISR_Handler+0x6d4>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfc:	4413      	add	r3, r2
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	011a      	lsls	r2, r3, #4
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	4413      	add	r3, r2
 8003c0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	2200      	movs	r2, #0
 8003c14:	801a      	strh	r2, [r3, #0]
 8003c16:	e045      	b.n	8003ca4 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c20:	785b      	ldrb	r3, [r3, #1]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d126      	bne.n	8003c74 <PCD_EP_ISR_Handler+0x6a4>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3a:	4413      	add	r3, r2
 8003c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	011a      	lsls	r2, r3, #4
 8003c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c46:	4413      	add	r3, r2
 8003c48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	801a      	strh	r2, [r3, #0]
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	801a      	strh	r2, [r3, #0]
 8003c72:	e017      	b.n	8003ca4 <PCD_EP_ISR_Handler+0x6d4>
 8003c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c76:	785b      	ldrb	r3, [r3, #1]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d113      	bne.n	8003ca4 <PCD_EP_ISR_Handler+0x6d4>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8a:	4413      	add	r3, r2
 8003c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	011a      	lsls	r2, r3, #4
 8003c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c96:	4413      	add	r3, r2
 8003c98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f008 ffdd 	bl	800cc6a <HAL_PCD_DataInStageCallback>
 8003cb0:	e053      	b.n	8003d5a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003cb2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d146      	bne.n	8003d4c <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3302      	adds	r3, #2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d907      	bls.n	8003d06 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cfe:	1ad2      	subs	r2, r2, r3
 8003d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d02:	619a      	str	r2, [r3, #24]
 8003d04:	e002      	b.n	8003d0c <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d08:	2200      	movs	r2, #0
 8003d0a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f008 ffa5 	bl	800cc6a <HAL_PCD_DataInStageCallback>
 8003d20:	e01b      	b.n	8003d5a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d2a:	441a      	add	r2, r3
 8003d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d2e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d38:	441a      	add	r2, r3
 8003d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d3c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d44:	4618      	mov	r0, r3
 8003d46:	f002 ffa7 	bl	8006c98 <USB_EPStartXfer>
 8003d4a:	e006      	b.n	8003d5a <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003d4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d50:	461a      	mov	r2, r3
 8003d52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f91b 	bl	8003f90 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	b21b      	sxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f6ff ac37 	blt.w	80035da <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3758      	adds	r7, #88	; 0x58
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b088      	sub	sp, #32
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	4613      	mov	r3, r2
 8003d82:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d07e      	beq.n	8003e8c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	3302      	adds	r3, #2
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	8b7b      	ldrh	r3, [r7, #26]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d306      	bcc.n	8003dd0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	8b7b      	ldrh	r3, [r7, #26]
 8003dc8:	1ad2      	subs	r2, r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	619a      	str	r2, [r3, #24]
 8003dce:	e002      	b.n	8003dd6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d123      	bne.n	8003e26 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df8:	833b      	strh	r3, [r7, #24]
 8003dfa:	8b3b      	ldrh	r3, [r7, #24]
 8003dfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e00:	833b      	strh	r3, [r7, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	441a      	add	r2, r3
 8003e10:	8b3b      	ldrh	r3, [r7, #24]
 8003e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01f      	beq.n	8003e70 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4a:	82fb      	strh	r3, [r7, #22]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	441a      	add	r2, r3
 8003e5a:	8afb      	ldrh	r3, [r7, #22]
 8003e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e70:	8b7b      	ldrh	r3, [r7, #26]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8087 	beq.w	8003f86 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	6959      	ldr	r1, [r3, #20]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	891a      	ldrh	r2, [r3, #8]
 8003e84:	8b7b      	ldrh	r3, [r7, #26]
 8003e86:	f004 fc3b 	bl	8008700 <USB_ReadPMA>
 8003e8a:	e07c      	b.n	8003f86 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3306      	adds	r3, #6
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eb4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	8b7b      	ldrh	r3, [r7, #26]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d306      	bcc.n	8003ece <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	699a      	ldr	r2, [r3, #24]
 8003ec4:	8b7b      	ldrh	r3, [r7, #26]
 8003ec6:	1ad2      	subs	r2, r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	619a      	str	r2, [r3, #24]
 8003ecc:	e002      	b.n	8003ed4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d123      	bne.n	8003f24 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef6:	83fb      	strh	r3, [r7, #30]
 8003ef8:	8bfb      	ldrh	r3, [r7, #30]
 8003efa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003efe:	83fb      	strh	r3, [r7, #30]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	441a      	add	r2, r3
 8003f0e:	8bfb      	ldrh	r3, [r7, #30]
 8003f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d11f      	bne.n	8003f6e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f48:	83bb      	strh	r3, [r7, #28]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	441a      	add	r2, r3
 8003f58:	8bbb      	ldrh	r3, [r7, #28]
 8003f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f6e:	8b7b      	ldrh	r3, [r7, #26]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	6959      	ldr	r1, [r3, #20]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	895a      	ldrh	r2, [r3, #10]
 8003f80:	8b7b      	ldrh	r3, [r7, #26]
 8003f82:	f004 fbbd 	bl	8008700 <USB_ReadPMA>
    }
  }

  return count;
 8003f86:	8b7b      	ldrh	r3, [r7, #26]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b0a4      	sub	sp, #144	; 0x90
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 81dd 	beq.w	8004364 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3302      	adds	r3, #2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d907      	bls.n	8003ff2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003fea:	1ad2      	subs	r2, r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	619a      	str	r2, [r3, #24]
 8003ff0:	e002      	b.n	8003ff8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f040 80b9 	bne.w	8004174 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	785b      	ldrb	r3, [r3, #1]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d126      	bne.n	8004058 <HAL_PCD_EP_DB_Transmit+0xc8>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004018:	b29b      	uxth	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	4413      	add	r3, r2
 8004020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	011a      	lsls	r2, r3, #4
 8004028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402a:	4413      	add	r3, r2
 800402c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004030:	62bb      	str	r3, [r7, #40]	; 0x28
 8004032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800403c:	b29a      	uxth	r2, r3
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	801a      	strh	r2, [r3, #0]
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800404c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004050:	b29a      	uxth	r2, r3
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	801a      	strh	r2, [r3, #0]
 8004056:	e01a      	b.n	800408e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	785b      	ldrb	r3, [r3, #1]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d116      	bne.n	800408e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	637b      	str	r3, [r7, #52]	; 0x34
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800406e:	b29b      	uxth	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004074:	4413      	add	r3, r2
 8004076:	637b      	str	r3, [r7, #52]	; 0x34
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	011a      	lsls	r2, r3, #4
 800407e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004080:	4413      	add	r3, r2
 8004082:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	2200      	movs	r2, #0
 800408c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	785b      	ldrb	r3, [r3, #1]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d126      	bne.n	80040ea <HAL_PCD_EP_DB_Transmit+0x15a>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	011a      	lsls	r2, r3, #4
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	4413      	add	r3, r2
 80040be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	801a      	strh	r2, [r3, #0]
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	801a      	strh	r2, [r3, #0]
 80040e8:	e017      	b.n	800411a <HAL_PCD_EP_DB_Transmit+0x18a>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	785b      	ldrb	r3, [r3, #1]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d113      	bne.n	800411a <HAL_PCD_EP_DB_Transmit+0x18a>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	4413      	add	r3, r2
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	011a      	lsls	r2, r3, #4
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	4413      	add	r3, r2
 800410e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004112:	623b      	str	r3, [r7, #32]
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	2200      	movs	r2, #0
 8004118:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	4619      	mov	r1, r3
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f008 fda2 	bl	800cc6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 82fc 	beq.w	800472a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414c:	82fb      	strh	r3, [r7, #22]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	441a      	add	r2, r3
 800415c:	8afb      	ldrh	r3, [r7, #22]
 800415e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800416a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800416e:	b29b      	uxth	r3, r3
 8004170:	8013      	strh	r3, [r2, #0]
 8004172:	e2da      	b.n	800472a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d021      	beq.n	80041c2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004198:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	441a      	add	r2, r3
 80041aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80041ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041be:	b29b      	uxth	r3, r3
 80041c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	f040 82ae 	bne.w	800472a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041d6:	441a      	add	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041e4:	441a      	add	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	6a1a      	ldr	r2, [r3, #32]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d30b      	bcc.n	800420e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	6a1a      	ldr	r2, [r3, #32]
 8004202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004206:	1ad2      	subs	r2, r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	621a      	str	r2, [r3, #32]
 800420c:	e017      	b.n	800423e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d108      	bne.n	8004228 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004216:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800421a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004226:	e00a      	b.n	800423e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2200      	movs	r2, #0
 800423c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d165      	bne.n	8004312 <HAL_PCD_EP_DB_Transmit+0x382>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004254:	b29b      	uxth	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425a:	4413      	add	r3, r2
 800425c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	011a      	lsls	r2, r3, #4
 8004264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004266:	4413      	add	r3, r2
 8004268:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800426c:	63bb      	str	r3, [r7, #56]	; 0x38
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004278:	b29a      	uxth	r2, r3
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	801a      	strh	r2, [r3, #0]
 800427e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004282:	2b3e      	cmp	r3, #62	; 0x3e
 8004284:	d91d      	bls.n	80042c2 <HAL_PCD_EP_DB_Transmit+0x332>
 8004286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	64bb      	str	r3, [r7, #72]	; 0x48
 800428e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2b00      	cmp	r3, #0
 8004298:	d102      	bne.n	80042a0 <HAL_PCD_EP_DB_Transmit+0x310>
 800429a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800429c:	3b01      	subs	r3, #1
 800429e:	64bb      	str	r3, [r7, #72]	; 0x48
 80042a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	029b      	lsls	r3, r3, #10
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	4313      	orrs	r3, r2
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	801a      	strh	r2, [r3, #0]
 80042c0:	e044      	b.n	800434c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80042c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10a      	bne.n	80042e0 <HAL_PCD_EP_DB_Transmit+0x350>
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d8:	b29a      	uxth	r2, r3
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	801a      	strh	r2, [r3, #0]
 80042de:	e035      	b.n	800434c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80042e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80042e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_PCD_EP_DB_Transmit+0x36a>
 80042f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f6:	3301      	adds	r3, #1
 80042f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29a      	uxth	r2, r3
 8004300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004302:	b29b      	uxth	r3, r3
 8004304:	029b      	lsls	r3, r3, #10
 8004306:	b29b      	uxth	r3, r3
 8004308:	4313      	orrs	r3, r2
 800430a:	b29a      	uxth	r2, r3
 800430c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430e:	801a      	strh	r2, [r3, #0]
 8004310:	e01c      	b.n	800434c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	785b      	ldrb	r3, [r3, #1]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d118      	bne.n	800434c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	647b      	str	r3, [r7, #68]	; 0x44
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004328:	b29b      	uxth	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800432e:	4413      	add	r3, r2
 8004330:	647b      	str	r3, [r7, #68]	; 0x44
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	011a      	lsls	r2, r3, #4
 8004338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433a:	4413      	add	r3, r2
 800433c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004340:	643b      	str	r3, [r7, #64]	; 0x40
 8004342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004346:	b29a      	uxth	r2, r3
 8004348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800434a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	6959      	ldr	r1, [r3, #20]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	891a      	ldrh	r2, [r3, #8]
 8004358:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800435c:	b29b      	uxth	r3, r3
 800435e:	f004 f98a 	bl	8008676 <USB_WritePMA>
 8004362:	e1e2      	b.n	800472a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800436c:	b29b      	uxth	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4413      	add	r3, r2
 8004378:	3306      	adds	r3, #6
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800438c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004398:	429a      	cmp	r2, r3
 800439a:	d307      	bcc.n	80043ac <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	699a      	ldr	r2, [r3, #24]
 80043a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043a4:	1ad2      	subs	r2, r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	619a      	str	r2, [r3, #24]
 80043aa:	e002      	b.n	80043b2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2200      	movs	r2, #0
 80043b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f040 80c0 	bne.w	800453c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	785b      	ldrb	r3, [r3, #1]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d126      	bne.n	8004412 <HAL_PCD_EP_DB_Transmit+0x482>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043d8:	4413      	add	r3, r2
 80043da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	011a      	lsls	r2, r3, #4
 80043e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043e4:	4413      	add	r3, r2
 80043e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80043ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043fa:	801a      	strh	r2, [r3, #0]
 80043fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b29b      	uxth	r3, r3
 8004402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800440a:	b29a      	uxth	r2, r3
 800440c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	e01a      	b.n	8004448 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d116      	bne.n	8004448 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	667b      	str	r3, [r7, #100]	; 0x64
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004428:	b29b      	uxth	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800442e:	4413      	add	r3, r2
 8004430:	667b      	str	r3, [r7, #100]	; 0x64
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	011a      	lsls	r2, r3, #4
 8004438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800443a:	4413      	add	r3, r2
 800443c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004440:	663b      	str	r3, [r7, #96]	; 0x60
 8004442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004444:	2200      	movs	r2, #0
 8004446:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	677b      	str	r3, [r7, #116]	; 0x74
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	785b      	ldrb	r3, [r3, #1]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d12b      	bne.n	80044ae <HAL_PCD_EP_DB_Transmit+0x51e>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004464:	b29b      	uxth	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446a:	4413      	add	r3, r2
 800446c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	011a      	lsls	r2, r3, #4
 8004474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004476:	4413      	add	r3, r2
 8004478:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800447c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004480:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800448c:	b29a      	uxth	r2, r3
 800448e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004492:	801a      	strh	r2, [r3, #0]
 8004494:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	b29b      	uxth	r3, r3
 800449c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044aa:	801a      	strh	r2, [r3, #0]
 80044ac:	e017      	b.n	80044de <HAL_PCD_EP_DB_Transmit+0x54e>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	785b      	ldrb	r3, [r3, #1]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d113      	bne.n	80044de <HAL_PCD_EP_DB_Transmit+0x54e>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044be:	b29b      	uxth	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044c4:	4413      	add	r3, r2
 80044c6:	677b      	str	r3, [r7, #116]	; 0x74
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	011a      	lsls	r2, r3, #4
 80044ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d0:	4413      	add	r3, r2
 80044d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044d6:	673b      	str	r3, [r7, #112]	; 0x70
 80044d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044da:	2200      	movs	r2, #0
 80044dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	4619      	mov	r1, r3
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f008 fbc0 	bl	800cc6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f040 811a 	bne.w	800472a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004510:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	441a      	add	r2, r3
 8004522:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800452a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800452e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004536:	b29b      	uxth	r3, r3
 8004538:	8013      	strh	r3, [r2, #0]
 800453a:	e0f6      	b.n	800472a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d121      	bne.n	800458a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004560:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	441a      	add	r2, r3
 8004572:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800457e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004586:	b29b      	uxth	r3, r3
 8004588:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004590:	2b01      	cmp	r3, #1
 8004592:	f040 80ca 	bne.w	800472a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800459e:	441a      	add	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80045ac:	441a      	add	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6a1a      	ldr	r2, [r3, #32]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d30b      	bcc.n	80045d6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6a1a      	ldr	r2, [r3, #32]
 80045ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ce:	1ad2      	subs	r2, r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	621a      	str	r2, [r3, #32]
 80045d4:	e017      	b.n	8004606 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d108      	bne.n	80045f0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80045de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80045e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80045ee:	e00a      	b.n	8004606 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2200      	movs	r2, #0
 80045fc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	657b      	str	r3, [r7, #84]	; 0x54
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d165      	bne.n	80046e0 <HAL_PCD_EP_DB_Transmit+0x750>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004622:	b29b      	uxth	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004628:	4413      	add	r3, r2
 800462a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	011a      	lsls	r2, r3, #4
 8004632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004634:	4413      	add	r3, r2
 8004636:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800463a:	65bb      	str	r3, [r7, #88]	; 0x58
 800463c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004646:	b29a      	uxth	r2, r3
 8004648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800464a:	801a      	strh	r2, [r3, #0]
 800464c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004650:	2b3e      	cmp	r3, #62	; 0x3e
 8004652:	d91d      	bls.n	8004690 <HAL_PCD_EP_DB_Transmit+0x700>
 8004654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	66bb      	str	r3, [r7, #104]	; 0x68
 800465c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <HAL_PCD_EP_DB_Transmit+0x6de>
 8004668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800466a:	3b01      	subs	r3, #1
 800466c:	66bb      	str	r3, [r7, #104]	; 0x68
 800466e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29a      	uxth	r2, r3
 8004674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004676:	b29b      	uxth	r3, r3
 8004678:	029b      	lsls	r3, r3, #10
 800467a:	b29b      	uxth	r3, r3
 800467c:	4313      	orrs	r3, r2
 800467e:	b29b      	uxth	r3, r3
 8004680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004688:	b29a      	uxth	r2, r3
 800468a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800468c:	801a      	strh	r2, [r3, #0]
 800468e:	e041      	b.n	8004714 <HAL_PCD_EP_DB_Transmit+0x784>
 8004690:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <HAL_PCD_EP_DB_Transmit+0x71e>
 8004698:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046aa:	801a      	strh	r2, [r3, #0]
 80046ac:	e032      	b.n	8004714 <HAL_PCD_EP_DB_Transmit+0x784>
 80046ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80046b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_PCD_EP_DB_Transmit+0x738>
 80046c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046c4:	3301      	adds	r3, #1
 80046c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80046c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	029b      	lsls	r3, r3, #10
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	4313      	orrs	r3, r2
 80046d8:	b29a      	uxth	r2, r3
 80046da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046dc:	801a      	strh	r2, [r3, #0]
 80046de:	e019      	b.n	8004714 <HAL_PCD_EP_DB_Transmit+0x784>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d115      	bne.n	8004714 <HAL_PCD_EP_DB_Transmit+0x784>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f6:	4413      	add	r3, r2
 80046f8:	657b      	str	r3, [r7, #84]	; 0x54
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	011a      	lsls	r2, r3, #4
 8004700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004702:	4413      	add	r3, r2
 8004704:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004708:	653b      	str	r3, [r7, #80]	; 0x50
 800470a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800470e:	b29a      	uxth	r2, r3
 8004710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004712:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	6959      	ldr	r1, [r3, #20]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	895a      	ldrh	r2, [r3, #10]
 8004720:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004724:	b29b      	uxth	r3, r3
 8004726:	f003 ffa6 	bl	8008676 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004744:	82bb      	strh	r3, [r7, #20]
 8004746:	8abb      	ldrh	r3, [r7, #20]
 8004748:	f083 0310 	eor.w	r3, r3, #16
 800474c:	82bb      	strh	r3, [r7, #20]
 800474e:	8abb      	ldrh	r3, [r7, #20]
 8004750:	f083 0320 	eor.w	r3, r3, #32
 8004754:	82bb      	strh	r3, [r7, #20]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	441a      	add	r2, r3
 8004764:	8abb      	ldrh	r3, [r7, #20]
 8004766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800476e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004776:	b29b      	uxth	r3, r3
 8004778:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3790      	adds	r7, #144	; 0x90
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	607b      	str	r3, [r7, #4]
 800478e:	460b      	mov	r3, r1
 8004790:	817b      	strh	r3, [r7, #10]
 8004792:	4613      	mov	r3, r2
 8004794:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004796:	897b      	ldrh	r3, [r7, #10]
 8004798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047a2:	897b      	ldrh	r3, [r7, #10]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	e009      	b.n	80047ce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80047ba:	897a      	ldrh	r2, [r7, #10]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80047ce:	893b      	ldrh	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d107      	bne.n	80047e4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2200      	movs	r2, #0
 80047d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	b29a      	uxth	r2, r3
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	80da      	strh	r2, [r3, #6]
 80047e2:	e00b      	b.n	80047fc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2201      	movs	r2, #1
 80047e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e272      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 8087 	beq.w	8004936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004828:	4b92      	ldr	r3, [pc, #584]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 030c 	and.w	r3, r3, #12
 8004830:	2b04      	cmp	r3, #4
 8004832:	d00c      	beq.n	800484e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004834:	4b8f      	ldr	r3, [pc, #572]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 030c 	and.w	r3, r3, #12
 800483c:	2b08      	cmp	r3, #8
 800483e:	d112      	bne.n	8004866 <HAL_RCC_OscConfig+0x5e>
 8004840:	4b8c      	ldr	r3, [pc, #560]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484c:	d10b      	bne.n	8004866 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484e:	4b89      	ldr	r3, [pc, #548]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d06c      	beq.n	8004934 <HAL_RCC_OscConfig+0x12c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d168      	bne.n	8004934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e24c      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486e:	d106      	bne.n	800487e <HAL_RCC_OscConfig+0x76>
 8004870:	4b80      	ldr	r3, [pc, #512]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a7f      	ldr	r2, [pc, #508]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	e02e      	b.n	80048dc <HAL_RCC_OscConfig+0xd4>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10c      	bne.n	80048a0 <HAL_RCC_OscConfig+0x98>
 8004886:	4b7b      	ldr	r3, [pc, #492]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a7a      	ldr	r2, [pc, #488]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 800488c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	4b78      	ldr	r3, [pc, #480]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a77      	ldr	r2, [pc, #476]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	e01d      	b.n	80048dc <HAL_RCC_OscConfig+0xd4>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048a8:	d10c      	bne.n	80048c4 <HAL_RCC_OscConfig+0xbc>
 80048aa:	4b72      	ldr	r3, [pc, #456]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a71      	ldr	r2, [pc, #452]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 80048b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	4b6f      	ldr	r3, [pc, #444]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a6e      	ldr	r2, [pc, #440]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 80048bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e00b      	b.n	80048dc <HAL_RCC_OscConfig+0xd4>
 80048c4:	4b6b      	ldr	r3, [pc, #428]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a6a      	ldr	r2, [pc, #424]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 80048ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	4b68      	ldr	r3, [pc, #416]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a67      	ldr	r2, [pc, #412]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 80048d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d013      	beq.n	800490c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7fd f878 	bl	80019d8 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ec:	f7fd f874 	bl	80019d8 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	; 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e200      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fe:	4b5d      	ldr	r3, [pc, #372]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0xe4>
 800490a:	e014      	b.n	8004936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7fd f864 	bl	80019d8 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004914:	f7fd f860 	bl	80019d8 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b64      	cmp	r3, #100	; 0x64
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e1ec      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004926:	4b53      	ldr	r3, [pc, #332]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x10c>
 8004932:	e000      	b.n	8004936 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d063      	beq.n	8004a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004942:	4b4c      	ldr	r3, [pc, #304]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800494e:	4b49      	ldr	r3, [pc, #292]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b08      	cmp	r3, #8
 8004958:	d11c      	bne.n	8004994 <HAL_RCC_OscConfig+0x18c>
 800495a:	4b46      	ldr	r3, [pc, #280]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d116      	bne.n	8004994 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004966:	4b43      	ldr	r3, [pc, #268]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_RCC_OscConfig+0x176>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d001      	beq.n	800497e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e1c0      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497e:	4b3d      	ldr	r3, [pc, #244]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	4939      	ldr	r1, [pc, #228]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004992:	e03a      	b.n	8004a0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d020      	beq.n	80049de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800499c:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <HAL_RCC_OscConfig+0x270>)
 800499e:	2201      	movs	r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a2:	f7fd f819 	bl	80019d8 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049aa:	f7fd f815 	bl	80019d8 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e1a1      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049bc:	4b2d      	ldr	r3, [pc, #180]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c8:	4b2a      	ldr	r3, [pc, #168]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4927      	ldr	r1, [pc, #156]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]
 80049dc:	e015      	b.n	8004a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049de:	4b26      	ldr	r3, [pc, #152]	; (8004a78 <HAL_RCC_OscConfig+0x270>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e4:	f7fc fff8 	bl	80019d8 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ec:	f7fc fff4 	bl	80019d8 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e180      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049fe:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d03a      	beq.n	8004a8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d019      	beq.n	8004a52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a1e:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <HAL_RCC_OscConfig+0x274>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a24:	f7fc ffd8 	bl	80019d8 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a2c:	f7fc ffd4 	bl	80019d8 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e160      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	f000 fb00 	bl	8005050 <RCC_Delay>
 8004a50:	e01c      	b.n	8004a8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a52:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <HAL_RCC_OscConfig+0x274>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a58:	f7fc ffbe 	bl	80019d8 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a5e:	e00f      	b.n	8004a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a60:	f7fc ffba 	bl	80019d8 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d908      	bls.n	8004a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e146      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
 8004a72:	bf00      	nop
 8004a74:	40021000 	.word	0x40021000
 8004a78:	42420000 	.word	0x42420000
 8004a7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a80:	4b92      	ldr	r3, [pc, #584]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e9      	bne.n	8004a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 80a6 	beq.w	8004be6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a9e:	4b8b      	ldr	r3, [pc, #556]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10d      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aaa:	4b88      	ldr	r3, [pc, #544]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	4a87      	ldr	r2, [pc, #540]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	61d3      	str	r3, [r2, #28]
 8004ab6:	4b85      	ldr	r3, [pc, #532]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac6:	4b82      	ldr	r3, [pc, #520]	; (8004cd0 <HAL_RCC_OscConfig+0x4c8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d118      	bne.n	8004b04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ad2:	4b7f      	ldr	r3, [pc, #508]	; (8004cd0 <HAL_RCC_OscConfig+0x4c8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a7e      	ldr	r2, [pc, #504]	; (8004cd0 <HAL_RCC_OscConfig+0x4c8>)
 8004ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ade:	f7fc ff7b 	bl	80019d8 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae6:	f7fc ff77 	bl	80019d8 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b64      	cmp	r3, #100	; 0x64
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e103      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af8:	4b75      	ldr	r3, [pc, #468]	; (8004cd0 <HAL_RCC_OscConfig+0x4c8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCC_OscConfig+0x312>
 8004b0c:	4b6f      	ldr	r3, [pc, #444]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	4a6e      	ldr	r2, [pc, #440]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6213      	str	r3, [r2, #32]
 8004b18:	e02d      	b.n	8004b76 <HAL_RCC_OscConfig+0x36e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x334>
 8004b22:	4b6a      	ldr	r3, [pc, #424]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	4a69      	ldr	r2, [pc, #420]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	6213      	str	r3, [r2, #32]
 8004b2e:	4b67      	ldr	r3, [pc, #412]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	4a66      	ldr	r2, [pc, #408]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b34:	f023 0304 	bic.w	r3, r3, #4
 8004b38:	6213      	str	r3, [r2, #32]
 8004b3a:	e01c      	b.n	8004b76 <HAL_RCC_OscConfig+0x36e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2b05      	cmp	r3, #5
 8004b42:	d10c      	bne.n	8004b5e <HAL_RCC_OscConfig+0x356>
 8004b44:	4b61      	ldr	r3, [pc, #388]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	4a60      	ldr	r2, [pc, #384]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b4a:	f043 0304 	orr.w	r3, r3, #4
 8004b4e:	6213      	str	r3, [r2, #32]
 8004b50:	4b5e      	ldr	r3, [pc, #376]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	4a5d      	ldr	r2, [pc, #372]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	6213      	str	r3, [r2, #32]
 8004b5c:	e00b      	b.n	8004b76 <HAL_RCC_OscConfig+0x36e>
 8004b5e:	4b5b      	ldr	r3, [pc, #364]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	4a5a      	ldr	r2, [pc, #360]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	6213      	str	r3, [r2, #32]
 8004b6a:	4b58      	ldr	r3, [pc, #352]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	4a57      	ldr	r2, [pc, #348]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b70:	f023 0304 	bic.w	r3, r3, #4
 8004b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d015      	beq.n	8004baa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b7e:	f7fc ff2b 	bl	80019d8 <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b84:	e00a      	b.n	8004b9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b86:	f7fc ff27 	bl	80019d8 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e0b1      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9c:	4b4b      	ldr	r3, [pc, #300]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ee      	beq.n	8004b86 <HAL_RCC_OscConfig+0x37e>
 8004ba8:	e014      	b.n	8004bd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004baa:	f7fc ff15 	bl	80019d8 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb0:	e00a      	b.n	8004bc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb2:	f7fc ff11 	bl	80019d8 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e09b      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc8:	4b40      	ldr	r3, [pc, #256]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1ee      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bd4:	7dfb      	ldrb	r3, [r7, #23]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d105      	bne.n	8004be6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bda:	4b3c      	ldr	r3, [pc, #240]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	4a3b      	ldr	r2, [pc, #236]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 8087 	beq.w	8004cfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bf0:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f003 030c 	and.w	r3, r3, #12
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d061      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d146      	bne.n	8004c92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c04:	4b33      	ldr	r3, [pc, #204]	; (8004cd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0a:	f7fc fee5 	bl	80019d8 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c12:	f7fc fee1 	bl	80019d8 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e06d      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c24:	4b29      	ldr	r3, [pc, #164]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f0      	bne.n	8004c12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c38:	d108      	bne.n	8004c4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c3a:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4921      	ldr	r1, [pc, #132]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c4c:	4b1f      	ldr	r3, [pc, #124]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a19      	ldr	r1, [r3, #32]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	491b      	ldr	r1, [pc, #108]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c64:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6a:	f7fc feb5 	bl	80019d8 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c72:	f7fc feb1 	bl	80019d8 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e03d      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c84:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0f0      	beq.n	8004c72 <HAL_RCC_OscConfig+0x46a>
 8004c90:	e035      	b.n	8004cfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c92:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c98:	f7fc fe9e 	bl	80019d8 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca0:	f7fc fe9a 	bl	80019d8 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e026      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x498>
 8004cbe:	e01e      	b.n	8004cfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d107      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e019      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	40007000 	.word	0x40007000
 8004cd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_RCC_OscConfig+0x500>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d106      	bne.n	8004cfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d001      	beq.n	8004cfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40021000 	.word	0x40021000

08004d0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0d0      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d20:	4b6a      	ldr	r3, [pc, #424]	; (8004ecc <HAL_RCC_ClockConfig+0x1c0>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d910      	bls.n	8004d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2e:	4b67      	ldr	r3, [pc, #412]	; (8004ecc <HAL_RCC_ClockConfig+0x1c0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f023 0207 	bic.w	r2, r3, #7
 8004d36:	4965      	ldr	r1, [pc, #404]	; (8004ecc <HAL_RCC_ClockConfig+0x1c0>)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3e:	4b63      	ldr	r3, [pc, #396]	; (8004ecc <HAL_RCC_ClockConfig+0x1c0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0b8      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d020      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d68:	4b59      	ldr	r3, [pc, #356]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4a58      	ldr	r2, [pc, #352]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d80:	4b53      	ldr	r3, [pc, #332]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	4a52      	ldr	r2, [pc, #328]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d8c:	4b50      	ldr	r3, [pc, #320]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	494d      	ldr	r1, [pc, #308]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d040      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d107      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db2:	4b47      	ldr	r3, [pc, #284]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d115      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e07f      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d107      	bne.n	8004dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dca:	4b41      	ldr	r3, [pc, #260]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e073      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dda:	4b3d      	ldr	r3, [pc, #244]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e06b      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dea:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f023 0203 	bic.w	r2, r3, #3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4936      	ldr	r1, [pc, #216]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dfc:	f7fc fdec 	bl	80019d8 <HAL_GetTick>
 8004e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e02:	e00a      	b.n	8004e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e04:	f7fc fde8 	bl	80019d8 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e053      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1a:	4b2d      	ldr	r3, [pc, #180]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 020c 	and.w	r2, r3, #12
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d1eb      	bne.n	8004e04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b27      	ldr	r3, [pc, #156]	; (8004ecc <HAL_RCC_ClockConfig+0x1c0>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d210      	bcs.n	8004e5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b24      	ldr	r3, [pc, #144]	; (8004ecc <HAL_RCC_ClockConfig+0x1c0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f023 0207 	bic.w	r2, r3, #7
 8004e42:	4922      	ldr	r1, [pc, #136]	; (8004ecc <HAL_RCC_ClockConfig+0x1c0>)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4a:	4b20      	ldr	r3, [pc, #128]	; (8004ecc <HAL_RCC_ClockConfig+0x1c0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d001      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e032      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d008      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e68:	4b19      	ldr	r3, [pc, #100]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4916      	ldr	r1, [pc, #88]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e86:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	490e      	ldr	r1, [pc, #56]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e9a:	f000 f821 	bl	8004ee0 <HAL_RCC_GetSysClockFreq>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	490a      	ldr	r1, [pc, #40]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004eac:	5ccb      	ldrb	r3, [r1, r3]
 8004eae:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb2:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8004eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004eb6:	4b09      	ldr	r3, [pc, #36]	; (8004edc <HAL_RCC_ClockConfig+0x1d0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fc fc86 	bl	80017cc <HAL_InitTick>

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40022000 	.word	0x40022000
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	0800d3c4 	.word	0x0800d3c4
 8004ed8:	20000000 	.word	0x20000000
 8004edc:	20000004 	.word	0x20000004

08004ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	2300      	movs	r3, #0
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004efa:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x94>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d002      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0x30>
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d003      	beq.n	8004f16 <HAL_RCC_GetSysClockFreq+0x36>
 8004f0e:	e027      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f10:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f12:	613b      	str	r3, [r7, #16]
      break;
 8004f14:	e027      	b.n	8004f66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	0c9b      	lsrs	r3, r3, #18
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	4a17      	ldr	r2, [pc, #92]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f20:	5cd3      	ldrb	r3, [r2, r3]
 8004f22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d010      	beq.n	8004f50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f2e:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	0c5b      	lsrs	r3, r3, #17
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	4a11      	ldr	r2, [pc, #68]	; (8004f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f3a:	5cd3      	ldrb	r3, [r2, r3]
 8004f3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a0d      	ldr	r2, [pc, #52]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f42:	fb03 f202 	mul.w	r2, r3, r2
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e004      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a0c      	ldr	r2, [pc, #48]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f54:	fb02 f303 	mul.w	r3, r2, r3
 8004f58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	613b      	str	r3, [r7, #16]
      break;
 8004f5e:	e002      	b.n	8004f66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f60:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004f62:	613b      	str	r3, [r7, #16]
      break;
 8004f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f66:	693b      	ldr	r3, [r7, #16]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40021000 	.word	0x40021000
 8004f78:	00f42400 	.word	0x00f42400
 8004f7c:	0800d3dc 	.word	0x0800d3dc
 8004f80:	0800d3ec 	.word	0x0800d3ec
 8004f84:	003d0900 	.word	0x003d0900
 8004f88:	007a1200 	.word	0x007a1200

08004f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f90:	4b02      	ldr	r3, [pc, #8]	; (8004f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8004f92:	681b      	ldr	r3, [r3, #0]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	20000000 	.word	0x20000000

08004fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fa4:	f7ff fff2 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4903      	ldr	r1, [pc, #12]	; (8004fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fb6:	5ccb      	ldrb	r3, [r1, r3]
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	0800d3d4 	.word	0x0800d3d4

08004fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fcc:	f7ff ffde 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	0adb      	lsrs	r3, r3, #11
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	4903      	ldr	r1, [pc, #12]	; (8004fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	0800d3d4 	.word	0x0800d3d4

08004ff0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	220f      	movs	r2, #15
 8004ffe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005000:	4b11      	ldr	r3, [pc, #68]	; (8005048 <HAL_RCC_GetClockConfig+0x58>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 0203 	and.w	r2, r3, #3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800500c:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <HAL_RCC_GetClockConfig+0x58>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_RCC_GetClockConfig+0x58>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005024:	4b08      	ldr	r3, [pc, #32]	; (8005048 <HAL_RCC_GetClockConfig+0x58>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	08db      	lsrs	r3, r3, #3
 800502a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005032:	4b06      	ldr	r3, [pc, #24]	; (800504c <HAL_RCC_GetClockConfig+0x5c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0207 	and.w	r2, r3, #7
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr
 8005048:	40021000 	.word	0x40021000
 800504c:	40022000 	.word	0x40022000

08005050 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <RCC_Delay+0x34>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <RCC_Delay+0x38>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	0a5b      	lsrs	r3, r3, #9
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	fb02 f303 	mul.w	r3, r2, r3
 800506a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800506c:	bf00      	nop
  }
  while (Delay --);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1e5a      	subs	r2, r3, #1
 8005072:	60fa      	str	r2, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1f9      	bne.n	800506c <RCC_Delay+0x1c>
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr
 8005084:	20000000 	.word	0x20000000
 8005088:	10624dd3 	.word	0x10624dd3

0800508c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d07d      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80050a8:	2300      	movs	r3, #0
 80050aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ac:	4b4f      	ldr	r3, [pc, #316]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10d      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b8:	4b4c      	ldr	r3, [pc, #304]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	4a4b      	ldr	r2, [pc, #300]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c2:	61d3      	str	r3, [r2, #28]
 80050c4:	4b49      	ldr	r3, [pc, #292]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d0:	2301      	movs	r3, #1
 80050d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d4:	4b46      	ldr	r3, [pc, #280]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d118      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e0:	4b43      	ldr	r3, [pc, #268]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a42      	ldr	r2, [pc, #264]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ec:	f7fc fc74 	bl	80019d8 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f2:	e008      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f4:	f7fc fc70 	bl	80019d8 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b64      	cmp	r3, #100	; 0x64
 8005100:	d901      	bls.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e06d      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005106:	4b3a      	ldr	r3, [pc, #232]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005112:	4b36      	ldr	r3, [pc, #216]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d02e      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	429a      	cmp	r2, r3
 800512e:	d027      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005130:	4b2e      	ldr	r3, [pc, #184]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005138:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800513a:	4b2e      	ldr	r3, [pc, #184]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800513c:	2201      	movs	r2, #1
 800513e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005140:	4b2c      	ldr	r3, [pc, #176]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005146:	4a29      	ldr	r2, [pc, #164]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d014      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005156:	f7fc fc3f 	bl	80019d8 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515c:	e00a      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800515e:	f7fc fc3b 	bl	80019d8 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f241 3288 	movw	r2, #5000	; 0x1388
 800516c:	4293      	cmp	r3, r2
 800516e:	d901      	bls.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e036      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005174:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0ee      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005180:	4b1a      	ldr	r3, [pc, #104]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	4917      	ldr	r1, [pc, #92]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518e:	4313      	orrs	r3, r2
 8005190:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005192:	7dfb      	ldrb	r3, [r7, #23]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d105      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005198:	4b14      	ldr	r3, [pc, #80]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	4a13      	ldr	r2, [pc, #76]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051b0:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	490b      	ldr	r1, [pc, #44]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d008      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051ce:	4b07      	ldr	r3, [pc, #28]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	4904      	ldr	r1, [pc, #16]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40007000 	.word	0x40007000
 80051f4:	42420440 	.word	0x42420440

080051f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e041      	b.n	800528e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f839 	bl	8005296 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f000 fb68 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d001      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e03a      	b.n	8005336 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a18      	ldr	r2, [pc, #96]	; (8005340 <HAL_TIM_Base_Start_IT+0x98>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00e      	beq.n	8005300 <HAL_TIM_Base_Start_IT+0x58>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ea:	d009      	beq.n	8005300 <HAL_TIM_Base_Start_IT+0x58>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a14      	ldr	r2, [pc, #80]	; (8005344 <HAL_TIM_Base_Start_IT+0x9c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d004      	beq.n	8005300 <HAL_TIM_Base_Start_IT+0x58>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a13      	ldr	r2, [pc, #76]	; (8005348 <HAL_TIM_Base_Start_IT+0xa0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d111      	bne.n	8005324 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b06      	cmp	r3, #6
 8005310:	d010      	beq.n	8005334 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0201 	orr.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005322:	e007      	b.n	8005334 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800

0800534c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e041      	b.n	80053e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fc f912 	bl	800159c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	4619      	mov	r1, r3
 800538a:	4610      	mov	r0, r2
 800538c:	f000 fabe 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d109      	bne.n	8005410 <HAL_TIM_PWM_Start+0x24>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e022      	b.n	8005456 <HAL_TIM_PWM_Start+0x6a>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b04      	cmp	r3, #4
 8005414:	d109      	bne.n	800542a <HAL_TIM_PWM_Start+0x3e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b01      	cmp	r3, #1
 8005420:	bf14      	ite	ne
 8005422:	2301      	movne	r3, #1
 8005424:	2300      	moveq	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	e015      	b.n	8005456 <HAL_TIM_PWM_Start+0x6a>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b08      	cmp	r3, #8
 800542e:	d109      	bne.n	8005444 <HAL_TIM_PWM_Start+0x58>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	bf14      	ite	ne
 800543c:	2301      	movne	r3, #1
 800543e:	2300      	moveq	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	e008      	b.n	8005456 <HAL_TIM_PWM_Start+0x6a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e05e      	b.n	800551c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d104      	bne.n	800546e <HAL_TIM_PWM_Start+0x82>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800546c:	e013      	b.n	8005496 <HAL_TIM_PWM_Start+0xaa>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b04      	cmp	r3, #4
 8005472:	d104      	bne.n	800547e <HAL_TIM_PWM_Start+0x92>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800547c:	e00b      	b.n	8005496 <HAL_TIM_PWM_Start+0xaa>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b08      	cmp	r3, #8
 8005482:	d104      	bne.n	800548e <HAL_TIM_PWM_Start+0xa2>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800548c:	e003      	b.n	8005496 <HAL_TIM_PWM_Start+0xaa>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2202      	movs	r2, #2
 8005492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2201      	movs	r2, #1
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fc1e 	bl	8005ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a1e      	ldr	r2, [pc, #120]	; (8005524 <HAL_TIM_PWM_Start+0x138>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d107      	bne.n	80054be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a18      	ldr	r2, [pc, #96]	; (8005524 <HAL_TIM_PWM_Start+0x138>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00e      	beq.n	80054e6 <HAL_TIM_PWM_Start+0xfa>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d0:	d009      	beq.n	80054e6 <HAL_TIM_PWM_Start+0xfa>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a14      	ldr	r2, [pc, #80]	; (8005528 <HAL_TIM_PWM_Start+0x13c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d004      	beq.n	80054e6 <HAL_TIM_PWM_Start+0xfa>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a12      	ldr	r2, [pc, #72]	; (800552c <HAL_TIM_PWM_Start+0x140>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d111      	bne.n	800550a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b06      	cmp	r3, #6
 80054f6:	d010      	beq.n	800551a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0201 	orr.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005508:	e007      	b.n	800551a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0201 	orr.w	r2, r2, #1
 8005518:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800

08005530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d122      	bne.n	800558c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b02      	cmp	r3, #2
 8005552:	d11b      	bne.n	800558c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0202 	mvn.w	r2, #2
 800555c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f9af 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 8005578:	e005      	b.n	8005586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f9a2 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f9b1 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b04      	cmp	r3, #4
 8005598:	d122      	bne.n	80055e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d11b      	bne.n	80055e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0204 	mvn.w	r2, #4
 80055b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f985 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 80055cc:	e005      	b.n	80055da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f978 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f987 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d122      	bne.n	8005634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d11b      	bne.n	8005634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0208 	mvn.w	r2, #8
 8005604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2204      	movs	r2, #4
 800560a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f95b 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 8005620:	e005      	b.n	800562e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f94e 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f95d 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0310 	and.w	r3, r3, #16
 800563e:	2b10      	cmp	r3, #16
 8005640:	d122      	bne.n	8005688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b10      	cmp	r3, #16
 800564e:	d11b      	bne.n	8005688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0210 	mvn.w	r2, #16
 8005658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2208      	movs	r2, #8
 800565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f931 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f924 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f933 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b01      	cmp	r3, #1
 8005694:	d10e      	bne.n	80056b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d107      	bne.n	80056b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0201 	mvn.w	r2, #1
 80056ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fb fe52 	bl	8001358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056be:	2b80      	cmp	r3, #128	; 0x80
 80056c0:	d10e      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056cc:	2b80      	cmp	r3, #128	; 0x80
 80056ce:	d107      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fbdc 	bl	8005e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d10e      	bne.n	800570c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d107      	bne.n	800570c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f8f7 	bl	80058fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b20      	cmp	r3, #32
 8005718:	d10e      	bne.n	8005738 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b20      	cmp	r3, #32
 8005726:	d107      	bne.n	8005738 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0220 	mvn.w	r2, #32
 8005730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fba7 	bl	8005e86 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800575a:	2302      	movs	r3, #2
 800575c:	e0ae      	b.n	80058bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b0c      	cmp	r3, #12
 800576a:	f200 809f 	bhi.w	80058ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	080057a9 	.word	0x080057a9
 8005778:	080058ad 	.word	0x080058ad
 800577c:	080058ad 	.word	0x080058ad
 8005780:	080058ad 	.word	0x080058ad
 8005784:	080057e9 	.word	0x080057e9
 8005788:	080058ad 	.word	0x080058ad
 800578c:	080058ad 	.word	0x080058ad
 8005790:	080058ad 	.word	0x080058ad
 8005794:	0800582b 	.word	0x0800582b
 8005798:	080058ad 	.word	0x080058ad
 800579c:	080058ad 	.word	0x080058ad
 80057a0:	080058ad 	.word	0x080058ad
 80057a4:	0800586b 	.word	0x0800586b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 f90e 	bl	80059d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0208 	orr.w	r2, r2, #8
 80057c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0204 	bic.w	r2, r2, #4
 80057d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6999      	ldr	r1, [r3, #24]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	619a      	str	r2, [r3, #24]
      break;
 80057e6:	e064      	b.n	80058b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 f954 	bl	8005a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6999      	ldr	r1, [r3, #24]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	021a      	lsls	r2, r3, #8
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	619a      	str	r2, [r3, #24]
      break;
 8005828:	e043      	b.n	80058b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	4618      	mov	r0, r3
 8005832:	f000 f99d 	bl	8005b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0208 	orr.w	r2, r2, #8
 8005844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69da      	ldr	r2, [r3, #28]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0204 	bic.w	r2, r2, #4
 8005854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69d9      	ldr	r1, [r3, #28]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	61da      	str	r2, [r3, #28]
      break;
 8005868:	e023      	b.n	80058b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	4618      	mov	r0, r3
 8005872:	f000 f9e7 	bl	8005c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69d9      	ldr	r1, [r3, #28]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	021a      	lsls	r2, r3, #8
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	61da      	str	r2, [r3, #28]
      break;
 80058aa:	e002      	b.n	80058b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	75fb      	strb	r3, [r7, #23]
      break;
 80058b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr

080058d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr

080058fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr

0800590c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <TIM_Base_SetConfig+0xb8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00b      	beq.n	800593c <TIM_Base_SetConfig+0x30>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592a:	d007      	beq.n	800593c <TIM_Base_SetConfig+0x30>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a26      	ldr	r2, [pc, #152]	; (80059c8 <TIM_Base_SetConfig+0xbc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_Base_SetConfig+0x30>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a25      	ldr	r2, [pc, #148]	; (80059cc <TIM_Base_SetConfig+0xc0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d108      	bne.n	800594e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1c      	ldr	r2, [pc, #112]	; (80059c4 <TIM_Base_SetConfig+0xb8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00b      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595c:	d007      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a19      	ldr	r2, [pc, #100]	; (80059c8 <TIM_Base_SetConfig+0xbc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a18      	ldr	r2, [pc, #96]	; (80059cc <TIM_Base_SetConfig+0xc0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d108      	bne.n	8005980 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a07      	ldr	r2, [pc, #28]	; (80059c4 <TIM_Base_SetConfig+0xb8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d103      	bne.n	80059b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	615a      	str	r2, [r3, #20]
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800

080059d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	f023 0201 	bic.w	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f023 0302 	bic.w	r3, r3, #2
 8005a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a1c      	ldr	r2, [pc, #112]	; (8005a98 <TIM_OC1_SetConfig+0xc8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d10c      	bne.n	8005a46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f023 0308 	bic.w	r3, r3, #8
 8005a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f023 0304 	bic.w	r3, r3, #4
 8005a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a13      	ldr	r2, [pc, #76]	; (8005a98 <TIM_OC1_SetConfig+0xc8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d111      	bne.n	8005a72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	621a      	str	r2, [r3, #32]
}
 8005a8c:	bf00      	nop
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40012c00 	.word	0x40012c00

08005a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f023 0210 	bic.w	r2, r3, #16
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	021b      	lsls	r3, r3, #8
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0320 	bic.w	r3, r3, #32
 8005ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a1d      	ldr	r2, [pc, #116]	; (8005b6c <TIM_OC2_SetConfig+0xd0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d10d      	bne.n	8005b18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a14      	ldr	r2, [pc, #80]	; (8005b6c <TIM_OC2_SetConfig+0xd0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d113      	bne.n	8005b48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr
 8005b6c:	40012c00 	.word	0x40012c00

08005b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0303 	bic.w	r3, r3, #3
 8005ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a1d      	ldr	r2, [pc, #116]	; (8005c40 <TIM_OC3_SetConfig+0xd0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d10d      	bne.n	8005bea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	021b      	lsls	r3, r3, #8
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a14      	ldr	r2, [pc, #80]	; (8005c40 <TIM_OC3_SetConfig+0xd0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d113      	bne.n	8005c1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	621a      	str	r2, [r3, #32]
}
 8005c34:	bf00      	nop
 8005c36:	371c      	adds	r7, #28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40012c00 	.word	0x40012c00

08005c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	031b      	lsls	r3, r3, #12
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a0f      	ldr	r2, [pc, #60]	; (8005cdc <TIM_OC4_SetConfig+0x98>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d109      	bne.n	8005cb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	019b      	lsls	r3, r3, #6
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr
 8005cdc:	40012c00 	.word	0x40012c00

08005ce0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f003 031f 	and.w	r3, r3, #31
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a1a      	ldr	r2, [r3, #32]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	43db      	mvns	r3, r3
 8005d02:	401a      	ands	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a1a      	ldr	r2, [r3, #32]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	fa01 f303 	lsl.w	r3, r1, r3
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr

08005d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e046      	b.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a16      	ldr	r2, [pc, #88]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00e      	beq.n	8005da2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8c:	d009      	beq.n	8005da2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a12      	ldr	r2, [pc, #72]	; (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d004      	beq.n	8005da2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a10      	ldr	r2, [pc, #64]	; (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d10c      	bne.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr
 8005dd8:	40012c00 	.word	0x40012c00
 8005ddc:	40000400 	.word	0x40000400
 8005de0:	40000800 	.word	0x40000800

08005de4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e03d      	b.n	8005e7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr

08005e86 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr

08005eaa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e042      	b.n	8005f42 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d106      	bne.n	8005ed6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7fb fc1b 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2224      	movs	r2, #36	; 0x24
 8005eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f82c 	bl	8005f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f12:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f22:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f86:	f023 030c 	bic.w	r3, r3, #12
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	430b      	orrs	r3, r1
 8005f92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a2c      	ldr	r2, [pc, #176]	; (8006060 <UART_SetConfig+0x114>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d103      	bne.n	8005fbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005fb4:	f7ff f808 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	e002      	b.n	8005fc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fbc:	f7fe fff0 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005fc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	009a      	lsls	r2, r3, #2
 8005fcc:	441a      	add	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd8:	4a22      	ldr	r2, [pc, #136]	; (8006064 <UART_SetConfig+0x118>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	0119      	lsls	r1, r3, #4
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009a      	lsls	r2, r3, #2
 8005fec:	441a      	add	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ff8:	4b1a      	ldr	r3, [pc, #104]	; (8006064 <UART_SetConfig+0x118>)
 8005ffa:	fba3 0302 	umull	r0, r3, r3, r2
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	2064      	movs	r0, #100	; 0x64
 8006002:	fb00 f303 	mul.w	r3, r0, r3
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	3332      	adds	r3, #50	; 0x32
 800600c:	4a15      	ldr	r2, [pc, #84]	; (8006064 <UART_SetConfig+0x118>)
 800600e:	fba2 2303 	umull	r2, r3, r2, r3
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006018:	4419      	add	r1, r3
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	009a      	lsls	r2, r3, #2
 8006024:	441a      	add	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006030:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <UART_SetConfig+0x118>)
 8006032:	fba3 0302 	umull	r0, r3, r3, r2
 8006036:	095b      	lsrs	r3, r3, #5
 8006038:	2064      	movs	r0, #100	; 0x64
 800603a:	fb00 f303 	mul.w	r3, r0, r3
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	3332      	adds	r3, #50	; 0x32
 8006044:	4a07      	ldr	r2, [pc, #28]	; (8006064 <UART_SetConfig+0x118>)
 8006046:	fba2 2303 	umull	r2, r3, r2, r3
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	f003 020f 	and.w	r2, r3, #15
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	440a      	add	r2, r1
 8006056:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006058:	bf00      	nop
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40013800 	.word	0x40013800
 8006064:	51eb851f 	.word	0x51eb851f

08006068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006068:	b084      	sub	sp, #16
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	f107 0014 	add.w	r0, r7, #20
 8006076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	bc80      	pop	{r7}
 8006084:	b004      	add	sp, #16
 8006086:	4770      	bx	lr

08006088 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006098:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800609c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bc80      	pop	{r7}
 80060b2:	4770      	bx	lr

080060b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80060c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	43db      	mvns	r3, r3
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	4013      	ands	r3, r2
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bc80      	pop	{r7}
 80060e6:	4770      	bx	lr

080060e8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006100:	b084      	sub	sp, #16
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	f107 0014 	add.w	r0, r7, #20
 800610e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	bc80      	pop	{r7}
 800613c:	b004      	add	sp, #16
 800613e:	4770      	bx	lr

08006140 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006140:	b480      	push	{r7}
 8006142:	b09d      	sub	sp, #116	; 0x74
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	b29b      	uxth	r3, r3
 800615e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006166:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	78db      	ldrb	r3, [r3, #3]
 800616e:	2b03      	cmp	r3, #3
 8006170:	d81f      	bhi.n	80061b2 <USB_ActivateEndpoint+0x72>
 8006172:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <USB_ActivateEndpoint+0x38>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	08006189 	.word	0x08006189
 800617c:	080061a5 	.word	0x080061a5
 8006180:	080061bb 	.word	0x080061bb
 8006184:	08006197 	.word	0x08006197
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006188:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800618c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006190:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006194:	e012      	b.n	80061bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006196:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800619a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800619e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80061a2:	e00b      	b.n	80061bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80061a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80061a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80061b0:	e004      	b.n	80061bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80061b8:	e000      	b.n	80061bc <USB_ActivateEndpoint+0x7c>
      break;
 80061ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	441a      	add	r2, r3
 80061c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80061ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061da:	b29b      	uxth	r3, r3
 80061dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	441a      	add	r2, r3
 800620c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006220:	b29b      	uxth	r3, r3
 8006222:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	7b1b      	ldrb	r3, [r3, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f040 8178 	bne.w	800651e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	785b      	ldrb	r3, [r3, #1]
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 8084 	beq.w	8006340 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	61bb      	str	r3, [r7, #24]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006242:	b29b      	uxth	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	4413      	add	r3, r2
 800624a:	61bb      	str	r3, [r7, #24]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	011a      	lsls	r2, r3, #4
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	88db      	ldrh	r3, [r3, #6]
 8006260:	085b      	lsrs	r3, r3, #1
 8006262:	b29b      	uxth	r3, r3
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	827b      	strh	r3, [r7, #18]
 800627a:	8a7b      	ldrh	r3, [r7, #18]
 800627c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d01b      	beq.n	80062bc <USB_ActivateEndpoint+0x17c>
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	b29b      	uxth	r3, r3
 8006292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629a:	823b      	strh	r3, [r7, #16]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	441a      	add	r2, r3
 80062a6:	8a3b      	ldrh	r3, [r7, #16]
 80062a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	78db      	ldrb	r3, [r3, #3]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d020      	beq.n	8006306 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062da:	81bb      	strh	r3, [r7, #12]
 80062dc:	89bb      	ldrh	r3, [r7, #12]
 80062de:	f083 0320 	eor.w	r3, r3, #32
 80062e2:	81bb      	strh	r3, [r7, #12]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	441a      	add	r2, r3
 80062ee:	89bb      	ldrh	r3, [r7, #12]
 80062f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006300:	b29b      	uxth	r3, r3
 8006302:	8013      	strh	r3, [r2, #0]
 8006304:	e2d5      	b.n	80068b2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800631c:	81fb      	strh	r3, [r7, #14]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	441a      	add	r2, r3
 8006328:	89fb      	ldrh	r3, [r7, #14]
 800632a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633a:	b29b      	uxth	r3, r3
 800633c:	8013      	strh	r3, [r2, #0]
 800633e:	e2b8      	b.n	80068b2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	633b      	str	r3, [r7, #48]	; 0x30
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634a:	b29b      	uxth	r3, r3
 800634c:	461a      	mov	r2, r3
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	4413      	add	r3, r2
 8006352:	633b      	str	r3, [r7, #48]	; 0x30
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	011a      	lsls	r2, r3, #4
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	4413      	add	r3, r2
 800635e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	88db      	ldrh	r3, [r3, #6]
 8006368:	085b      	lsrs	r3, r3, #1
 800636a:	b29b      	uxth	r3, r3
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800637e:	b29b      	uxth	r3, r3
 8006380:	461a      	mov	r2, r3
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	4413      	add	r3, r2
 8006386:	62bb      	str	r3, [r7, #40]	; 0x28
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	011a      	lsls	r2, r3, #4
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	4413      	add	r3, r2
 8006392:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29b      	uxth	r3, r3
 800639e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	801a      	strh	r2, [r3, #0]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	2b3e      	cmp	r3, #62	; 0x3e
 80063ae:	d91d      	bls.n	80063ec <USB_ActivateEndpoint+0x2ac>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	095b      	lsrs	r3, r3, #5
 80063b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f003 031f 	and.w	r3, r3, #31
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <USB_ActivateEndpoint+0x28a>
 80063c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063c6:	3b01      	subs	r3, #1
 80063c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	029b      	lsls	r3, r3, #10
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	4313      	orrs	r3, r2
 80063da:	b29b      	uxth	r3, r3
 80063dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	e026      	b.n	800643a <USB_ActivateEndpoint+0x2fa>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <USB_ActivateEndpoint+0x2ca>
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006402:	b29a      	uxth	r2, r3
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	e017      	b.n	800643a <USB_ActivateEndpoint+0x2fa>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	66bb      	str	r3, [r7, #104]	; 0x68
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <USB_ActivateEndpoint+0x2e4>
 800641e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006420:	3301      	adds	r3, #1
 8006422:	66bb      	str	r3, [r7, #104]	; 0x68
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	b29a      	uxth	r2, r3
 800642a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800642c:	b29b      	uxth	r3, r3
 800642e:	029b      	lsls	r3, r3, #10
 8006430:	b29b      	uxth	r3, r3
 8006432:	4313      	orrs	r3, r2
 8006434:	b29a      	uxth	r2, r3
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	847b      	strh	r3, [r7, #34]	; 0x22
 8006448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800644a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d01b      	beq.n	800648a <USB_ActivateEndpoint+0x34a>
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006468:	843b      	strh	r3, [r7, #32]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	441a      	add	r2, r3
 8006474:	8c3b      	ldrh	r3, [r7, #32]
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d124      	bne.n	80064dc <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a8:	83bb      	strh	r3, [r7, #28]
 80064aa:	8bbb      	ldrh	r3, [r7, #28]
 80064ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064b0:	83bb      	strh	r3, [r7, #28]
 80064b2:	8bbb      	ldrh	r3, [r7, #28]
 80064b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064b8:	83bb      	strh	r3, [r7, #28]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	441a      	add	r2, r3
 80064c4:	8bbb      	ldrh	r3, [r7, #28]
 80064c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	8013      	strh	r3, [r2, #0]
 80064da:	e1ea      	b.n	80068b2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f2:	83fb      	strh	r3, [r7, #30]
 80064f4:	8bfb      	ldrh	r3, [r7, #30]
 80064f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064fa:	83fb      	strh	r3, [r7, #30]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	441a      	add	r2, r3
 8006506:	8bfb      	ldrh	r3, [r7, #30]
 8006508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800650c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006518:	b29b      	uxth	r3, r3
 800651a:	8013      	strh	r3, [r2, #0]
 800651c:	e1c9      	b.n	80068b2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	78db      	ldrb	r3, [r3, #3]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d11e      	bne.n	8006564 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	441a      	add	r2, r3
 800654a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800654e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006556:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800655a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655e:	b29b      	uxth	r3, r3
 8006560:	8013      	strh	r3, [r2, #0]
 8006562:	e01d      	b.n	80065a0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	441a      	add	r2, r3
 8006588:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800658c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659c:	b29b      	uxth	r3, r3
 800659e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b0:	4413      	add	r3, r2
 80065b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	011a      	lsls	r2, r3, #4
 80065ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	891b      	ldrh	r3, [r3, #8]
 80065c8:	085b      	lsrs	r3, r3, #1
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065d2:	801a      	strh	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	657b      	str	r3, [r7, #84]	; 0x54
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065de:	b29b      	uxth	r3, r3
 80065e0:	461a      	mov	r2, r3
 80065e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e4:	4413      	add	r3, r2
 80065e6:	657b      	str	r3, [r7, #84]	; 0x54
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	011a      	lsls	r2, r3, #4
 80065ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80065f6:	653b      	str	r3, [r7, #80]	; 0x50
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	895b      	ldrh	r3, [r3, #10]
 80065fc:	085b      	lsrs	r3, r3, #1
 80065fe:	b29b      	uxth	r3, r3
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006606:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	2b00      	cmp	r3, #0
 800660e:	f040 8093 	bne.w	8006738 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006622:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d01b      	beq.n	8006666 <USB_ActivateEndpoint+0x526>
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006644:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	441a      	add	r2, r3
 8006650:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800665a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800665e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006662:	b29b      	uxth	r3, r3
 8006664:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006674:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d01b      	beq.n	80066b6 <USB_ActivateEndpoint+0x576>
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006694:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	441a      	add	r2, r3
 80066a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80066a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066cc:	873b      	strh	r3, [r7, #56]	; 0x38
 80066ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066d4:	873b      	strh	r3, [r7, #56]	; 0x38
 80066d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	441a      	add	r2, r3
 80066e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006714:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006732:	b29b      	uxth	r3, r3
 8006734:	8013      	strh	r3, [r2, #0]
 8006736:	e0bc      	b.n	80068b2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006748:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800674c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01d      	beq.n	8006790 <USB_ActivateEndpoint+0x650>
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	441a      	add	r2, r3
 8006778:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800677c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678c:	b29b      	uxth	r3, r3
 800678e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80067a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01d      	beq.n	80067e8 <USB_ActivateEndpoint+0x6a8>
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	441a      	add	r2, r3
 80067d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	78db      	ldrb	r3, [r3, #3]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d024      	beq.n	800683a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006806:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800680a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800680e:	f083 0320 	eor.w	r3, r3, #32
 8006812:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	441a      	add	r2, r3
 8006820:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006834:	b29b      	uxth	r3, r3
 8006836:	8013      	strh	r3, [r2, #0]
 8006838:	e01d      	b.n	8006876 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	b29b      	uxth	r3, r3
 8006848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006850:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	441a      	add	r2, r3
 800685e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006872:	b29b      	uxth	r3, r3
 8006874:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	441a      	add	r2, r3
 800689a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800689e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80068b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3774      	adds	r7, #116	; 0x74
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bc80      	pop	{r7}
 80068be:	4770      	bx	lr

080068c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b08d      	sub	sp, #52	; 0x34
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	7b1b      	ldrb	r3, [r3, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f040 808e 	bne.w	80069f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	785b      	ldrb	r3, [r3, #1]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d044      	beq.n	8006966 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	81bb      	strh	r3, [r7, #12]
 80068ea:	89bb      	ldrh	r3, [r7, #12]
 80068ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01b      	beq.n	800692c <USB_DeactivateEndpoint+0x6c>
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690a:	817b      	strh	r3, [r7, #10]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	441a      	add	r2, r3
 8006916:	897b      	ldrh	r3, [r7, #10]
 8006918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006924:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006928:	b29b      	uxth	r3, r3
 800692a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006942:	813b      	strh	r3, [r7, #8]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	441a      	add	r2, r3
 800694e:	893b      	ldrh	r3, [r7, #8]
 8006950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800695c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006960:	b29b      	uxth	r3, r3
 8006962:	8013      	strh	r3, [r2, #0]
 8006964:	e192      	b.n	8006c8c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	827b      	strh	r3, [r7, #18]
 8006974:	8a7b      	ldrh	r3, [r7, #18]
 8006976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d01b      	beq.n	80069b6 <USB_DeactivateEndpoint+0xf6>
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006994:	823b      	strh	r3, [r7, #16]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	441a      	add	r2, r3
 80069a0:	8a3b      	ldrh	r3, [r7, #16]
 80069a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069cc:	81fb      	strh	r3, [r7, #14]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	441a      	add	r2, r3
 80069d8:	89fb      	ldrh	r3, [r7, #14]
 80069da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	8013      	strh	r3, [r2, #0]
 80069ee:	e14d      	b.n	8006c8c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	785b      	ldrb	r3, [r3, #1]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f040 80a5 	bne.w	8006b44 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	843b      	strh	r3, [r7, #32]
 8006a08:	8c3b      	ldrh	r3, [r7, #32]
 8006a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01b      	beq.n	8006a4a <USB_DeactivateEndpoint+0x18a>
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a28:	83fb      	strh	r3, [r7, #30]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	441a      	add	r2, r3
 8006a34:	8bfb      	ldrh	r3, [r7, #30]
 8006a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	83bb      	strh	r3, [r7, #28]
 8006a58:	8bbb      	ldrh	r3, [r7, #28]
 8006a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d01b      	beq.n	8006a9a <USB_DeactivateEndpoint+0x1da>
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a78:	837b      	strh	r3, [r7, #26]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	441a      	add	r2, r3
 8006a84:	8b7b      	ldrh	r3, [r7, #26]
 8006a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab0:	833b      	strh	r3, [r7, #24]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	8b3b      	ldrh	r3, [r7, #24]
 8006abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae8:	82fb      	strh	r3, [r7, #22]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	441a      	add	r2, r3
 8006af4:	8afb      	ldrh	r3, [r7, #22]
 8006af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b20:	82bb      	strh	r3, [r7, #20]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	441a      	add	r2, r3
 8006b2c:	8abb      	ldrh	r3, [r7, #20]
 8006b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	8013      	strh	r3, [r2, #0]
 8006b42:	e0a3      	b.n	8006c8c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006b52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01b      	beq.n	8006b94 <USB_DeactivateEndpoint+0x2d4>
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b72:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	441a      	add	r2, r3
 8006b7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ba2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01b      	beq.n	8006be4 <USB_DeactivateEndpoint+0x324>
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	441a      	add	r2, r3
 8006bce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	441a      	add	r2, r3
 8006c06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c32:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	441a      	add	r2, r3
 8006c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	441a      	add	r2, r3
 8006c76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3734      	adds	r7, #52	; 0x34
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr

08006c98 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b0c2      	sub	sp, #264	; 0x108
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ca6:	6018      	str	r0, [r3, #0]
 8006ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	785b      	ldrb	r3, [r3, #1]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	f040 86b7 	bne.w	8007a32 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	699a      	ldr	r2, [r3, #24]
 8006cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d908      	bls.n	8006cf2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cf0:	e007      	b.n	8006d02 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	7b1b      	ldrb	r3, [r3, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d13a      	bne.n	8006d88 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6959      	ldr	r1, [r3, #20]
 8006d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	88da      	ldrh	r2, [r3, #6]
 8006d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d34:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d38:	6800      	ldr	r0, [r0, #0]
 8006d3a:	f001 fc9c 	bl	8008676 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	4413      	add	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	011a      	lsls	r2, r3, #4
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	4413      	add	r3, r2
 8006d74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	f000 be1f 	b.w	80079c6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	78db      	ldrb	r3, [r3, #3]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	f040 8462 	bne.w	800765e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6a1a      	ldr	r2, [r3, #32]
 8006da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	f240 83df 	bls.w	8007576 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dde:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	441a      	add	r2, r3
 8006dfc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e08:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6a1a      	ldr	r2, [r3, #32]
 8006e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e24:	1ad2      	subs	r2, r2, r3
 8006e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 81c7 	beq.w	80071e8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	633b      	str	r3, [r7, #48]	; 0x30
 8006e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	785b      	ldrb	r3, [r3, #1]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d177      	bne.n	8006f66 <USB_EPStartXfer+0x2ce>
 8006e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	461a      	mov	r2, r3
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	4413      	add	r3, r2
 8006e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	011a      	lsls	r2, r3, #4
 8006ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eaa:	4413      	add	r3, r2
 8006eac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ec8:	d921      	bls.n	8006f0e <USB_EPStartXfer+0x276>
 8006eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d104      	bne.n	8006eea <USB_EPStartXfer+0x252>
 8006ee0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	029b      	lsls	r3, r3, #10
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	4313      	orrs	r3, r2
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	801a      	strh	r2, [r3, #0]
 8006f0c:	e050      	b.n	8006fb0 <USB_EPStartXfer+0x318>
 8006f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <USB_EPStartXfer+0x294>
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	801a      	strh	r2, [r3, #0]
 8006f2a:	e041      	b.n	8006fb0 <USB_EPStartXfer+0x318>
 8006f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d004      	beq.n	8006f4c <USB_EPStartXfer+0x2b4>
 8006f42:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f46:	3301      	adds	r3, #1
 8006f48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	029b      	lsls	r3, r3, #10
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	801a      	strh	r2, [r3, #0]
 8006f64:	e024      	b.n	8006fb0 <USB_EPStartXfer+0x318>
 8006f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	785b      	ldrb	r3, [r3, #1]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d11c      	bne.n	8006fb0 <USB_EPStartXfer+0x318>
 8006f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	4413      	add	r3, r2
 8006f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	011a      	lsls	r2, r3, #4
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	895b      	ldrh	r3, [r3, #10]
 8006fbc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6959      	ldr	r1, [r3, #20]
 8006fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006fd6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006fda:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006fde:	6800      	ldr	r0, [r0, #0]
 8006fe0:	f001 fb49 	bl	8008676 <USB_WritePMA>
            ep->xfer_buff += len;
 8006fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	695a      	ldr	r2, [r3, #20]
 8006ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff4:	441a      	add	r2, r3
 8006ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6a1a      	ldr	r2, [r3, #32]
 800700e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	429a      	cmp	r2, r3
 800701c:	d90f      	bls.n	800703e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800701e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6a1a      	ldr	r2, [r3, #32]
 800702a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800702e:	1ad2      	subs	r2, r2, r3
 8007030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	621a      	str	r2, [r3, #32]
 800703c:	e00e      	b.n	800705c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800703e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800704e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2200      	movs	r2, #0
 800705a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800705c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d177      	bne.n	800715c <USB_EPStartXfer+0x4c4>
 800706c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007070:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007086:	b29b      	uxth	r3, r3
 8007088:	461a      	mov	r2, r3
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	4413      	add	r3, r2
 800708e:	61bb      	str	r3, [r7, #24]
 8007090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	011a      	lsls	r2, r3, #4
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	4413      	add	r3, r2
 80070a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	801a      	strh	r2, [r3, #0]
 80070b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070bc:	2b3e      	cmp	r3, #62	; 0x3e
 80070be:	d921      	bls.n	8007104 <USB_EPStartXfer+0x46c>
 80070c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c4:	095b      	lsrs	r3, r3, #5
 80070c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ce:	f003 031f 	and.w	r3, r3, #31
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d104      	bne.n	80070e0 <USB_EPStartXfer+0x448>
 80070d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070da:	3b01      	subs	r3, #1
 80070dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	029b      	lsls	r3, r3, #10
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	4313      	orrs	r3, r2
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	801a      	strh	r2, [r3, #0]
 8007102:	e056      	b.n	80071b2 <USB_EPStartXfer+0x51a>
 8007104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <USB_EPStartXfer+0x48a>
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800711a:	b29a      	uxth	r2, r3
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	801a      	strh	r2, [r3, #0]
 8007120:	e047      	b.n	80071b2 <USB_EPStartXfer+0x51a>
 8007122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007126:	085b      	lsrs	r3, r3, #1
 8007128:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800712c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d004      	beq.n	8007142 <USB_EPStartXfer+0x4aa>
 8007138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800713c:	3301      	adds	r3, #1
 800713e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	b29a      	uxth	r2, r3
 8007148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800714c:	b29b      	uxth	r3, r3
 800714e:	029b      	lsls	r3, r3, #10
 8007150:	b29b      	uxth	r3, r3
 8007152:	4313      	orrs	r3, r2
 8007154:	b29a      	uxth	r2, r3
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	801a      	strh	r2, [r3, #0]
 800715a:	e02a      	b.n	80071b2 <USB_EPStartXfer+0x51a>
 800715c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	785b      	ldrb	r3, [r3, #1]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d122      	bne.n	80071b2 <USB_EPStartXfer+0x51a>
 800716c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	623b      	str	r3, [r7, #32]
 8007178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007186:	b29b      	uxth	r3, r3
 8007188:	461a      	mov	r2, r3
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	4413      	add	r3, r2
 800718e:	623b      	str	r3, [r7, #32]
 8007190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	011a      	lsls	r2, r3, #4
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	4413      	add	r3, r2
 80071a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	891b      	ldrh	r3, [r3, #8]
 80071be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6959      	ldr	r1, [r3, #20]
 80071ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071e0:	6800      	ldr	r0, [r0, #0]
 80071e2:	f001 fa48 	bl	8008676 <USB_WritePMA>
 80071e6:	e3ee      	b.n	80079c6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d177      	bne.n	80072e8 <USB_EPStartXfer+0x650>
 80071f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	64bb      	str	r3, [r7, #72]	; 0x48
 8007204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007208:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007212:	b29b      	uxth	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007218:	4413      	add	r3, r2
 800721a:	64bb      	str	r3, [r7, #72]	; 0x48
 800721c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	011a      	lsls	r2, r3, #4
 800722a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800722c:	4413      	add	r3, r2
 800722e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007232:	647b      	str	r3, [r7, #68]	; 0x44
 8007234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800723e:	b29a      	uxth	r2, r3
 8007240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007242:	801a      	strh	r2, [r3, #0]
 8007244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007248:	2b3e      	cmp	r3, #62	; 0x3e
 800724a:	d921      	bls.n	8007290 <USB_EPStartXfer+0x5f8>
 800724c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007250:	095b      	lsrs	r3, r3, #5
 8007252:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800725a:	f003 031f 	and.w	r3, r3, #31
 800725e:	2b00      	cmp	r3, #0
 8007260:	d104      	bne.n	800726c <USB_EPStartXfer+0x5d4>
 8007262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007266:	3b01      	subs	r3, #1
 8007268:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800726c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29a      	uxth	r2, r3
 8007272:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007276:	b29b      	uxth	r3, r3
 8007278:	029b      	lsls	r3, r3, #10
 800727a:	b29b      	uxth	r3, r3
 800727c:	4313      	orrs	r3, r2
 800727e:	b29b      	uxth	r3, r3
 8007280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007288:	b29a      	uxth	r2, r3
 800728a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800728c:	801a      	strh	r2, [r3, #0]
 800728e:	e056      	b.n	800733e <USB_EPStartXfer+0x6a6>
 8007290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <USB_EPStartXfer+0x616>
 8007298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	b29b      	uxth	r3, r3
 800729e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072aa:	801a      	strh	r2, [r3, #0]
 80072ac:	e047      	b.n	800733e <USB_EPStartXfer+0x6a6>
 80072ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b2:	085b      	lsrs	r3, r3, #1
 80072b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d004      	beq.n	80072ce <USB_EPStartXfer+0x636>
 80072c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072c8:	3301      	adds	r3, #1
 80072ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072d8:	b29b      	uxth	r3, r3
 80072da:	029b      	lsls	r3, r3, #10
 80072dc:	b29b      	uxth	r3, r3
 80072de:	4313      	orrs	r3, r2
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	e02a      	b.n	800733e <USB_EPStartXfer+0x6a6>
 80072e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	785b      	ldrb	r3, [r3, #1]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d122      	bne.n	800733e <USB_EPStartXfer+0x6a6>
 80072f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	653b      	str	r3, [r7, #80]	; 0x50
 8007304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007312:	b29b      	uxth	r3, r3
 8007314:	461a      	mov	r2, r3
 8007316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007318:	4413      	add	r3, r2
 800731a:	653b      	str	r3, [r7, #80]	; 0x50
 800731c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	011a      	lsls	r2, r3, #4
 800732a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800732c:	4413      	add	r3, r2
 800732e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007338:	b29a      	uxth	r2, r3
 800733a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800733c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800733e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	891b      	ldrh	r3, [r3, #8]
 800734a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800734e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6959      	ldr	r1, [r3, #20]
 800735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800735e:	b29b      	uxth	r3, r3
 8007360:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007364:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007368:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800736c:	6800      	ldr	r0, [r0, #0]
 800736e:	f001 f982 	bl	8008676 <USB_WritePMA>
            ep->xfer_buff += len;
 8007372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	695a      	ldr	r2, [r3, #20]
 800737e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007382:	441a      	add	r2, r3
 8007384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6a1a      	ldr	r2, [r3, #32]
 800739c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d90f      	bls.n	80073cc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80073ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6a1a      	ldr	r2, [r3, #32]
 80073b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073bc:	1ad2      	subs	r2, r2, r3
 80073be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	621a      	str	r2, [r3, #32]
 80073ca:	e00e      	b.n	80073ea <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80073cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80073dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2200      	movs	r2, #0
 80073e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	643b      	str	r3, [r7, #64]	; 0x40
 80073f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	785b      	ldrb	r3, [r3, #1]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d177      	bne.n	80074f6 <USB_EPStartXfer+0x85e>
 8007406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	63bb      	str	r3, [r7, #56]	; 0x38
 8007412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007420:	b29b      	uxth	r3, r3
 8007422:	461a      	mov	r2, r3
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	4413      	add	r3, r2
 8007428:	63bb      	str	r3, [r7, #56]	; 0x38
 800742a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	011a      	lsls	r2, r3, #4
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	4413      	add	r3, r2
 800743c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007440:	637b      	str	r3, [r7, #52]	; 0x34
 8007442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	b29b      	uxth	r3, r3
 8007448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800744c:	b29a      	uxth	r2, r3
 800744e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007450:	801a      	strh	r2, [r3, #0]
 8007452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007456:	2b3e      	cmp	r3, #62	; 0x3e
 8007458:	d921      	bls.n	800749e <USB_EPStartXfer+0x806>
 800745a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745e:	095b      	lsrs	r3, r3, #5
 8007460:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007468:	f003 031f 	and.w	r3, r3, #31
 800746c:	2b00      	cmp	r3, #0
 800746e:	d104      	bne.n	800747a <USB_EPStartXfer+0x7e2>
 8007470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007474:	3b01      	subs	r3, #1
 8007476:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800747a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	b29a      	uxth	r2, r3
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007484:	b29b      	uxth	r3, r3
 8007486:	029b      	lsls	r3, r3, #10
 8007488:	b29b      	uxth	r3, r3
 800748a:	4313      	orrs	r3, r2
 800748c:	b29b      	uxth	r3, r3
 800748e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007496:	b29a      	uxth	r2, r3
 8007498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749a:	801a      	strh	r2, [r3, #0]
 800749c:	e050      	b.n	8007540 <USB_EPStartXfer+0x8a8>
 800749e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <USB_EPStartXfer+0x824>
 80074a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b8:	801a      	strh	r2, [r3, #0]
 80074ba:	e041      	b.n	8007540 <USB_EPStartXfer+0x8a8>
 80074bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c0:	085b      	lsrs	r3, r3, #1
 80074c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d004      	beq.n	80074dc <USB_EPStartXfer+0x844>
 80074d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d6:	3301      	adds	r3, #1
 80074d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	029b      	lsls	r3, r3, #10
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	4313      	orrs	r3, r2
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f2:	801a      	strh	r2, [r3, #0]
 80074f4:	e024      	b.n	8007540 <USB_EPStartXfer+0x8a8>
 80074f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d11c      	bne.n	8007540 <USB_EPStartXfer+0x8a8>
 8007506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007514:	b29b      	uxth	r3, r3
 8007516:	461a      	mov	r2, r3
 8007518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800751a:	4413      	add	r3, r2
 800751c:	643b      	str	r3, [r7, #64]	; 0x40
 800751e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	011a      	lsls	r2, r3, #4
 800752c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752e:	4413      	add	r3, r2
 8007530:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753a:	b29a      	uxth	r2, r3
 800753c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	895b      	ldrh	r3, [r3, #10]
 800754c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6959      	ldr	r1, [r3, #20]
 800755c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007560:	b29b      	uxth	r3, r3
 8007562:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007566:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800756a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800756e:	6800      	ldr	r0, [r0, #0]
 8007570:	f001 f881 	bl	8008676 <USB_WritePMA>
 8007574:	e227      	b.n	80079c6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80075a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80075b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	441a      	add	r2, r3
 80075ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80075ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075de:	b29b      	uxth	r3, r3
 80075e0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007602:	4413      	add	r3, r2
 8007604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	011a      	lsls	r2, r3, #4
 8007614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007616:	4413      	add	r3, r2
 8007618:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800761c:	65bb      	str	r3, [r7, #88]	; 0x58
 800761e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007622:	b29a      	uxth	r2, r3
 8007624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007626:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	891b      	ldrh	r3, [r3, #8]
 8007634:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6959      	ldr	r1, [r3, #20]
 8007644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007648:	b29b      	uxth	r3, r3
 800764a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800764e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007652:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007656:	6800      	ldr	r0, [r0, #0]
 8007658:	f001 f80d 	bl	8008676 <USB_WritePMA>
 800765c:	e1b3      	b.n	80079c6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800765e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6a1a      	ldr	r2, [r3, #32]
 800766a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766e:	1ad2      	subs	r2, r2, r3
 8007670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800767c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	b29b      	uxth	r3, r3
 800769a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 80c6 	beq.w	8007830 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	673b      	str	r3, [r7, #112]	; 0x70
 80076b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	785b      	ldrb	r3, [r3, #1]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d177      	bne.n	80077b0 <USB_EPStartXfer+0xb18>
 80076c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80076cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076da:	b29b      	uxth	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076e0:	4413      	add	r3, r2
 80076e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80076e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	011a      	lsls	r2, r3, #4
 80076f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076f4:	4413      	add	r3, r2
 80076f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076fa:	667b      	str	r3, [r7, #100]	; 0x64
 80076fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007706:	b29a      	uxth	r2, r3
 8007708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800770a:	801a      	strh	r2, [r3, #0]
 800770c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007710:	2b3e      	cmp	r3, #62	; 0x3e
 8007712:	d921      	bls.n	8007758 <USB_EPStartXfer+0xac0>
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007718:	095b      	lsrs	r3, r3, #5
 800771a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800771e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007722:	f003 031f 	and.w	r3, r3, #31
 8007726:	2b00      	cmp	r3, #0
 8007728:	d104      	bne.n	8007734 <USB_EPStartXfer+0xa9c>
 800772a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800772e:	3b01      	subs	r3, #1
 8007730:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	b29a      	uxth	r2, r3
 800773a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800773e:	b29b      	uxth	r3, r3
 8007740:	029b      	lsls	r3, r3, #10
 8007742:	b29b      	uxth	r3, r3
 8007744:	4313      	orrs	r3, r2
 8007746:	b29b      	uxth	r3, r3
 8007748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800774c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007750:	b29a      	uxth	r2, r3
 8007752:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007754:	801a      	strh	r2, [r3, #0]
 8007756:	e050      	b.n	80077fa <USB_EPStartXfer+0xb62>
 8007758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10a      	bne.n	8007776 <USB_EPStartXfer+0xade>
 8007760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800776a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800776e:	b29a      	uxth	r2, r3
 8007770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007772:	801a      	strh	r2, [r3, #0]
 8007774:	e041      	b.n	80077fa <USB_EPStartXfer+0xb62>
 8007776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777a:	085b      	lsrs	r3, r3, #1
 800777c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <USB_EPStartXfer+0xafe>
 800778c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007790:	3301      	adds	r3, #1
 8007792:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	b29a      	uxth	r2, r3
 800779c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	029b      	lsls	r3, r3, #10
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	4313      	orrs	r3, r2
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ac:	801a      	strh	r2, [r3, #0]
 80077ae:	e024      	b.n	80077fa <USB_EPStartXfer+0xb62>
 80077b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	785b      	ldrb	r3, [r3, #1]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d11c      	bne.n	80077fa <USB_EPStartXfer+0xb62>
 80077c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077d4:	4413      	add	r3, r2
 80077d6:	673b      	str	r3, [r7, #112]	; 0x70
 80077d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	011a      	lsls	r2, r3, #4
 80077e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077e8:	4413      	add	r3, r2
 80077ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80077fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	895b      	ldrh	r3, [r3, #10]
 8007806:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800780a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800780e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6959      	ldr	r1, [r3, #20]
 8007816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800781a:	b29b      	uxth	r3, r3
 800781c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007820:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007824:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007828:	6800      	ldr	r0, [r0, #0]
 800782a:	f000 ff24 	bl	8008676 <USB_WritePMA>
 800782e:	e0ca      	b.n	80079c6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d177      	bne.n	8007930 <USB_EPStartXfer+0xc98>
 8007840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800784c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800785a:	b29b      	uxth	r3, r3
 800785c:	461a      	mov	r2, r3
 800785e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007860:	4413      	add	r3, r2
 8007862:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	011a      	lsls	r2, r3, #4
 8007872:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007874:	4413      	add	r3, r2
 8007876:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800787a:	67bb      	str	r3, [r7, #120]	; 0x78
 800787c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29b      	uxth	r3, r3
 8007882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007886:	b29a      	uxth	r2, r3
 8007888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800788a:	801a      	strh	r2, [r3, #0]
 800788c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007890:	2b3e      	cmp	r3, #62	; 0x3e
 8007892:	d921      	bls.n	80078d8 <USB_EPStartXfer+0xc40>
 8007894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007898:	095b      	lsrs	r3, r3, #5
 800789a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800789e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a2:	f003 031f 	and.w	r3, r3, #31
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d104      	bne.n	80078b4 <USB_EPStartXfer+0xc1c>
 80078aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078ae:	3b01      	subs	r3, #1
 80078b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078be:	b29b      	uxth	r3, r3
 80078c0:	029b      	lsls	r3, r3, #10
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	4313      	orrs	r3, r2
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078d4:	801a      	strh	r2, [r3, #0]
 80078d6:	e05c      	b.n	8007992 <USB_EPStartXfer+0xcfa>
 80078d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <USB_EPStartXfer+0xc5e>
 80078e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	e04d      	b.n	8007992 <USB_EPStartXfer+0xcfa>
 80078f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fa:	085b      	lsrs	r3, r3, #1
 80078fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <USB_EPStartXfer+0xc7e>
 800790c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007910:	3301      	adds	r3, #1
 8007912:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	b29a      	uxth	r2, r3
 800791c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007920:	b29b      	uxth	r3, r3
 8007922:	029b      	lsls	r3, r3, #10
 8007924:	b29b      	uxth	r3, r3
 8007926:	4313      	orrs	r3, r2
 8007928:	b29a      	uxth	r2, r3
 800792a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800792c:	801a      	strh	r2, [r3, #0]
 800792e:	e030      	b.n	8007992 <USB_EPStartXfer+0xcfa>
 8007930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d128      	bne.n	8007992 <USB_EPStartXfer+0xcfa>
 8007940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800794e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800795c:	b29b      	uxth	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007964:	4413      	add	r3, r2
 8007966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800796a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800796e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	011a      	lsls	r2, r3, #4
 8007978:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800797c:	4413      	add	r3, r2
 800797e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007982:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800798a:	b29a      	uxth	r2, r3
 800798c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007990:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	891b      	ldrh	r3, [r3, #8]
 800799e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6959      	ldr	r1, [r3, #20]
 80079ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80079b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80079bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80079c0:	6800      	ldr	r0, [r0, #0]
 80079c2:	f000 fe58 	bl	8008676 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80079c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ec:	817b      	strh	r3, [r7, #10]
 80079ee:	897b      	ldrh	r3, [r7, #10]
 80079f0:	f083 0310 	eor.w	r3, r3, #16
 80079f4:	817b      	strh	r3, [r7, #10]
 80079f6:	897b      	ldrh	r3, [r7, #10]
 80079f8:	f083 0320 	eor.w	r3, r3, #32
 80079fc:	817b      	strh	r3, [r7, #10]
 80079fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	441a      	add	r2, r3
 8007a18:	897b      	ldrh	r3, [r7, #10]
 8007a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	8013      	strh	r3, [r2, #0]
 8007a2e:	f000 bcde 	b.w	80083ee <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	7b1b      	ldrb	r3, [r3, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f040 80bb 	bne.w	8007bba <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	699a      	ldr	r2, [r3, #24]
 8007a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d917      	bls.n	8007a90 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	699a      	ldr	r2, [r3, #24]
 8007a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a80:	1ad2      	subs	r2, r2, r3
 8007a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	619a      	str	r2, [r3, #24]
 8007a8e:	e00e      	b.n	8007aae <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	461a      	mov	r2, r3
 8007ace:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	011a      	lsls	r2, r3, #4
 8007ae6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007aea:	4413      	add	r3, r2
 8007aec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007af0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b06:	801a      	strh	r2, [r3, #0]
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b0c:	2b3e      	cmp	r3, #62	; 0x3e
 8007b0e:	d924      	bls.n	8007b5a <USB_EPStartXfer+0xec2>
 8007b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b14:	095b      	lsrs	r3, r3, #5
 8007b16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b1e:	f003 031f 	and.w	r3, r3, #31
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d104      	bne.n	8007b30 <USB_EPStartXfer+0xe98>
 8007b26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	029b      	lsls	r3, r3, #10
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	4313      	orrs	r3, r2
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b54:	801a      	strh	r2, [r3, #0]
 8007b56:	f000 bc10 	b.w	800837a <USB_EPStartXfer+0x16e2>
 8007b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10c      	bne.n	8007b7c <USB_EPStartXfer+0xee4>
 8007b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b78:	801a      	strh	r2, [r3, #0]
 8007b7a:	e3fe      	b.n	800837a <USB_EPStartXfer+0x16e2>
 8007b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b80:	085b      	lsrs	r3, r3, #1
 8007b82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d004      	beq.n	8007b9c <USB_EPStartXfer+0xf04>
 8007b92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b96:	3301      	adds	r3, #1
 8007b98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	029b      	lsls	r3, r3, #10
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bb6:	801a      	strh	r2, [r3, #0]
 8007bb8:	e3df      	b.n	800837a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	78db      	ldrb	r3, [r3, #3]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	f040 8218 	bne.w	8007ffc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	785b      	ldrb	r3, [r3, #1]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f040 809d 	bne.w	8007d18 <USB_EPStartXfer+0x1080>
 8007bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c02:	4413      	add	r3, r2
 8007c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	011a      	lsls	r2, r3, #4
 8007c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c28:	881b      	ldrh	r3, [r3, #0]
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c36:	801a      	strh	r2, [r3, #0]
 8007c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	2b3e      	cmp	r3, #62	; 0x3e
 8007c46:	d92b      	bls.n	8007ca0 <USB_EPStartXfer+0x1008>
 8007c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	095b      	lsrs	r3, r3, #5
 8007c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f003 031f 	and.w	r3, r3, #31
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d104      	bne.n	8007c78 <USB_EPStartXfer+0xfe0>
 8007c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c72:	3b01      	subs	r3, #1
 8007c74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	029b      	lsls	r3, r3, #10
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c9c:	801a      	strh	r2, [r3, #0]
 8007c9e:	e070      	b.n	8007d82 <USB_EPStartXfer+0x10ea>
 8007ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10c      	bne.n	8007cca <USB_EPStartXfer+0x1032>
 8007cb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cc6:	801a      	strh	r2, [r3, #0]
 8007cc8:	e05b      	b.n	8007d82 <USB_EPStartXfer+0x10ea>
 8007cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	085b      	lsrs	r3, r3, #1
 8007cd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <USB_EPStartXfer+0x1062>
 8007cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	029b      	lsls	r3, r3, #10
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	e034      	b.n	8007d82 <USB_EPStartXfer+0x10ea>
 8007d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	785b      	ldrb	r3, [r3, #1]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d12c      	bne.n	8007d82 <USB_EPStartXfer+0x10ea>
 8007d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	461a      	mov	r2, r3
 8007d48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	011a      	lsls	r2, r3, #4
 8007d60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d64:	4413      	add	r3, r2
 8007d66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d80:	801a      	strh	r2, [r3, #0]
 8007d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	785b      	ldrb	r3, [r3, #1]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f040 809d 	bne.w	8007edc <USB_EPStartXfer+0x1244>
 8007da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	011a      	lsls	r2, r3, #4
 8007dda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dde:	4413      	add	r3, r2
 8007de0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dfa:	801a      	strh	r2, [r3, #0]
 8007dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	2b3e      	cmp	r3, #62	; 0x3e
 8007e0a:	d92b      	bls.n	8007e64 <USB_EPStartXfer+0x11cc>
 8007e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	095b      	lsrs	r3, r3, #5
 8007e1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	f003 031f 	and.w	r3, r3, #31
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d104      	bne.n	8007e3c <USB_EPStartXfer+0x11a4>
 8007e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e36:	3b01      	subs	r3, #1
 8007e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	029b      	lsls	r3, r3, #10
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e60:	801a      	strh	r2, [r3, #0]
 8007e62:	e069      	b.n	8007f38 <USB_EPStartXfer+0x12a0>
 8007e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10c      	bne.n	8007e8e <USB_EPStartXfer+0x11f6>
 8007e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e8a:	801a      	strh	r2, [r3, #0]
 8007e8c:	e054      	b.n	8007f38 <USB_EPStartXfer+0x12a0>
 8007e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	085b      	lsrs	r3, r3, #1
 8007e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d004      	beq.n	8007ebe <USB_EPStartXfer+0x1226>
 8007eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb8:	3301      	adds	r3, #1
 8007eba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ebe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	029b      	lsls	r3, r3, #10
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ed8:	801a      	strh	r2, [r3, #0]
 8007eda:	e02d      	b.n	8007f38 <USB_EPStartXfer+0x12a0>
 8007edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	785b      	ldrb	r3, [r3, #1]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d125      	bne.n	8007f38 <USB_EPStartXfer+0x12a0>
 8007eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f02:	4413      	add	r3, r2
 8007f04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	011a      	lsls	r2, r3, #4
 8007f16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f36:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 8218 	beq.w	800837a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <USB_EPStartXfer+0x12ea>
 8007f76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10d      	bne.n	8007f9e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f040 81f5 	bne.w	800837a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f90:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f040 81ee 	bne.w	800837a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	441a      	add	r2, r3
 8007fe2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ff2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	8013      	strh	r3, [r2, #0]
 8007ffa:	e1be      	b.n	800837a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	78db      	ldrb	r3, [r3, #3]
 8008008:	2b01      	cmp	r3, #1
 800800a:	f040 81b4 	bne.w	8008376 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800800e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	699a      	ldr	r2, [r3, #24]
 800801a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800801e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	429a      	cmp	r2, r3
 8008028:	d917      	bls.n	800805a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800802a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800802e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800803a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800803e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699a      	ldr	r2, [r3, #24]
 8008046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800804a:	1ad2      	subs	r2, r2, r3
 800804c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	619a      	str	r2, [r3, #24]
 8008058:	e00e      	b.n	8008078 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800805a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800805e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800806a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2200      	movs	r2, #0
 8008076:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800807c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	785b      	ldrb	r3, [r3, #1]
 8008084:	2b00      	cmp	r3, #0
 8008086:	f040 8085 	bne.w	8008194 <USB_EPStartXfer+0x14fc>
 800808a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800808e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800809c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	461a      	mov	r2, r3
 80080aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080ae:	4413      	add	r3, r2
 80080b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80080b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	011a      	lsls	r2, r3, #4
 80080c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080c6:	4413      	add	r3, r2
 80080c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080dc:	b29a      	uxth	r2, r3
 80080de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080e2:	801a      	strh	r2, [r3, #0]
 80080e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e8:	2b3e      	cmp	r3, #62	; 0x3e
 80080ea:	d923      	bls.n	8008134 <USB_EPStartXfer+0x149c>
 80080ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080f0:	095b      	lsrs	r3, r3, #5
 80080f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fa:	f003 031f 	and.w	r3, r3, #31
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d104      	bne.n	800810c <USB_EPStartXfer+0x1474>
 8008102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008106:	3b01      	subs	r3, #1
 8008108:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800810c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29a      	uxth	r2, r3
 8008114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008118:	b29b      	uxth	r3, r3
 800811a:	029b      	lsls	r3, r3, #10
 800811c:	b29b      	uxth	r3, r3
 800811e:	4313      	orrs	r3, r2
 8008120:	b29b      	uxth	r3, r3
 8008122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800812a:	b29a      	uxth	r2, r3
 800812c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008130:	801a      	strh	r2, [r3, #0]
 8008132:	e060      	b.n	80081f6 <USB_EPStartXfer+0x155e>
 8008134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10c      	bne.n	8008156 <USB_EPStartXfer+0x14be>
 800813c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	b29b      	uxth	r3, r3
 8008144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800814c:	b29a      	uxth	r2, r3
 800814e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008152:	801a      	strh	r2, [r3, #0]
 8008154:	e04f      	b.n	80081f6 <USB_EPStartXfer+0x155e>
 8008156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815a:	085b      	lsrs	r3, r3, #1
 800815c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b00      	cmp	r3, #0
 800816a:	d004      	beq.n	8008176 <USB_EPStartXfer+0x14de>
 800816c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008170:	3301      	adds	r3, #1
 8008172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008176:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	b29a      	uxth	r2, r3
 800817e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008182:	b29b      	uxth	r3, r3
 8008184:	029b      	lsls	r3, r3, #10
 8008186:	b29b      	uxth	r3, r3
 8008188:	4313      	orrs	r3, r2
 800818a:	b29a      	uxth	r2, r3
 800818c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008190:	801a      	strh	r2, [r3, #0]
 8008192:	e030      	b.n	80081f6 <USB_EPStartXfer+0x155e>
 8008194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	785b      	ldrb	r3, [r3, #1]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d128      	bne.n	80081f6 <USB_EPStartXfer+0x155e>
 80081a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80081b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	461a      	mov	r2, r3
 80081c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081c8:	4413      	add	r3, r2
 80081ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80081ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	011a      	lsls	r2, r3, #4
 80081dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081e0:	4413      	add	r3, r2
 80081e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80081f4:	801a      	strh	r2, [r3, #0]
 80081f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	785b      	ldrb	r3, [r3, #1]
 8008210:	2b00      	cmp	r3, #0
 8008212:	f040 8085 	bne.w	8008320 <USB_EPStartXfer+0x1688>
 8008216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008232:	b29b      	uxth	r3, r3
 8008234:	461a      	mov	r2, r3
 8008236:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800823a:	4413      	add	r3, r2
 800823c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	011a      	lsls	r2, r3, #4
 800824e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008252:	4413      	add	r3, r2
 8008254:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800825c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	b29b      	uxth	r3, r3
 8008264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008268:	b29a      	uxth	r2, r3
 800826a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800826e:	801a      	strh	r2, [r3, #0]
 8008270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008274:	2b3e      	cmp	r3, #62	; 0x3e
 8008276:	d923      	bls.n	80082c0 <USB_EPStartXfer+0x1628>
 8008278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800827c:	095b      	lsrs	r3, r3, #5
 800827e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008286:	f003 031f 	and.w	r3, r3, #31
 800828a:	2b00      	cmp	r3, #0
 800828c:	d104      	bne.n	8008298 <USB_EPStartXfer+0x1600>
 800828e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008292:	3b01      	subs	r3, #1
 8008294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008298:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	b29a      	uxth	r2, r3
 80082a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	029b      	lsls	r3, r3, #10
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	4313      	orrs	r3, r2
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082bc:	801a      	strh	r2, [r3, #0]
 80082be:	e05c      	b.n	800837a <USB_EPStartXfer+0x16e2>
 80082c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10c      	bne.n	80082e2 <USB_EPStartXfer+0x164a>
 80082c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d8:	b29a      	uxth	r2, r3
 80082da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082de:	801a      	strh	r2, [r3, #0]
 80082e0:	e04b      	b.n	800837a <USB_EPStartXfer+0x16e2>
 80082e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082e6:	085b      	lsrs	r3, r3, #1
 80082e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d004      	beq.n	8008302 <USB_EPStartXfer+0x166a>
 80082f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082fc:	3301      	adds	r3, #1
 80082fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008302:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008306:	881b      	ldrh	r3, [r3, #0]
 8008308:	b29a      	uxth	r2, r3
 800830a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800830e:	b29b      	uxth	r3, r3
 8008310:	029b      	lsls	r3, r3, #10
 8008312:	b29b      	uxth	r3, r3
 8008314:	4313      	orrs	r3, r2
 8008316:	b29a      	uxth	r2, r3
 8008318:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800831c:	801a      	strh	r2, [r3, #0]
 800831e:	e02c      	b.n	800837a <USB_EPStartXfer+0x16e2>
 8008320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	785b      	ldrb	r3, [r3, #1]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d124      	bne.n	800837a <USB_EPStartXfer+0x16e2>
 8008330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800833e:	b29b      	uxth	r3, r3
 8008340:	461a      	mov	r2, r3
 8008342:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008346:	4413      	add	r3, r2
 8008348:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800834c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	011a      	lsls	r2, r3, #4
 800835a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800835e:	4413      	add	r3, r2
 8008360:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008364:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800836c:	b29a      	uxth	r2, r3
 800836e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008372:	801a      	strh	r2, [r3, #0]
 8008374:	e001      	b.n	800837a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e03a      	b.n	80083f0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800837a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800839c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80083a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80083a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80083b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80083b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80083bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	441a      	add	r2, r3
 80083d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80083da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b085      	sub	sp, #20
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	785b      	ldrb	r3, [r3, #1]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d020      	beq.n	800844e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	b29b      	uxth	r3, r3
 800841a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800841e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008422:	81bb      	strh	r3, [r7, #12]
 8008424:	89bb      	ldrh	r3, [r7, #12]
 8008426:	f083 0310 	eor.w	r3, r3, #16
 800842a:	81bb      	strh	r3, [r7, #12]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	441a      	add	r2, r3
 8008436:	89bb      	ldrh	r3, [r7, #12]
 8008438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800843c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008448:	b29b      	uxth	r3, r3
 800844a:	8013      	strh	r3, [r2, #0]
 800844c:	e01f      	b.n	800848e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	b29b      	uxth	r3, r3
 800845c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008464:	81fb      	strh	r3, [r7, #14]
 8008466:	89fb      	ldrh	r3, [r7, #14]
 8008468:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800846c:	81fb      	strh	r3, [r7, #14]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	441a      	add	r2, r3
 8008478:	89fb      	ldrh	r3, [r7, #14]
 800847a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800847e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848a:	b29b      	uxth	r3, r3
 800848c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	bc80      	pop	{r7}
 8008498:	4770      	bx	lr

0800849a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800849a:	b480      	push	{r7}
 800849c:	b087      	sub	sp, #28
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	7b1b      	ldrb	r3, [r3, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f040 809d 	bne.w	80085e8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	785b      	ldrb	r3, [r3, #1]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d04c      	beq.n	8008550 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	823b      	strh	r3, [r7, #16]
 80084c4:	8a3b      	ldrh	r3, [r7, #16]
 80084c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d01b      	beq.n	8008506 <USB_EPClearStall+0x6c>
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	b29b      	uxth	r3, r3
 80084dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e4:	81fb      	strh	r3, [r7, #14]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	441a      	add	r2, r3
 80084f0:	89fb      	ldrh	r3, [r7, #14]
 80084f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008502:	b29b      	uxth	r3, r3
 8008504:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	78db      	ldrb	r3, [r3, #3]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d06c      	beq.n	80085e8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	b29b      	uxth	r3, r3
 800851c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008524:	81bb      	strh	r3, [r7, #12]
 8008526:	89bb      	ldrh	r3, [r7, #12]
 8008528:	f083 0320 	eor.w	r3, r3, #32
 800852c:	81bb      	strh	r3, [r7, #12]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	441a      	add	r2, r3
 8008538:	89bb      	ldrh	r3, [r7, #12]
 800853a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800853e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854a:	b29b      	uxth	r3, r3
 800854c:	8013      	strh	r3, [r2, #0]
 800854e:	e04b      	b.n	80085e8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	82fb      	strh	r3, [r7, #22]
 800855e:	8afb      	ldrh	r3, [r7, #22]
 8008560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01b      	beq.n	80085a0 <USB_EPClearStall+0x106>
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	b29b      	uxth	r3, r3
 8008576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800857a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800857e:	82bb      	strh	r3, [r7, #20]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	441a      	add	r2, r3
 800858a:	8abb      	ldrh	r3, [r7, #20]
 800858c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800859c:	b29b      	uxth	r3, r3
 800859e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b6:	827b      	strh	r3, [r7, #18]
 80085b8:	8a7b      	ldrh	r3, [r7, #18]
 80085ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085be:	827b      	strh	r3, [r7, #18]
 80085c0:	8a7b      	ldrh	r3, [r7, #18]
 80085c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085c6:	827b      	strh	r3, [r7, #18]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	441a      	add	r2, r3
 80085d2:	8a7b      	ldrh	r3, [r7, #18]
 80085d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	371c      	adds	r7, #28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bc80      	pop	{r7}
 80085f2:	4770      	bx	lr

080085f4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008600:	78fb      	ldrb	r3, [r7, #3]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d103      	bne.n	800860e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2280      	movs	r2, #128	; 0x80
 800860a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	bc80      	pop	{r7}
 8008618:	4770      	bx	lr

0800861a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	bc80      	pop	{r7}
 800862c:	4770      	bx	lr

0800862e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800862e:	b480      	push	{r7}
 8008630:	b083      	sub	sp, #12
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	bc80      	pop	{r7}
 8008640:	4770      	bx	lr

08008642 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008642:	b480      	push	{r7}
 8008644:	b085      	sub	sp, #20
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008650:	b29b      	uxth	r3, r3
 8008652:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008654:	68fb      	ldr	r3, [r7, #12]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	bc80      	pop	{r7}
 800865e:	4770      	bx	lr

08008660 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	bc80      	pop	{r7}
 8008674:	4770      	bx	lr

08008676 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008676:	b480      	push	{r7}
 8008678:	b08b      	sub	sp, #44	; 0x2c
 800867a:	af00      	add	r7, sp, #0
 800867c:	60f8      	str	r0, [r7, #12]
 800867e:	60b9      	str	r1, [r7, #8]
 8008680:	4611      	mov	r1, r2
 8008682:	461a      	mov	r2, r3
 8008684:	460b      	mov	r3, r1
 8008686:	80fb      	strh	r3, [r7, #6]
 8008688:	4613      	mov	r3, r2
 800868a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800868c:	88bb      	ldrh	r3, [r7, #4]
 800868e:	3301      	adds	r3, #1
 8008690:	085b      	lsrs	r3, r3, #1
 8008692:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800869c:	88fb      	ldrh	r3, [r7, #6]
 800869e:	005a      	lsls	r2, r3, #1
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	627b      	str	r3, [r7, #36]	; 0x24
 80086ae:	e01e      	b.n	80086ee <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	3301      	adds	r3, #1
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	b21a      	sxth	r2, r3
 80086c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	b21b      	sxth	r3, r3
 80086c8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	8a7a      	ldrh	r2, [r7, #18]
 80086ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	3302      	adds	r3, #2
 80086d4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	3302      	adds	r3, #2
 80086da:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	3301      	adds	r3, #1
 80086e0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	3301      	adds	r3, #1
 80086e6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80086e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ea:	3b01      	subs	r3, #1
 80086ec:	627b      	str	r3, [r7, #36]	; 0x24
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1dd      	bne.n	80086b0 <USB_WritePMA+0x3a>
  }
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop
 80086f8:	372c      	adds	r7, #44	; 0x2c
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr

08008700 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008700:	b480      	push	{r7}
 8008702:	b08b      	sub	sp, #44	; 0x2c
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	4611      	mov	r1, r2
 800870c:	461a      	mov	r2, r3
 800870e:	460b      	mov	r3, r1
 8008710:	80fb      	strh	r3, [r7, #6]
 8008712:	4613      	mov	r3, r2
 8008714:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008716:	88bb      	ldrh	r3, [r7, #4]
 8008718:	085b      	lsrs	r3, r3, #1
 800871a:	b29b      	uxth	r3, r3
 800871c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008726:	88fb      	ldrh	r3, [r7, #6]
 8008728:	005a      	lsls	r2, r3, #1
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008732:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
 8008738:	e01b      	b.n	8008772 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	b29b      	uxth	r3, r3
 8008740:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	3302      	adds	r3, #2
 8008746:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	b2da      	uxtb	r2, r3
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	3301      	adds	r3, #1
 8008754:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	0a1b      	lsrs	r3, r3, #8
 800875a:	b2da      	uxtb	r2, r3
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	3301      	adds	r3, #1
 8008764:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	3302      	adds	r3, #2
 800876a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	3b01      	subs	r3, #1
 8008770:	627b      	str	r3, [r7, #36]	; 0x24
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e0      	bne.n	800873a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008778:	88bb      	ldrh	r3, [r7, #4]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	b29b      	uxth	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	d007      	beq.n	8008794 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	b2da      	uxtb	r2, r3
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	701a      	strb	r2, [r3, #0]
  }
}
 8008794:	bf00      	nop
 8008796:	372c      	adds	r7, #44	; 0x2c
 8008798:	46bd      	mov	sp, r7
 800879a:	bc80      	pop	{r7}
 800879c:	4770      	bx	lr

0800879e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	460b      	mov	r3, r1
 80087a8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	7c1b      	ldrb	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d115      	bne.n	80087e2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80087b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087ba:	2202      	movs	r2, #2
 80087bc:	2181      	movs	r1, #129	; 0x81
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f004 fb37 	bl	800ce32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80087ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087ce:	2202      	movs	r2, #2
 80087d0:	2101      	movs	r1, #1
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f004 fb2d 	bl	800ce32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80087e0:	e012      	b.n	8008808 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80087e2:	2340      	movs	r3, #64	; 0x40
 80087e4:	2202      	movs	r2, #2
 80087e6:	2181      	movs	r1, #129	; 0x81
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f004 fb22 	bl	800ce32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80087f4:	2340      	movs	r3, #64	; 0x40
 80087f6:	2202      	movs	r2, #2
 80087f8:	2101      	movs	r1, #1
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f004 fb19 	bl	800ce32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008808:	2308      	movs	r3, #8
 800880a:	2203      	movs	r2, #3
 800880c:	2182      	movs	r1, #130	; 0x82
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f004 fb0f 	bl	800ce32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800881a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800881e:	f004 fc2f 	bl	800d080 <USBD_static_malloc>
 8008822:	4602      	mov	r2, r0
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008830:	2b00      	cmp	r3, #0
 8008832:	d102      	bne.n	800883a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008834:	2301      	movs	r3, #1
 8008836:	73fb      	strb	r3, [r7, #15]
 8008838:	e026      	b.n	8008888 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008840:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2200      	movs	r2, #0
 8008850:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2200      	movs	r2, #0
 8008858:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	7c1b      	ldrb	r3, [r3, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d109      	bne.n	8008878 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800886a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800886e:	2101      	movs	r1, #1
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f004 fbcf 	bl	800d014 <USBD_LL_PrepareReceive>
 8008876:	e007      	b.n	8008888 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800887e:	2340      	movs	r3, #64	; 0x40
 8008880:	2101      	movs	r1, #1
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f004 fbc6 	bl	800d014 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008888:	7bfb      	ldrb	r3, [r7, #15]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	460b      	mov	r3, r1
 800889c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80088a2:	2181      	movs	r1, #129	; 0x81
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f004 faea 	bl	800ce7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80088b0:	2101      	movs	r1, #1
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f004 fae3 	bl	800ce7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80088c0:	2182      	movs	r1, #130	; 0x82
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f004 fadb 	bl	800ce7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00e      	beq.n	80088f6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e8:	4618      	mov	r0, r3
 80088ea:	f004 fbd5 	bl	800d098 <USBD_static_free>
    pdev->pClassData = NULL;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008910:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008926:	2b00      	cmp	r3, #0
 8008928:	d039      	beq.n	800899e <USBD_CDC_Setup+0x9e>
 800892a:	2b20      	cmp	r3, #32
 800892c:	d17f      	bne.n	8008a2e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	88db      	ldrh	r3, [r3, #6]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d029      	beq.n	800898a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	b25b      	sxtb	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	da11      	bge.n	8008964 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800894c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	88d2      	ldrh	r2, [r2, #6]
 8008952:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008954:	6939      	ldr	r1, [r7, #16]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	88db      	ldrh	r3, [r3, #6]
 800895a:	461a      	mov	r2, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 f9da 	bl	8009d16 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008962:	e06b      	b.n	8008a3c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	785a      	ldrb	r2, [r3, #1]
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	88db      	ldrh	r3, [r3, #6]
 8008972:	b2da      	uxtb	r2, r3
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800897a:	6939      	ldr	r1, [r7, #16]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	88db      	ldrh	r3, [r3, #6]
 8008980:	461a      	mov	r2, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f001 f9f5 	bl	8009d72 <USBD_CtlPrepareRx>
      break;
 8008988:	e058      	b.n	8008a3c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	7850      	ldrb	r0, [r2, #1]
 8008996:	2200      	movs	r2, #0
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	4798      	blx	r3
      break;
 800899c:	e04e      	b.n	8008a3c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	2b0b      	cmp	r3, #11
 80089a4:	d02e      	beq.n	8008a04 <USBD_CDC_Setup+0x104>
 80089a6:	2b0b      	cmp	r3, #11
 80089a8:	dc38      	bgt.n	8008a1c <USBD_CDC_Setup+0x11c>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d002      	beq.n	80089b4 <USBD_CDC_Setup+0xb4>
 80089ae:	2b0a      	cmp	r3, #10
 80089b0:	d014      	beq.n	80089dc <USBD_CDC_Setup+0xdc>
 80089b2:	e033      	b.n	8008a1c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d107      	bne.n	80089ce <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80089be:	f107 030c 	add.w	r3, r7, #12
 80089c2:	2202      	movs	r2, #2
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 f9a5 	bl	8009d16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089cc:	e02e      	b.n	8008a2c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 f936 	bl	8009c42 <USBD_CtlError>
            ret = USBD_FAIL;
 80089d6:	2302      	movs	r3, #2
 80089d8:	75fb      	strb	r3, [r7, #23]
          break;
 80089da:	e027      	b.n	8008a2c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d107      	bne.n	80089f6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80089e6:	f107 030f 	add.w	r3, r7, #15
 80089ea:	2201      	movs	r2, #1
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f001 f991 	bl	8009d16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089f4:	e01a      	b.n	8008a2c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f001 f922 	bl	8009c42 <USBD_CtlError>
            ret = USBD_FAIL;
 80089fe:	2302      	movs	r3, #2
 8008a00:	75fb      	strb	r3, [r7, #23]
          break;
 8008a02:	e013      	b.n	8008a2c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	d00d      	beq.n	8008a2a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 f916 	bl	8009c42 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a16:	2302      	movs	r3, #2
 8008a18:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a1a:	e006      	b.n	8008a2a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f001 f90f 	bl	8009c42 <USBD_CtlError>
          ret = USBD_FAIL;
 8008a24:	2302      	movs	r3, #2
 8008a26:	75fb      	strb	r3, [r7, #23]
          break;
 8008a28:	e000      	b.n	8008a2c <USBD_CDC_Setup+0x12c>
          break;
 8008a2a:	bf00      	nop
      }
      break;
 8008a2c:	e006      	b.n	8008a3c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f001 f906 	bl	8009c42 <USBD_CtlError>
      ret = USBD_FAIL;
 8008a36:	2302      	movs	r3, #2
 8008a38:	75fb      	strb	r3, [r7, #23]
      break;
 8008a3a:	bf00      	nop
  }

  return ret;
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a58:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a60:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d03a      	beq.n	8008ae2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a6c:	78fa      	ldrb	r2, [r7, #3]
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	4613      	mov	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	440b      	add	r3, r1
 8008a7a:	331c      	adds	r3, #28
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d029      	beq.n	8008ad6 <USBD_CDC_DataIn+0x90>
 8008a82:	78fa      	ldrb	r2, [r7, #3]
 8008a84:	6879      	ldr	r1, [r7, #4]
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	440b      	add	r3, r1
 8008a90:	331c      	adds	r3, #28
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	78f9      	ldrb	r1, [r7, #3]
 8008a96:	68b8      	ldr	r0, [r7, #8]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	4403      	add	r3, r0
 8008aa2:	3338      	adds	r3, #56	; 0x38
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	fbb2 f1f3 	udiv	r1, r2, r3
 8008aaa:	fb01 f303 	mul.w	r3, r1, r3
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d110      	bne.n	8008ad6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008ab4:	78fa      	ldrb	r2, [r7, #3]
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	331c      	adds	r3, #28
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ac8:	78f9      	ldrb	r1, [r7, #3]
 8008aca:	2300      	movs	r3, #0
 8008acc:	2200      	movs	r2, #0
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f004 fa7d 	bl	800cfce <USBD_LL_Transmit>
 8008ad4:	e003      	b.n	8008ade <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e000      	b.n	8008ae4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008ae2:	2302      	movs	r3, #2
  }
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f004 faa8 	bl	800d05a <USBD_LL_GetRxDataSize>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00d      	beq.n	8008b38 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008b30:	4611      	mov	r1, r2
 8008b32:	4798      	blx	r3

    return USBD_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	e000      	b.n	8008b3a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008b38:	2302      	movs	r3, #2
  }
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b084      	sub	sp, #16
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b50:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d015      	beq.n	8008b88 <USBD_CDC_EP0_RxReady+0x46>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008b62:	2bff      	cmp	r3, #255	; 0xff
 8008b64:	d010      	beq.n	8008b88 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008b74:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b7c:	b292      	uxth	r2, r2
 8008b7e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	22ff      	movs	r2, #255	; 0xff
 8008b84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2243      	movs	r2, #67	; 0x43
 8008ba0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008ba2:	4b03      	ldr	r3, [pc, #12]	; (8008bb0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bc80      	pop	{r7}
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	20000094 	.word	0x20000094

08008bb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2243      	movs	r2, #67	; 0x43
 8008bc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008bc2:	4b03      	ldr	r3, [pc, #12]	; (8008bd0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bc80      	pop	{r7}
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	20000050 	.word	0x20000050

08008bd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2243      	movs	r2, #67	; 0x43
 8008be0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008be2:	4b03      	ldr	r3, [pc, #12]	; (8008bf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bc80      	pop	{r7}
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	200000d8 	.word	0x200000d8

08008bf4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	220a      	movs	r2, #10
 8008c00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008c02:	4b03      	ldr	r3, [pc, #12]	; (8008c10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bc80      	pop	{r7}
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	2000000c 	.word	0x2000000c

08008c14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008c1e:	2302      	movs	r3, #2
 8008c20:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bc80      	pop	{r7}
 8008c3e:	4770      	bx	lr

08008c40 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c54:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008c5e:	88fa      	ldrh	r2, [r7, #6]
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	371c      	adds	r7, #28
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bc80      	pop	{r7}
 8008c70:	4770      	bx	lr

08008c72 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c82:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bc80      	pop	{r7}
 8008c96:	4770      	bx	lr

08008c98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d017      	beq.n	8008ce2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	7c1b      	ldrb	r3, [r3, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d109      	bne.n	8008cce <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f004 f9a4 	bl	800d014 <USBD_LL_PrepareReceive>
 8008ccc:	e007      	b.n	8008cde <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cd4:	2340      	movs	r3, #64	; 0x40
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f004 f99b 	bl	800d014 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	e000      	b.n	8008ce4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008ce2:	2302      	movs	r3, #2
  }
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008d00:	2302      	movs	r3, #2
 8008d02:	e01a      	b.n	8008d3a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d003      	beq.n	8008d24 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	79fa      	ldrb	r2, [r7, #7]
 8008d30:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f004 f808 	bl	800cd48 <USBD_LL_Init>

  return USBD_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b085      	sub	sp, #20
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d006      	beq.n	8008d64 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	73fb      	strb	r3, [r7, #15]
 8008d62:	e001      	b.n	8008d68 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008d64:	2302      	movs	r3, #2
 8008d66:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bc80      	pop	{r7}
 8008d72:	4770      	bx	lr

08008d74 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f004 f83d 	bl	800cdfc <USBD_LL_Start>

  return USBD_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bc80      	pop	{r7}
 8008d9e:	4770      	bx	lr

08008da0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008dac:	2302      	movs	r3, #2
 8008dae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00c      	beq.n	8008dd4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	78fa      	ldrb	r2, [r7, #3]
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	4798      	blx	r3
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	460b      	mov	r3, r1
 8008de8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	78fa      	ldrb	r2, [r7, #3]
 8008df4:	4611      	mov	r1, r2
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	4798      	blx	r3

  return USBD_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fed7 	bl	8009bca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008e38:	f003 031f 	and.w	r3, r3, #31
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d016      	beq.n	8008e6e <USBD_LL_SetupStage+0x6a>
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d81c      	bhi.n	8008e7e <USBD_LL_SetupStage+0x7a>
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <USBD_LL_SetupStage+0x4a>
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d008      	beq.n	8008e5e <USBD_LL_SetupStage+0x5a>
 8008e4c:	e017      	b.n	8008e7e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f9ca 	bl	80091f0 <USBD_StdDevReq>
      break;
 8008e5c:	e01a      	b.n	8008e94 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e64:	4619      	mov	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fa2c 	bl	80092c4 <USBD_StdItfReq>
      break;
 8008e6c:	e012      	b.n	8008e94 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e74:	4619      	mov	r1, r3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fa6c 	bl	8009354 <USBD_StdEPReq>
      break;
 8008e7c:	e00a      	b.n	8008e94 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008e84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f004 f815 	bl	800cebc <USBD_LL_StallEP>
      break;
 8008e92:	bf00      	nop
  }

  return USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b086      	sub	sp, #24
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	60f8      	str	r0, [r7, #12]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	607a      	str	r2, [r7, #4]
 8008eaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008eac:	7afb      	ldrb	r3, [r7, #11]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d14b      	bne.n	8008f4a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008eb8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d134      	bne.n	8008f2e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	68da      	ldr	r2, [r3, #12]
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d919      	bls.n	8008f04 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	1ad2      	subs	r2, r2, r3
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	68da      	ldr	r2, [r3, #12]
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d203      	bcs.n	8008ef2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	e002      	b.n	8008ef8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	461a      	mov	r2, r3
 8008efa:	6879      	ldr	r1, [r7, #4]
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f000 ff56 	bl	8009dae <USBD_CtlContinueRx>
 8008f02:	e038      	b.n	8008f76 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00a      	beq.n	8008f26 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d105      	bne.n	8008f26 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f000 ff53 	bl	8009dd2 <USBD_CtlSendStatus>
 8008f2c:	e023      	b.n	8008f76 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f34:	2b05      	cmp	r3, #5
 8008f36:	d11e      	bne.n	8008f76 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008f40:	2100      	movs	r1, #0
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f003 ffba 	bl	800cebc <USBD_LL_StallEP>
 8008f48:	e015      	b.n	8008f76 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00d      	beq.n	8008f72 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d108      	bne.n	8008f72 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	7afa      	ldrb	r2, [r7, #11]
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	4798      	blx	r3
 8008f70:	e001      	b.n	8008f76 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f72:	2302      	movs	r3, #2
 8008f74:	e000      	b.n	8008f78 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f8e:	7afb      	ldrb	r3, [r7, #11]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d17f      	bne.n	8009094 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3314      	adds	r3, #20
 8008f98:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d15c      	bne.n	800905e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	68da      	ldr	r2, [r3, #12]
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d915      	bls.n	8008fdc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	68da      	ldr	r2, [r3, #12]
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	1ad2      	subs	r2, r2, r3
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 fec0 	bl	8009d4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fce:	2300      	movs	r3, #0
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f004 f81d 	bl	800d014 <USBD_LL_PrepareReceive>
 8008fda:	e04e      	b.n	800907a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	6912      	ldr	r2, [r2, #16]
 8008fe4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fe8:	fb01 f202 	mul.w	r2, r1, r2
 8008fec:	1a9b      	subs	r3, r3, r2
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d11c      	bne.n	800902c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	689a      	ldr	r2, [r3, #8]
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d316      	bcc.n	800902c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	689a      	ldr	r2, [r3, #8]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009008:	429a      	cmp	r2, r3
 800900a:	d20f      	bcs.n	800902c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800900c:	2200      	movs	r2, #0
 800900e:	2100      	movs	r1, #0
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 fe9c 	bl	8009d4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800901e:	2300      	movs	r3, #0
 8009020:	2200      	movs	r2, #0
 8009022:	2100      	movs	r1, #0
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f003 fff5 	bl	800d014 <USBD_LL_PrepareReceive>
 800902a:	e026      	b.n	800907a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00a      	beq.n	800904e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800903e:	2b03      	cmp	r3, #3
 8009040:	d105      	bne.n	800904e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800904e:	2180      	movs	r1, #128	; 0x80
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f003 ff33 	bl	800cebc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 fece 	bl	8009df8 <USBD_CtlReceiveStatus>
 800905c:	e00d      	b.n	800907a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009064:	2b04      	cmp	r3, #4
 8009066:	d004      	beq.n	8009072 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800906e:	2b00      	cmp	r3, #0
 8009070:	d103      	bne.n	800907a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009072:	2180      	movs	r1, #128	; 0x80
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f003 ff21 	bl	800cebc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009080:	2b01      	cmp	r3, #1
 8009082:	d11d      	bne.n	80090c0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f7ff fe81 	bl	8008d8c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009092:	e015      	b.n	80090c0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00d      	beq.n	80090bc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d108      	bne.n	80090bc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	7afa      	ldrb	r2, [r7, #11]
 80090b4:	4611      	mov	r1, r2
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	4798      	blx	r3
 80090ba:	e001      	b.n	80090c0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80090bc:	2302      	movs	r3, #2
 80090be:	e000      	b.n	80090c2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3718      	adds	r7, #24
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090d2:	2340      	movs	r3, #64	; 0x40
 80090d4:	2200      	movs	r2, #0
 80090d6:	2100      	movs	r1, #0
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f003 feaa 	bl	800ce32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2240      	movs	r2, #64	; 0x40
 80090ea:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090ee:	2340      	movs	r3, #64	; 0x40
 80090f0:	2200      	movs	r2, #0
 80090f2:	2180      	movs	r1, #128	; 0x80
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f003 fe9c 	bl	800ce32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2201      	movs	r2, #1
 80090fe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2240      	movs	r2, #64	; 0x40
 8009104:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912a:	2b00      	cmp	r3, #0
 800912c:	d009      	beq.n	8009142 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	6852      	ldr	r2, [r2, #4]
 800913a:	b2d2      	uxtb	r2, r2
 800913c:	4611      	mov	r1, r2
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	4798      	blx	r3
  }

  return USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	78fa      	ldrb	r2, [r7, #3]
 800915c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	bc80      	pop	{r7}
 8009168:	4770      	bx	lr

0800916a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2204      	movs	r2, #4
 8009182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	bc80      	pop	{r7}
 8009190:	4770      	bx	lr

08009192 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009192:	b480      	push	{r7}
 8009194:	b083      	sub	sp, #12
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a0:	2b04      	cmp	r3, #4
 80091a2:	d105      	bne.n	80091b0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bc80      	pop	{r7}
 80091ba:	4770      	bx	lr

080091bc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d10b      	bne.n	80091e6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d005      	beq.n	80091e6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009206:	2b40      	cmp	r3, #64	; 0x40
 8009208:	d005      	beq.n	8009216 <USBD_StdDevReq+0x26>
 800920a:	2b40      	cmp	r3, #64	; 0x40
 800920c:	d84f      	bhi.n	80092ae <USBD_StdDevReq+0xbe>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d009      	beq.n	8009226 <USBD_StdDevReq+0x36>
 8009212:	2b20      	cmp	r3, #32
 8009214:	d14b      	bne.n	80092ae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	4798      	blx	r3
      break;
 8009224:	e048      	b.n	80092b8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	785b      	ldrb	r3, [r3, #1]
 800922a:	2b09      	cmp	r3, #9
 800922c:	d839      	bhi.n	80092a2 <USBD_StdDevReq+0xb2>
 800922e:	a201      	add	r2, pc, #4	; (adr r2, 8009234 <USBD_StdDevReq+0x44>)
 8009230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009234:	08009285 	.word	0x08009285
 8009238:	08009299 	.word	0x08009299
 800923c:	080092a3 	.word	0x080092a3
 8009240:	0800928f 	.word	0x0800928f
 8009244:	080092a3 	.word	0x080092a3
 8009248:	08009267 	.word	0x08009267
 800924c:	0800925d 	.word	0x0800925d
 8009250:	080092a3 	.word	0x080092a3
 8009254:	0800927b 	.word	0x0800927b
 8009258:	08009271 	.word	0x08009271
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f9dc 	bl	800961c <USBD_GetDescriptor>
          break;
 8009264:	e022      	b.n	80092ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fb3f 	bl	80098ec <USBD_SetAddress>
          break;
 800926e:	e01d      	b.n	80092ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fb7e 	bl	8009974 <USBD_SetConfig>
          break;
 8009278:	e018      	b.n	80092ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fc07 	bl	8009a90 <USBD_GetConfig>
          break;
 8009282:	e013      	b.n	80092ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009284:	6839      	ldr	r1, [r7, #0]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fc37 	bl	8009afa <USBD_GetStatus>
          break;
 800928c:	e00e      	b.n	80092ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fc65 	bl	8009b60 <USBD_SetFeature>
          break;
 8009296:	e009      	b.n	80092ac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fc74 	bl	8009b88 <USBD_ClrFeature>
          break;
 80092a0:	e004      	b.n	80092ac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fccc 	bl	8009c42 <USBD_CtlError>
          break;
 80092aa:	bf00      	nop
      }
      break;
 80092ac:	e004      	b.n	80092b8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fcc6 	bl	8009c42 <USBD_CtlError>
      break;
 80092b6:	bf00      	nop
  }

  return ret;
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop

080092c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092da:	2b40      	cmp	r3, #64	; 0x40
 80092dc:	d005      	beq.n	80092ea <USBD_StdItfReq+0x26>
 80092de:	2b40      	cmp	r3, #64	; 0x40
 80092e0:	d82e      	bhi.n	8009340 <USBD_StdItfReq+0x7c>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <USBD_StdItfReq+0x26>
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	d12a      	bne.n	8009340 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f0:	3b01      	subs	r3, #1
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d81d      	bhi.n	8009332 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	889b      	ldrh	r3, [r3, #4]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d813      	bhi.n	8009328 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	4798      	blx	r3
 800930e:	4603      	mov	r3, r0
 8009310:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	88db      	ldrh	r3, [r3, #6]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d110      	bne.n	800933c <USBD_StdItfReq+0x78>
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10d      	bne.n	800933c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fd56 	bl	8009dd2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009326:	e009      	b.n	800933c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fc89 	bl	8009c42 <USBD_CtlError>
          break;
 8009330:	e004      	b.n	800933c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fc84 	bl	8009c42 <USBD_CtlError>
          break;
 800933a:	e000      	b.n	800933e <USBD_StdItfReq+0x7a>
          break;
 800933c:	bf00      	nop
      }
      break;
 800933e:	e004      	b.n	800934a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fc7d 	bl	8009c42 <USBD_CtlError>
      break;
 8009348:	bf00      	nop
  }

  return USBD_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	889b      	ldrh	r3, [r3, #4]
 8009366:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009370:	2b40      	cmp	r3, #64	; 0x40
 8009372:	d007      	beq.n	8009384 <USBD_StdEPReq+0x30>
 8009374:	2b40      	cmp	r3, #64	; 0x40
 8009376:	f200 8146 	bhi.w	8009606 <USBD_StdEPReq+0x2b2>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00a      	beq.n	8009394 <USBD_StdEPReq+0x40>
 800937e:	2b20      	cmp	r3, #32
 8009380:	f040 8141 	bne.w	8009606 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	4798      	blx	r3
      break;
 8009392:	e13d      	b.n	8009610 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800939c:	2b20      	cmp	r3, #32
 800939e:	d10a      	bne.n	80093b6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	6839      	ldr	r1, [r7, #0]
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	4798      	blx	r3
 80093ae:	4603      	mov	r3, r0
 80093b0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	e12d      	b.n	8009612 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	785b      	ldrb	r3, [r3, #1]
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	d007      	beq.n	80093ce <USBD_StdEPReq+0x7a>
 80093be:	2b03      	cmp	r3, #3
 80093c0:	f300 811b 	bgt.w	80095fa <USBD_StdEPReq+0x2a6>
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d072      	beq.n	80094ae <USBD_StdEPReq+0x15a>
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d03a      	beq.n	8009442 <USBD_StdEPReq+0xee>
 80093cc:	e115      	b.n	80095fa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d002      	beq.n	80093de <USBD_StdEPReq+0x8a>
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d015      	beq.n	8009408 <USBD_StdEPReq+0xb4>
 80093dc:	e02b      	b.n	8009436 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00c      	beq.n	80093fe <USBD_StdEPReq+0xaa>
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b80      	cmp	r3, #128	; 0x80
 80093e8:	d009      	beq.n	80093fe <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f003 fd64 	bl	800cebc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80093f4:	2180      	movs	r1, #128	; 0x80
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f003 fd60 	bl	800cebc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093fc:	e020      	b.n	8009440 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fc1e 	bl	8009c42 <USBD_CtlError>
              break;
 8009406:	e01b      	b.n	8009440 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	885b      	ldrh	r3, [r3, #2]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10e      	bne.n	800942e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009410:	7bbb      	ldrb	r3, [r7, #14]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00b      	beq.n	800942e <USBD_StdEPReq+0xda>
 8009416:	7bbb      	ldrb	r3, [r7, #14]
 8009418:	2b80      	cmp	r3, #128	; 0x80
 800941a:	d008      	beq.n	800942e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	88db      	ldrh	r3, [r3, #6]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d104      	bne.n	800942e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	4619      	mov	r1, r3
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f003 fd47 	bl	800cebc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fccf 	bl	8009dd2 <USBD_CtlSendStatus>

              break;
 8009434:	e004      	b.n	8009440 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fc02 	bl	8009c42 <USBD_CtlError>
              break;
 800943e:	bf00      	nop
          }
          break;
 8009440:	e0e0      	b.n	8009604 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009448:	2b02      	cmp	r3, #2
 800944a:	d002      	beq.n	8009452 <USBD_StdEPReq+0xfe>
 800944c:	2b03      	cmp	r3, #3
 800944e:	d015      	beq.n	800947c <USBD_StdEPReq+0x128>
 8009450:	e026      	b.n	80094a0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00c      	beq.n	8009472 <USBD_StdEPReq+0x11e>
 8009458:	7bbb      	ldrb	r3, [r7, #14]
 800945a:	2b80      	cmp	r3, #128	; 0x80
 800945c:	d009      	beq.n	8009472 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800945e:	7bbb      	ldrb	r3, [r7, #14]
 8009460:	4619      	mov	r1, r3
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f003 fd2a 	bl	800cebc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009468:	2180      	movs	r1, #128	; 0x80
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f003 fd26 	bl	800cebc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009470:	e01c      	b.n	80094ac <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fbe4 	bl	8009c42 <USBD_CtlError>
              break;
 800947a:	e017      	b.n	80094ac <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	885b      	ldrh	r3, [r3, #2]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d112      	bne.n	80094aa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009484:	7bbb      	ldrb	r3, [r7, #14]
 8009486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800948a:	2b00      	cmp	r3, #0
 800948c:	d004      	beq.n	8009498 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800948e:	7bbb      	ldrb	r3, [r7, #14]
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f003 fd31 	bl	800cefa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fc9a 	bl	8009dd2 <USBD_CtlSendStatus>
              }
              break;
 800949e:	e004      	b.n	80094aa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fbcd 	bl	8009c42 <USBD_CtlError>
              break;
 80094a8:	e000      	b.n	80094ac <USBD_StdEPReq+0x158>
              break;
 80094aa:	bf00      	nop
          }
          break;
 80094ac:	e0aa      	b.n	8009604 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d002      	beq.n	80094be <USBD_StdEPReq+0x16a>
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d032      	beq.n	8009522 <USBD_StdEPReq+0x1ce>
 80094bc:	e097      	b.n	80095ee <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d007      	beq.n	80094d4 <USBD_StdEPReq+0x180>
 80094c4:	7bbb      	ldrb	r3, [r7, #14]
 80094c6:	2b80      	cmp	r3, #128	; 0x80
 80094c8:	d004      	beq.n	80094d4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fbb8 	bl	8009c42 <USBD_CtlError>
                break;
 80094d2:	e091      	b.n	80095f8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	da0b      	bge.n	80094f4 <USBD_StdEPReq+0x1a0>
 80094dc:	7bbb      	ldrb	r3, [r7, #14]
 80094de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094e2:	4613      	mov	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	3310      	adds	r3, #16
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	4413      	add	r3, r2
 80094f0:	3304      	adds	r3, #4
 80094f2:	e00b      	b.n	800950c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094fa:	4613      	mov	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	4413      	add	r3, r2
 800950a:	3304      	adds	r3, #4
 800950c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	2200      	movs	r2, #0
 8009512:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2202      	movs	r2, #2
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fbfb 	bl	8009d16 <USBD_CtlSendData>
              break;
 8009520:	e06a      	b.n	80095f8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009526:	2b00      	cmp	r3, #0
 8009528:	da11      	bge.n	800954e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	f003 020f 	and.w	r2, r3, #15
 8009530:	6879      	ldr	r1, [r7, #4]
 8009532:	4613      	mov	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	440b      	add	r3, r1
 800953c:	3318      	adds	r3, #24
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d117      	bne.n	8009574 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fb7b 	bl	8009c42 <USBD_CtlError>
                  break;
 800954c:	e054      	b.n	80095f8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800954e:	7bbb      	ldrb	r3, [r7, #14]
 8009550:	f003 020f 	and.w	r2, r3, #15
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	4613      	mov	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	440b      	add	r3, r1
 8009560:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d104      	bne.n	8009574 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fb68 	bl	8009c42 <USBD_CtlError>
                  break;
 8009572:	e041      	b.n	80095f8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009578:	2b00      	cmp	r3, #0
 800957a:	da0b      	bge.n	8009594 <USBD_StdEPReq+0x240>
 800957c:	7bbb      	ldrb	r3, [r7, #14]
 800957e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009582:	4613      	mov	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	3310      	adds	r3, #16
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	4413      	add	r3, r2
 8009590:	3304      	adds	r3, #4
 8009592:	e00b      	b.n	80095ac <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009594:	7bbb      	ldrb	r3, [r7, #14]
 8009596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800959a:	4613      	mov	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	4413      	add	r3, r2
 80095aa:	3304      	adds	r3, #4
 80095ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <USBD_StdEPReq+0x266>
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	2b80      	cmp	r3, #128	; 0x80
 80095b8:	d103      	bne.n	80095c2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2200      	movs	r2, #0
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	e00e      	b.n	80095e0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80095c2:	7bbb      	ldrb	r3, [r7, #14]
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f003 fcb6 	bl	800cf38 <USBD_LL_IsStallEP>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2201      	movs	r2, #1
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	e002      	b.n	80095e0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2200      	movs	r2, #0
 80095de:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2202      	movs	r2, #2
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fb95 	bl	8009d16 <USBD_CtlSendData>
              break;
 80095ec:	e004      	b.n	80095f8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fb26 	bl	8009c42 <USBD_CtlError>
              break;
 80095f6:	bf00      	nop
          }
          break;
 80095f8:	e004      	b.n	8009604 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80095fa:	6839      	ldr	r1, [r7, #0]
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fb20 	bl	8009c42 <USBD_CtlError>
          break;
 8009602:	bf00      	nop
      }
      break;
 8009604:	e004      	b.n	8009610 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fb1a 	bl	8009c42 <USBD_CtlError>
      break;
 800960e:	bf00      	nop
  }

  return ret;
 8009610:	7bfb      	ldrb	r3, [r7, #15]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
	...

0800961c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009626:	2300      	movs	r3, #0
 8009628:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800962a:	2300      	movs	r3, #0
 800962c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800962e:	2300      	movs	r3, #0
 8009630:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	885b      	ldrh	r3, [r3, #2]
 8009636:	0a1b      	lsrs	r3, r3, #8
 8009638:	b29b      	uxth	r3, r3
 800963a:	3b01      	subs	r3, #1
 800963c:	2b06      	cmp	r3, #6
 800963e:	f200 8128 	bhi.w	8009892 <USBD_GetDescriptor+0x276>
 8009642:	a201      	add	r2, pc, #4	; (adr r2, 8009648 <USBD_GetDescriptor+0x2c>)
 8009644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009648:	08009665 	.word	0x08009665
 800964c:	0800967d 	.word	0x0800967d
 8009650:	080096bd 	.word	0x080096bd
 8009654:	08009893 	.word	0x08009893
 8009658:	08009893 	.word	0x08009893
 800965c:	08009833 	.word	0x08009833
 8009660:	0800985f 	.word	0x0800985f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	7c12      	ldrb	r2, [r2, #16]
 8009670:	f107 0108 	add.w	r1, r7, #8
 8009674:	4610      	mov	r0, r2
 8009676:	4798      	blx	r3
 8009678:	60f8      	str	r0, [r7, #12]
      break;
 800967a:	e112      	b.n	80098a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	7c1b      	ldrb	r3, [r3, #16]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10d      	bne.n	80096a0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968c:	f107 0208 	add.w	r2, r7, #8
 8009690:	4610      	mov	r0, r2
 8009692:	4798      	blx	r3
 8009694:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	3301      	adds	r3, #1
 800969a:	2202      	movs	r2, #2
 800969c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800969e:	e100      	b.n	80098a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a8:	f107 0208 	add.w	r2, r7, #8
 80096ac:	4610      	mov	r0, r2
 80096ae:	4798      	blx	r3
 80096b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3301      	adds	r3, #1
 80096b6:	2202      	movs	r2, #2
 80096b8:	701a      	strb	r2, [r3, #0]
      break;
 80096ba:	e0f2      	b.n	80098a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	885b      	ldrh	r3, [r3, #2]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b05      	cmp	r3, #5
 80096c4:	f200 80ac 	bhi.w	8009820 <USBD_GetDescriptor+0x204>
 80096c8:	a201      	add	r2, pc, #4	; (adr r2, 80096d0 <USBD_GetDescriptor+0xb4>)
 80096ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ce:	bf00      	nop
 80096d0:	080096e9 	.word	0x080096e9
 80096d4:	0800971d 	.word	0x0800971d
 80096d8:	08009751 	.word	0x08009751
 80096dc:	08009785 	.word	0x08009785
 80096e0:	080097b9 	.word	0x080097b9
 80096e4:	080097ed 	.word	0x080097ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00b      	beq.n	800970c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	7c12      	ldrb	r2, [r2, #16]
 8009700:	f107 0108 	add.w	r1, r7, #8
 8009704:	4610      	mov	r0, r2
 8009706:	4798      	blx	r3
 8009708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800970a:	e091      	b.n	8009830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fa97 	bl	8009c42 <USBD_CtlError>
            err++;
 8009714:	7afb      	ldrb	r3, [r7, #11]
 8009716:	3301      	adds	r3, #1
 8009718:	72fb      	strb	r3, [r7, #11]
          break;
 800971a:	e089      	b.n	8009830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00b      	beq.n	8009740 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	7c12      	ldrb	r2, [r2, #16]
 8009734:	f107 0108 	add.w	r1, r7, #8
 8009738:	4610      	mov	r0, r2
 800973a:	4798      	blx	r3
 800973c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800973e:	e077      	b.n	8009830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fa7d 	bl	8009c42 <USBD_CtlError>
            err++;
 8009748:	7afb      	ldrb	r3, [r7, #11]
 800974a:	3301      	adds	r3, #1
 800974c:	72fb      	strb	r3, [r7, #11]
          break;
 800974e:	e06f      	b.n	8009830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00b      	beq.n	8009774 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	7c12      	ldrb	r2, [r2, #16]
 8009768:	f107 0108 	add.w	r1, r7, #8
 800976c:	4610      	mov	r0, r2
 800976e:	4798      	blx	r3
 8009770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009772:	e05d      	b.n	8009830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fa63 	bl	8009c42 <USBD_CtlError>
            err++;
 800977c:	7afb      	ldrb	r3, [r7, #11]
 800977e:	3301      	adds	r3, #1
 8009780:	72fb      	strb	r3, [r7, #11]
          break;
 8009782:	e055      	b.n	8009830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	7c12      	ldrb	r2, [r2, #16]
 800979c:	f107 0108 	add.w	r1, r7, #8
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
 80097a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a6:	e043      	b.n	8009830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fa49 	bl	8009c42 <USBD_CtlError>
            err++;
 80097b0:	7afb      	ldrb	r3, [r7, #11]
 80097b2:	3301      	adds	r3, #1
 80097b4:	72fb      	strb	r3, [r7, #11]
          break;
 80097b6:	e03b      	b.n	8009830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00b      	beq.n	80097dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7c12      	ldrb	r2, [r2, #16]
 80097d0:	f107 0108 	add.w	r1, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097da:	e029      	b.n	8009830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa2f 	bl	8009c42 <USBD_CtlError>
            err++;
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	3301      	adds	r3, #1
 80097e8:	72fb      	strb	r3, [r7, #11]
          break;
 80097ea:	e021      	b.n	8009830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	7c12      	ldrb	r2, [r2, #16]
 8009804:	f107 0108 	add.w	r1, r7, #8
 8009808:	4610      	mov	r0, r2
 800980a:	4798      	blx	r3
 800980c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800980e:	e00f      	b.n	8009830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa15 	bl	8009c42 <USBD_CtlError>
            err++;
 8009818:	7afb      	ldrb	r3, [r7, #11]
 800981a:	3301      	adds	r3, #1
 800981c:	72fb      	strb	r3, [r7, #11]
          break;
 800981e:	e007      	b.n	8009830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fa0d 	bl	8009c42 <USBD_CtlError>
          err++;
 8009828:	7afb      	ldrb	r3, [r7, #11]
 800982a:	3301      	adds	r3, #1
 800982c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800982e:	e038      	b.n	80098a2 <USBD_GetDescriptor+0x286>
 8009830:	e037      	b.n	80098a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	7c1b      	ldrb	r3, [r3, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d109      	bne.n	800984e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009842:	f107 0208 	add.w	r2, r7, #8
 8009846:	4610      	mov	r0, r2
 8009848:	4798      	blx	r3
 800984a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800984c:	e029      	b.n	80098a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f9f6 	bl	8009c42 <USBD_CtlError>
        err++;
 8009856:	7afb      	ldrb	r3, [r7, #11]
 8009858:	3301      	adds	r3, #1
 800985a:	72fb      	strb	r3, [r7, #11]
      break;
 800985c:	e021      	b.n	80098a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	7c1b      	ldrb	r3, [r3, #16]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10d      	bne.n	8009882 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800986c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986e:	f107 0208 	add.w	r2, r7, #8
 8009872:	4610      	mov	r0, r2
 8009874:	4798      	blx	r3
 8009876:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3301      	adds	r3, #1
 800987c:	2207      	movs	r2, #7
 800987e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009880:	e00f      	b.n	80098a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f9dc 	bl	8009c42 <USBD_CtlError>
        err++;
 800988a:	7afb      	ldrb	r3, [r7, #11]
 800988c:	3301      	adds	r3, #1
 800988e:	72fb      	strb	r3, [r7, #11]
      break;
 8009890:	e007      	b.n	80098a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f9d4 	bl	8009c42 <USBD_CtlError>
      err++;
 800989a:	7afb      	ldrb	r3, [r7, #11]
 800989c:	3301      	adds	r3, #1
 800989e:	72fb      	strb	r3, [r7, #11]
      break;
 80098a0:	bf00      	nop
  }

  if (err != 0U)
 80098a2:	7afb      	ldrb	r3, [r7, #11]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d11c      	bne.n	80098e2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80098a8:	893b      	ldrh	r3, [r7, #8]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d011      	beq.n	80098d2 <USBD_GetDescriptor+0x2b6>
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	88db      	ldrh	r3, [r3, #6]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00d      	beq.n	80098d2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	88da      	ldrh	r2, [r3, #6]
 80098ba:	893b      	ldrh	r3, [r7, #8]
 80098bc:	4293      	cmp	r3, r2
 80098be:	bf28      	it	cs
 80098c0:	4613      	movcs	r3, r2
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098c6:	893b      	ldrh	r3, [r7, #8]
 80098c8:	461a      	mov	r2, r3
 80098ca:	68f9      	ldr	r1, [r7, #12]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fa22 	bl	8009d16 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	88db      	ldrh	r3, [r3, #6]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d104      	bne.n	80098e4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa79 	bl	8009dd2 <USBD_CtlSendStatus>
 80098e0:	e000      	b.n	80098e4 <USBD_GetDescriptor+0x2c8>
    return;
 80098e2:	bf00      	nop
    }
  }
}
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop

080098ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	889b      	ldrh	r3, [r3, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d130      	bne.n	8009960 <USBD_SetAddress+0x74>
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	88db      	ldrh	r3, [r3, #6]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d12c      	bne.n	8009960 <USBD_SetAddress+0x74>
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	885b      	ldrh	r3, [r3, #2]
 800990a:	2b7f      	cmp	r3, #127	; 0x7f
 800990c:	d828      	bhi.n	8009960 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	885b      	ldrh	r3, [r3, #2]
 8009912:	b2db      	uxtb	r3, r3
 8009914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009918:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009920:	2b03      	cmp	r3, #3
 8009922:	d104      	bne.n	800992e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f98b 	bl	8009c42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800992c:	e01d      	b.n	800996a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	7bfa      	ldrb	r2, [r7, #15]
 8009932:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f003 fb28 	bl	800cf90 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fa46 	bl	8009dd2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009946:	7bfb      	ldrb	r3, [r7, #15]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d004      	beq.n	8009956 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2202      	movs	r2, #2
 8009950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009954:	e009      	b.n	800996a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800995e:	e004      	b.n	800996a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f96d 	bl	8009c42 <USBD_CtlError>
  }
}
 8009968:	bf00      	nop
 800996a:	bf00      	nop
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
	...

08009974 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	885b      	ldrh	r3, [r3, #2]
 8009982:	b2da      	uxtb	r2, r3
 8009984:	4b41      	ldr	r3, [pc, #260]	; (8009a8c <USBD_SetConfig+0x118>)
 8009986:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009988:	4b40      	ldr	r3, [pc, #256]	; (8009a8c <USBD_SetConfig+0x118>)
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d904      	bls.n	800999a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f955 	bl	8009c42 <USBD_CtlError>
 8009998:	e075      	b.n	8009a86 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d002      	beq.n	80099aa <USBD_SetConfig+0x36>
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d023      	beq.n	80099f0 <USBD_SetConfig+0x7c>
 80099a8:	e062      	b.n	8009a70 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80099aa:	4b38      	ldr	r3, [pc, #224]	; (8009a8c <USBD_SetConfig+0x118>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d01a      	beq.n	80099e8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80099b2:	4b36      	ldr	r3, [pc, #216]	; (8009a8c <USBD_SetConfig+0x118>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2203      	movs	r2, #3
 80099c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80099c4:	4b31      	ldr	r3, [pc, #196]	; (8009a8c <USBD_SetConfig+0x118>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7ff f9e8 	bl	8008da0 <USBD_SetClassConfig>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d104      	bne.n	80099e0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f932 	bl	8009c42 <USBD_CtlError>
            return;
 80099de:	e052      	b.n	8009a86 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f9f6 	bl	8009dd2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80099e6:	e04e      	b.n	8009a86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f9f2 	bl	8009dd2 <USBD_CtlSendStatus>
        break;
 80099ee:	e04a      	b.n	8009a86 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80099f0:	4b26      	ldr	r3, [pc, #152]	; (8009a8c <USBD_SetConfig+0x118>)
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d112      	bne.n	8009a1e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2202      	movs	r2, #2
 80099fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009a00:	4b22      	ldr	r3, [pc, #136]	; (8009a8c <USBD_SetConfig+0x118>)
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	461a      	mov	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009a0a:	4b20      	ldr	r3, [pc, #128]	; (8009a8c <USBD_SetConfig+0x118>)
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f7ff f9e4 	bl	8008dde <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f9db 	bl	8009dd2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009a1c:	e033      	b.n	8009a86 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009a1e:	4b1b      	ldr	r3, [pc, #108]	; (8009a8c <USBD_SetConfig+0x118>)
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d01d      	beq.n	8009a68 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7ff f9d2 	bl	8008dde <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009a3a:	4b14      	ldr	r3, [pc, #80]	; (8009a8c <USBD_SetConfig+0x118>)
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a44:	4b11      	ldr	r3, [pc, #68]	; (8009a8c <USBD_SetConfig+0x118>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7ff f9a8 	bl	8008da0 <USBD_SetClassConfig>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d104      	bne.n	8009a60 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f8f2 	bl	8009c42 <USBD_CtlError>
            return;
 8009a5e:	e012      	b.n	8009a86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f9b6 	bl	8009dd2 <USBD_CtlSendStatus>
        break;
 8009a66:	e00e      	b.n	8009a86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f9b2 	bl	8009dd2 <USBD_CtlSendStatus>
        break;
 8009a6e:	e00a      	b.n	8009a86 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f8e5 	bl	8009c42 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009a78:	4b04      	ldr	r3, [pc, #16]	; (8009a8c <USBD_SetConfig+0x118>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff f9ad 	bl	8008dde <USBD_ClrClassConfig>
        break;
 8009a84:	bf00      	nop
    }
  }
}
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20000800 	.word	0x20000800

08009a90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	88db      	ldrh	r3, [r3, #6]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d004      	beq.n	8009aac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f8cc 	bl	8009c42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009aaa:	e022      	b.n	8009af2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	dc02      	bgt.n	8009abc <USBD_GetConfig+0x2c>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	dc03      	bgt.n	8009ac2 <USBD_GetConfig+0x32>
 8009aba:	e015      	b.n	8009ae8 <USBD_GetConfig+0x58>
 8009abc:	2b03      	cmp	r3, #3
 8009abe:	d00b      	beq.n	8009ad8 <USBD_GetConfig+0x48>
 8009ac0:	e012      	b.n	8009ae8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	3308      	adds	r3, #8
 8009acc:	2201      	movs	r2, #1
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f920 	bl	8009d16 <USBD_CtlSendData>
        break;
 8009ad6:	e00c      	b.n	8009af2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3304      	adds	r3, #4
 8009adc:	2201      	movs	r2, #1
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f918 	bl	8009d16 <USBD_CtlSendData>
        break;
 8009ae6:	e004      	b.n	8009af2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009ae8:	6839      	ldr	r1, [r7, #0]
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f8a9 	bl	8009c42 <USBD_CtlError>
        break;
 8009af0:	bf00      	nop
}
 8009af2:	bf00      	nop
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b082      	sub	sp, #8
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d81e      	bhi.n	8009b4e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	88db      	ldrh	r3, [r3, #6]
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d004      	beq.n	8009b22 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f891 	bl	8009c42 <USBD_CtlError>
        break;
 8009b20:	e01a      	b.n	8009b58 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d005      	beq.n	8009b3e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	f043 0202 	orr.w	r2, r3, #2
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	330c      	adds	r3, #12
 8009b42:	2202      	movs	r2, #2
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f8e5 	bl	8009d16 <USBD_CtlSendData>
      break;
 8009b4c:	e004      	b.n	8009b58 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f876 	bl	8009c42 <USBD_CtlError>
      break;
 8009b56:	bf00      	nop
  }
}
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	885b      	ldrh	r3, [r3, #2]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d106      	bne.n	8009b80 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f929 	bl	8009dd2 <USBD_CtlSendStatus>
  }
}
 8009b80:	bf00      	nop
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d80b      	bhi.n	8009bb6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	885b      	ldrh	r3, [r3, #2]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d10c      	bne.n	8009bc0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f90f 	bl	8009dd2 <USBD_CtlSendStatus>
      }
      break;
 8009bb4:	e004      	b.n	8009bc0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 f842 	bl	8009c42 <USBD_CtlError>
      break;
 8009bbe:	e000      	b.n	8009bc2 <USBD_ClrFeature+0x3a>
      break;
 8009bc0:	bf00      	nop
  }
}
 8009bc2:	bf00      	nop
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b083      	sub	sp, #12
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	781a      	ldrb	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	785a      	ldrb	r2, [r3, #1]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	3302      	adds	r3, #2
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	3303      	adds	r3, #3
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	021b      	lsls	r3, r3, #8
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	4413      	add	r3, r2
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	3304      	adds	r3, #4
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	3305      	adds	r3, #5
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	021b      	lsls	r3, r3, #8
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	4413      	add	r3, r2
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	3306      	adds	r3, #6
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	3307      	adds	r3, #7
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	021b      	lsls	r3, r3, #8
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	4413      	add	r3, r2
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	80da      	strh	r2, [r3, #6]

}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bc80      	pop	{r7}
 8009c40:	4770      	bx	lr

08009c42 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009c4c:	2180      	movs	r1, #128	; 0x80
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f003 f934 	bl	800cebc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009c54:	2100      	movs	r1, #0
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f003 f930 	bl	800cebc <USBD_LL_StallEP>
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d032      	beq.n	8009ce0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 f834 	bl	8009ce8 <USBD_GetLen>
 8009c80:	4603      	mov	r3, r0
 8009c82:	3301      	adds	r3, #1
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	005b      	lsls	r3, r3, #1
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	1c5a      	adds	r2, r3, #1
 8009c92:	75fa      	strb	r2, [r7, #23]
 8009c94:	461a      	mov	r2, r3
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	4413      	add	r3, r2
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	7812      	ldrb	r2, [r2, #0]
 8009c9e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009ca0:	7dfb      	ldrb	r3, [r7, #23]
 8009ca2:	1c5a      	adds	r2, r3, #1
 8009ca4:	75fa      	strb	r2, [r7, #23]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	4413      	add	r3, r2
 8009cac:	2203      	movs	r2, #3
 8009cae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009cb0:	e012      	b.n	8009cd8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	60fa      	str	r2, [r7, #12]
 8009cb8:	7dfa      	ldrb	r2, [r7, #23]
 8009cba:	1c51      	adds	r1, r2, #1
 8009cbc:	75f9      	strb	r1, [r7, #23]
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	440a      	add	r2, r1
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	75fa      	strb	r2, [r7, #23]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1e8      	bne.n	8009cb2 <USBD_GetString+0x4e>
    }
  }
}
 8009ce0:	bf00      	nop
 8009ce2:	3718      	adds	r7, #24
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009cf4:	e005      	b.n	8009d02 <USBD_GetLen+0x1a>
  {
    len++;
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1f5      	bne.n	8009cf6 <USBD_GetLen+0xe>
  }

  return len;
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bc80      	pop	{r7}
 8009d14:	4770      	bx	lr

08009d16 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	60f8      	str	r0, [r7, #12]
 8009d1e:	60b9      	str	r1, [r7, #8]
 8009d20:	4613      	mov	r3, r2
 8009d22:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009d2c:	88fa      	ldrh	r2, [r7, #6]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009d32:	88fa      	ldrh	r2, [r7, #6]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d38:	88fb      	ldrh	r3, [r7, #6]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f003 f945 	bl	800cfce <USBD_LL_Transmit>

  return USBD_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	60f8      	str	r0, [r7, #12]
 8009d56:	60b9      	str	r1, [r7, #8]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d5c:	88fb      	ldrh	r3, [r7, #6]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	2100      	movs	r1, #0
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f003 f933 	bl	800cfce <USBD_LL_Transmit>

  return USBD_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b084      	sub	sp, #16
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	60f8      	str	r0, [r7, #12]
 8009d7a:	60b9      	str	r1, [r7, #8]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2203      	movs	r2, #3
 8009d84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d88:	88fa      	ldrh	r2, [r7, #6]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009d90:	88fa      	ldrh	r2, [r7, #6]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d98:	88fb      	ldrh	r3, [r7, #6]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f003 f938 	bl	800d014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	60f8      	str	r0, [r7, #12]
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	4613      	mov	r3, r2
 8009dba:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dbc:	88fb      	ldrh	r3, [r7, #6]
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f003 f926 	bl	800d014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2204      	movs	r2, #4
 8009dde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009de2:	2300      	movs	r3, #0
 8009de4:	2200      	movs	r2, #0
 8009de6:	2100      	movs	r1, #0
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f003 f8f0 	bl	800cfce <USBD_LL_Transmit>

  return USBD_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2205      	movs	r2, #5
 8009e04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e08:	2300      	movs	r3, #0
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f003 f900 	bl	800d014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
	...

08009e20 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e26:	f3ef 8305 	mrs	r3, IPSR
 8009e2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10f      	bne.n	8009e52 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e32:	f3ef 8310 	mrs	r3, PRIMASK
 8009e36:	607b      	str	r3, [r7, #4]
  return(result);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d109      	bne.n	8009e52 <osKernelInitialize+0x32>
 8009e3e:	4b10      	ldr	r3, [pc, #64]	; (8009e80 <osKernelInitialize+0x60>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d109      	bne.n	8009e5a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e46:	f3ef 8311 	mrs	r3, BASEPRI
 8009e4a:	603b      	str	r3, [r7, #0]
  return(result);
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009e52:	f06f 0305 	mvn.w	r3, #5
 8009e56:	60fb      	str	r3, [r7, #12]
 8009e58:	e00c      	b.n	8009e74 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009e5a:	4b09      	ldr	r3, [pc, #36]	; (8009e80 <osKernelInitialize+0x60>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d105      	bne.n	8009e6e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009e62:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <osKernelInitialize+0x60>)
 8009e64:	2201      	movs	r2, #1
 8009e66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60fb      	str	r3, [r7, #12]
 8009e6c:	e002      	b.n	8009e74 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e72:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009e74:	68fb      	ldr	r3, [r7, #12]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bc80      	pop	{r7}
 8009e7e:	4770      	bx	lr
 8009e80:	20000804 	.word	0x20000804

08009e84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e8a:	f3ef 8305 	mrs	r3, IPSR
 8009e8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10f      	bne.n	8009eb6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e96:	f3ef 8310 	mrs	r3, PRIMASK
 8009e9a:	607b      	str	r3, [r7, #4]
  return(result);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d109      	bne.n	8009eb6 <osKernelStart+0x32>
 8009ea2:	4b11      	ldr	r3, [pc, #68]	; (8009ee8 <osKernelStart+0x64>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d109      	bne.n	8009ebe <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8009eae:	603b      	str	r3, [r7, #0]
  return(result);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <osKernelStart+0x3a>
    stat = osErrorISR;
 8009eb6:	f06f 0305 	mvn.w	r3, #5
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	e00e      	b.n	8009edc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8009ebe:	4b0a      	ldr	r3, [pc, #40]	; (8009ee8 <osKernelStart+0x64>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d107      	bne.n	8009ed6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8009ec6:	4b08      	ldr	r3, [pc, #32]	; (8009ee8 <osKernelStart+0x64>)
 8009ec8:	2202      	movs	r2, #2
 8009eca:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009ecc:	f001 f890 	bl	800aff0 <vTaskStartScheduler>
      stat = osOK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	e002      	b.n	8009edc <osKernelStart+0x58>
    } else {
      stat = osError;
 8009ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009edc:	68fb      	ldr	r3, [r7, #12]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	20000804 	.word	0x20000804

08009eec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b092      	sub	sp, #72	; 0x48
 8009ef0:	af04      	add	r7, sp, #16
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009efc:	f3ef 8305 	mrs	r3, IPSR
 8009f00:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f040 8094 	bne.w	800a032 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8009f0e:	623b      	str	r3, [r7, #32]
  return(result);
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f040 808d 	bne.w	800a032 <osThreadNew+0x146>
 8009f18:	4b48      	ldr	r3, [pc, #288]	; (800a03c <osThreadNew+0x150>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d106      	bne.n	8009f2e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f20:	f3ef 8311 	mrs	r3, BASEPRI
 8009f24:	61fb      	str	r3, [r7, #28]
  return(result);
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f040 8082 	bne.w	800a032 <osThreadNew+0x146>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d07e      	beq.n	800a032 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8009f34:	2380      	movs	r3, #128	; 0x80
 8009f36:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8009f38:	2318      	movs	r3, #24
 8009f3a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8009f40:	f107 031b 	add.w	r3, r7, #27
 8009f44:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8009f46:	f04f 33ff 	mov.w	r3, #4294967295
 8009f4a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d045      	beq.n	8009fde <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <osThreadNew+0x74>
        name = attr->name;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d002      	beq.n	8009f6e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	699b      	ldr	r3, [r3, #24]
 8009f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d008      	beq.n	8009f86 <osThreadNew+0x9a>
 8009f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f76:	2b38      	cmp	r3, #56	; 0x38
 8009f78:	d805      	bhi.n	8009f86 <osThreadNew+0x9a>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	f003 0301 	and.w	r3, r3, #1
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <osThreadNew+0x9e>
        return (NULL);
 8009f86:	2300      	movs	r3, #0
 8009f88:	e054      	b.n	800a034 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	089b      	lsrs	r3, r3, #2
 8009f98:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00e      	beq.n	8009fc0 <osThreadNew+0xd4>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	2ba7      	cmp	r3, #167	; 0xa7
 8009fa8:	d90a      	bls.n	8009fc0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d006      	beq.n	8009fc0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d002      	beq.n	8009fc0 <osThreadNew+0xd4>
        mem = 1;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fbe:	e010      	b.n	8009fe2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10c      	bne.n	8009fe2 <osThreadNew+0xf6>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d108      	bne.n	8009fe2 <osThreadNew+0xf6>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d104      	bne.n	8009fe2 <osThreadNew+0xf6>
          mem = 0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fdc:	e001      	b.n	8009fe2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d110      	bne.n	800a00a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ff0:	9202      	str	r2, [sp, #8]
 8009ff2:	9301      	str	r3, [sp, #4]
 8009ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ffc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f000 fe12 	bl	800ac28 <xTaskCreateStatic>
 800a004:	4603      	mov	r3, r0
 800a006:	617b      	str	r3, [r7, #20]
 800a008:	e013      	b.n	800a032 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d110      	bne.n	800a032 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a012:	b29a      	uxth	r2, r3
 800a014:	f107 0314 	add.w	r3, r7, #20
 800a018:	9301      	str	r3, [sp, #4]
 800a01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 fe5c 	bl	800ace0 <xTaskCreate>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d001      	beq.n	800a032 <osThreadNew+0x146>
          hTask = NULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a032:	697b      	ldr	r3, [r7, #20]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3738      	adds	r7, #56	; 0x38
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	20000804 	.word	0x20000804

0800a040 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a048:	f3ef 8305 	mrs	r3, IPSR
 800a04c:	613b      	str	r3, [r7, #16]
  return(result);
 800a04e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10f      	bne.n	800a074 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a054:	f3ef 8310 	mrs	r3, PRIMASK
 800a058:	60fb      	str	r3, [r7, #12]
  return(result);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d109      	bne.n	800a074 <osDelay+0x34>
 800a060:	4b0d      	ldr	r3, [pc, #52]	; (800a098 <osDelay+0x58>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b02      	cmp	r3, #2
 800a066:	d109      	bne.n	800a07c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a068:	f3ef 8311 	mrs	r3, BASEPRI
 800a06c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d003      	beq.n	800a07c <osDelay+0x3c>
    stat = osErrorISR;
 800a074:	f06f 0305 	mvn.w	r3, #5
 800a078:	617b      	str	r3, [r7, #20]
 800a07a:	e007      	b.n	800a08c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d002      	beq.n	800a08c <osDelay+0x4c>
      vTaskDelay(ticks);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 ff7e 	bl	800af88 <vTaskDelay>
    }
  }

  return (stat);
 800a08c:	697b      	ldr	r3, [r7, #20]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	20000804 	.word	0x20000804

0800a09c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4a06      	ldr	r2, [pc, #24]	; (800a0c4 <vApplicationGetIdleTaskMemory+0x28>)
 800a0ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	4a05      	ldr	r2, [pc, #20]	; (800a0c8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a0b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2280      	movs	r2, #128	; 0x80
 800a0b8:	601a      	str	r2, [r3, #0]
}
 800a0ba:	bf00      	nop
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bc80      	pop	{r7}
 800a0c2:	4770      	bx	lr
 800a0c4:	20000808 	.word	0x20000808
 800a0c8:	200008b0 	.word	0x200008b0

0800a0cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4a07      	ldr	r2, [pc, #28]	; (800a0f8 <vApplicationGetTimerTaskMemory+0x2c>)
 800a0dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	4a06      	ldr	r2, [pc, #24]	; (800a0fc <vApplicationGetTimerTaskMemory+0x30>)
 800a0e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0ea:	601a      	str	r2, [r3, #0]
}
 800a0ec:	bf00      	nop
 800a0ee:	3714      	adds	r7, #20
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bc80      	pop	{r7}
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	20000ab0 	.word	0x20000ab0
 800a0fc:	20000b58 	.word	0x20000b58

0800a100 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f103 0208 	add.w	r2, r3, #8
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f04f 32ff 	mov.w	r2, #4294967295
 800a118:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f103 0208 	add.w	r2, r3, #8
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f103 0208 	add.w	r2, r3, #8
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	bc80      	pop	{r7}
 800a13c:	4770      	bx	lr

0800a13e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	bc80      	pop	{r7}
 800a154:	4770      	bx	lr

0800a156 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a156:	b480      	push	{r7}
 800a158:	b085      	sub	sp, #20
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	689a      	ldr	r2, [r3, #8]
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	1c5a      	adds	r2, r3, #1
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	601a      	str	r2, [r3, #0]
}
 800a192:	bf00      	nop
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	bc80      	pop	{r7}
 800a19a:	4770      	bx	lr

0800a19c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b2:	d103      	bne.n	800a1bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	60fb      	str	r3, [r7, #12]
 800a1ba:	e00c      	b.n	800a1d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3308      	adds	r3, #8
 800a1c0:	60fb      	str	r3, [r7, #12]
 800a1c2:	e002      	b.n	800a1ca <vListInsert+0x2e>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	60fb      	str	r3, [r7, #12]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d2f6      	bcs.n	800a1c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	685a      	ldr	r2, [r3, #4]
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	1c5a      	adds	r2, r3, #1
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	601a      	str	r2, [r3, #0]
}
 800a202:	bf00      	nop
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	bc80      	pop	{r7}
 800a20a:	4770      	bx	lr

0800a20c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	6892      	ldr	r2, [r2, #8]
 800a222:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	6852      	ldr	r2, [r2, #4]
 800a22c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	429a      	cmp	r2, r3
 800a236:	d103      	bne.n	800a240 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	689a      	ldr	r2, [r3, #8]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	1e5a      	subs	r2, r3, #1
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	bc80      	pop	{r7}
 800a25c:	4770      	bx	lr
	...

0800a260 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d10a      	bne.n	800a28a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a286:	bf00      	nop
 800a288:	e7fe      	b.n	800a288 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a28a:	f001 fff7 	bl	800c27c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a296:	68f9      	ldr	r1, [r7, #12]
 800a298:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a29a:	fb01 f303 	mul.w	r3, r1, r3
 800a29e:	441a      	add	r2, r3
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	68f9      	ldr	r1, [r7, #12]
 800a2be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2c0:	fb01 f303 	mul.w	r3, r1, r3
 800a2c4:	441a      	add	r2, r3
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	22ff      	movs	r2, #255	; 0xff
 800a2ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	22ff      	movs	r2, #255	; 0xff
 800a2d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d114      	bne.n	800a30a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d01a      	beq.n	800a31e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3310      	adds	r3, #16
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f001 f91b 	bl	800b528 <xTaskRemoveFromEventList>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d012      	beq.n	800a31e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a2f8:	4b0c      	ldr	r3, [pc, #48]	; (800a32c <xQueueGenericReset+0xcc>)
 800a2fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2fe:	601a      	str	r2, [r3, #0]
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	e009      	b.n	800a31e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	3310      	adds	r3, #16
 800a30e:	4618      	mov	r0, r3
 800a310:	f7ff fef6 	bl	800a100 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	3324      	adds	r3, #36	; 0x24
 800a318:	4618      	mov	r0, r3
 800a31a:	f7ff fef1 	bl	800a100 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a31e:	f001 ffdd 	bl	800c2dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a322:	2301      	movs	r3, #1
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	e000ed04 	.word	0xe000ed04

0800a330 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a330:	b580      	push	{r7, lr}
 800a332:	b08e      	sub	sp, #56	; 0x38
 800a334:	af02      	add	r7, sp, #8
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10a      	bne.n	800a35a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a356:	bf00      	nop
 800a358:	e7fe      	b.n	800a358 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10a      	bne.n	800a376 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a372:	bf00      	nop
 800a374:	e7fe      	b.n	800a374 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <xQueueGenericCreateStatic+0x52>
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <xQueueGenericCreateStatic+0x56>
 800a382:	2301      	movs	r3, #1
 800a384:	e000      	b.n	800a388 <xQueueGenericCreateStatic+0x58>
 800a386:	2300      	movs	r3, #0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10a      	bne.n	800a3a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	623b      	str	r3, [r7, #32]
}
 800a39e:	bf00      	nop
 800a3a0:	e7fe      	b.n	800a3a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d102      	bne.n	800a3ae <xQueueGenericCreateStatic+0x7e>
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <xQueueGenericCreateStatic+0x82>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e000      	b.n	800a3b4 <xQueueGenericCreateStatic+0x84>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10a      	bne.n	800a3ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	61fb      	str	r3, [r7, #28]
}
 800a3ca:	bf00      	nop
 800a3cc:	e7fe      	b.n	800a3cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a3ce:	2350      	movs	r3, #80	; 0x50
 800a3d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	2b50      	cmp	r3, #80	; 0x50
 800a3d6:	d00a      	beq.n	800a3ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3dc:	f383 8811 	msr	BASEPRI, r3
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	61bb      	str	r3, [r7, #24]
}
 800a3ea:	bf00      	nop
 800a3ec:	e7fe      	b.n	800a3ec <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00d      	beq.n	800a414 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a400:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	4613      	mov	r3, r2
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	68b9      	ldr	r1, [r7, #8]
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 f805 	bl	800a41e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a416:	4618      	mov	r0, r3
 800a418:	3730      	adds	r7, #48	; 0x30
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b084      	sub	sp, #16
 800a422:	af00      	add	r7, sp, #0
 800a424:	60f8      	str	r0, [r7, #12]
 800a426:	60b9      	str	r1, [r7, #8]
 800a428:	607a      	str	r2, [r7, #4]
 800a42a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d103      	bne.n	800a43a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	69ba      	ldr	r2, [r7, #24]
 800a436:	601a      	str	r2, [r3, #0]
 800a438:	e002      	b.n	800a440 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	68ba      	ldr	r2, [r7, #8]
 800a44a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a44c:	2101      	movs	r1, #1
 800a44e:	69b8      	ldr	r0, [r7, #24]
 800a450:	f7ff ff06 	bl	800a260 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	78fa      	ldrb	r2, [r7, #3]
 800a458:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a45c:	bf00      	nop
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b08e      	sub	sp, #56	; 0x38
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
 800a470:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a472:	2300      	movs	r3, #0
 800a474:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10a      	bne.n	800a496 <xQueueGenericSend+0x32>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d103      	bne.n	800a4a4 <xQueueGenericSend+0x40>
 800a49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d101      	bne.n	800a4a8 <xQueueGenericSend+0x44>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e000      	b.n	800a4aa <xQueueGenericSend+0x46>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10a      	bne.n	800a4c4 <xQueueGenericSend+0x60>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4c0:	bf00      	nop
 800a4c2:	e7fe      	b.n	800a4c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	d103      	bne.n	800a4d2 <xQueueGenericSend+0x6e>
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d101      	bne.n	800a4d6 <xQueueGenericSend+0x72>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e000      	b.n	800a4d8 <xQueueGenericSend+0x74>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10a      	bne.n	800a4f2 <xQueueGenericSend+0x8e>
	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	623b      	str	r3, [r7, #32]
}
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4f2:	f001 f9df 	bl	800b8b4 <xTaskGetSchedulerState>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d102      	bne.n	800a502 <xQueueGenericSend+0x9e>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <xQueueGenericSend+0xa2>
 800a502:	2301      	movs	r3, #1
 800a504:	e000      	b.n	800a508 <xQueueGenericSend+0xa4>
 800a506:	2300      	movs	r3, #0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10a      	bne.n	800a522 <xQueueGenericSend+0xbe>
	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	61fb      	str	r3, [r7, #28]
}
 800a51e:	bf00      	nop
 800a520:	e7fe      	b.n	800a520 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a522:	f001 feab 	bl	800c27c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52e:	429a      	cmp	r2, r3
 800a530:	d302      	bcc.n	800a538 <xQueueGenericSend+0xd4>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b02      	cmp	r3, #2
 800a536:	d129      	bne.n	800a58c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a538:	683a      	ldr	r2, [r7, #0]
 800a53a:	68b9      	ldr	r1, [r7, #8]
 800a53c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a53e:	f000 fa07 	bl	800a950 <prvCopyDataToQueue>
 800a542:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d010      	beq.n	800a56e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	3324      	adds	r3, #36	; 0x24
 800a550:	4618      	mov	r0, r3
 800a552:	f000 ffe9 	bl	800b528 <xTaskRemoveFromEventList>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d013      	beq.n	800a584 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a55c:	4b3f      	ldr	r3, [pc, #252]	; (800a65c <xQueueGenericSend+0x1f8>)
 800a55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	e00a      	b.n	800a584 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a570:	2b00      	cmp	r3, #0
 800a572:	d007      	beq.n	800a584 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a574:	4b39      	ldr	r3, [pc, #228]	; (800a65c <xQueueGenericSend+0x1f8>)
 800a576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a584:	f001 feaa 	bl	800c2dc <vPortExitCritical>
				return pdPASS;
 800a588:	2301      	movs	r3, #1
 800a58a:	e063      	b.n	800a654 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d103      	bne.n	800a59a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a592:	f001 fea3 	bl	800c2dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a596:	2300      	movs	r3, #0
 800a598:	e05c      	b.n	800a654 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d106      	bne.n	800a5ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5a0:	f107 0314 	add.w	r3, r7, #20
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f001 f823 	bl	800b5f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5ae:	f001 fe95 	bl	800c2dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5b2:	f000 fd8d 	bl	800b0d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5b6:	f001 fe61 	bl	800c27c <vPortEnterCritical>
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5c0:	b25b      	sxtb	r3, r3
 800a5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c6:	d103      	bne.n	800a5d0 <xQueueGenericSend+0x16c>
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5d6:	b25b      	sxtb	r3, r3
 800a5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5dc:	d103      	bne.n	800a5e6 <xQueueGenericSend+0x182>
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5e6:	f001 fe79 	bl	800c2dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5ea:	1d3a      	adds	r2, r7, #4
 800a5ec:	f107 0314 	add.w	r3, r7, #20
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f001 f812 	bl	800b61c <xTaskCheckForTimeOut>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d124      	bne.n	800a648 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a5fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a600:	f000 fa9e 	bl	800ab40 <prvIsQueueFull>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d018      	beq.n	800a63c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60c:	3310      	adds	r3, #16
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	4611      	mov	r1, r2
 800a612:	4618      	mov	r0, r3
 800a614:	f000 ff38 	bl	800b488 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a61a:	f000 fa29 	bl	800aa70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a61e:	f000 fd65 	bl	800b0ec <xTaskResumeAll>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	f47f af7c 	bne.w	800a522 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a62a:	4b0c      	ldr	r3, [pc, #48]	; (800a65c <xQueueGenericSend+0x1f8>)
 800a62c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a630:	601a      	str	r2, [r3, #0]
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	e772      	b.n	800a522 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a63c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a63e:	f000 fa17 	bl	800aa70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a642:	f000 fd53 	bl	800b0ec <xTaskResumeAll>
 800a646:	e76c      	b.n	800a522 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a64a:	f000 fa11 	bl	800aa70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a64e:	f000 fd4d 	bl	800b0ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a652:	2300      	movs	r3, #0
		}
	}
}
 800a654:	4618      	mov	r0, r3
 800a656:	3738      	adds	r7, #56	; 0x38
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	e000ed04 	.word	0xe000ed04

0800a660 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b08e      	sub	sp, #56	; 0x38
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
 800a66c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10a      	bne.n	800a68e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a68a:	bf00      	nop
 800a68c:	e7fe      	b.n	800a68c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d103      	bne.n	800a69c <xQueueGenericSendFromISR+0x3c>
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <xQueueGenericSendFromISR+0x40>
 800a69c:	2301      	movs	r3, #1
 800a69e:	e000      	b.n	800a6a2 <xQueueGenericSendFromISR+0x42>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10a      	bne.n	800a6bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	623b      	str	r3, [r7, #32]
}
 800a6b8:	bf00      	nop
 800a6ba:	e7fe      	b.n	800a6ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d103      	bne.n	800a6ca <xQueueGenericSendFromISR+0x6a>
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d101      	bne.n	800a6ce <xQueueGenericSendFromISR+0x6e>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e000      	b.n	800a6d0 <xQueueGenericSendFromISR+0x70>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10a      	bne.n	800a6ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d8:	f383 8811 	msr	BASEPRI, r3
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	61fb      	str	r3, [r7, #28]
}
 800a6e6:	bf00      	nop
 800a6e8:	e7fe      	b.n	800a6e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6ea:	f001 fe89 	bl	800c400 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a6ee:	f3ef 8211 	mrs	r2, BASEPRI
 800a6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	61ba      	str	r2, [r7, #24]
 800a704:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a706:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a708:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a712:	429a      	cmp	r2, r3
 800a714:	d302      	bcc.n	800a71c <xQueueGenericSendFromISR+0xbc>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d12c      	bne.n	800a776 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	68b9      	ldr	r1, [r7, #8]
 800a72a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a72c:	f000 f910 	bl	800a950 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a730:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a738:	d112      	bne.n	800a760 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d016      	beq.n	800a770 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	3324      	adds	r3, #36	; 0x24
 800a746:	4618      	mov	r0, r3
 800a748:	f000 feee 	bl	800b528 <xTaskRemoveFromEventList>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00e      	beq.n	800a770 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00b      	beq.n	800a770 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	e007      	b.n	800a770 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a760:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a764:	3301      	adds	r3, #1
 800a766:	b2db      	uxtb	r3, r3
 800a768:	b25a      	sxtb	r2, r3
 800a76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a770:	2301      	movs	r3, #1
 800a772:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a774:	e001      	b.n	800a77a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a776:	2300      	movs	r3, #0
 800a778:	637b      	str	r3, [r7, #52]	; 0x34
 800a77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a784:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3738      	adds	r7, #56	; 0x38
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b08c      	sub	sp, #48	; 0x30
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a79c:	2300      	movs	r3, #0
 800a79e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10a      	bne.n	800a7c0 <xQueueReceive+0x30>
	__asm volatile
 800a7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	623b      	str	r3, [r7, #32]
}
 800a7bc:	bf00      	nop
 800a7be:	e7fe      	b.n	800a7be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d103      	bne.n	800a7ce <xQueueReceive+0x3e>
 800a7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <xQueueReceive+0x42>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e000      	b.n	800a7d4 <xQueueReceive+0x44>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10a      	bne.n	800a7ee <xQueueReceive+0x5e>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	61fb      	str	r3, [r7, #28]
}
 800a7ea:	bf00      	nop
 800a7ec:	e7fe      	b.n	800a7ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7ee:	f001 f861 	bl	800b8b4 <xTaskGetSchedulerState>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d102      	bne.n	800a7fe <xQueueReceive+0x6e>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d101      	bne.n	800a802 <xQueueReceive+0x72>
 800a7fe:	2301      	movs	r3, #1
 800a800:	e000      	b.n	800a804 <xQueueReceive+0x74>
 800a802:	2300      	movs	r3, #0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10a      	bne.n	800a81e <xQueueReceive+0x8e>
	__asm volatile
 800a808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80c:	f383 8811 	msr	BASEPRI, r3
 800a810:	f3bf 8f6f 	isb	sy
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	61bb      	str	r3, [r7, #24]
}
 800a81a:	bf00      	nop
 800a81c:	e7fe      	b.n	800a81c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a81e:	f001 fd2d 	bl	800c27c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a826:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d01f      	beq.n	800a86e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a82e:	68b9      	ldr	r1, [r7, #8]
 800a830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a832:	f000 f8f7 	bl	800aa24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a838:	1e5a      	subs	r2, r3, #1
 800a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00f      	beq.n	800a866 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a848:	3310      	adds	r3, #16
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 fe6c 	bl	800b528 <xTaskRemoveFromEventList>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d007      	beq.n	800a866 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a856:	4b3d      	ldr	r3, [pc, #244]	; (800a94c <xQueueReceive+0x1bc>)
 800a858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a866:	f001 fd39 	bl	800c2dc <vPortExitCritical>
				return pdPASS;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e069      	b.n	800a942 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d103      	bne.n	800a87c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a874:	f001 fd32 	bl	800c2dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a878:	2300      	movs	r3, #0
 800a87a:	e062      	b.n	800a942 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d106      	bne.n	800a890 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a882:	f107 0310 	add.w	r3, r7, #16
 800a886:	4618      	mov	r0, r3
 800a888:	f000 feb2 	bl	800b5f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a88c:	2301      	movs	r3, #1
 800a88e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a890:	f001 fd24 	bl	800c2dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a894:	f000 fc1c 	bl	800b0d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a898:	f001 fcf0 	bl	800c27c <vPortEnterCritical>
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8a2:	b25b      	sxtb	r3, r3
 800a8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a8:	d103      	bne.n	800a8b2 <xQueueReceive+0x122>
 800a8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8b8:	b25b      	sxtb	r3, r3
 800a8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8be:	d103      	bne.n	800a8c8 <xQueueReceive+0x138>
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8c8:	f001 fd08 	bl	800c2dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8cc:	1d3a      	adds	r2, r7, #4
 800a8ce:	f107 0310 	add.w	r3, r7, #16
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 fea1 	bl	800b61c <xTaskCheckForTimeOut>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d123      	bne.n	800a928 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8e2:	f000 f917 	bl	800ab14 <prvIsQueueEmpty>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d017      	beq.n	800a91c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	3324      	adds	r3, #36	; 0x24
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	4611      	mov	r1, r2
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 fdc7 	bl	800b488 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8fc:	f000 f8b8 	bl	800aa70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a900:	f000 fbf4 	bl	800b0ec <xTaskResumeAll>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d189      	bne.n	800a81e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a90a:	4b10      	ldr	r3, [pc, #64]	; (800a94c <xQueueReceive+0x1bc>)
 800a90c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a910:	601a      	str	r2, [r3, #0]
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	e780      	b.n	800a81e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a91c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a91e:	f000 f8a7 	bl	800aa70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a922:	f000 fbe3 	bl	800b0ec <xTaskResumeAll>
 800a926:	e77a      	b.n	800a81e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a92a:	f000 f8a1 	bl	800aa70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a92e:	f000 fbdd 	bl	800b0ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a934:	f000 f8ee 	bl	800ab14 <prvIsQueueEmpty>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f43f af6f 	beq.w	800a81e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a940:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a942:	4618      	mov	r0, r3
 800a944:	3730      	adds	r7, #48	; 0x30
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	e000ed04 	.word	0xe000ed04

0800a950 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a95c:	2300      	movs	r3, #0
 800a95e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a964:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10d      	bne.n	800a98a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d14d      	bne.n	800aa12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f000 ffb8 	bl	800b8f0 <xTaskPriorityDisinherit>
 800a980:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	605a      	str	r2, [r3, #4]
 800a988:	e043      	b.n	800aa12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d119      	bne.n	800a9c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6898      	ldr	r0, [r3, #8]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a998:	461a      	mov	r2, r3
 800a99a:	68b9      	ldr	r1, [r7, #8]
 800a99c:	f002 fc40 	bl	800d220 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	689a      	ldr	r2, [r3, #8]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a8:	441a      	add	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	689a      	ldr	r2, [r3, #8]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d32b      	bcc.n	800aa12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	609a      	str	r2, [r3, #8]
 800a9c2:	e026      	b.n	800aa12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	68d8      	ldr	r0, [r3, #12]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	68b9      	ldr	r1, [r7, #8]
 800a9d0:	f002 fc26 	bl	800d220 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	68da      	ldr	r2, [r3, #12]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9dc:	425b      	negs	r3, r3
 800a9de:	441a      	add	r2, r3
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	68da      	ldr	r2, [r3, #12]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d207      	bcs.n	800aa00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f8:	425b      	negs	r3, r3
 800a9fa:	441a      	add	r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	d105      	bne.n	800aa12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aa1a:	697b      	ldr	r3, [r7, #20]
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3718      	adds	r7, #24
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d018      	beq.n	800aa68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68da      	ldr	r2, [r3, #12]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3e:	441a      	add	r2, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68da      	ldr	r2, [r3, #12]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d303      	bcc.n	800aa58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68d9      	ldr	r1, [r3, #12]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa60:	461a      	mov	r2, r3
 800aa62:	6838      	ldr	r0, [r7, #0]
 800aa64:	f002 fbdc 	bl	800d220 <memcpy>
	}
}
 800aa68:	bf00      	nop
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa78:	f001 fc00 	bl	800c27c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa84:	e011      	b.n	800aaaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d012      	beq.n	800aab4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	3324      	adds	r3, #36	; 0x24
 800aa92:	4618      	mov	r0, r3
 800aa94:	f000 fd48 	bl	800b528 <xTaskRemoveFromEventList>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d001      	beq.n	800aaa2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa9e:	f000 fe1f 	bl	800b6e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aaaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	dce9      	bgt.n	800aa86 <prvUnlockQueue+0x16>
 800aab2:	e000      	b.n	800aab6 <prvUnlockQueue+0x46>
					break;
 800aab4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	22ff      	movs	r2, #255	; 0xff
 800aaba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aabe:	f001 fc0d 	bl	800c2dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aac2:	f001 fbdb 	bl	800c27c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aacc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aace:	e011      	b.n	800aaf4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d012      	beq.n	800aafe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	3310      	adds	r3, #16
 800aadc:	4618      	mov	r0, r3
 800aade:	f000 fd23 	bl	800b528 <xTaskRemoveFromEventList>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d001      	beq.n	800aaec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aae8:	f000 fdfa 	bl	800b6e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aaec:	7bbb      	ldrb	r3, [r7, #14]
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aaf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	dce9      	bgt.n	800aad0 <prvUnlockQueue+0x60>
 800aafc:	e000      	b.n	800ab00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aafe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	22ff      	movs	r2, #255	; 0xff
 800ab04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab08:	f001 fbe8 	bl	800c2dc <vPortExitCritical>
}
 800ab0c:	bf00      	nop
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab1c:	f001 fbae 	bl	800c27c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d102      	bne.n	800ab2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	60fb      	str	r3, [r7, #12]
 800ab2c:	e001      	b.n	800ab32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab32:	f001 fbd3 	bl	800c2dc <vPortExitCritical>

	return xReturn;
 800ab36:	68fb      	ldr	r3, [r7, #12]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab48:	f001 fb98 	bl	800c27c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d102      	bne.n	800ab5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	60fb      	str	r3, [r7, #12]
 800ab5c:	e001      	b.n	800ab62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab62:	f001 fbbb 	bl	800c2dc <vPortExitCritical>

	return xReturn;
 800ab66:	68fb      	ldr	r3, [r7, #12]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3710      	adds	r7, #16
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	60fb      	str	r3, [r7, #12]
 800ab7e:	e014      	b.n	800abaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab80:	4a0e      	ldr	r2, [pc, #56]	; (800abbc <vQueueAddToRegistry+0x4c>)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10b      	bne.n	800aba4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab8c:	490b      	ldr	r1, [pc, #44]	; (800abbc <vQueueAddToRegistry+0x4c>)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab96:	4a09      	ldr	r2, [pc, #36]	; (800abbc <vQueueAddToRegistry+0x4c>)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	00db      	lsls	r3, r3, #3
 800ab9c:	4413      	add	r3, r2
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aba2:	e006      	b.n	800abb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	3301      	adds	r3, #1
 800aba8:	60fb      	str	r3, [r7, #12]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2b07      	cmp	r3, #7
 800abae:	d9e7      	bls.n	800ab80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800abb0:	bf00      	nop
 800abb2:	bf00      	nop
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bc80      	pop	{r7}
 800abba:	4770      	bx	lr
 800abbc:	20000f58 	.word	0x20000f58

0800abc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800abd0:	f001 fb54 	bl	800c27c <vPortEnterCritical>
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abda:	b25b      	sxtb	r3, r3
 800abdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe0:	d103      	bne.n	800abea <vQueueWaitForMessageRestricted+0x2a>
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abf0:	b25b      	sxtb	r3, r3
 800abf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf6:	d103      	bne.n	800ac00 <vQueueWaitForMessageRestricted+0x40>
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac00:	f001 fb6c 	bl	800c2dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d106      	bne.n	800ac1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	3324      	adds	r3, #36	; 0x24
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	68b9      	ldr	r1, [r7, #8]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f000 fc5b 	bl	800b4d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac1a:	6978      	ldr	r0, [r7, #20]
 800ac1c:	f7ff ff28 	bl	800aa70 <prvUnlockQueue>
	}
 800ac20:	bf00      	nop
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b08e      	sub	sp, #56	; 0x38
 800ac2c:	af04      	add	r7, sp, #16
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
 800ac34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10a      	bne.n	800ac52 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ac3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	623b      	str	r3, [r7, #32]
}
 800ac4e:	bf00      	nop
 800ac50:	e7fe      	b.n	800ac50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ac52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10a      	bne.n	800ac6e <xTaskCreateStatic+0x46>
	__asm volatile
 800ac58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	61fb      	str	r3, [r7, #28]
}
 800ac6a:	bf00      	nop
 800ac6c:	e7fe      	b.n	800ac6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac6e:	23a8      	movs	r3, #168	; 0xa8
 800ac70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	2ba8      	cmp	r3, #168	; 0xa8
 800ac76:	d00a      	beq.n	800ac8e <xTaskCreateStatic+0x66>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	61bb      	str	r3, [r7, #24]
}
 800ac8a:	bf00      	nop
 800ac8c:	e7fe      	b.n	800ac8c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d01e      	beq.n	800acd2 <xTaskCreateStatic+0xaa>
 800ac94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d01b      	beq.n	800acd2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aca2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	2202      	movs	r2, #2
 800aca8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800acac:	2300      	movs	r3, #0
 800acae:	9303      	str	r3, [sp, #12]
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	9302      	str	r3, [sp, #8]
 800acb4:	f107 0314 	add.w	r3, r7, #20
 800acb8:	9301      	str	r3, [sp, #4]
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	9300      	str	r3, [sp, #0]
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	68b9      	ldr	r1, [r7, #8]
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f000 f851 	bl	800ad6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800accc:	f000 f8ec 	bl	800aea8 <prvAddNewTaskToReadyList>
 800acd0:	e001      	b.n	800acd6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800acd6:	697b      	ldr	r3, [r7, #20]
	}
 800acd8:	4618      	mov	r0, r3
 800acda:	3728      	adds	r7, #40	; 0x28
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08c      	sub	sp, #48	; 0x30
 800ace4:	af04      	add	r7, sp, #16
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	603b      	str	r3, [r7, #0]
 800acec:	4613      	mov	r3, r2
 800acee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf0:	88fb      	ldrh	r3, [r7, #6]
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f001 fbc1 	bl	800c47c <pvPortMalloc>
 800acfa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00e      	beq.n	800ad20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ad02:	20a8      	movs	r0, #168	; 0xa8
 800ad04:	f001 fbba 	bl	800c47c <pvPortMalloc>
 800ad08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	631a      	str	r2, [r3, #48]	; 0x30
 800ad16:	e005      	b.n	800ad24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad18:	6978      	ldr	r0, [r7, #20]
 800ad1a:	f001 fc73 	bl	800c604 <vPortFree>
 800ad1e:	e001      	b.n	800ad24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad20:	2300      	movs	r3, #0
 800ad22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d017      	beq.n	800ad5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad32:	88fa      	ldrh	r2, [r7, #6]
 800ad34:	2300      	movs	r3, #0
 800ad36:	9303      	str	r3, [sp, #12]
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	9302      	str	r3, [sp, #8]
 800ad3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3e:	9301      	str	r3, [sp, #4]
 800ad40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	68b9      	ldr	r1, [r7, #8]
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f000 f80f 	bl	800ad6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad4e:	69f8      	ldr	r0, [r7, #28]
 800ad50:	f000 f8aa 	bl	800aea8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad54:	2301      	movs	r3, #1
 800ad56:	61bb      	str	r3, [r7, #24]
 800ad58:	e002      	b.n	800ad60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad60:	69bb      	ldr	r3, [r7, #24]
	}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3720      	adds	r7, #32
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
	...

0800ad6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b088      	sub	sp, #32
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	461a      	mov	r2, r3
 800ad84:	21a5      	movs	r1, #165	; 0xa5
 800ad86:	f002 f9c7 	bl	800d118 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad94:	3b01      	subs	r3, #1
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	f023 0307 	bic.w	r3, r3, #7
 800ada2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	f003 0307 	and.w	r3, r3, #7
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00a      	beq.n	800adc4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	617b      	str	r3, [r7, #20]
}
 800adc0:	bf00      	nop
 800adc2:	e7fe      	b.n	800adc2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adc4:	2300      	movs	r3, #0
 800adc6:	61fb      	str	r3, [r7, #28]
 800adc8:	e012      	b.n	800adf0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	4413      	add	r3, r2
 800add0:	7819      	ldrb	r1, [r3, #0]
 800add2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	4413      	add	r3, r2
 800add8:	3334      	adds	r3, #52	; 0x34
 800adda:	460a      	mov	r2, r1
 800addc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800adde:	68ba      	ldr	r2, [r7, #8]
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	4413      	add	r3, r2
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d006      	beq.n	800adf8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	3301      	adds	r3, #1
 800adee:	61fb      	str	r3, [r7, #28]
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	2b0f      	cmp	r3, #15
 800adf4:	d9e9      	bls.n	800adca <prvInitialiseNewTask+0x5e>
 800adf6:	e000      	b.n	800adfa <prvInitialiseNewTask+0x8e>
		{
			break;
 800adf8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	2b37      	cmp	r3, #55	; 0x37
 800ae06:	d901      	bls.n	800ae0c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae08:	2337      	movs	r3, #55	; 0x37
 800ae0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae16:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae20:	3304      	adds	r3, #4
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff f98b 	bl	800a13e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2a:	3318      	adds	r3, #24
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7ff f986 	bl	800a13e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ae58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5a:	3354      	adds	r3, #84	; 0x54
 800ae5c:	224c      	movs	r2, #76	; 0x4c
 800ae5e:	2100      	movs	r1, #0
 800ae60:	4618      	mov	r0, r3
 800ae62:	f002 f959 	bl	800d118 <memset>
 800ae66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae68:	4a0c      	ldr	r2, [pc, #48]	; (800ae9c <prvInitialiseNewTask+0x130>)
 800ae6a:	659a      	str	r2, [r3, #88]	; 0x58
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6e:	4a0c      	ldr	r2, [pc, #48]	; (800aea0 <prvInitialiseNewTask+0x134>)
 800ae70:	65da      	str	r2, [r3, #92]	; 0x5c
 800ae72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae74:	4a0b      	ldr	r2, [pc, #44]	; (800aea4 <prvInitialiseNewTask+0x138>)
 800ae76:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	68f9      	ldr	r1, [r7, #12]
 800ae7c:	69b8      	ldr	r0, [r7, #24]
 800ae7e:	f001 f90b 	bl	800c098 <pxPortInitialiseStack>
 800ae82:	4602      	mov	r2, r0
 800ae84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae86:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ae88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d002      	beq.n	800ae94 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae94:	bf00      	nop
 800ae96:	3720      	adds	r7, #32
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	200033b8 	.word	0x200033b8
 800aea0:	20003420 	.word	0x20003420
 800aea4:	20003488 	.word	0x20003488

0800aea8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aeb0:	f001 f9e4 	bl	800c27c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aeb4:	4b2d      	ldr	r3, [pc, #180]	; (800af6c <prvAddNewTaskToReadyList+0xc4>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	4a2c      	ldr	r2, [pc, #176]	; (800af6c <prvAddNewTaskToReadyList+0xc4>)
 800aebc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aebe:	4b2c      	ldr	r3, [pc, #176]	; (800af70 <prvAddNewTaskToReadyList+0xc8>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d109      	bne.n	800aeda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aec6:	4a2a      	ldr	r2, [pc, #168]	; (800af70 <prvAddNewTaskToReadyList+0xc8>)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aecc:	4b27      	ldr	r3, [pc, #156]	; (800af6c <prvAddNewTaskToReadyList+0xc4>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d110      	bne.n	800aef6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aed4:	f000 fc28 	bl	800b728 <prvInitialiseTaskLists>
 800aed8:	e00d      	b.n	800aef6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aeda:	4b26      	ldr	r3, [pc, #152]	; (800af74 <prvAddNewTaskToReadyList+0xcc>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d109      	bne.n	800aef6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aee2:	4b23      	ldr	r3, [pc, #140]	; (800af70 <prvAddNewTaskToReadyList+0xc8>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d802      	bhi.n	800aef6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aef0:	4a1f      	ldr	r2, [pc, #124]	; (800af70 <prvAddNewTaskToReadyList+0xc8>)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aef6:	4b20      	ldr	r3, [pc, #128]	; (800af78 <prvAddNewTaskToReadyList+0xd0>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	3301      	adds	r3, #1
 800aefc:	4a1e      	ldr	r2, [pc, #120]	; (800af78 <prvAddNewTaskToReadyList+0xd0>)
 800aefe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af00:	4b1d      	ldr	r3, [pc, #116]	; (800af78 <prvAddNewTaskToReadyList+0xd0>)
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af0c:	4b1b      	ldr	r3, [pc, #108]	; (800af7c <prvAddNewTaskToReadyList+0xd4>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	429a      	cmp	r2, r3
 800af12:	d903      	bls.n	800af1c <prvAddNewTaskToReadyList+0x74>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af18:	4a18      	ldr	r2, [pc, #96]	; (800af7c <prvAddNewTaskToReadyList+0xd4>)
 800af1a:	6013      	str	r3, [r2, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af20:	4613      	mov	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	4413      	add	r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4a15      	ldr	r2, [pc, #84]	; (800af80 <prvAddNewTaskToReadyList+0xd8>)
 800af2a:	441a      	add	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	3304      	adds	r3, #4
 800af30:	4619      	mov	r1, r3
 800af32:	4610      	mov	r0, r2
 800af34:	f7ff f90f 	bl	800a156 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af38:	f001 f9d0 	bl	800c2dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af3c:	4b0d      	ldr	r3, [pc, #52]	; (800af74 <prvAddNewTaskToReadyList+0xcc>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00e      	beq.n	800af62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af44:	4b0a      	ldr	r3, [pc, #40]	; (800af70 <prvAddNewTaskToReadyList+0xc8>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4e:	429a      	cmp	r2, r3
 800af50:	d207      	bcs.n	800af62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af52:	4b0c      	ldr	r3, [pc, #48]	; (800af84 <prvAddNewTaskToReadyList+0xdc>)
 800af54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af58:	601a      	str	r2, [r3, #0]
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af62:	bf00      	nop
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	2000146c 	.word	0x2000146c
 800af70:	20000f98 	.word	0x20000f98
 800af74:	20001478 	.word	0x20001478
 800af78:	20001488 	.word	0x20001488
 800af7c:	20001474 	.word	0x20001474
 800af80:	20000f9c 	.word	0x20000f9c
 800af84:	e000ed04 	.word	0xe000ed04

0800af88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af90:	2300      	movs	r3, #0
 800af92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d017      	beq.n	800afca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af9a:	4b13      	ldr	r3, [pc, #76]	; (800afe8 <vTaskDelay+0x60>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00a      	beq.n	800afb8 <vTaskDelay+0x30>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	60bb      	str	r3, [r7, #8]
}
 800afb4:	bf00      	nop
 800afb6:	e7fe      	b.n	800afb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800afb8:	f000 f88a 	bl	800b0d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800afbc:	2100      	movs	r1, #0
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fd04 	bl	800b9cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800afc4:	f000 f892 	bl	800b0ec <xTaskResumeAll>
 800afc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d107      	bne.n	800afe0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800afd0:	4b06      	ldr	r3, [pc, #24]	; (800afec <vTaskDelay+0x64>)
 800afd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afd6:	601a      	str	r2, [r3, #0]
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afe0:	bf00      	nop
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	20001494 	.word	0x20001494
 800afec:	e000ed04 	.word	0xe000ed04

0800aff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b08a      	sub	sp, #40	; 0x28
 800aff4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aff6:	2300      	movs	r3, #0
 800aff8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800affa:	2300      	movs	r3, #0
 800affc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800affe:	463a      	mov	r2, r7
 800b000:	1d39      	adds	r1, r7, #4
 800b002:	f107 0308 	add.w	r3, r7, #8
 800b006:	4618      	mov	r0, r3
 800b008:	f7ff f848 	bl	800a09c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b00c:	6839      	ldr	r1, [r7, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	9202      	str	r2, [sp, #8]
 800b014:	9301      	str	r3, [sp, #4]
 800b016:	2300      	movs	r3, #0
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	2300      	movs	r3, #0
 800b01c:	460a      	mov	r2, r1
 800b01e:	4924      	ldr	r1, [pc, #144]	; (800b0b0 <vTaskStartScheduler+0xc0>)
 800b020:	4824      	ldr	r0, [pc, #144]	; (800b0b4 <vTaskStartScheduler+0xc4>)
 800b022:	f7ff fe01 	bl	800ac28 <xTaskCreateStatic>
 800b026:	4603      	mov	r3, r0
 800b028:	4a23      	ldr	r2, [pc, #140]	; (800b0b8 <vTaskStartScheduler+0xc8>)
 800b02a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b02c:	4b22      	ldr	r3, [pc, #136]	; (800b0b8 <vTaskStartScheduler+0xc8>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b034:	2301      	movs	r3, #1
 800b036:	617b      	str	r3, [r7, #20]
 800b038:	e001      	b.n	800b03e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b03a:	2300      	movs	r3, #0
 800b03c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d102      	bne.n	800b04a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b044:	f000 fd16 	bl	800ba74 <xTimerCreateTimerTask>
 800b048:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d11b      	bne.n	800b088 <vTaskStartScheduler+0x98>
	__asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	613b      	str	r3, [r7, #16]
}
 800b062:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b064:	4b15      	ldr	r3, [pc, #84]	; (800b0bc <vTaskStartScheduler+0xcc>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3354      	adds	r3, #84	; 0x54
 800b06a:	4a15      	ldr	r2, [pc, #84]	; (800b0c0 <vTaskStartScheduler+0xd0>)
 800b06c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b06e:	4b15      	ldr	r3, [pc, #84]	; (800b0c4 <vTaskStartScheduler+0xd4>)
 800b070:	f04f 32ff 	mov.w	r2, #4294967295
 800b074:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b076:	4b14      	ldr	r3, [pc, #80]	; (800b0c8 <vTaskStartScheduler+0xd8>)
 800b078:	2201      	movs	r2, #1
 800b07a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b07c:	4b13      	ldr	r3, [pc, #76]	; (800b0cc <vTaskStartScheduler+0xdc>)
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b082:	f001 f889 	bl	800c198 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b086:	e00e      	b.n	800b0a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b08e:	d10a      	bne.n	800b0a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	60fb      	str	r3, [r7, #12]
}
 800b0a2:	bf00      	nop
 800b0a4:	e7fe      	b.n	800b0a4 <vTaskStartScheduler+0xb4>
}
 800b0a6:	bf00      	nop
 800b0a8:	3718      	adds	r7, #24
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	0800d31c 	.word	0x0800d31c
 800b0b4:	0800b6f9 	.word	0x0800b6f9
 800b0b8:	20001490 	.word	0x20001490
 800b0bc:	20000f98 	.word	0x20000f98
 800b0c0:	200001cc 	.word	0x200001cc
 800b0c4:	2000148c 	.word	0x2000148c
 800b0c8:	20001478 	.word	0x20001478
 800b0cc:	20001470 	.word	0x20001470

0800b0d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b0d4:	4b04      	ldr	r3, [pc, #16]	; (800b0e8 <vTaskSuspendAll+0x18>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	4a03      	ldr	r2, [pc, #12]	; (800b0e8 <vTaskSuspendAll+0x18>)
 800b0dc:	6013      	str	r3, [r2, #0]
}
 800b0de:	bf00      	nop
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bc80      	pop	{r7}
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	20001494 	.word	0x20001494

0800b0ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b0fa:	4b42      	ldr	r3, [pc, #264]	; (800b204 <xTaskResumeAll+0x118>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d10a      	bne.n	800b118 <xTaskResumeAll+0x2c>
	__asm volatile
 800b102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	603b      	str	r3, [r7, #0]
}
 800b114:	bf00      	nop
 800b116:	e7fe      	b.n	800b116 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b118:	f001 f8b0 	bl	800c27c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b11c:	4b39      	ldr	r3, [pc, #228]	; (800b204 <xTaskResumeAll+0x118>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3b01      	subs	r3, #1
 800b122:	4a38      	ldr	r2, [pc, #224]	; (800b204 <xTaskResumeAll+0x118>)
 800b124:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b126:	4b37      	ldr	r3, [pc, #220]	; (800b204 <xTaskResumeAll+0x118>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d162      	bne.n	800b1f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b12e:	4b36      	ldr	r3, [pc, #216]	; (800b208 <xTaskResumeAll+0x11c>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d05e      	beq.n	800b1f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b136:	e02f      	b.n	800b198 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b138:	4b34      	ldr	r3, [pc, #208]	; (800b20c <xTaskResumeAll+0x120>)
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	3318      	adds	r3, #24
 800b144:	4618      	mov	r0, r3
 800b146:	f7ff f861 	bl	800a20c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3304      	adds	r3, #4
 800b14e:	4618      	mov	r0, r3
 800b150:	f7ff f85c 	bl	800a20c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b158:	4b2d      	ldr	r3, [pc, #180]	; (800b210 <xTaskResumeAll+0x124>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d903      	bls.n	800b168 <xTaskResumeAll+0x7c>
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b164:	4a2a      	ldr	r2, [pc, #168]	; (800b210 <xTaskResumeAll+0x124>)
 800b166:	6013      	str	r3, [r2, #0]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b16c:	4613      	mov	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4a27      	ldr	r2, [pc, #156]	; (800b214 <xTaskResumeAll+0x128>)
 800b176:	441a      	add	r2, r3
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	3304      	adds	r3, #4
 800b17c:	4619      	mov	r1, r3
 800b17e:	4610      	mov	r0, r2
 800b180:	f7fe ffe9 	bl	800a156 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b188:	4b23      	ldr	r3, [pc, #140]	; (800b218 <xTaskResumeAll+0x12c>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18e:	429a      	cmp	r2, r3
 800b190:	d302      	bcc.n	800b198 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b192:	4b22      	ldr	r3, [pc, #136]	; (800b21c <xTaskResumeAll+0x130>)
 800b194:	2201      	movs	r2, #1
 800b196:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b198:	4b1c      	ldr	r3, [pc, #112]	; (800b20c <xTaskResumeAll+0x120>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1cb      	bne.n	800b138 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b1a6:	f000 fb61 	bl	800b86c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b1aa:	4b1d      	ldr	r3, [pc, #116]	; (800b220 <xTaskResumeAll+0x134>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d010      	beq.n	800b1d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b1b6:	f000 f845 	bl	800b244 <xTaskIncrementTick>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b1c0:	4b16      	ldr	r3, [pc, #88]	; (800b21c <xTaskResumeAll+0x130>)
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1f1      	bne.n	800b1b6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b1d2:	4b13      	ldr	r3, [pc, #76]	; (800b220 <xTaskResumeAll+0x134>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b1d8:	4b10      	ldr	r3, [pc, #64]	; (800b21c <xTaskResumeAll+0x130>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d009      	beq.n	800b1f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b1e4:	4b0f      	ldr	r3, [pc, #60]	; (800b224 <xTaskResumeAll+0x138>)
 800b1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ea:	601a      	str	r2, [r3, #0]
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1f4:	f001 f872 	bl	800c2dc <vPortExitCritical>

	return xAlreadyYielded;
 800b1f8:	68bb      	ldr	r3, [r7, #8]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20001494 	.word	0x20001494
 800b208:	2000146c 	.word	0x2000146c
 800b20c:	2000142c 	.word	0x2000142c
 800b210:	20001474 	.word	0x20001474
 800b214:	20000f9c 	.word	0x20000f9c
 800b218:	20000f98 	.word	0x20000f98
 800b21c:	20001480 	.word	0x20001480
 800b220:	2000147c 	.word	0x2000147c
 800b224:	e000ed04 	.word	0xe000ed04

0800b228 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b22e:	4b04      	ldr	r3, [pc, #16]	; (800b240 <xTaskGetTickCount+0x18>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b234:	687b      	ldr	r3, [r7, #4]
}
 800b236:	4618      	mov	r0, r3
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bc80      	pop	{r7}
 800b23e:	4770      	bx	lr
 800b240:	20001470 	.word	0x20001470

0800b244 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b24a:	2300      	movs	r3, #0
 800b24c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b24e:	4b51      	ldr	r3, [pc, #324]	; (800b394 <xTaskIncrementTick+0x150>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	f040 808e 	bne.w	800b374 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b258:	4b4f      	ldr	r3, [pc, #316]	; (800b398 <xTaskIncrementTick+0x154>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	3301      	adds	r3, #1
 800b25e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b260:	4a4d      	ldr	r2, [pc, #308]	; (800b398 <xTaskIncrementTick+0x154>)
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d120      	bne.n	800b2ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b26c:	4b4b      	ldr	r3, [pc, #300]	; (800b39c <xTaskIncrementTick+0x158>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00a      	beq.n	800b28c <xTaskIncrementTick+0x48>
	__asm volatile
 800b276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	603b      	str	r3, [r7, #0]
}
 800b288:	bf00      	nop
 800b28a:	e7fe      	b.n	800b28a <xTaskIncrementTick+0x46>
 800b28c:	4b43      	ldr	r3, [pc, #268]	; (800b39c <xTaskIncrementTick+0x158>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	60fb      	str	r3, [r7, #12]
 800b292:	4b43      	ldr	r3, [pc, #268]	; (800b3a0 <xTaskIncrementTick+0x15c>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a41      	ldr	r2, [pc, #260]	; (800b39c <xTaskIncrementTick+0x158>)
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	4a41      	ldr	r2, [pc, #260]	; (800b3a0 <xTaskIncrementTick+0x15c>)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6013      	str	r3, [r2, #0]
 800b2a0:	4b40      	ldr	r3, [pc, #256]	; (800b3a4 <xTaskIncrementTick+0x160>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	4a3f      	ldr	r2, [pc, #252]	; (800b3a4 <xTaskIncrementTick+0x160>)
 800b2a8:	6013      	str	r3, [r2, #0]
 800b2aa:	f000 fadf 	bl	800b86c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b2ae:	4b3e      	ldr	r3, [pc, #248]	; (800b3a8 <xTaskIncrementTick+0x164>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d34e      	bcc.n	800b356 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2b8:	4b38      	ldr	r3, [pc, #224]	; (800b39c <xTaskIncrementTick+0x158>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d101      	bne.n	800b2c6 <xTaskIncrementTick+0x82>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e000      	b.n	800b2c8 <xTaskIncrementTick+0x84>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d004      	beq.n	800b2d6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2cc:	4b36      	ldr	r3, [pc, #216]	; (800b3a8 <xTaskIncrementTick+0x164>)
 800b2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d2:	601a      	str	r2, [r3, #0]
					break;
 800b2d4:	e03f      	b.n	800b356 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b2d6:	4b31      	ldr	r3, [pc, #196]	; (800b39c <xTaskIncrementTick+0x158>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b2e6:	693a      	ldr	r2, [r7, #16]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d203      	bcs.n	800b2f6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b2ee:	4a2e      	ldr	r2, [pc, #184]	; (800b3a8 <xTaskIncrementTick+0x164>)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6013      	str	r3, [r2, #0]
						break;
 800b2f4:	e02f      	b.n	800b356 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	3304      	adds	r3, #4
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fe ff86 	bl	800a20c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b304:	2b00      	cmp	r3, #0
 800b306:	d004      	beq.n	800b312 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	3318      	adds	r3, #24
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fe ff7d 	bl	800a20c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b316:	4b25      	ldr	r3, [pc, #148]	; (800b3ac <xTaskIncrementTick+0x168>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d903      	bls.n	800b326 <xTaskIncrementTick+0xe2>
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b322:	4a22      	ldr	r2, [pc, #136]	; (800b3ac <xTaskIncrementTick+0x168>)
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32a:	4613      	mov	r3, r2
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	4413      	add	r3, r2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4a1f      	ldr	r2, [pc, #124]	; (800b3b0 <xTaskIncrementTick+0x16c>)
 800b334:	441a      	add	r2, r3
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	3304      	adds	r3, #4
 800b33a:	4619      	mov	r1, r3
 800b33c:	4610      	mov	r0, r2
 800b33e:	f7fe ff0a 	bl	800a156 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b346:	4b1b      	ldr	r3, [pc, #108]	; (800b3b4 <xTaskIncrementTick+0x170>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d3b3      	bcc.n	800b2b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b350:	2301      	movs	r3, #1
 800b352:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b354:	e7b0      	b.n	800b2b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b356:	4b17      	ldr	r3, [pc, #92]	; (800b3b4 <xTaskIncrementTick+0x170>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b35c:	4914      	ldr	r1, [pc, #80]	; (800b3b0 <xTaskIncrementTick+0x16c>)
 800b35e:	4613      	mov	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	4413      	add	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	440b      	add	r3, r1
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d907      	bls.n	800b37e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b36e:	2301      	movs	r3, #1
 800b370:	617b      	str	r3, [r7, #20]
 800b372:	e004      	b.n	800b37e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b374:	4b10      	ldr	r3, [pc, #64]	; (800b3b8 <xTaskIncrementTick+0x174>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	3301      	adds	r3, #1
 800b37a:	4a0f      	ldr	r2, [pc, #60]	; (800b3b8 <xTaskIncrementTick+0x174>)
 800b37c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b37e:	4b0f      	ldr	r3, [pc, #60]	; (800b3bc <xTaskIncrementTick+0x178>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d001      	beq.n	800b38a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b386:	2301      	movs	r3, #1
 800b388:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b38a:	697b      	ldr	r3, [r7, #20]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	20001494 	.word	0x20001494
 800b398:	20001470 	.word	0x20001470
 800b39c:	20001424 	.word	0x20001424
 800b3a0:	20001428 	.word	0x20001428
 800b3a4:	20001484 	.word	0x20001484
 800b3a8:	2000148c 	.word	0x2000148c
 800b3ac:	20001474 	.word	0x20001474
 800b3b0:	20000f9c 	.word	0x20000f9c
 800b3b4:	20000f98 	.word	0x20000f98
 800b3b8:	2000147c 	.word	0x2000147c
 800b3bc:	20001480 	.word	0x20001480

0800b3c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b3c6:	4b2a      	ldr	r3, [pc, #168]	; (800b470 <vTaskSwitchContext+0xb0>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d003      	beq.n	800b3d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b3ce:	4b29      	ldr	r3, [pc, #164]	; (800b474 <vTaskSwitchContext+0xb4>)
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b3d4:	e046      	b.n	800b464 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b3d6:	4b27      	ldr	r3, [pc, #156]	; (800b474 <vTaskSwitchContext+0xb4>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b3dc:	4b26      	ldr	r3, [pc, #152]	; (800b478 <vTaskSwitchContext+0xb8>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	60fb      	str	r3, [r7, #12]
 800b3e2:	e010      	b.n	800b406 <vTaskSwitchContext+0x46>
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10a      	bne.n	800b400 <vTaskSwitchContext+0x40>
	__asm volatile
 800b3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ee:	f383 8811 	msr	BASEPRI, r3
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	607b      	str	r3, [r7, #4]
}
 800b3fc:	bf00      	nop
 800b3fe:	e7fe      	b.n	800b3fe <vTaskSwitchContext+0x3e>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	3b01      	subs	r3, #1
 800b404:	60fb      	str	r3, [r7, #12]
 800b406:	491d      	ldr	r1, [pc, #116]	; (800b47c <vTaskSwitchContext+0xbc>)
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	4613      	mov	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	440b      	add	r3, r1
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d0e4      	beq.n	800b3e4 <vTaskSwitchContext+0x24>
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	4613      	mov	r3, r2
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4413      	add	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4a15      	ldr	r2, [pc, #84]	; (800b47c <vTaskSwitchContext+0xbc>)
 800b426:	4413      	add	r3, r2
 800b428:	60bb      	str	r3, [r7, #8]
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	685a      	ldr	r2, [r3, #4]
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	605a      	str	r2, [r3, #4]
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	3308      	adds	r3, #8
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d104      	bne.n	800b44a <vTaskSwitchContext+0x8a>
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	685a      	ldr	r2, [r3, #4]
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	605a      	str	r2, [r3, #4]
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	4a0b      	ldr	r2, [pc, #44]	; (800b480 <vTaskSwitchContext+0xc0>)
 800b452:	6013      	str	r3, [r2, #0]
 800b454:	4a08      	ldr	r2, [pc, #32]	; (800b478 <vTaskSwitchContext+0xb8>)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b45a:	4b09      	ldr	r3, [pc, #36]	; (800b480 <vTaskSwitchContext+0xc0>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3354      	adds	r3, #84	; 0x54
 800b460:	4a08      	ldr	r2, [pc, #32]	; (800b484 <vTaskSwitchContext+0xc4>)
 800b462:	6013      	str	r3, [r2, #0]
}
 800b464:	bf00      	nop
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	bc80      	pop	{r7}
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	20001494 	.word	0x20001494
 800b474:	20001480 	.word	0x20001480
 800b478:	20001474 	.word	0x20001474
 800b47c:	20000f9c 	.word	0x20000f9c
 800b480:	20000f98 	.word	0x20000f98
 800b484:	200001cc 	.word	0x200001cc

0800b488 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10a      	bne.n	800b4ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49c:	f383 8811 	msr	BASEPRI, r3
 800b4a0:	f3bf 8f6f 	isb	sy
 800b4a4:	f3bf 8f4f 	dsb	sy
 800b4a8:	60fb      	str	r3, [r7, #12]
}
 800b4aa:	bf00      	nop
 800b4ac:	e7fe      	b.n	800b4ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4ae:	4b07      	ldr	r3, [pc, #28]	; (800b4cc <vTaskPlaceOnEventList+0x44>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3318      	adds	r3, #24
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7fe fe70 	bl	800a19c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b4bc:	2101      	movs	r1, #1
 800b4be:	6838      	ldr	r0, [r7, #0]
 800b4c0:	f000 fa84 	bl	800b9cc <prvAddCurrentTaskToDelayedList>
}
 800b4c4:	bf00      	nop
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	20000f98 	.word	0x20000f98

0800b4d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10a      	bne.n	800b4f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	617b      	str	r3, [r7, #20]
}
 800b4f4:	bf00      	nop
 800b4f6:	e7fe      	b.n	800b4f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4f8:	4b0a      	ldr	r3, [pc, #40]	; (800b524 <vTaskPlaceOnEventListRestricted+0x54>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	3318      	adds	r3, #24
 800b4fe:	4619      	mov	r1, r3
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f7fe fe28 	bl	800a156 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d002      	beq.n	800b512 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b50c:	f04f 33ff 	mov.w	r3, #4294967295
 800b510:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b512:	6879      	ldr	r1, [r7, #4]
 800b514:	68b8      	ldr	r0, [r7, #8]
 800b516:	f000 fa59 	bl	800b9cc <prvAddCurrentTaskToDelayedList>
	}
 800b51a:	bf00      	nop
 800b51c:	3718      	adds	r7, #24
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	20000f98 	.word	0x20000f98

0800b528 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10a      	bne.n	800b554 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	60fb      	str	r3, [r7, #12]
}
 800b550:	bf00      	nop
 800b552:	e7fe      	b.n	800b552 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	3318      	adds	r3, #24
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe fe57 	bl	800a20c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b55e:	4b1e      	ldr	r3, [pc, #120]	; (800b5d8 <xTaskRemoveFromEventList+0xb0>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d11d      	bne.n	800b5a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	3304      	adds	r3, #4
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fe fe4e 	bl	800a20c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b574:	4b19      	ldr	r3, [pc, #100]	; (800b5dc <xTaskRemoveFromEventList+0xb4>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d903      	bls.n	800b584 <xTaskRemoveFromEventList+0x5c>
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b580:	4a16      	ldr	r2, [pc, #88]	; (800b5dc <xTaskRemoveFromEventList+0xb4>)
 800b582:	6013      	str	r3, [r2, #0]
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b588:	4613      	mov	r3, r2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	4413      	add	r3, r2
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	4a13      	ldr	r2, [pc, #76]	; (800b5e0 <xTaskRemoveFromEventList+0xb8>)
 800b592:	441a      	add	r2, r3
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	3304      	adds	r3, #4
 800b598:	4619      	mov	r1, r3
 800b59a:	4610      	mov	r0, r2
 800b59c:	f7fe fddb 	bl	800a156 <vListInsertEnd>
 800b5a0:	e005      	b.n	800b5ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	3318      	adds	r3, #24
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	480e      	ldr	r0, [pc, #56]	; (800b5e4 <xTaskRemoveFromEventList+0xbc>)
 800b5aa:	f7fe fdd4 	bl	800a156 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b2:	4b0d      	ldr	r3, [pc, #52]	; (800b5e8 <xTaskRemoveFromEventList+0xc0>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d905      	bls.n	800b5c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b5c0:	4b0a      	ldr	r3, [pc, #40]	; (800b5ec <xTaskRemoveFromEventList+0xc4>)
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	601a      	str	r2, [r3, #0]
 800b5c6:	e001      	b.n	800b5cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b5cc:	697b      	ldr	r3, [r7, #20]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3718      	adds	r7, #24
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	20001494 	.word	0x20001494
 800b5dc:	20001474 	.word	0x20001474
 800b5e0:	20000f9c 	.word	0x20000f9c
 800b5e4:	2000142c 	.word	0x2000142c
 800b5e8:	20000f98 	.word	0x20000f98
 800b5ec:	20001480 	.word	0x20001480

0800b5f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b5f8:	4b06      	ldr	r3, [pc, #24]	; (800b614 <vTaskInternalSetTimeOutState+0x24>)
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b600:	4b05      	ldr	r3, [pc, #20]	; (800b618 <vTaskInternalSetTimeOutState+0x28>)
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	605a      	str	r2, [r3, #4]
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bc80      	pop	{r7}
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	20001484 	.word	0x20001484
 800b618:	20001470 	.word	0x20001470

0800b61c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10a      	bne.n	800b642 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	613b      	str	r3, [r7, #16]
}
 800b63e:	bf00      	nop
 800b640:	e7fe      	b.n	800b640 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10a      	bne.n	800b65e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	60fb      	str	r3, [r7, #12]
}
 800b65a:	bf00      	nop
 800b65c:	e7fe      	b.n	800b65c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b65e:	f000 fe0d 	bl	800c27c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b662:	4b1d      	ldr	r3, [pc, #116]	; (800b6d8 <xTaskCheckForTimeOut+0xbc>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	69ba      	ldr	r2, [r7, #24]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67a:	d102      	bne.n	800b682 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b67c:	2300      	movs	r3, #0
 800b67e:	61fb      	str	r3, [r7, #28]
 800b680:	e023      	b.n	800b6ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	4b15      	ldr	r3, [pc, #84]	; (800b6dc <xTaskCheckForTimeOut+0xc0>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d007      	beq.n	800b69e <xTaskCheckForTimeOut+0x82>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	69ba      	ldr	r2, [r7, #24]
 800b694:	429a      	cmp	r2, r3
 800b696:	d302      	bcc.n	800b69e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b698:	2301      	movs	r3, #1
 800b69a:	61fb      	str	r3, [r7, #28]
 800b69c:	e015      	b.n	800b6ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d20b      	bcs.n	800b6c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	1ad2      	subs	r2, r2, r3
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7ff ff9b 	bl	800b5f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	61fb      	str	r3, [r7, #28]
 800b6be:	e004      	b.n	800b6ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b6ca:	f000 fe07 	bl	800c2dc <vPortExitCritical>

	return xReturn;
 800b6ce:	69fb      	ldr	r3, [r7, #28]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3720      	adds	r7, #32
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	20001470 	.word	0x20001470
 800b6dc:	20001484 	.word	0x20001484

0800b6e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b6e4:	4b03      	ldr	r3, [pc, #12]	; (800b6f4 <vTaskMissedYield+0x14>)
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	601a      	str	r2, [r3, #0]
}
 800b6ea:	bf00      	nop
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bc80      	pop	{r7}
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	20001480 	.word	0x20001480

0800b6f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b700:	f000 f852 	bl	800b7a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b704:	4b06      	ldr	r3, [pc, #24]	; (800b720 <prvIdleTask+0x28>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d9f9      	bls.n	800b700 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b70c:	4b05      	ldr	r3, [pc, #20]	; (800b724 <prvIdleTask+0x2c>)
 800b70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b71c:	e7f0      	b.n	800b700 <prvIdleTask+0x8>
 800b71e:	bf00      	nop
 800b720:	20000f9c 	.word	0x20000f9c
 800b724:	e000ed04 	.word	0xe000ed04

0800b728 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b72e:	2300      	movs	r3, #0
 800b730:	607b      	str	r3, [r7, #4]
 800b732:	e00c      	b.n	800b74e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	4613      	mov	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4413      	add	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4a12      	ldr	r2, [pc, #72]	; (800b788 <prvInitialiseTaskLists+0x60>)
 800b740:	4413      	add	r3, r2
 800b742:	4618      	mov	r0, r3
 800b744:	f7fe fcdc 	bl	800a100 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	3301      	adds	r3, #1
 800b74c:	607b      	str	r3, [r7, #4]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b37      	cmp	r3, #55	; 0x37
 800b752:	d9ef      	bls.n	800b734 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b754:	480d      	ldr	r0, [pc, #52]	; (800b78c <prvInitialiseTaskLists+0x64>)
 800b756:	f7fe fcd3 	bl	800a100 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b75a:	480d      	ldr	r0, [pc, #52]	; (800b790 <prvInitialiseTaskLists+0x68>)
 800b75c:	f7fe fcd0 	bl	800a100 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b760:	480c      	ldr	r0, [pc, #48]	; (800b794 <prvInitialiseTaskLists+0x6c>)
 800b762:	f7fe fccd 	bl	800a100 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b766:	480c      	ldr	r0, [pc, #48]	; (800b798 <prvInitialiseTaskLists+0x70>)
 800b768:	f7fe fcca 	bl	800a100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b76c:	480b      	ldr	r0, [pc, #44]	; (800b79c <prvInitialiseTaskLists+0x74>)
 800b76e:	f7fe fcc7 	bl	800a100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b772:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <prvInitialiseTaskLists+0x78>)
 800b774:	4a05      	ldr	r2, [pc, #20]	; (800b78c <prvInitialiseTaskLists+0x64>)
 800b776:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b778:	4b0a      	ldr	r3, [pc, #40]	; (800b7a4 <prvInitialiseTaskLists+0x7c>)
 800b77a:	4a05      	ldr	r2, [pc, #20]	; (800b790 <prvInitialiseTaskLists+0x68>)
 800b77c:	601a      	str	r2, [r3, #0]
}
 800b77e:	bf00      	nop
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	20000f9c 	.word	0x20000f9c
 800b78c:	200013fc 	.word	0x200013fc
 800b790:	20001410 	.word	0x20001410
 800b794:	2000142c 	.word	0x2000142c
 800b798:	20001440 	.word	0x20001440
 800b79c:	20001458 	.word	0x20001458
 800b7a0:	20001424 	.word	0x20001424
 800b7a4:	20001428 	.word	0x20001428

0800b7a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7ae:	e019      	b.n	800b7e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b7b0:	f000 fd64 	bl	800c27c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b7b4:	4b10      	ldr	r3, [pc, #64]	; (800b7f8 <prvCheckTasksWaitingTermination+0x50>)
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fe fd23 	bl	800a20c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b7c6:	4b0d      	ldr	r3, [pc, #52]	; (800b7fc <prvCheckTasksWaitingTermination+0x54>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	4a0b      	ldr	r2, [pc, #44]	; (800b7fc <prvCheckTasksWaitingTermination+0x54>)
 800b7ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b7d0:	4b0b      	ldr	r3, [pc, #44]	; (800b800 <prvCheckTasksWaitingTermination+0x58>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	4a0a      	ldr	r2, [pc, #40]	; (800b800 <prvCheckTasksWaitingTermination+0x58>)
 800b7d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b7da:	f000 fd7f 	bl	800c2dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f810 	bl	800b804 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7e4:	4b06      	ldr	r3, [pc, #24]	; (800b800 <prvCheckTasksWaitingTermination+0x58>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1e1      	bne.n	800b7b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b7ec:	bf00      	nop
 800b7ee:	bf00      	nop
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20001440 	.word	0x20001440
 800b7fc:	2000146c 	.word	0x2000146c
 800b800:	20001454 	.word	0x20001454

0800b804 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3354      	adds	r3, #84	; 0x54
 800b810:	4618      	mov	r0, r3
 800b812:	f001 fc89 	bl	800d128 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d108      	bne.n	800b832 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b824:	4618      	mov	r0, r3
 800b826:	f000 feed 	bl	800c604 <vPortFree>
				vPortFree( pxTCB );
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 feea 	bl	800c604 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b830:	e018      	b.n	800b864 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d103      	bne.n	800b844 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fee1 	bl	800c604 <vPortFree>
	}
 800b842:	e00f      	b.n	800b864 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b84a:	2b02      	cmp	r3, #2
 800b84c:	d00a      	beq.n	800b864 <prvDeleteTCB+0x60>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	60fb      	str	r3, [r7, #12]
}
 800b860:	bf00      	nop
 800b862:	e7fe      	b.n	800b862 <prvDeleteTCB+0x5e>
	}
 800b864:	bf00      	nop
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b872:	4b0e      	ldr	r3, [pc, #56]	; (800b8ac <prvResetNextTaskUnblockTime+0x40>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d101      	bne.n	800b880 <prvResetNextTaskUnblockTime+0x14>
 800b87c:	2301      	movs	r3, #1
 800b87e:	e000      	b.n	800b882 <prvResetNextTaskUnblockTime+0x16>
 800b880:	2300      	movs	r3, #0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d004      	beq.n	800b890 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b886:	4b0a      	ldr	r3, [pc, #40]	; (800b8b0 <prvResetNextTaskUnblockTime+0x44>)
 800b888:	f04f 32ff 	mov.w	r2, #4294967295
 800b88c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b88e:	e008      	b.n	800b8a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b890:	4b06      	ldr	r3, [pc, #24]	; (800b8ac <prvResetNextTaskUnblockTime+0x40>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	4a04      	ldr	r2, [pc, #16]	; (800b8b0 <prvResetNextTaskUnblockTime+0x44>)
 800b8a0:	6013      	str	r3, [r2, #0]
}
 800b8a2:	bf00      	nop
 800b8a4:	370c      	adds	r7, #12
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bc80      	pop	{r7}
 800b8aa:	4770      	bx	lr
 800b8ac:	20001424 	.word	0x20001424
 800b8b0:	2000148c 	.word	0x2000148c

0800b8b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8ba:	4b0b      	ldr	r3, [pc, #44]	; (800b8e8 <xTaskGetSchedulerState+0x34>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d102      	bne.n	800b8c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	607b      	str	r3, [r7, #4]
 800b8c6:	e008      	b.n	800b8da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8c8:	4b08      	ldr	r3, [pc, #32]	; (800b8ec <xTaskGetSchedulerState+0x38>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d102      	bne.n	800b8d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b8d0:	2302      	movs	r3, #2
 800b8d2:	607b      	str	r3, [r7, #4]
 800b8d4:	e001      	b.n	800b8da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b8da:	687b      	ldr	r3, [r7, #4]
	}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bc80      	pop	{r7}
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	20001478 	.word	0x20001478
 800b8ec:	20001494 	.word	0x20001494

0800b8f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d056      	beq.n	800b9b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b906:	4b2e      	ldr	r3, [pc, #184]	; (800b9c0 <xTaskPriorityDisinherit+0xd0>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	693a      	ldr	r2, [r7, #16]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d00a      	beq.n	800b926 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	60fb      	str	r3, [r7, #12]
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d10a      	bne.n	800b944 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	60bb      	str	r3, [r7, #8]
}
 800b940:	bf00      	nop
 800b942:	e7fe      	b.n	800b942 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b948:	1e5a      	subs	r2, r3, #1
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b956:	429a      	cmp	r2, r3
 800b958:	d02c      	beq.n	800b9b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d128      	bne.n	800b9b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	3304      	adds	r3, #4
 800b966:	4618      	mov	r0, r3
 800b968:	f7fe fc50 	bl	800a20c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b978:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b984:	4b0f      	ldr	r3, [pc, #60]	; (800b9c4 <xTaskPriorityDisinherit+0xd4>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d903      	bls.n	800b994 <xTaskPriorityDisinherit+0xa4>
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b990:	4a0c      	ldr	r2, [pc, #48]	; (800b9c4 <xTaskPriorityDisinherit+0xd4>)
 800b992:	6013      	str	r3, [r2, #0]
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b998:	4613      	mov	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	4413      	add	r3, r2
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	4a09      	ldr	r2, [pc, #36]	; (800b9c8 <xTaskPriorityDisinherit+0xd8>)
 800b9a2:	441a      	add	r2, r3
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	4610      	mov	r0, r2
 800b9ac:	f7fe fbd3 	bl	800a156 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9b4:	697b      	ldr	r3, [r7, #20]
	}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	20000f98 	.word	0x20000f98
 800b9c4:	20001474 	.word	0x20001474
 800b9c8:	20000f9c 	.word	0x20000f9c

0800b9cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b9d6:	4b21      	ldr	r3, [pc, #132]	; (800ba5c <prvAddCurrentTaskToDelayedList+0x90>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9dc:	4b20      	ldr	r3, [pc, #128]	; (800ba60 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7fe fc12 	bl	800a20c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ee:	d10a      	bne.n	800ba06 <prvAddCurrentTaskToDelayedList+0x3a>
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d007      	beq.n	800ba06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9f6:	4b1a      	ldr	r3, [pc, #104]	; (800ba60 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	4819      	ldr	r0, [pc, #100]	; (800ba64 <prvAddCurrentTaskToDelayedList+0x98>)
 800ba00:	f7fe fba9 	bl	800a156 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba04:	e026      	b.n	800ba54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba0e:	4b14      	ldr	r3, [pc, #80]	; (800ba60 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d209      	bcs.n	800ba32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba1e:	4b12      	ldr	r3, [pc, #72]	; (800ba68 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	4b0f      	ldr	r3, [pc, #60]	; (800ba60 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3304      	adds	r3, #4
 800ba28:	4619      	mov	r1, r3
 800ba2a:	4610      	mov	r0, r2
 800ba2c:	f7fe fbb6 	bl	800a19c <vListInsert>
}
 800ba30:	e010      	b.n	800ba54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba32:	4b0e      	ldr	r3, [pc, #56]	; (800ba6c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	4b0a      	ldr	r3, [pc, #40]	; (800ba60 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	3304      	adds	r3, #4
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	4610      	mov	r0, r2
 800ba40:	f7fe fbac 	bl	800a19c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba44:	4b0a      	ldr	r3, [pc, #40]	; (800ba70 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d202      	bcs.n	800ba54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ba4e:	4a08      	ldr	r2, [pc, #32]	; (800ba70 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	6013      	str	r3, [r2, #0]
}
 800ba54:	bf00      	nop
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	20001470 	.word	0x20001470
 800ba60:	20000f98 	.word	0x20000f98
 800ba64:	20001458 	.word	0x20001458
 800ba68:	20001428 	.word	0x20001428
 800ba6c:	20001424 	.word	0x20001424
 800ba70:	2000148c 	.word	0x2000148c

0800ba74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b08a      	sub	sp, #40	; 0x28
 800ba78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba7e:	f000 facb 	bl	800c018 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba82:	4b1c      	ldr	r3, [pc, #112]	; (800baf4 <xTimerCreateTimerTask+0x80>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d021      	beq.n	800bace <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba92:	1d3a      	adds	r2, r7, #4
 800ba94:	f107 0108 	add.w	r1, r7, #8
 800ba98:	f107 030c 	add.w	r3, r7, #12
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7fe fb15 	bl	800a0cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800baa2:	6879      	ldr	r1, [r7, #4]
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	9202      	str	r2, [sp, #8]
 800baaa:	9301      	str	r3, [sp, #4]
 800baac:	2302      	movs	r3, #2
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	2300      	movs	r3, #0
 800bab2:	460a      	mov	r2, r1
 800bab4:	4910      	ldr	r1, [pc, #64]	; (800baf8 <xTimerCreateTimerTask+0x84>)
 800bab6:	4811      	ldr	r0, [pc, #68]	; (800bafc <xTimerCreateTimerTask+0x88>)
 800bab8:	f7ff f8b6 	bl	800ac28 <xTaskCreateStatic>
 800babc:	4603      	mov	r3, r0
 800babe:	4a10      	ldr	r2, [pc, #64]	; (800bb00 <xTimerCreateTimerTask+0x8c>)
 800bac0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bac2:	4b0f      	ldr	r3, [pc, #60]	; (800bb00 <xTimerCreateTimerTask+0x8c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d001      	beq.n	800bace <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800baca:	2301      	movs	r3, #1
 800bacc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10a      	bne.n	800baea <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad8:	f383 8811 	msr	BASEPRI, r3
 800badc:	f3bf 8f6f 	isb	sy
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	613b      	str	r3, [r7, #16]
}
 800bae6:	bf00      	nop
 800bae8:	e7fe      	b.n	800bae8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800baea:	697b      	ldr	r3, [r7, #20]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3718      	adds	r7, #24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	200014c8 	.word	0x200014c8
 800baf8:	0800d324 	.word	0x0800d324
 800bafc:	0800bc21 	.word	0x0800bc21
 800bb00:	200014cc 	.word	0x200014cc

0800bb04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b08a      	sub	sp, #40	; 0x28
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
 800bb10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb12:	2300      	movs	r3, #0
 800bb14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10a      	bne.n	800bb32 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	623b      	str	r3, [r7, #32]
}
 800bb2e:	bf00      	nop
 800bb30:	e7fe      	b.n	800bb30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb32:	4b1a      	ldr	r3, [pc, #104]	; (800bb9c <xTimerGenericCommand+0x98>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d02a      	beq.n	800bb90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	2b05      	cmp	r3, #5
 800bb4a:	dc18      	bgt.n	800bb7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb4c:	f7ff feb2 	bl	800b8b4 <xTaskGetSchedulerState>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	d109      	bne.n	800bb6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb56:	4b11      	ldr	r3, [pc, #68]	; (800bb9c <xTimerGenericCommand+0x98>)
 800bb58:	6818      	ldr	r0, [r3, #0]
 800bb5a:	f107 0110 	add.w	r1, r7, #16
 800bb5e:	2300      	movs	r3, #0
 800bb60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb62:	f7fe fc7f 	bl	800a464 <xQueueGenericSend>
 800bb66:	6278      	str	r0, [r7, #36]	; 0x24
 800bb68:	e012      	b.n	800bb90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb6a:	4b0c      	ldr	r3, [pc, #48]	; (800bb9c <xTimerGenericCommand+0x98>)
 800bb6c:	6818      	ldr	r0, [r3, #0]
 800bb6e:	f107 0110 	add.w	r1, r7, #16
 800bb72:	2300      	movs	r3, #0
 800bb74:	2200      	movs	r2, #0
 800bb76:	f7fe fc75 	bl	800a464 <xQueueGenericSend>
 800bb7a:	6278      	str	r0, [r7, #36]	; 0x24
 800bb7c:	e008      	b.n	800bb90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb7e:	4b07      	ldr	r3, [pc, #28]	; (800bb9c <xTimerGenericCommand+0x98>)
 800bb80:	6818      	ldr	r0, [r3, #0]
 800bb82:	f107 0110 	add.w	r1, r7, #16
 800bb86:	2300      	movs	r3, #0
 800bb88:	683a      	ldr	r2, [r7, #0]
 800bb8a:	f7fe fd69 	bl	800a660 <xQueueGenericSendFromISR>
 800bb8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3728      	adds	r7, #40	; 0x28
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	200014c8 	.word	0x200014c8

0800bba0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af02      	add	r7, sp, #8
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbaa:	4b1c      	ldr	r3, [pc, #112]	; (800bc1c <prvProcessExpiredTimer+0x7c>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	3304      	adds	r3, #4
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fe fb27 	bl	800a20c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	69db      	ldr	r3, [r3, #28]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d122      	bne.n	800bc0c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	699a      	ldr	r2, [r3, #24]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	18d1      	adds	r1, r2, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	683a      	ldr	r2, [r7, #0]
 800bbd2:	6978      	ldr	r0, [r7, #20]
 800bbd4:	f000 f8c8 	bl	800bd68 <prvInsertTimerInActiveList>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d016      	beq.n	800bc0c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbde:	2300      	movs	r3, #0
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	6978      	ldr	r0, [r7, #20]
 800bbea:	f7ff ff8b 	bl	800bb04 <xTimerGenericCommand>
 800bbee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d10a      	bne.n	800bc0c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800bbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfa:	f383 8811 	msr	BASEPRI, r3
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	60fb      	str	r3, [r7, #12]
}
 800bc08:	bf00      	nop
 800bc0a:	e7fe      	b.n	800bc0a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc10:	6978      	ldr	r0, [r7, #20]
 800bc12:	4798      	blx	r3
}
 800bc14:	bf00      	nop
 800bc16:	3718      	adds	r7, #24
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	200014c0 	.word	0x200014c0

0800bc20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc28:	f107 0308 	add.w	r3, r7, #8
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f000 f857 	bl	800bce0 <prvGetNextExpireTime>
 800bc32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	4619      	mov	r1, r3
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f000 f803 	bl	800bc44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc3e:	f000 f8d5 	bl	800bdec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc42:	e7f1      	b.n	800bc28 <prvTimerTask+0x8>

0800bc44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bc4e:	f7ff fa3f 	bl	800b0d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc52:	f107 0308 	add.w	r3, r7, #8
 800bc56:	4618      	mov	r0, r3
 800bc58:	f000 f866 	bl	800bd28 <prvSampleTimeNow>
 800bc5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d130      	bne.n	800bcc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d10a      	bne.n	800bc80 <prvProcessTimerOrBlockTask+0x3c>
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d806      	bhi.n	800bc80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc72:	f7ff fa3b 	bl	800b0ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc76:	68f9      	ldr	r1, [r7, #12]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7ff ff91 	bl	800bba0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc7e:	e024      	b.n	800bcca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d008      	beq.n	800bc98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc86:	4b13      	ldr	r3, [pc, #76]	; (800bcd4 <prvProcessTimerOrBlockTask+0x90>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	bf0c      	ite	eq
 800bc90:	2301      	moveq	r3, #1
 800bc92:	2300      	movne	r3, #0
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc98:	4b0f      	ldr	r3, [pc, #60]	; (800bcd8 <prvProcessTimerOrBlockTask+0x94>)
 800bc9a:	6818      	ldr	r0, [r3, #0]
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	683a      	ldr	r2, [r7, #0]
 800bca4:	4619      	mov	r1, r3
 800bca6:	f7fe ff8b 	bl	800abc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bcaa:	f7ff fa1f 	bl	800b0ec <xTaskResumeAll>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10a      	bne.n	800bcca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bcb4:	4b09      	ldr	r3, [pc, #36]	; (800bcdc <prvProcessTimerOrBlockTask+0x98>)
 800bcb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcba:	601a      	str	r2, [r3, #0]
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	f3bf 8f6f 	isb	sy
}
 800bcc4:	e001      	b.n	800bcca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bcc6:	f7ff fa11 	bl	800b0ec <xTaskResumeAll>
}
 800bcca:	bf00      	nop
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	200014c4 	.word	0x200014c4
 800bcd8:	200014c8 	.word	0x200014c8
 800bcdc:	e000ed04 	.word	0xe000ed04

0800bce0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bce8:	4b0e      	ldr	r3, [pc, #56]	; (800bd24 <prvGetNextExpireTime+0x44>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bf0c      	ite	eq
 800bcf2:	2301      	moveq	r3, #1
 800bcf4:	2300      	movne	r3, #0
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d105      	bne.n	800bd12 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd06:	4b07      	ldr	r3, [pc, #28]	; (800bd24 <prvGetNextExpireTime+0x44>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	60fb      	str	r3, [r7, #12]
 800bd10:	e001      	b.n	800bd16 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd12:	2300      	movs	r3, #0
 800bd14:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd16:	68fb      	ldr	r3, [r7, #12]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3714      	adds	r7, #20
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bc80      	pop	{r7}
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	200014c0 	.word	0x200014c0

0800bd28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bd30:	f7ff fa7a 	bl	800b228 <xTaskGetTickCount>
 800bd34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bd36:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <prvSampleTimeNow+0x3c>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d205      	bcs.n	800bd4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd40:	f000 f908 	bl	800bf54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	e002      	b.n	800bd52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd52:	4a04      	ldr	r2, [pc, #16]	; (800bd64 <prvSampleTimeNow+0x3c>)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd58:	68fb      	ldr	r3, [r7, #12]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	200014d0 	.word	0x200014d0

0800bd68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b086      	sub	sp, #24
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
 800bd74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd76:	2300      	movs	r3, #0
 800bd78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d812      	bhi.n	800bdb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	1ad2      	subs	r2, r2, r3
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d302      	bcc.n	800bda2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	617b      	str	r3, [r7, #20]
 800bda0:	e01b      	b.n	800bdda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bda2:	4b10      	ldr	r3, [pc, #64]	; (800bde4 <prvInsertTimerInActiveList+0x7c>)
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	3304      	adds	r3, #4
 800bdaa:	4619      	mov	r1, r3
 800bdac:	4610      	mov	r0, r2
 800bdae:	f7fe f9f5 	bl	800a19c <vListInsert>
 800bdb2:	e012      	b.n	800bdda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d206      	bcs.n	800bdca <prvInsertTimerInActiveList+0x62>
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d302      	bcc.n	800bdca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	617b      	str	r3, [r7, #20]
 800bdc8:	e007      	b.n	800bdda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdca:	4b07      	ldr	r3, [pc, #28]	; (800bde8 <prvInsertTimerInActiveList+0x80>)
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	f7fe f9e1 	bl	800a19c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bdda:	697b      	ldr	r3, [r7, #20]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3718      	adds	r7, #24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	200014c4 	.word	0x200014c4
 800bde8:	200014c0 	.word	0x200014c0

0800bdec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b08e      	sub	sp, #56	; 0x38
 800bdf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bdf2:	e09d      	b.n	800bf30 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	da18      	bge.n	800be2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bdfa:	1d3b      	adds	r3, r7, #4
 800bdfc:	3304      	adds	r3, #4
 800bdfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be02:	2b00      	cmp	r3, #0
 800be04:	d10a      	bne.n	800be1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800be06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0a:	f383 8811 	msr	BASEPRI, r3
 800be0e:	f3bf 8f6f 	isb	sy
 800be12:	f3bf 8f4f 	dsb	sy
 800be16:	61fb      	str	r3, [r7, #28]
}
 800be18:	bf00      	nop
 800be1a:	e7fe      	b.n	800be1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800be1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be22:	6850      	ldr	r0, [r2, #4]
 800be24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be26:	6892      	ldr	r2, [r2, #8]
 800be28:	4611      	mov	r1, r2
 800be2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	db7e      	blt.n	800bf30 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800be36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be38:	695b      	ldr	r3, [r3, #20]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d004      	beq.n	800be48 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be40:	3304      	adds	r3, #4
 800be42:	4618      	mov	r0, r3
 800be44:	f7fe f9e2 	bl	800a20c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be48:	463b      	mov	r3, r7
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7ff ff6c 	bl	800bd28 <prvSampleTimeNow>
 800be50:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b09      	cmp	r3, #9
 800be56:	d86a      	bhi.n	800bf2e <prvProcessReceivedCommands+0x142>
 800be58:	a201      	add	r2, pc, #4	; (adr r2, 800be60 <prvProcessReceivedCommands+0x74>)
 800be5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5e:	bf00      	nop
 800be60:	0800be89 	.word	0x0800be89
 800be64:	0800be89 	.word	0x0800be89
 800be68:	0800be89 	.word	0x0800be89
 800be6c:	0800bf31 	.word	0x0800bf31
 800be70:	0800bee5 	.word	0x0800bee5
 800be74:	0800bf1d 	.word	0x0800bf1d
 800be78:	0800be89 	.word	0x0800be89
 800be7c:	0800be89 	.word	0x0800be89
 800be80:	0800bf31 	.word	0x0800bf31
 800be84:	0800bee5 	.word	0x0800bee5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8c:	699b      	ldr	r3, [r3, #24]
 800be8e:	18d1      	adds	r1, r2, r3
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be96:	f7ff ff67 	bl	800bd68 <prvInsertTimerInActiveList>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d047      	beq.n	800bf30 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bea6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beaa:	69db      	ldr	r3, [r3, #28]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d13f      	bne.n	800bf30 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800beb0:	68ba      	ldr	r2, [r7, #8]
 800beb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	441a      	add	r2, r3
 800beb8:	2300      	movs	r3, #0
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	2300      	movs	r3, #0
 800bebe:	2100      	movs	r1, #0
 800bec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bec2:	f7ff fe1f 	bl	800bb04 <xTimerGenericCommand>
 800bec6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bec8:	6a3b      	ldr	r3, [r7, #32]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d130      	bne.n	800bf30 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	61bb      	str	r3, [r7, #24]
}
 800bee0:	bf00      	nop
 800bee2:	e7fe      	b.n	800bee2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800beea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beec:	699b      	ldr	r3, [r3, #24]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d10a      	bne.n	800bf08 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	617b      	str	r3, [r7, #20]
}
 800bf04:	bf00      	nop
 800bf06:	e7fe      	b.n	800bf06 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0a:	699a      	ldr	r2, [r3, #24]
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0e:	18d1      	adds	r1, r2, r3
 800bf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf16:	f7ff ff27 	bl	800bd68 <prvInsertTimerInActiveList>
					break;
 800bf1a:	e009      	b.n	800bf30 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bf1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d104      	bne.n	800bf30 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800bf26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf28:	f000 fb6c 	bl	800c604 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf2c:	e000      	b.n	800bf30 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800bf2e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf30:	4b07      	ldr	r3, [pc, #28]	; (800bf50 <prvProcessReceivedCommands+0x164>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	1d39      	adds	r1, r7, #4
 800bf36:	2200      	movs	r2, #0
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7fe fc29 	bl	800a790 <xQueueReceive>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f47f af57 	bne.w	800bdf4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf46:	bf00      	nop
 800bf48:	bf00      	nop
 800bf4a:	3730      	adds	r7, #48	; 0x30
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	200014c8 	.word	0x200014c8

0800bf54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b088      	sub	sp, #32
 800bf58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf5a:	e045      	b.n	800bfe8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf5c:	4b2c      	ldr	r3, [pc, #176]	; (800c010 <prvSwitchTimerLists+0xbc>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf66:	4b2a      	ldr	r3, [pc, #168]	; (800c010 <prvSwitchTimerLists+0xbc>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3304      	adds	r3, #4
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fe f949 	bl	800a20c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	69db      	ldr	r3, [r3, #28]
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d12e      	bne.n	800bfe8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	699b      	ldr	r3, [r3, #24]
 800bf8e:	693a      	ldr	r2, [r7, #16]
 800bf90:	4413      	add	r3, r2
 800bf92:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf94:	68ba      	ldr	r2, [r7, #8]
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d90e      	bls.n	800bfba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfa8:	4b19      	ldr	r3, [pc, #100]	; (800c010 <prvSwitchTimerLists+0xbc>)
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	3304      	adds	r3, #4
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	4610      	mov	r0, r2
 800bfb4:	f7fe f8f2 	bl	800a19c <vListInsert>
 800bfb8:	e016      	b.n	800bfe8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfba:	2300      	movs	r3, #0
 800bfbc:	9300      	str	r3, [sp, #0]
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	f7ff fd9d 	bl	800bb04 <xTimerGenericCommand>
 800bfca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d10a      	bne.n	800bfe8 <prvSwitchTimerLists+0x94>
	__asm volatile
 800bfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd6:	f383 8811 	msr	BASEPRI, r3
 800bfda:	f3bf 8f6f 	isb	sy
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	603b      	str	r3, [r7, #0]
}
 800bfe4:	bf00      	nop
 800bfe6:	e7fe      	b.n	800bfe6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfe8:	4b09      	ldr	r3, [pc, #36]	; (800c010 <prvSwitchTimerLists+0xbc>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1b4      	bne.n	800bf5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bff2:	4b07      	ldr	r3, [pc, #28]	; (800c010 <prvSwitchTimerLists+0xbc>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bff8:	4b06      	ldr	r3, [pc, #24]	; (800c014 <prvSwitchTimerLists+0xc0>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a04      	ldr	r2, [pc, #16]	; (800c010 <prvSwitchTimerLists+0xbc>)
 800bffe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c000:	4a04      	ldr	r2, [pc, #16]	; (800c014 <prvSwitchTimerLists+0xc0>)
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	6013      	str	r3, [r2, #0]
}
 800c006:	bf00      	nop
 800c008:	3718      	adds	r7, #24
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	200014c0 	.word	0x200014c0
 800c014:	200014c4 	.word	0x200014c4

0800c018 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c01e:	f000 f92d 	bl	800c27c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c022:	4b15      	ldr	r3, [pc, #84]	; (800c078 <prvCheckForValidListAndQueue+0x60>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d120      	bne.n	800c06c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c02a:	4814      	ldr	r0, [pc, #80]	; (800c07c <prvCheckForValidListAndQueue+0x64>)
 800c02c:	f7fe f868 	bl	800a100 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c030:	4813      	ldr	r0, [pc, #76]	; (800c080 <prvCheckForValidListAndQueue+0x68>)
 800c032:	f7fe f865 	bl	800a100 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c036:	4b13      	ldr	r3, [pc, #76]	; (800c084 <prvCheckForValidListAndQueue+0x6c>)
 800c038:	4a10      	ldr	r2, [pc, #64]	; (800c07c <prvCheckForValidListAndQueue+0x64>)
 800c03a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c03c:	4b12      	ldr	r3, [pc, #72]	; (800c088 <prvCheckForValidListAndQueue+0x70>)
 800c03e:	4a10      	ldr	r2, [pc, #64]	; (800c080 <prvCheckForValidListAndQueue+0x68>)
 800c040:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c042:	2300      	movs	r3, #0
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	4b11      	ldr	r3, [pc, #68]	; (800c08c <prvCheckForValidListAndQueue+0x74>)
 800c048:	4a11      	ldr	r2, [pc, #68]	; (800c090 <prvCheckForValidListAndQueue+0x78>)
 800c04a:	2110      	movs	r1, #16
 800c04c:	200a      	movs	r0, #10
 800c04e:	f7fe f96f 	bl	800a330 <xQueueGenericCreateStatic>
 800c052:	4603      	mov	r3, r0
 800c054:	4a08      	ldr	r2, [pc, #32]	; (800c078 <prvCheckForValidListAndQueue+0x60>)
 800c056:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c058:	4b07      	ldr	r3, [pc, #28]	; (800c078 <prvCheckForValidListAndQueue+0x60>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d005      	beq.n	800c06c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c060:	4b05      	ldr	r3, [pc, #20]	; (800c078 <prvCheckForValidListAndQueue+0x60>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	490b      	ldr	r1, [pc, #44]	; (800c094 <prvCheckForValidListAndQueue+0x7c>)
 800c066:	4618      	mov	r0, r3
 800c068:	f7fe fd82 	bl	800ab70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c06c:	f000 f936 	bl	800c2dc <vPortExitCritical>
}
 800c070:	bf00      	nop
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	200014c8 	.word	0x200014c8
 800c07c:	20001498 	.word	0x20001498
 800c080:	200014ac 	.word	0x200014ac
 800c084:	200014c0 	.word	0x200014c0
 800c088:	200014c4 	.word	0x200014c4
 800c08c:	20001574 	.word	0x20001574
 800c090:	200014d4 	.word	0x200014d4
 800c094:	0800d32c 	.word	0x0800d32c

0800c098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	3b04      	subs	r3, #4
 800c0a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c0b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3b04      	subs	r3, #4
 800c0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	f023 0201 	bic.w	r2, r3, #1
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3b04      	subs	r3, #4
 800c0c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0c8:	4a08      	ldr	r2, [pc, #32]	; (800c0ec <pxPortInitialiseStack+0x54>)
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3b14      	subs	r3, #20
 800c0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3b20      	subs	r3, #32
 800c0de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3714      	adds	r7, #20
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bc80      	pop	{r7}
 800c0ea:	4770      	bx	lr
 800c0ec:	0800c0f1 	.word	0x0800c0f1

0800c0f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0fa:	4b12      	ldr	r3, [pc, #72]	; (800c144 <prvTaskExitError+0x54>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c102:	d00a      	beq.n	800c11a <prvTaskExitError+0x2a>
	__asm volatile
 800c104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	60fb      	str	r3, [r7, #12]
}
 800c116:	bf00      	nop
 800c118:	e7fe      	b.n	800c118 <prvTaskExitError+0x28>
	__asm volatile
 800c11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	60bb      	str	r3, [r7, #8]
}
 800c12c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c12e:	bf00      	nop
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d0fc      	beq.n	800c130 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c136:	bf00      	nop
 800c138:	bf00      	nop
 800c13a:	3714      	adds	r7, #20
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bc80      	pop	{r7}
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop
 800c144:	2000011c 	.word	0x2000011c
	...

0800c150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c150:	4b07      	ldr	r3, [pc, #28]	; (800c170 <pxCurrentTCBConst2>)
 800c152:	6819      	ldr	r1, [r3, #0]
 800c154:	6808      	ldr	r0, [r1, #0]
 800c156:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c15a:	f380 8809 	msr	PSP, r0
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f04f 0000 	mov.w	r0, #0
 800c166:	f380 8811 	msr	BASEPRI, r0
 800c16a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c16e:	4770      	bx	lr

0800c170 <pxCurrentTCBConst2>:
 800c170:	20000f98 	.word	0x20000f98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c174:	bf00      	nop
 800c176:	bf00      	nop

0800c178 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c178:	4806      	ldr	r0, [pc, #24]	; (800c194 <prvPortStartFirstTask+0x1c>)
 800c17a:	6800      	ldr	r0, [r0, #0]
 800c17c:	6800      	ldr	r0, [r0, #0]
 800c17e:	f380 8808 	msr	MSP, r0
 800c182:	b662      	cpsie	i
 800c184:	b661      	cpsie	f
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	df00      	svc	0
 800c190:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c192:	bf00      	nop
 800c194:	e000ed08 	.word	0xe000ed08

0800c198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c19e:	4b32      	ldr	r3, [pc, #200]	; (800c268 <xPortStartScheduler+0xd0>)
 800c1a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	22ff      	movs	r2, #255	; 0xff
 800c1ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1b8:	78fb      	ldrb	r3, [r7, #3]
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	4b2a      	ldr	r3, [pc, #168]	; (800c26c <xPortStartScheduler+0xd4>)
 800c1c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1c6:	4b2a      	ldr	r3, [pc, #168]	; (800c270 <xPortStartScheduler+0xd8>)
 800c1c8:	2207      	movs	r2, #7
 800c1ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1cc:	e009      	b.n	800c1e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c1ce:	4b28      	ldr	r3, [pc, #160]	; (800c270 <xPortStartScheduler+0xd8>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	4a26      	ldr	r2, [pc, #152]	; (800c270 <xPortStartScheduler+0xd8>)
 800c1d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1d8:	78fb      	ldrb	r3, [r7, #3]
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	005b      	lsls	r3, r3, #1
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1e2:	78fb      	ldrb	r3, [r7, #3]
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1ea:	2b80      	cmp	r3, #128	; 0x80
 800c1ec:	d0ef      	beq.n	800c1ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c1ee:	4b20      	ldr	r3, [pc, #128]	; (800c270 <xPortStartScheduler+0xd8>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f1c3 0307 	rsb	r3, r3, #7
 800c1f6:	2b04      	cmp	r3, #4
 800c1f8:	d00a      	beq.n	800c210 <xPortStartScheduler+0x78>
	__asm volatile
 800c1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fe:	f383 8811 	msr	BASEPRI, r3
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	60bb      	str	r3, [r7, #8]
}
 800c20c:	bf00      	nop
 800c20e:	e7fe      	b.n	800c20e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c210:	4b17      	ldr	r3, [pc, #92]	; (800c270 <xPortStartScheduler+0xd8>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	021b      	lsls	r3, r3, #8
 800c216:	4a16      	ldr	r2, [pc, #88]	; (800c270 <xPortStartScheduler+0xd8>)
 800c218:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c21a:	4b15      	ldr	r3, [pc, #84]	; (800c270 <xPortStartScheduler+0xd8>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c222:	4a13      	ldr	r2, [pc, #76]	; (800c270 <xPortStartScheduler+0xd8>)
 800c224:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	b2da      	uxtb	r2, r3
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c22e:	4b11      	ldr	r3, [pc, #68]	; (800c274 <xPortStartScheduler+0xdc>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a10      	ldr	r2, [pc, #64]	; (800c274 <xPortStartScheduler+0xdc>)
 800c234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c238:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c23a:	4b0e      	ldr	r3, [pc, #56]	; (800c274 <xPortStartScheduler+0xdc>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a0d      	ldr	r2, [pc, #52]	; (800c274 <xPortStartScheduler+0xdc>)
 800c240:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c244:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c246:	f000 f8b9 	bl	800c3bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c24a:	4b0b      	ldr	r3, [pc, #44]	; (800c278 <xPortStartScheduler+0xe0>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c250:	f7ff ff92 	bl	800c178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c254:	f7ff f8b4 	bl	800b3c0 <vTaskSwitchContext>
	prvTaskExitError();
 800c258:	f7ff ff4a 	bl	800c0f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c25c:	2300      	movs	r3, #0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	e000e400 	.word	0xe000e400
 800c26c:	200015c4 	.word	0x200015c4
 800c270:	200015c8 	.word	0x200015c8
 800c274:	e000ed20 	.word	0xe000ed20
 800c278:	2000011c 	.word	0x2000011c

0800c27c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	607b      	str	r3, [r7, #4]
}
 800c294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c296:	4b0f      	ldr	r3, [pc, #60]	; (800c2d4 <vPortEnterCritical+0x58>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3301      	adds	r3, #1
 800c29c:	4a0d      	ldr	r2, [pc, #52]	; (800c2d4 <vPortEnterCritical+0x58>)
 800c29e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2a0:	4b0c      	ldr	r3, [pc, #48]	; (800c2d4 <vPortEnterCritical+0x58>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d10f      	bne.n	800c2c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2a8:	4b0b      	ldr	r3, [pc, #44]	; (800c2d8 <vPortEnterCritical+0x5c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00a      	beq.n	800c2c8 <vPortEnterCritical+0x4c>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	603b      	str	r3, [r7, #0]
}
 800c2c4:	bf00      	nop
 800c2c6:	e7fe      	b.n	800c2c6 <vPortEnterCritical+0x4a>
	}
}
 800c2c8:	bf00      	nop
 800c2ca:	370c      	adds	r7, #12
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bc80      	pop	{r7}
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	2000011c 	.word	0x2000011c
 800c2d8:	e000ed04 	.word	0xe000ed04

0800c2dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c2e2:	4b11      	ldr	r3, [pc, #68]	; (800c328 <vPortExitCritical+0x4c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d10a      	bne.n	800c300 <vPortExitCritical+0x24>
	__asm volatile
 800c2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	607b      	str	r3, [r7, #4]
}
 800c2fc:	bf00      	nop
 800c2fe:	e7fe      	b.n	800c2fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c300:	4b09      	ldr	r3, [pc, #36]	; (800c328 <vPortExitCritical+0x4c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	3b01      	subs	r3, #1
 800c306:	4a08      	ldr	r2, [pc, #32]	; (800c328 <vPortExitCritical+0x4c>)
 800c308:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c30a:	4b07      	ldr	r3, [pc, #28]	; (800c328 <vPortExitCritical+0x4c>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d105      	bne.n	800c31e <vPortExitCritical+0x42>
 800c312:	2300      	movs	r3, #0
 800c314:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	f383 8811 	msr	BASEPRI, r3
}
 800c31c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c31e:	bf00      	nop
 800c320:	370c      	adds	r7, #12
 800c322:	46bd      	mov	sp, r7
 800c324:	bc80      	pop	{r7}
 800c326:	4770      	bx	lr
 800c328:	2000011c 	.word	0x2000011c
 800c32c:	00000000 	.word	0x00000000

0800c330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c330:	f3ef 8009 	mrs	r0, PSP
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	4b0d      	ldr	r3, [pc, #52]	; (800c370 <pxCurrentTCBConst>)
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c340:	6010      	str	r0, [r2, #0]
 800c342:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c346:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c34a:	f380 8811 	msr	BASEPRI, r0
 800c34e:	f7ff f837 	bl	800b3c0 <vTaskSwitchContext>
 800c352:	f04f 0000 	mov.w	r0, #0
 800c356:	f380 8811 	msr	BASEPRI, r0
 800c35a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c35e:	6819      	ldr	r1, [r3, #0]
 800c360:	6808      	ldr	r0, [r1, #0]
 800c362:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c366:	f380 8809 	msr	PSP, r0
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	4770      	bx	lr

0800c370 <pxCurrentTCBConst>:
 800c370:	20000f98 	.word	0x20000f98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop

0800c378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	607b      	str	r3, [r7, #4]
}
 800c390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c392:	f7fe ff57 	bl	800b244 <xTaskIncrementTick>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d003      	beq.n	800c3a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c39c:	4b06      	ldr	r3, [pc, #24]	; (800c3b8 <SysTick_Handler+0x40>)
 800c39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	f383 8811 	msr	BASEPRI, r3
}
 800c3ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	e000ed04 	.word	0xe000ed04

0800c3bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c3bc:	b480      	push	{r7}
 800c3be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3c0:	4b0a      	ldr	r3, [pc, #40]	; (800c3ec <vPortSetupTimerInterrupt+0x30>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3c6:	4b0a      	ldr	r3, [pc, #40]	; (800c3f0 <vPortSetupTimerInterrupt+0x34>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3cc:	4b09      	ldr	r3, [pc, #36]	; (800c3f4 <vPortSetupTimerInterrupt+0x38>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a09      	ldr	r2, [pc, #36]	; (800c3f8 <vPortSetupTimerInterrupt+0x3c>)
 800c3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3d6:	099b      	lsrs	r3, r3, #6
 800c3d8:	4a08      	ldr	r2, [pc, #32]	; (800c3fc <vPortSetupTimerInterrupt+0x40>)
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c3de:	4b03      	ldr	r3, [pc, #12]	; (800c3ec <vPortSetupTimerInterrupt+0x30>)
 800c3e0:	2207      	movs	r2, #7
 800c3e2:	601a      	str	r2, [r3, #0]
}
 800c3e4:	bf00      	nop
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bc80      	pop	{r7}
 800c3ea:	4770      	bx	lr
 800c3ec:	e000e010 	.word	0xe000e010
 800c3f0:	e000e018 	.word	0xe000e018
 800c3f4:	20000000 	.word	0x20000000
 800c3f8:	10624dd3 	.word	0x10624dd3
 800c3fc:	e000e014 	.word	0xe000e014

0800c400 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c406:	f3ef 8305 	mrs	r3, IPSR
 800c40a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2b0f      	cmp	r3, #15
 800c410:	d914      	bls.n	800c43c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c412:	4a16      	ldr	r2, [pc, #88]	; (800c46c <vPortValidateInterruptPriority+0x6c>)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	4413      	add	r3, r2
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c41c:	4b14      	ldr	r3, [pc, #80]	; (800c470 <vPortValidateInterruptPriority+0x70>)
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	7afa      	ldrb	r2, [r7, #11]
 800c422:	429a      	cmp	r2, r3
 800c424:	d20a      	bcs.n	800c43c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	607b      	str	r3, [r7, #4]
}
 800c438:	bf00      	nop
 800c43a:	e7fe      	b.n	800c43a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c43c:	4b0d      	ldr	r3, [pc, #52]	; (800c474 <vPortValidateInterruptPriority+0x74>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c444:	4b0c      	ldr	r3, [pc, #48]	; (800c478 <vPortValidateInterruptPriority+0x78>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	429a      	cmp	r2, r3
 800c44a:	d90a      	bls.n	800c462 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c450:	f383 8811 	msr	BASEPRI, r3
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	603b      	str	r3, [r7, #0]
}
 800c45e:	bf00      	nop
 800c460:	e7fe      	b.n	800c460 <vPortValidateInterruptPriority+0x60>
	}
 800c462:	bf00      	nop
 800c464:	3714      	adds	r7, #20
 800c466:	46bd      	mov	sp, r7
 800c468:	bc80      	pop	{r7}
 800c46a:	4770      	bx	lr
 800c46c:	e000e3f0 	.word	0xe000e3f0
 800c470:	200015c4 	.word	0x200015c4
 800c474:	e000ed0c 	.word	0xe000ed0c
 800c478:	200015c8 	.word	0x200015c8

0800c47c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b08a      	sub	sp, #40	; 0x28
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c484:	2300      	movs	r3, #0
 800c486:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c488:	f7fe fe22 	bl	800b0d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c48c:	4b58      	ldr	r3, [pc, #352]	; (800c5f0 <pvPortMalloc+0x174>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d101      	bne.n	800c498 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c494:	f000 f910 	bl	800c6b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c498:	4b56      	ldr	r3, [pc, #344]	; (800c5f4 <pvPortMalloc+0x178>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4013      	ands	r3, r2
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f040 808e 	bne.w	800c5c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d01d      	beq.n	800c4e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c4ac:	2208      	movs	r2, #8
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f003 0307 	and.w	r3, r3, #7
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d014      	beq.n	800c4e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f023 0307 	bic.w	r3, r3, #7
 800c4c4:	3308      	adds	r3, #8
 800c4c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f003 0307 	and.w	r3, r3, #7
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00a      	beq.n	800c4e8 <pvPortMalloc+0x6c>
	__asm volatile
 800c4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d6:	f383 8811 	msr	BASEPRI, r3
 800c4da:	f3bf 8f6f 	isb	sy
 800c4de:	f3bf 8f4f 	dsb	sy
 800c4e2:	617b      	str	r3, [r7, #20]
}
 800c4e4:	bf00      	nop
 800c4e6:	e7fe      	b.n	800c4e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d069      	beq.n	800c5c2 <pvPortMalloc+0x146>
 800c4ee:	4b42      	ldr	r3, [pc, #264]	; (800c5f8 <pvPortMalloc+0x17c>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d864      	bhi.n	800c5c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c4f8:	4b40      	ldr	r3, [pc, #256]	; (800c5fc <pvPortMalloc+0x180>)
 800c4fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c4fc:	4b3f      	ldr	r3, [pc, #252]	; (800c5fc <pvPortMalloc+0x180>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c502:	e004      	b.n	800c50e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c506:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	429a      	cmp	r2, r3
 800c516:	d903      	bls.n	800c520 <pvPortMalloc+0xa4>
 800c518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1f1      	bne.n	800c504 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c520:	4b33      	ldr	r3, [pc, #204]	; (800c5f0 <pvPortMalloc+0x174>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c526:	429a      	cmp	r2, r3
 800c528:	d04b      	beq.n	800c5c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c52a:	6a3b      	ldr	r3, [r7, #32]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2208      	movs	r2, #8
 800c530:	4413      	add	r3, r2
 800c532:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	6a3b      	ldr	r3, [r7, #32]
 800c53a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	1ad2      	subs	r2, r2, r3
 800c544:	2308      	movs	r3, #8
 800c546:	005b      	lsls	r3, r3, #1
 800c548:	429a      	cmp	r2, r3
 800c54a:	d91f      	bls.n	800c58c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4413      	add	r3, r2
 800c552:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	f003 0307 	and.w	r3, r3, #7
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00a      	beq.n	800c574 <pvPortMalloc+0xf8>
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	613b      	str	r3, [r7, #16]
}
 800c570:	bf00      	nop
 800c572:	e7fe      	b.n	800c572 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	1ad2      	subs	r2, r2, r3
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c586:	69b8      	ldr	r0, [r7, #24]
 800c588:	f000 f8f8 	bl	800c77c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c58c:	4b1a      	ldr	r3, [pc, #104]	; (800c5f8 <pvPortMalloc+0x17c>)
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	4a18      	ldr	r2, [pc, #96]	; (800c5f8 <pvPortMalloc+0x17c>)
 800c598:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c59a:	4b17      	ldr	r3, [pc, #92]	; (800c5f8 <pvPortMalloc+0x17c>)
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	4b18      	ldr	r3, [pc, #96]	; (800c600 <pvPortMalloc+0x184>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d203      	bcs.n	800c5ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5a6:	4b14      	ldr	r3, [pc, #80]	; (800c5f8 <pvPortMalloc+0x17c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a15      	ldr	r2, [pc, #84]	; (800c600 <pvPortMalloc+0x184>)
 800c5ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b0:	685a      	ldr	r2, [r3, #4]
 800c5b2:	4b10      	ldr	r3, [pc, #64]	; (800c5f4 <pvPortMalloc+0x178>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	431a      	orrs	r2, r3
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5be:	2200      	movs	r2, #0
 800c5c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c5c2:	f7fe fd93 	bl	800b0ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	f003 0307 	and.w	r3, r3, #7
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00a      	beq.n	800c5e6 <pvPortMalloc+0x16a>
	__asm volatile
 800c5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d4:	f383 8811 	msr	BASEPRI, r3
 800c5d8:	f3bf 8f6f 	isb	sy
 800c5dc:	f3bf 8f4f 	dsb	sy
 800c5e0:	60fb      	str	r3, [r7, #12]
}
 800c5e2:	bf00      	nop
 800c5e4:	e7fe      	b.n	800c5e4 <pvPortMalloc+0x168>
	return pvReturn;
 800c5e6:	69fb      	ldr	r3, [r7, #28]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3728      	adds	r7, #40	; 0x28
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	200021d4 	.word	0x200021d4
 800c5f4:	200021e0 	.word	0x200021e0
 800c5f8:	200021d8 	.word	0x200021d8
 800c5fc:	200021cc 	.word	0x200021cc
 800c600:	200021dc 	.word	0x200021dc

0800c604 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d048      	beq.n	800c6a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c616:	2308      	movs	r3, #8
 800c618:	425b      	negs	r3, r3
 800c61a:	697a      	ldr	r2, [r7, #20]
 800c61c:	4413      	add	r3, r2
 800c61e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	685a      	ldr	r2, [r3, #4]
 800c628:	4b21      	ldr	r3, [pc, #132]	; (800c6b0 <vPortFree+0xac>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4013      	ands	r3, r2
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10a      	bne.n	800c648 <vPortFree+0x44>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	60fb      	str	r3, [r7, #12]
}
 800c644:	bf00      	nop
 800c646:	e7fe      	b.n	800c646 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00a      	beq.n	800c666 <vPortFree+0x62>
	__asm volatile
 800c650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c654:	f383 8811 	msr	BASEPRI, r3
 800c658:	f3bf 8f6f 	isb	sy
 800c65c:	f3bf 8f4f 	dsb	sy
 800c660:	60bb      	str	r3, [r7, #8]
}
 800c662:	bf00      	nop
 800c664:	e7fe      	b.n	800c664 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	685a      	ldr	r2, [r3, #4]
 800c66a:	4b11      	ldr	r3, [pc, #68]	; (800c6b0 <vPortFree+0xac>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4013      	ands	r3, r2
 800c670:	2b00      	cmp	r3, #0
 800c672:	d019      	beq.n	800c6a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d115      	bne.n	800c6a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	685a      	ldr	r2, [r3, #4]
 800c680:	4b0b      	ldr	r3, [pc, #44]	; (800c6b0 <vPortFree+0xac>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	43db      	mvns	r3, r3
 800c686:	401a      	ands	r2, r3
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c68c:	f7fe fd20 	bl	800b0d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	685a      	ldr	r2, [r3, #4]
 800c694:	4b07      	ldr	r3, [pc, #28]	; (800c6b4 <vPortFree+0xb0>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4413      	add	r3, r2
 800c69a:	4a06      	ldr	r2, [pc, #24]	; (800c6b4 <vPortFree+0xb0>)
 800c69c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c69e:	6938      	ldr	r0, [r7, #16]
 800c6a0:	f000 f86c 	bl	800c77c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c6a4:	f7fe fd22 	bl	800b0ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c6a8:	bf00      	nop
 800c6aa:	3718      	adds	r7, #24
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	200021e0 	.word	0x200021e0
 800c6b4:	200021d8 	.word	0x200021d8

0800c6b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b085      	sub	sp, #20
 800c6bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c6be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c6c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c6c4:	4b27      	ldr	r3, [pc, #156]	; (800c764 <prvHeapInit+0xac>)
 800c6c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f003 0307 	and.w	r3, r3, #7
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00c      	beq.n	800c6ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	3307      	adds	r3, #7
 800c6d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f023 0307 	bic.w	r3, r3, #7
 800c6de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	4a1f      	ldr	r2, [pc, #124]	; (800c764 <prvHeapInit+0xac>)
 800c6e8:	4413      	add	r3, r2
 800c6ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c6f0:	4a1d      	ldr	r2, [pc, #116]	; (800c768 <prvHeapInit+0xb0>)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c6f6:	4b1c      	ldr	r3, [pc, #112]	; (800c768 <prvHeapInit+0xb0>)
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	68ba      	ldr	r2, [r7, #8]
 800c700:	4413      	add	r3, r2
 800c702:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c704:	2208      	movs	r2, #8
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	1a9b      	subs	r3, r3, r2
 800c70a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f023 0307 	bic.w	r3, r3, #7
 800c712:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	4a15      	ldr	r2, [pc, #84]	; (800c76c <prvHeapInit+0xb4>)
 800c718:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c71a:	4b14      	ldr	r3, [pc, #80]	; (800c76c <prvHeapInit+0xb4>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2200      	movs	r2, #0
 800c720:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c722:	4b12      	ldr	r3, [pc, #72]	; (800c76c <prvHeapInit+0xb4>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2200      	movs	r2, #0
 800c728:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	1ad2      	subs	r2, r2, r3
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c738:	4b0c      	ldr	r3, [pc, #48]	; (800c76c <prvHeapInit+0xb4>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	4a0a      	ldr	r2, [pc, #40]	; (800c770 <prvHeapInit+0xb8>)
 800c746:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	4a09      	ldr	r2, [pc, #36]	; (800c774 <prvHeapInit+0xbc>)
 800c74e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c750:	4b09      	ldr	r3, [pc, #36]	; (800c778 <prvHeapInit+0xc0>)
 800c752:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c756:	601a      	str	r2, [r3, #0]
}
 800c758:	bf00      	nop
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bc80      	pop	{r7}
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	200015cc 	.word	0x200015cc
 800c768:	200021cc 	.word	0x200021cc
 800c76c:	200021d4 	.word	0x200021d4
 800c770:	200021dc 	.word	0x200021dc
 800c774:	200021d8 	.word	0x200021d8
 800c778:	200021e0 	.word	0x200021e0

0800c77c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c77c:	b480      	push	{r7}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c784:	4b27      	ldr	r3, [pc, #156]	; (800c824 <prvInsertBlockIntoFreeList+0xa8>)
 800c786:	60fb      	str	r3, [r7, #12]
 800c788:	e002      	b.n	800c790 <prvInsertBlockIntoFreeList+0x14>
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	60fb      	str	r3, [r7, #12]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	429a      	cmp	r2, r3
 800c798:	d8f7      	bhi.n	800c78a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d108      	bne.n	800c7be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	685a      	ldr	r2, [r3, #4]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	441a      	add	r2, r3
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	68ba      	ldr	r2, [r7, #8]
 800c7c8:	441a      	add	r2, r3
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d118      	bne.n	800c804 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	4b14      	ldr	r3, [pc, #80]	; (800c828 <prvInsertBlockIntoFreeList+0xac>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d00d      	beq.n	800c7fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685a      	ldr	r2, [r3, #4]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	441a      	add	r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	601a      	str	r2, [r3, #0]
 800c7f8:	e008      	b.n	800c80c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c7fa:	4b0b      	ldr	r3, [pc, #44]	; (800c828 <prvInsertBlockIntoFreeList+0xac>)
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	601a      	str	r2, [r3, #0]
 800c802:	e003      	b.n	800c80c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	429a      	cmp	r2, r3
 800c812:	d002      	beq.n	800c81a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c81a:	bf00      	nop
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	bc80      	pop	{r7}
 800c822:	4770      	bx	lr
 800c824:	200021cc 	.word	0x200021cc
 800c828:	200021d4 	.word	0x200021d4

0800c82c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c830:	2200      	movs	r2, #0
 800c832:	4912      	ldr	r1, [pc, #72]	; (800c87c <MX_USB_DEVICE_Init+0x50>)
 800c834:	4812      	ldr	r0, [pc, #72]	; (800c880 <MX_USB_DEVICE_Init+0x54>)
 800c836:	f7fc fa59 	bl	8008cec <USBD_Init>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d001      	beq.n	800c844 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c840:	f7f4 fd9c 	bl	800137c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c844:	490f      	ldr	r1, [pc, #60]	; (800c884 <MX_USB_DEVICE_Init+0x58>)
 800c846:	480e      	ldr	r0, [pc, #56]	; (800c880 <MX_USB_DEVICE_Init+0x54>)
 800c848:	f7fc fa7b 	bl	8008d42 <USBD_RegisterClass>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d001      	beq.n	800c856 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c852:	f7f4 fd93 	bl	800137c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c856:	490c      	ldr	r1, [pc, #48]	; (800c888 <MX_USB_DEVICE_Init+0x5c>)
 800c858:	4809      	ldr	r0, [pc, #36]	; (800c880 <MX_USB_DEVICE_Init+0x54>)
 800c85a:	f7fc f9db 	bl	8008c14 <USBD_CDC_RegisterInterface>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c864:	f7f4 fd8a 	bl	800137c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c868:	4805      	ldr	r0, [pc, #20]	; (800c880 <MX_USB_DEVICE_Init+0x54>)
 800c86a:	f7fc fa83 	bl	8008d74 <USBD_Start>
 800c86e:	4603      	mov	r3, r0
 800c870:	2b00      	cmp	r3, #0
 800c872:	d001      	beq.n	800c878 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c874:	f7f4 fd82 	bl	800137c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c878:	bf00      	nop
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	20000130 	.word	0x20000130
 800c880:	200021e4 	.word	0x200021e4
 800c884:	20000018 	.word	0x20000018
 800c888:	20000120 	.word	0x20000120

0800c88c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c890:	2200      	movs	r2, #0
 800c892:	4905      	ldr	r1, [pc, #20]	; (800c8a8 <CDC_Init_FS+0x1c>)
 800c894:	4805      	ldr	r0, [pc, #20]	; (800c8ac <CDC_Init_FS+0x20>)
 800c896:	f7fc f9d3 	bl	8008c40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c89a:	4905      	ldr	r1, [pc, #20]	; (800c8b0 <CDC_Init_FS+0x24>)
 800c89c:	4803      	ldr	r0, [pc, #12]	; (800c8ac <CDC_Init_FS+0x20>)
 800c89e:	f7fc f9e8 	bl	8008c72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c8a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	200028a8 	.word	0x200028a8
 800c8ac:	200021e4 	.word	0x200021e4
 800c8b0:	200024a8 	.word	0x200024a8

0800c8b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c8b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bc80      	pop	{r7}
 800c8c0:	4770      	bx	lr
	...

0800c8c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	6039      	str	r1, [r7, #0]
 800c8ce:	71fb      	strb	r3, [r7, #7]
 800c8d0:	4613      	mov	r3, r2
 800c8d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c8d4:	79fb      	ldrb	r3, [r7, #7]
 800c8d6:	2b23      	cmp	r3, #35	; 0x23
 800c8d8:	d84a      	bhi.n	800c970 <CDC_Control_FS+0xac>
 800c8da:	a201      	add	r2, pc, #4	; (adr r2, 800c8e0 <CDC_Control_FS+0x1c>)
 800c8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e0:	0800c971 	.word	0x0800c971
 800c8e4:	0800c971 	.word	0x0800c971
 800c8e8:	0800c971 	.word	0x0800c971
 800c8ec:	0800c971 	.word	0x0800c971
 800c8f0:	0800c971 	.word	0x0800c971
 800c8f4:	0800c971 	.word	0x0800c971
 800c8f8:	0800c971 	.word	0x0800c971
 800c8fc:	0800c971 	.word	0x0800c971
 800c900:	0800c971 	.word	0x0800c971
 800c904:	0800c971 	.word	0x0800c971
 800c908:	0800c971 	.word	0x0800c971
 800c90c:	0800c971 	.word	0x0800c971
 800c910:	0800c971 	.word	0x0800c971
 800c914:	0800c971 	.word	0x0800c971
 800c918:	0800c971 	.word	0x0800c971
 800c91c:	0800c971 	.word	0x0800c971
 800c920:	0800c971 	.word	0x0800c971
 800c924:	0800c971 	.word	0x0800c971
 800c928:	0800c971 	.word	0x0800c971
 800c92c:	0800c971 	.word	0x0800c971
 800c930:	0800c971 	.word	0x0800c971
 800c934:	0800c971 	.word	0x0800c971
 800c938:	0800c971 	.word	0x0800c971
 800c93c:	0800c971 	.word	0x0800c971
 800c940:	0800c971 	.word	0x0800c971
 800c944:	0800c971 	.word	0x0800c971
 800c948:	0800c971 	.word	0x0800c971
 800c94c:	0800c971 	.word	0x0800c971
 800c950:	0800c971 	.word	0x0800c971
 800c954:	0800c971 	.word	0x0800c971
 800c958:	0800c971 	.word	0x0800c971
 800c95c:	0800c971 	.word	0x0800c971
 800c960:	0800c971 	.word	0x0800c971
 800c964:	0800c971 	.word	0x0800c971
 800c968:	0800c971 	.word	0x0800c971
 800c96c:	0800c971 	.word	0x0800c971
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c970:	bf00      	nop
  }

  return (USBD_OK);
 800c972:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c974:	4618      	mov	r0, r3
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	bc80      	pop	{r7}
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop

0800c980 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c98a:	6879      	ldr	r1, [r7, #4]
 800c98c:	4805      	ldr	r0, [pc, #20]	; (800c9a4 <CDC_Receive_FS+0x24>)
 800c98e:	f7fc f970 	bl	8008c72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c992:	4804      	ldr	r0, [pc, #16]	; (800c9a4 <CDC_Receive_FS+0x24>)
 800c994:	f7fc f980 	bl	8008c98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c998:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	200021e4 	.word	0x200021e4

0800c9a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	6039      	str	r1, [r7, #0]
 800c9b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	2212      	movs	r2, #18
 800c9b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c9ba:	4b03      	ldr	r3, [pc, #12]	; (800c9c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bc80      	pop	{r7}
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	2000014c 	.word	0x2000014c

0800c9cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	6039      	str	r1, [r7, #0]
 800c9d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	2204      	movs	r2, #4
 800c9dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c9de:	4b03      	ldr	r3, [pc, #12]	; (800c9ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bc80      	pop	{r7}
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop
 800c9ec:	20000160 	.word	0x20000160

0800c9f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	6039      	str	r1, [r7, #0]
 800c9fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9fc:	79fb      	ldrb	r3, [r7, #7]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d105      	bne.n	800ca0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca02:	683a      	ldr	r2, [r7, #0]
 800ca04:	4907      	ldr	r1, [pc, #28]	; (800ca24 <USBD_FS_ProductStrDescriptor+0x34>)
 800ca06:	4808      	ldr	r0, [pc, #32]	; (800ca28 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca08:	f7fd f92c 	bl	8009c64 <USBD_GetString>
 800ca0c:	e004      	b.n	800ca18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca0e:	683a      	ldr	r2, [r7, #0]
 800ca10:	4904      	ldr	r1, [pc, #16]	; (800ca24 <USBD_FS_ProductStrDescriptor+0x34>)
 800ca12:	4805      	ldr	r0, [pc, #20]	; (800ca28 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca14:	f7fd f926 	bl	8009c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca18:	4b02      	ldr	r3, [pc, #8]	; (800ca24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	20002ca8 	.word	0x20002ca8
 800ca28:	0800d334 	.word	0x0800d334

0800ca2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	4603      	mov	r3, r0
 800ca34:	6039      	str	r1, [r7, #0]
 800ca36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	4904      	ldr	r1, [pc, #16]	; (800ca4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ca3c:	4804      	ldr	r0, [pc, #16]	; (800ca50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ca3e:	f7fd f911 	bl	8009c64 <USBD_GetString>
  return USBD_StrDesc;
 800ca42:	4b02      	ldr	r3, [pc, #8]	; (800ca4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3708      	adds	r7, #8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	20002ca8 	.word	0x20002ca8
 800ca50:	0800d34c 	.word	0x0800d34c

0800ca54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	6039      	str	r1, [r7, #0]
 800ca5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	221a      	movs	r2, #26
 800ca64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca66:	f000 f843 	bl	800caf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ca6a:	4b02      	ldr	r3, [pc, #8]	; (800ca74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	20000164 	.word	0x20000164

0800ca78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	4603      	mov	r3, r0
 800ca80:	6039      	str	r1, [r7, #0]
 800ca82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ca84:	79fb      	ldrb	r3, [r7, #7]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d105      	bne.n	800ca96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	4907      	ldr	r1, [pc, #28]	; (800caac <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca8e:	4808      	ldr	r0, [pc, #32]	; (800cab0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca90:	f7fd f8e8 	bl	8009c64 <USBD_GetString>
 800ca94:	e004      	b.n	800caa0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca96:	683a      	ldr	r2, [r7, #0]
 800ca98:	4904      	ldr	r1, [pc, #16]	; (800caac <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca9a:	4805      	ldr	r0, [pc, #20]	; (800cab0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca9c:	f7fd f8e2 	bl	8009c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800caa0:	4b02      	ldr	r3, [pc, #8]	; (800caac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	20002ca8 	.word	0x20002ca8
 800cab0:	0800d360 	.word	0x0800d360

0800cab4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	4603      	mov	r3, r0
 800cabc:	6039      	str	r1, [r7, #0]
 800cabe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cac0:	79fb      	ldrb	r3, [r7, #7]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d105      	bne.n	800cad2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cac6:	683a      	ldr	r2, [r7, #0]
 800cac8:	4907      	ldr	r1, [pc, #28]	; (800cae8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800caca:	4808      	ldr	r0, [pc, #32]	; (800caec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cacc:	f7fd f8ca 	bl	8009c64 <USBD_GetString>
 800cad0:	e004      	b.n	800cadc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cad2:	683a      	ldr	r2, [r7, #0]
 800cad4:	4904      	ldr	r1, [pc, #16]	; (800cae8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cad6:	4805      	ldr	r0, [pc, #20]	; (800caec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cad8:	f7fd f8c4 	bl	8009c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cadc:	4b02      	ldr	r3, [pc, #8]	; (800cae8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	20002ca8 	.word	0x20002ca8
 800caec:	0800d36c 	.word	0x0800d36c

0800caf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800caf6:	4b0f      	ldr	r3, [pc, #60]	; (800cb34 <Get_SerialNum+0x44>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cafc:	4b0e      	ldr	r3, [pc, #56]	; (800cb38 <Get_SerialNum+0x48>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cb02:	4b0e      	ldr	r3, [pc, #56]	; (800cb3c <Get_SerialNum+0x4c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d009      	beq.n	800cb2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cb16:	2208      	movs	r2, #8
 800cb18:	4909      	ldr	r1, [pc, #36]	; (800cb40 <Get_SerialNum+0x50>)
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	f000 f814 	bl	800cb48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cb20:	2204      	movs	r2, #4
 800cb22:	4908      	ldr	r1, [pc, #32]	; (800cb44 <Get_SerialNum+0x54>)
 800cb24:	68b8      	ldr	r0, [r7, #8]
 800cb26:	f000 f80f 	bl	800cb48 <IntToUnicode>
  }
}
 800cb2a:	bf00      	nop
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	1ffff7e8 	.word	0x1ffff7e8
 800cb38:	1ffff7ec 	.word	0x1ffff7ec
 800cb3c:	1ffff7f0 	.word	0x1ffff7f0
 800cb40:	20000166 	.word	0x20000166
 800cb44:	20000176 	.word	0x20000176

0800cb48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b087      	sub	sp, #28
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	4613      	mov	r3, r2
 800cb54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	75fb      	strb	r3, [r7, #23]
 800cb5e:	e027      	b.n	800cbb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	0f1b      	lsrs	r3, r3, #28
 800cb64:	2b09      	cmp	r3, #9
 800cb66:	d80b      	bhi.n	800cb80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	0f1b      	lsrs	r3, r3, #28
 800cb6c:	b2da      	uxtb	r2, r3
 800cb6e:	7dfb      	ldrb	r3, [r7, #23]
 800cb70:	005b      	lsls	r3, r3, #1
 800cb72:	4619      	mov	r1, r3
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	440b      	add	r3, r1
 800cb78:	3230      	adds	r2, #48	; 0x30
 800cb7a:	b2d2      	uxtb	r2, r2
 800cb7c:	701a      	strb	r2, [r3, #0]
 800cb7e:	e00a      	b.n	800cb96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	0f1b      	lsrs	r3, r3, #28
 800cb84:	b2da      	uxtb	r2, r3
 800cb86:	7dfb      	ldrb	r3, [r7, #23]
 800cb88:	005b      	lsls	r3, r3, #1
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	440b      	add	r3, r1
 800cb90:	3237      	adds	r2, #55	; 0x37
 800cb92:	b2d2      	uxtb	r2, r2
 800cb94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	011b      	lsls	r3, r3, #4
 800cb9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cb9c:	7dfb      	ldrb	r3, [r7, #23]
 800cb9e:	005b      	lsls	r3, r3, #1
 800cba0:	3301      	adds	r3, #1
 800cba2:	68ba      	ldr	r2, [r7, #8]
 800cba4:	4413      	add	r3, r2
 800cba6:	2200      	movs	r2, #0
 800cba8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cbaa:	7dfb      	ldrb	r3, [r7, #23]
 800cbac:	3301      	adds	r3, #1
 800cbae:	75fb      	strb	r3, [r7, #23]
 800cbb0:	7dfa      	ldrb	r2, [r7, #23]
 800cbb2:	79fb      	ldrb	r3, [r7, #7]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d3d3      	bcc.n	800cb60 <IntToUnicode+0x18>
  }
}
 800cbb8:	bf00      	nop
 800cbba:	bf00      	nop
 800cbbc:	371c      	adds	r7, #28
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bc80      	pop	{r7}
 800cbc2:	4770      	bx	lr

0800cbc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a0d      	ldr	r2, [pc, #52]	; (800cc08 <HAL_PCD_MspInit+0x44>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d113      	bne.n	800cbfe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cbd6:	4b0d      	ldr	r3, [pc, #52]	; (800cc0c <HAL_PCD_MspInit+0x48>)
 800cbd8:	69db      	ldr	r3, [r3, #28]
 800cbda:	4a0c      	ldr	r2, [pc, #48]	; (800cc0c <HAL_PCD_MspInit+0x48>)
 800cbdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cbe0:	61d3      	str	r3, [r2, #28]
 800cbe2:	4b0a      	ldr	r3, [pc, #40]	; (800cc0c <HAL_PCD_MspInit+0x48>)
 800cbe4:	69db      	ldr	r3, [r3, #28]
 800cbe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cbea:	60fb      	str	r3, [r7, #12]
 800cbec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800cbee:	2200      	movs	r2, #0
 800cbf0:	2105      	movs	r1, #5
 800cbf2:	2014      	movs	r0, #20
 800cbf4:	f7f5 fb71 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cbf8:	2014      	movs	r0, #20
 800cbfa:	f7f5 fb8a 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cbfe:	bf00      	nop
 800cc00:	3710      	adds	r7, #16
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	40005c00 	.word	0x40005c00
 800cc0c:	40021000 	.word	0x40021000

0800cc10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cc24:	4619      	mov	r1, r3
 800cc26:	4610      	mov	r0, r2
 800cc28:	f7fc f8ec 	bl	8008e04 <USBD_LL_SetupStage>
}
 800cc2c:	bf00      	nop
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800cc46:	78fa      	ldrb	r2, [r7, #3]
 800cc48:	6879      	ldr	r1, [r7, #4]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4413      	add	r3, r2
 800cc50:	00db      	lsls	r3, r3, #3
 800cc52:	440b      	add	r3, r1
 800cc54:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	78fb      	ldrb	r3, [r7, #3]
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	f7fc f91e 	bl	8008e9e <USBD_LL_DataOutStage>
}
 800cc62:	bf00      	nop
 800cc64:	3708      	adds	r7, #8
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b082      	sub	sp, #8
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
 800cc72:	460b      	mov	r3, r1
 800cc74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800cc7c:	78fa      	ldrb	r2, [r7, #3]
 800cc7e:	6879      	ldr	r1, [r7, #4]
 800cc80:	4613      	mov	r3, r2
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4413      	add	r3, r2
 800cc86:	00db      	lsls	r3, r3, #3
 800cc88:	440b      	add	r3, r1
 800cc8a:	333c      	adds	r3, #60	; 0x3c
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	78fb      	ldrb	r3, [r7, #3]
 800cc90:	4619      	mov	r1, r3
 800cc92:	f7fc f975 	bl	8008f80 <USBD_LL_DataInStage>
}
 800cc96:	bf00      	nop
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b082      	sub	sp, #8
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fc fa85 	bl	80091bc <USBD_LL_SOF>
}
 800ccb2:	bf00      	nop
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b084      	sub	sp, #16
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d001      	beq.n	800ccd2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ccce:	f7f4 fb55 	bl	800137c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ccd8:	7bfa      	ldrb	r2, [r7, #15]
 800ccda:	4611      	mov	r1, r2
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7fc fa35 	bl	800914c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7fc f9ee 	bl	80090ca <USBD_LL_Reset>
}
 800ccee:	bf00      	nop
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
	...

0800ccf8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7fc fa2f 	bl	800916a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	699b      	ldr	r3, [r3, #24]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d005      	beq.n	800cd20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd14:	4b04      	ldr	r3, [pc, #16]	; (800cd28 <HAL_PCD_SuspendCallback+0x30>)
 800cd16:	691b      	ldr	r3, [r3, #16]
 800cd18:	4a03      	ldr	r2, [pc, #12]	; (800cd28 <HAL_PCD_SuspendCallback+0x30>)
 800cd1a:	f043 0306 	orr.w	r3, r3, #6
 800cd1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cd20:	bf00      	nop
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	e000ed00 	.word	0xe000ed00

0800cd2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7fc fa29 	bl	8009192 <USBD_LL_Resume>
}
 800cd40:	bf00      	nop
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cd50:	4a28      	ldr	r2, [pc, #160]	; (800cdf4 <USBD_LL_Init+0xac>)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4a26      	ldr	r2, [pc, #152]	; (800cdf4 <USBD_LL_Init+0xac>)
 800cd5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cd60:	4b24      	ldr	r3, [pc, #144]	; (800cdf4 <USBD_LL_Init+0xac>)
 800cd62:	4a25      	ldr	r2, [pc, #148]	; (800cdf8 <USBD_LL_Init+0xb0>)
 800cd64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cd66:	4b23      	ldr	r3, [pc, #140]	; (800cdf4 <USBD_LL_Init+0xac>)
 800cd68:	2208      	movs	r2, #8
 800cd6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cd6c:	4b21      	ldr	r3, [pc, #132]	; (800cdf4 <USBD_LL_Init+0xac>)
 800cd6e:	2202      	movs	r2, #2
 800cd70:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cd72:	4b20      	ldr	r3, [pc, #128]	; (800cdf4 <USBD_LL_Init+0xac>)
 800cd74:	2200      	movs	r2, #0
 800cd76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cd78:	4b1e      	ldr	r3, [pc, #120]	; (800cdf4 <USBD_LL_Init+0xac>)
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cd7e:	4b1d      	ldr	r3, [pc, #116]	; (800cdf4 <USBD_LL_Init+0xac>)
 800cd80:	2200      	movs	r2, #0
 800cd82:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cd84:	481b      	ldr	r0, [pc, #108]	; (800cdf4 <USBD_LL_Init+0xac>)
 800cd86:	f7f5 ffd1 	bl	8002d2c <HAL_PCD_Init>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d001      	beq.n	800cd94 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cd90:	f7f4 faf4 	bl	800137c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd9a:	2318      	movs	r3, #24
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	2100      	movs	r1, #0
 800cda0:	f7f7 fcf0 	bl	8004784 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cdaa:	2358      	movs	r3, #88	; 0x58
 800cdac:	2200      	movs	r2, #0
 800cdae:	2180      	movs	r1, #128	; 0x80
 800cdb0:	f7f7 fce8 	bl	8004784 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cdba:	23c0      	movs	r3, #192	; 0xc0
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	2181      	movs	r1, #129	; 0x81
 800cdc0:	f7f7 fce0 	bl	8004784 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cdca:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cdce:	2200      	movs	r2, #0
 800cdd0:	2101      	movs	r1, #1
 800cdd2:	f7f7 fcd7 	bl	8004784 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cde0:	2200      	movs	r2, #0
 800cde2:	2182      	movs	r1, #130	; 0x82
 800cde4:	f7f7 fcce 	bl	8004784 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3708      	adds	r7, #8
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	20002ea8 	.word	0x20002ea8
 800cdf8:	40005c00 	.word	0x40005c00

0800cdfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce04:	2300      	movs	r3, #0
 800ce06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7f6 f889 	bl	8002f2a <HAL_PCD_Start>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f000 f94e 	bl	800d0c0 <USBD_Get_USB_Status>
 800ce24:	4603      	mov	r3, r0
 800ce26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b084      	sub	sp, #16
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
 800ce3a:	4608      	mov	r0, r1
 800ce3c:	4611      	mov	r1, r2
 800ce3e:	461a      	mov	r2, r3
 800ce40:	4603      	mov	r3, r0
 800ce42:	70fb      	strb	r3, [r7, #3]
 800ce44:	460b      	mov	r3, r1
 800ce46:	70bb      	strb	r3, [r7, #2]
 800ce48:	4613      	mov	r3, r2
 800ce4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce50:	2300      	movs	r3, #0
 800ce52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce5a:	78bb      	ldrb	r3, [r7, #2]
 800ce5c:	883a      	ldrh	r2, [r7, #0]
 800ce5e:	78f9      	ldrb	r1, [r7, #3]
 800ce60:	f7f6 f9de 	bl	8003220 <HAL_PCD_EP_Open>
 800ce64:	4603      	mov	r3, r0
 800ce66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce68:	7bfb      	ldrb	r3, [r7, #15]
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f000 f928 	bl	800d0c0 <USBD_Get_USB_Status>
 800ce70:	4603      	mov	r3, r0
 800ce72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b084      	sub	sp, #16
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
 800ce86:	460b      	mov	r3, r1
 800ce88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce98:	78fa      	ldrb	r2, [r7, #3]
 800ce9a:	4611      	mov	r1, r2
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7f6 fa1c 	bl	80032da <HAL_PCD_EP_Close>
 800cea2:	4603      	mov	r3, r0
 800cea4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f000 f909 	bl	800d0c0 <USBD_Get_USB_Status>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ceb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	460b      	mov	r3, r1
 800cec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cec8:	2300      	movs	r3, #0
 800ceca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cecc:	2300      	movs	r3, #0
 800cece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ced6:	78fa      	ldrb	r2, [r7, #3]
 800ced8:	4611      	mov	r1, r2
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7f6 fac4 	bl	8003468 <HAL_PCD_EP_SetStall>
 800cee0:	4603      	mov	r3, r0
 800cee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cee4:	7bfb      	ldrb	r3, [r7, #15]
 800cee6:	4618      	mov	r0, r3
 800cee8:	f000 f8ea 	bl	800d0c0 <USBD_Get_USB_Status>
 800ceec:	4603      	mov	r3, r0
 800ceee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cef0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b084      	sub	sp, #16
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
 800cf02:	460b      	mov	r3, r1
 800cf04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf06:	2300      	movs	r3, #0
 800cf08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf14:	78fa      	ldrb	r2, [r7, #3]
 800cf16:	4611      	mov	r1, r2
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7f6 fb05 	bl	8003528 <HAL_PCD_EP_ClrStall>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf22:	7bfb      	ldrb	r3, [r7, #15]
 800cf24:	4618      	mov	r0, r3
 800cf26:	f000 f8cb 	bl	800d0c0 <USBD_Get_USB_Status>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3710      	adds	r7, #16
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	460b      	mov	r3, r1
 800cf42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	da0c      	bge.n	800cf6e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cf54:	78fb      	ldrb	r3, [r7, #3]
 800cf56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf5a:	68f9      	ldr	r1, [r7, #12]
 800cf5c:	1c5a      	adds	r2, r3, #1
 800cf5e:	4613      	mov	r3, r2
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	4413      	add	r3, r2
 800cf64:	00db      	lsls	r3, r3, #3
 800cf66:	440b      	add	r3, r1
 800cf68:	3302      	adds	r3, #2
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	e00b      	b.n	800cf86 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf6e:	78fb      	ldrb	r3, [r7, #3]
 800cf70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf74:	68f9      	ldr	r1, [r7, #12]
 800cf76:	4613      	mov	r3, r2
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	4413      	add	r3, r2
 800cf7c:	00db      	lsls	r3, r3, #3
 800cf7e:	440b      	add	r3, r1
 800cf80:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cf84:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3714      	adds	r7, #20
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bc80      	pop	{r7}
 800cf8e:	4770      	bx	lr

0800cf90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	460b      	mov	r3, r1
 800cf9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfaa:	78fa      	ldrb	r2, [r7, #3]
 800cfac:	4611      	mov	r1, r2
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7f6 f911 	bl	80031d6 <HAL_PCD_SetAddress>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfb8:	7bfb      	ldrb	r3, [r7, #15]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f000 f880 	bl	800d0c0 <USBD_Get_USB_Status>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b086      	sub	sp, #24
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	60f8      	str	r0, [r7, #12]
 800cfd6:	607a      	str	r2, [r7, #4]
 800cfd8:	461a      	mov	r2, r3
 800cfda:	460b      	mov	r3, r1
 800cfdc:	72fb      	strb	r3, [r7, #11]
 800cfde:	4613      	mov	r3, r2
 800cfe0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cff0:	893b      	ldrh	r3, [r7, #8]
 800cff2:	7af9      	ldrb	r1, [r7, #11]
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	f7f6 fa00 	bl	80033fa <HAL_PCD_EP_Transmit>
 800cffa:	4603      	mov	r3, r0
 800cffc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cffe:	7dfb      	ldrb	r3, [r7, #23]
 800d000:	4618      	mov	r0, r3
 800d002:	f000 f85d 	bl	800d0c0 <USBD_Get_USB_Status>
 800d006:	4603      	mov	r3, r0
 800d008:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d00a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3718      	adds	r7, #24
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b086      	sub	sp, #24
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	607a      	str	r2, [r7, #4]
 800d01e:	461a      	mov	r2, r3
 800d020:	460b      	mov	r3, r1
 800d022:	72fb      	strb	r3, [r7, #11]
 800d024:	4613      	mov	r3, r2
 800d026:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d028:	2300      	movs	r3, #0
 800d02a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d02c:	2300      	movs	r3, #0
 800d02e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d036:	893b      	ldrh	r3, [r7, #8]
 800d038:	7af9      	ldrb	r1, [r7, #11]
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	f7f6 f995 	bl	800336a <HAL_PCD_EP_Receive>
 800d040:	4603      	mov	r3, r0
 800d042:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d044:	7dfb      	ldrb	r3, [r7, #23]
 800d046:	4618      	mov	r0, r3
 800d048:	f000 f83a 	bl	800d0c0 <USBD_Get_USB_Status>
 800d04c:	4603      	mov	r3, r0
 800d04e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d050:	7dbb      	ldrb	r3, [r7, #22]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3718      	adds	r7, #24
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b082      	sub	sp, #8
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	460b      	mov	r3, r1
 800d064:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d06c:	78fa      	ldrb	r2, [r7, #3]
 800d06e:	4611      	mov	r1, r2
 800d070:	4618      	mov	r0, r3
 800d072:	f7f6 f9ab 	bl	80033cc <HAL_PCD_EP_GetRxCount>
 800d076:	4603      	mov	r3, r0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3708      	adds	r7, #8
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d080:	b480      	push	{r7}
 800d082:	b083      	sub	sp, #12
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d088:	4b02      	ldr	r3, [pc, #8]	; (800d094 <USBD_static_malloc+0x14>)
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	370c      	adds	r7, #12
 800d08e:	46bd      	mov	sp, r7
 800d090:	bc80      	pop	{r7}
 800d092:	4770      	bx	lr
 800d094:	20003198 	.word	0x20003198

0800d098 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]

}
 800d0a0:	bf00      	nop
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bc80      	pop	{r7}
 800d0a8:	4770      	bx	lr

0800d0aa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0aa:	b480      	push	{r7}
 800d0ac:	b083      	sub	sp, #12
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d0b6:	bf00      	nop
 800d0b8:	370c      	adds	r7, #12
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bc80      	pop	{r7}
 800d0be:	4770      	bx	lr

0800d0c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d0ce:	79fb      	ldrb	r3, [r7, #7]
 800d0d0:	2b03      	cmp	r3, #3
 800d0d2:	d817      	bhi.n	800d104 <USBD_Get_USB_Status+0x44>
 800d0d4:	a201      	add	r2, pc, #4	; (adr r2, 800d0dc <USBD_Get_USB_Status+0x1c>)
 800d0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0da:	bf00      	nop
 800d0dc:	0800d0ed 	.word	0x0800d0ed
 800d0e0:	0800d0f3 	.word	0x0800d0f3
 800d0e4:	0800d0f9 	.word	0x0800d0f9
 800d0e8:	0800d0ff 	.word	0x0800d0ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d0f0:	e00b      	b.n	800d10a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d0f2:	2302      	movs	r3, #2
 800d0f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d0f6:	e008      	b.n	800d10a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d0fc:	e005      	b.n	800d10a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0fe:	2302      	movs	r3, #2
 800d100:	73fb      	strb	r3, [r7, #15]
    break;
 800d102:	e002      	b.n	800d10a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d104:	2302      	movs	r3, #2
 800d106:	73fb      	strb	r3, [r7, #15]
    break;
 800d108:	bf00      	nop
  }
  return usb_status;
 800d10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3714      	adds	r7, #20
 800d110:	46bd      	mov	sp, r7
 800d112:	bc80      	pop	{r7}
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop

0800d118 <memset>:
 800d118:	4603      	mov	r3, r0
 800d11a:	4402      	add	r2, r0
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d100      	bne.n	800d122 <memset+0xa>
 800d120:	4770      	bx	lr
 800d122:	f803 1b01 	strb.w	r1, [r3], #1
 800d126:	e7f9      	b.n	800d11c <memset+0x4>

0800d128 <_reclaim_reent>:
 800d128:	4b29      	ldr	r3, [pc, #164]	; (800d1d0 <_reclaim_reent+0xa8>)
 800d12a:	b570      	push	{r4, r5, r6, lr}
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4604      	mov	r4, r0
 800d130:	4283      	cmp	r3, r0
 800d132:	d04b      	beq.n	800d1cc <_reclaim_reent+0xa4>
 800d134:	69c3      	ldr	r3, [r0, #28]
 800d136:	b143      	cbz	r3, 800d14a <_reclaim_reent+0x22>
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d144      	bne.n	800d1c8 <_reclaim_reent+0xa0>
 800d13e:	69e3      	ldr	r3, [r4, #28]
 800d140:	6819      	ldr	r1, [r3, #0]
 800d142:	b111      	cbz	r1, 800d14a <_reclaim_reent+0x22>
 800d144:	4620      	mov	r0, r4
 800d146:	f000 f879 	bl	800d23c <_free_r>
 800d14a:	6961      	ldr	r1, [r4, #20]
 800d14c:	b111      	cbz	r1, 800d154 <_reclaim_reent+0x2c>
 800d14e:	4620      	mov	r0, r4
 800d150:	f000 f874 	bl	800d23c <_free_r>
 800d154:	69e1      	ldr	r1, [r4, #28]
 800d156:	b111      	cbz	r1, 800d15e <_reclaim_reent+0x36>
 800d158:	4620      	mov	r0, r4
 800d15a:	f000 f86f 	bl	800d23c <_free_r>
 800d15e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d160:	b111      	cbz	r1, 800d168 <_reclaim_reent+0x40>
 800d162:	4620      	mov	r0, r4
 800d164:	f000 f86a 	bl	800d23c <_free_r>
 800d168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d16a:	b111      	cbz	r1, 800d172 <_reclaim_reent+0x4a>
 800d16c:	4620      	mov	r0, r4
 800d16e:	f000 f865 	bl	800d23c <_free_r>
 800d172:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d174:	b111      	cbz	r1, 800d17c <_reclaim_reent+0x54>
 800d176:	4620      	mov	r0, r4
 800d178:	f000 f860 	bl	800d23c <_free_r>
 800d17c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d17e:	b111      	cbz	r1, 800d186 <_reclaim_reent+0x5e>
 800d180:	4620      	mov	r0, r4
 800d182:	f000 f85b 	bl	800d23c <_free_r>
 800d186:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d188:	b111      	cbz	r1, 800d190 <_reclaim_reent+0x68>
 800d18a:	4620      	mov	r0, r4
 800d18c:	f000 f856 	bl	800d23c <_free_r>
 800d190:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d192:	b111      	cbz	r1, 800d19a <_reclaim_reent+0x72>
 800d194:	4620      	mov	r0, r4
 800d196:	f000 f851 	bl	800d23c <_free_r>
 800d19a:	6a23      	ldr	r3, [r4, #32]
 800d19c:	b1b3      	cbz	r3, 800d1cc <_reclaim_reent+0xa4>
 800d19e:	4620      	mov	r0, r4
 800d1a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1a4:	4718      	bx	r3
 800d1a6:	5949      	ldr	r1, [r1, r5]
 800d1a8:	b941      	cbnz	r1, 800d1bc <_reclaim_reent+0x94>
 800d1aa:	3504      	adds	r5, #4
 800d1ac:	69e3      	ldr	r3, [r4, #28]
 800d1ae:	2d80      	cmp	r5, #128	; 0x80
 800d1b0:	68d9      	ldr	r1, [r3, #12]
 800d1b2:	d1f8      	bne.n	800d1a6 <_reclaim_reent+0x7e>
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f000 f841 	bl	800d23c <_free_r>
 800d1ba:	e7c0      	b.n	800d13e <_reclaim_reent+0x16>
 800d1bc:	680e      	ldr	r6, [r1, #0]
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f000 f83c 	bl	800d23c <_free_r>
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	e7ef      	b.n	800d1a8 <_reclaim_reent+0x80>
 800d1c8:	2500      	movs	r5, #0
 800d1ca:	e7ef      	b.n	800d1ac <_reclaim_reent+0x84>
 800d1cc:	bd70      	pop	{r4, r5, r6, pc}
 800d1ce:	bf00      	nop
 800d1d0:	200001cc 	.word	0x200001cc

0800d1d4 <__libc_init_array>:
 800d1d4:	b570      	push	{r4, r5, r6, lr}
 800d1d6:	2600      	movs	r6, #0
 800d1d8:	4d0c      	ldr	r5, [pc, #48]	; (800d20c <__libc_init_array+0x38>)
 800d1da:	4c0d      	ldr	r4, [pc, #52]	; (800d210 <__libc_init_array+0x3c>)
 800d1dc:	1b64      	subs	r4, r4, r5
 800d1de:	10a4      	asrs	r4, r4, #2
 800d1e0:	42a6      	cmp	r6, r4
 800d1e2:	d109      	bne.n	800d1f8 <__libc_init_array+0x24>
 800d1e4:	f000 f87e 	bl	800d2e4 <_init>
 800d1e8:	2600      	movs	r6, #0
 800d1ea:	4d0a      	ldr	r5, [pc, #40]	; (800d214 <__libc_init_array+0x40>)
 800d1ec:	4c0a      	ldr	r4, [pc, #40]	; (800d218 <__libc_init_array+0x44>)
 800d1ee:	1b64      	subs	r4, r4, r5
 800d1f0:	10a4      	asrs	r4, r4, #2
 800d1f2:	42a6      	cmp	r6, r4
 800d1f4:	d105      	bne.n	800d202 <__libc_init_array+0x2e>
 800d1f6:	bd70      	pop	{r4, r5, r6, pc}
 800d1f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1fc:	4798      	blx	r3
 800d1fe:	3601      	adds	r6, #1
 800d200:	e7ee      	b.n	800d1e0 <__libc_init_array+0xc>
 800d202:	f855 3b04 	ldr.w	r3, [r5], #4
 800d206:	4798      	blx	r3
 800d208:	3601      	adds	r6, #1
 800d20a:	e7f2      	b.n	800d1f2 <__libc_init_array+0x1e>
 800d20c:	0800d3f0 	.word	0x0800d3f0
 800d210:	0800d3f0 	.word	0x0800d3f0
 800d214:	0800d3f0 	.word	0x0800d3f0
 800d218:	0800d3f4 	.word	0x0800d3f4

0800d21c <__retarget_lock_acquire_recursive>:
 800d21c:	4770      	bx	lr

0800d21e <__retarget_lock_release_recursive>:
 800d21e:	4770      	bx	lr

0800d220 <memcpy>:
 800d220:	440a      	add	r2, r1
 800d222:	4291      	cmp	r1, r2
 800d224:	f100 33ff 	add.w	r3, r0, #4294967295
 800d228:	d100      	bne.n	800d22c <memcpy+0xc>
 800d22a:	4770      	bx	lr
 800d22c:	b510      	push	{r4, lr}
 800d22e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d232:	4291      	cmp	r1, r2
 800d234:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d238:	d1f9      	bne.n	800d22e <memcpy+0xe>
 800d23a:	bd10      	pop	{r4, pc}

0800d23c <_free_r>:
 800d23c:	b538      	push	{r3, r4, r5, lr}
 800d23e:	4605      	mov	r5, r0
 800d240:	2900      	cmp	r1, #0
 800d242:	d040      	beq.n	800d2c6 <_free_r+0x8a>
 800d244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d248:	1f0c      	subs	r4, r1, #4
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	bfb8      	it	lt
 800d24e:	18e4      	addlt	r4, r4, r3
 800d250:	f000 f83c 	bl	800d2cc <__malloc_lock>
 800d254:	4a1c      	ldr	r2, [pc, #112]	; (800d2c8 <_free_r+0x8c>)
 800d256:	6813      	ldr	r3, [r2, #0]
 800d258:	b933      	cbnz	r3, 800d268 <_free_r+0x2c>
 800d25a:	6063      	str	r3, [r4, #4]
 800d25c:	6014      	str	r4, [r2, #0]
 800d25e:	4628      	mov	r0, r5
 800d260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d264:	f000 b838 	b.w	800d2d8 <__malloc_unlock>
 800d268:	42a3      	cmp	r3, r4
 800d26a:	d908      	bls.n	800d27e <_free_r+0x42>
 800d26c:	6820      	ldr	r0, [r4, #0]
 800d26e:	1821      	adds	r1, r4, r0
 800d270:	428b      	cmp	r3, r1
 800d272:	bf01      	itttt	eq
 800d274:	6819      	ldreq	r1, [r3, #0]
 800d276:	685b      	ldreq	r3, [r3, #4]
 800d278:	1809      	addeq	r1, r1, r0
 800d27a:	6021      	streq	r1, [r4, #0]
 800d27c:	e7ed      	b.n	800d25a <_free_r+0x1e>
 800d27e:	461a      	mov	r2, r3
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	b10b      	cbz	r3, 800d288 <_free_r+0x4c>
 800d284:	42a3      	cmp	r3, r4
 800d286:	d9fa      	bls.n	800d27e <_free_r+0x42>
 800d288:	6811      	ldr	r1, [r2, #0]
 800d28a:	1850      	adds	r0, r2, r1
 800d28c:	42a0      	cmp	r0, r4
 800d28e:	d10b      	bne.n	800d2a8 <_free_r+0x6c>
 800d290:	6820      	ldr	r0, [r4, #0]
 800d292:	4401      	add	r1, r0
 800d294:	1850      	adds	r0, r2, r1
 800d296:	4283      	cmp	r3, r0
 800d298:	6011      	str	r1, [r2, #0]
 800d29a:	d1e0      	bne.n	800d25e <_free_r+0x22>
 800d29c:	6818      	ldr	r0, [r3, #0]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	4408      	add	r0, r1
 800d2a2:	6010      	str	r0, [r2, #0]
 800d2a4:	6053      	str	r3, [r2, #4]
 800d2a6:	e7da      	b.n	800d25e <_free_r+0x22>
 800d2a8:	d902      	bls.n	800d2b0 <_free_r+0x74>
 800d2aa:	230c      	movs	r3, #12
 800d2ac:	602b      	str	r3, [r5, #0]
 800d2ae:	e7d6      	b.n	800d25e <_free_r+0x22>
 800d2b0:	6820      	ldr	r0, [r4, #0]
 800d2b2:	1821      	adds	r1, r4, r0
 800d2b4:	428b      	cmp	r3, r1
 800d2b6:	bf01      	itttt	eq
 800d2b8:	6819      	ldreq	r1, [r3, #0]
 800d2ba:	685b      	ldreq	r3, [r3, #4]
 800d2bc:	1809      	addeq	r1, r1, r0
 800d2be:	6021      	streq	r1, [r4, #0]
 800d2c0:	6063      	str	r3, [r4, #4]
 800d2c2:	6054      	str	r4, [r2, #4]
 800d2c4:	e7cb      	b.n	800d25e <_free_r+0x22>
 800d2c6:	bd38      	pop	{r3, r4, r5, pc}
 800d2c8:	200034f4 	.word	0x200034f4

0800d2cc <__malloc_lock>:
 800d2cc:	4801      	ldr	r0, [pc, #4]	; (800d2d4 <__malloc_lock+0x8>)
 800d2ce:	f7ff bfa5 	b.w	800d21c <__retarget_lock_acquire_recursive>
 800d2d2:	bf00      	nop
 800d2d4:	200034f0 	.word	0x200034f0

0800d2d8 <__malloc_unlock>:
 800d2d8:	4801      	ldr	r0, [pc, #4]	; (800d2e0 <__malloc_unlock+0x8>)
 800d2da:	f7ff bfa0 	b.w	800d21e <__retarget_lock_release_recursive>
 800d2de:	bf00      	nop
 800d2e0:	200034f0 	.word	0x200034f0

0800d2e4 <_init>:
 800d2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e6:	bf00      	nop
 800d2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ea:	bc08      	pop	{r3}
 800d2ec:	469e      	mov	lr, r3
 800d2ee:	4770      	bx	lr

0800d2f0 <_fini>:
 800d2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f2:	bf00      	nop
 800d2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2f6:	bc08      	pop	{r3}
 800d2f8:	469e      	mov	lr, r3
 800d2fa:	4770      	bx	lr
