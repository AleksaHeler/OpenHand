
OpenHandFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc28  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800dd38  0800dd38  0001dd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de68  0800de68  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800de68  0800de68  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de68  0800de68  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de68  0800de68  0001de68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de6c  0800de6c  0001de6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800de70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000334c  200001d0  0800e040  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000351c  0800e040  0002351c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024691  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052c0  00000000  00000000  000448cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e18  00000000  00000000  00049b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000175c  00000000  00000000  0004b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006893  00000000  00000000  0004d104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000257c1  00000000  00000000  00053997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1222  00000000  00000000  00079158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000084d8  00000000  00000000  0011a37c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00122854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800dd20 	.word	0x0800dd20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800dd20 	.word	0x0800dd20

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <main_f_Init_v>:
/**
 *  @todo Description
 *  @note Called once during boot
 */
void main_f_Init_v(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* Start all PWM channels */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000940:	2100      	movs	r1, #0
 8000942:	4811      	ldr	r0, [pc, #68]	; (8000988 <main_f_Init_v+0x4c>)
 8000944:	f004 fdf4 	bl	8005530 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000948:	2104      	movs	r1, #4
 800094a:	480f      	ldr	r0, [pc, #60]	; (8000988 <main_f_Init_v+0x4c>)
 800094c:	f004 fdf0 	bl	8005530 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000950:	2108      	movs	r1, #8
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <main_f_Init_v+0x4c>)
 8000954:	f004 fdec 	bl	8005530 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000958:	2100      	movs	r1, #0
 800095a:	480c      	ldr	r0, [pc, #48]	; (800098c <main_f_Init_v+0x50>)
 800095c:	f004 fde8 	bl	8005530 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000960:	2108      	movs	r1, #8
 8000962:	480a      	ldr	r0, [pc, #40]	; (800098c <main_f_Init_v+0x50>)
 8000964:	f004 fde4 	bl	8005530 <HAL_TIM_PWM_Start>

  // Read user button, if it's high, go to EMG mode
  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	4809      	ldr	r0, [pc, #36]	; (8000990 <main_f_Init_v+0x54>)
 800096c:	f002 f8f4 	bl	8002b58 <HAL_GPIO_ReadPin>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d103      	bne.n	800097e <main_f_Init_v+0x42>
  {
  my_mode = 1;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <main_f_Init_v+0x58>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]
  }
  else
  {
  my_mode = 0;
  }
}
 800097c:	e002      	b.n	8000984 <main_f_Init_v+0x48>
  my_mode = 0;
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <main_f_Init_v+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200002b4 	.word	0x200002b4
 800098c:	200002fc 	.word	0x200002fc
 8000990:	40010c00 	.word	0x40010c00
 8000994:	20000798 	.word	0x20000798

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099c:	f001 f896 	bl	8001acc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a0:	f000 f834 	bl	8000a0c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a4:	f000 faa6 	bl	8000ef4 <MX_GPIO_Init>
  MX_DMA_Init();
 80009a8:	f000 fa86 	bl	8000eb8 <MX_DMA_Init>
  MX_I2C1_Init();
 80009ac:	f000 f92e 	bl	8000c0c <MX_I2C1_Init>
  MX_ADC1_Init();
 80009b0:	f000 f88a 	bl	8000ac8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80009b4:	f000 fa56 	bl	8000e64 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80009b8:	f000 f956 	bl	8000c68 <MX_TIM1_Init>
  MX_TIM3_Init();
 80009bc:	f000 f9ee 	bl	8000d9c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  main_f_Init_v();
 80009c0:	f7ff ffbc 	bl	800093c <main_f_Init_v>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009c4:	f009 fafe 	bl	8009fc4 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of hand_control */
  hand_controlHandle = osThreadNew(hand_control_function, NULL, &hand_control_attributes);
 80009c8:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <main+0x5c>)
 80009ca:	2100      	movs	r1, #0
 80009cc:	480a      	ldr	r0, [pc, #40]	; (80009f8 <main+0x60>)
 80009ce:	f009 fb5f 	bl	800a090 <osThreadNew>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a09      	ldr	r2, [pc, #36]	; (80009fc <main+0x64>)
 80009d6:	6013      	str	r3, [r2, #0]

  /* creation of system_health */
  system_healthHandle = osThreadNew(system_health_function, NULL, &system_health_attributes);
 80009d8:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <main+0x68>)
 80009da:	2100      	movs	r1, #0
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <main+0x6c>)
 80009de:	f009 fb57 	bl	800a090 <osThreadNew>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <main+0x70>)
 80009e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009e8:	f009 fb1e 	bl	800a028 <osKernelStart>
 80009ec:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	0800ddc0 	.word	0x0800ddc0
 80009f8:	08001071 	.word	0x08001071
 80009fc:	2000038c 	.word	0x2000038c
 8000a00:	0800dde4 	.word	0x0800dde4
 8000a04:	08001411 	.word	0x08001411
 8000a08:	20000390 	.word	0x20000390

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b094      	sub	sp, #80	; 0x50
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a16:	2228      	movs	r2, #40	; 0x28
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00c fc98 	bl	800d350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000a46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a50:	2302      	movs	r3, #2
 8000a52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a5a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 ff71 	bl	800494c <HAL_RCC_OscConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a70:	f000 fcf0 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a74:	230f      	movs	r3, #15
 8000a76:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a84:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	2102      	movs	r1, #2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f004 f9dd 	bl	8004e50 <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a9c:	f000 fcda 	bl	8001454 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000aa0:	2312      	movs	r3, #18
 8000aa2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000aa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aa8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f004 fb8d 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000abc:	f000 fcca 	bl	8001454 <Error_Handler>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3750      	adds	r7, #80	; 0x50
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ad8:	4b4a      	ldr	r3, [pc, #296]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000ada:	4a4b      	ldr	r2, [pc, #300]	; (8000c08 <MX_ADC1_Init+0x140>)
 8000adc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ade:	4b49      	ldr	r3, [pc, #292]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ae6:	4b47      	ldr	r3, [pc, #284]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aec:	4b45      	ldr	r3, [pc, #276]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af2:	4b44      	ldr	r3, [pc, #272]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000af4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000af8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000afa:	4b42      	ldr	r3, [pc, #264]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000b00:	4b40      	ldr	r3, [pc, #256]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000b02:	2208      	movs	r2, #8
 8000b04:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b06:	483f      	ldr	r0, [pc, #252]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000b08:	f001 f812 	bl	8001b30 <HAL_ADC_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b12:	f000 fc9f 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	4837      	ldr	r0, [pc, #220]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000b28:	f001 f9ca 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b32:	f000 fc8f 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4830      	ldr	r0, [pc, #192]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000b44:	f001 f9bc 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000b4e:	f000 fc81 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b52:	2303      	movs	r3, #3
 8000b54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b56:	2303      	movs	r3, #3
 8000b58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4829      	ldr	r0, [pc, #164]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000b60:	f001 f9ae 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000b6a:	f000 fc73 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b72:	2304      	movs	r3, #4
 8000b74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4822      	ldr	r0, [pc, #136]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000b7c:	f001 f9a0 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000b86:	f000 fc65 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b8e:	2305      	movs	r3, #5
 8000b90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	4619      	mov	r1, r3
 8000b96:	481b      	ldr	r0, [pc, #108]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000b98:	f001 f992 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ba2:	f000 fc57 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ba6:	230b      	movs	r3, #11
 8000ba8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000baa:	2306      	movs	r3, #6
 8000bac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4814      	ldr	r0, [pc, #80]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000bb4:	f001 f984 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000bbe:	f000 fc49 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bc2:	230c      	movs	r3, #12
 8000bc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000bd0:	f001 f976 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000bda:	f000 fc3b 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000bde:	230d      	movs	r3, #13
 8000be0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000be2:	2308      	movs	r3, #8
 8000be4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4619      	mov	r1, r3
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <MX_ADC1_Init+0x13c>)
 8000bec:	f001 f968 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000bf6:	f000 fc2d 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200001ec 	.word	0x200001ec
 8000c08:	40012400 	.word	0x40012400

08000c0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_I2C1_Init+0x50>)
 8000c12:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <MX_I2C1_Init+0x54>)
 8000c14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_I2C1_Init+0x50>)
 8000c18:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <MX_I2C1_Init+0x58>)
 8000c1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_I2C1_Init+0x50>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_I2C1_Init+0x50>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_I2C1_Init+0x50>)
 8000c2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <MX_I2C1_Init+0x50>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_I2C1_Init+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <MX_I2C1_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_I2C1_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_I2C1_Init+0x50>)
 8000c4a:	f001 ffcd 	bl	8002be8 <HAL_I2C_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c54:	f000 fbfe 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000260 	.word	0x20000260
 8000c60:	40005400 	.word	0x40005400
 8000c64:	000186a0 	.word	0x000186a0

08000c68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b092      	sub	sp, #72	; 0x48
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2220      	movs	r2, #32
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f00c fb5c 	bl	800d350 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c98:	4b3e      	ldr	r3, [pc, #248]	; (8000d94 <MX_TIM1_Init+0x12c>)
 8000c9a:	4a3f      	ldr	r2, [pc, #252]	; (8000d98 <MX_TIM1_Init+0x130>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000c9e:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <MX_TIM1_Init+0x12c>)
 8000ca0:	220f      	movs	r2, #15
 8000ca2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <MX_TIM1_Init+0x12c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000caa:	4b3a      	ldr	r3, [pc, #232]	; (8000d94 <MX_TIM1_Init+0x12c>)
 8000cac:	2263      	movs	r2, #99	; 0x63
 8000cae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b38      	ldr	r3, [pc, #224]	; (8000d94 <MX_TIM1_Init+0x12c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cb6:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <MX_TIM1_Init+0x12c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbc:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <MX_TIM1_Init+0x12c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cc2:	4834      	ldr	r0, [pc, #208]	; (8000d94 <MX_TIM1_Init+0x12c>)
 8000cc4:	f004 fbe4 	bl	8005490 <HAL_TIM_PWM_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000cce:	f000 fbc1 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cde:	4619      	mov	r1, r3
 8000ce0:	482c      	ldr	r0, [pc, #176]	; (8000d94 <MX_TIM1_Init+0x12c>)
 8000ce2:	f005 f8c3 	bl	8005e6c <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000cec:	f000 fbb2 	bl	8001454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf0:	2360      	movs	r3, #96	; 0x60
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	481f      	ldr	r0, [pc, #124]	; (8000d94 <MX_TIM1_Init+0x12c>)
 8000d16:	f004 fdb5 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000d20:	f000 fb98 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	2204      	movs	r2, #4
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4819      	ldr	r0, [pc, #100]	; (8000d94 <MX_TIM1_Init+0x12c>)
 8000d2e:	f004 fda9 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000d38:	f000 fb8c 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	2208      	movs	r2, #8
 8000d42:	4619      	mov	r1, r3
 8000d44:	4813      	ldr	r0, [pc, #76]	; (8000d94 <MX_TIM1_Init+0x12c>)
 8000d46:	f004 fd9d 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000d50:	f000 fb80 	bl	8001454 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4619      	mov	r1, r3
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <MX_TIM1_Init+0x12c>)
 8000d78:	f005 f8d6 	bl	8005f28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000d82:	f000 fb67 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d86:	4803      	ldr	r0, [pc, #12]	; (8000d94 <MX_TIM1_Init+0x12c>)
 8000d88:	f000 fca6 	bl	80016d8 <HAL_TIM_MspPostInit>

}
 8000d8c:	bf00      	nop
 8000d8e:	3748      	adds	r7, #72	; 0x48
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200002b4 	.word	0x200002b4
 8000d98:	40012c00 	.word	0x40012c00

08000d9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dbe:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <MX_TIM3_Init+0xc0>)
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <MX_TIM3_Init+0xc4>)
 8000dc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <MX_TIM3_Init+0xc0>)
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dca:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <MX_TIM3_Init+0xc0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <MX_TIM3_Init+0xc0>)
 8000dd2:	2263      	movs	r2, #99	; 0x63
 8000dd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_TIM3_Init+0xc0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_TIM3_Init+0xc0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000de2:	481e      	ldr	r0, [pc, #120]	; (8000e5c <MX_TIM3_Init+0xc0>)
 8000de4:	f004 fb54 	bl	8005490 <HAL_TIM_PWM_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000dee:	f000 fb31 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4816      	ldr	r0, [pc, #88]	; (8000e5c <MX_TIM3_Init+0xc0>)
 8000e02:	f005 f833 	bl	8005e6c <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000e0c:	f000 fb22 	bl	8001454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	4619      	mov	r1, r3
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <MX_TIM3_Init+0xc0>)
 8000e28:	f004 fd2c 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000e32:	f000 fb0f 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2208      	movs	r2, #8
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <MX_TIM3_Init+0xc0>)
 8000e3e:	f004 fd21 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e48:	f000 fb04 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <MX_TIM3_Init+0xc0>)
 8000e4e:	f000 fc43 	bl	80016d8 <HAL_TIM_MspPostInit>

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200002fc 	.word	0x200002fc
 8000e60:	40000400 	.word	0x40000400

08000e64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <MX_USART3_UART_Init+0x50>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e9c:	f005 f8a7 	bl	8005fee <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ea6:	f000 fad5 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000344 	.word	0x20000344
 8000eb4:	40004800 	.word	0x40004800

08000eb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_DMA_Init+0x38>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <MX_DMA_Init+0x38>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6153      	str	r3, [r2, #20]
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_DMA_Init+0x38>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2105      	movs	r1, #5
 8000eda:	200b      	movs	r0, #11
 8000edc:	f001 fa9f 	bl	800241e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ee0:	200b      	movs	r0, #11
 8000ee2:	f001 fab8 	bl	8002456 <HAL_NVIC_EnableIRQ>

}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f08:	4b4d      	ldr	r3, [pc, #308]	; (8001040 <MX_GPIO_Init+0x14c>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a4c      	ldr	r2, [pc, #304]	; (8001040 <MX_GPIO_Init+0x14c>)
 8000f0e:	f043 0320 	orr.w	r3, r3, #32
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b4a      	ldr	r3, [pc, #296]	; (8001040 <MX_GPIO_Init+0x14c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0320 	and.w	r3, r3, #32
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f20:	4b47      	ldr	r3, [pc, #284]	; (8001040 <MX_GPIO_Init+0x14c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a46      	ldr	r2, [pc, #280]	; (8001040 <MX_GPIO_Init+0x14c>)
 8000f26:	f043 0310 	orr.w	r3, r3, #16
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b44      	ldr	r3, [pc, #272]	; (8001040 <MX_GPIO_Init+0x14c>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b41      	ldr	r3, [pc, #260]	; (8001040 <MX_GPIO_Init+0x14c>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a40      	ldr	r2, [pc, #256]	; (8001040 <MX_GPIO_Init+0x14c>)
 8000f3e:	f043 0304 	orr.w	r3, r3, #4
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <MX_GPIO_Init+0x14c>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <MX_GPIO_Init+0x14c>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a3a      	ldr	r2, [pc, #232]	; (8001040 <MX_GPIO_Init+0x14c>)
 8000f56:	f043 0308 	orr.w	r3, r3, #8
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b38      	ldr	r3, [pc, #224]	; (8001040 <MX_GPIO_Init+0x14c>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0308 	and.w	r3, r3, #8
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HAPTIC_EN_GPIO_Port, HAPTIC_EN_Pin, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	4835      	ldr	r0, [pc, #212]	; (8001044 <MX_GPIO_Init+0x150>)
 8000f6e:	f001 fe0a 	bl	8002b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_01_EN_GPIO_Port, MOTOR_01_EN_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2120      	movs	r1, #32
 8000f76:	4834      	ldr	r0, [pc, #208]	; (8001048 <MX_GPIO_Init+0x154>)
 8000f78:	f001 fe05 	bl	8002b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_02_EN_Pin|MOTOR_03_EN_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f240 4102 	movw	r1, #1026	; 0x402
 8000f82:	4832      	ldr	r0, [pc, #200]	; (800104c <MX_GPIO_Init+0x158>)
 8000f84:	f001 fdff 	bl	8002b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HAPTIC_01_DIR_Pin|HAPTIC_02_DIR_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f24a 0160 	movw	r1, #41056	; 0xa060
 8000f8e:	482f      	ldr	r0, [pc, #188]	; (800104c <MX_GPIO_Init+0x158>)
 8000f90:	f001 fdf9 	bl	8002b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_01_DIR_Pin|MOTOR_02_DIR_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000f9a:	482b      	ldr	r0, [pc, #172]	; (8001048 <MX_GPIO_Init+0x154>)
 8000f9c:	f001 fdf3 	bl	8002b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_03_DIR_GPIO_Port, MOTOR_03_DIR_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa6:	4827      	ldr	r0, [pc, #156]	; (8001044 <MX_GPIO_Init+0x150>)
 8000fa8:	f001 fded 	bl	8002b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HAPTIC_EN_Pin MOTOR_03_DIR_Pin */
  GPIO_InitStruct.Pin = HAPTIC_EN_Pin|MOTOR_03_DIR_Pin;
 8000fac:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000fb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481f      	ldr	r0, [pc, #124]	; (8001044 <MX_GPIO_Init+0x150>)
 8000fc6:	f001 fc43 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : HAPTIC_FAULT_Pin */
  GPIO_InitStruct.Pin = HAPTIC_FAULT_Pin;
 8000fca:	2310      	movs	r3, #16
 8000fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HAPTIC_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	4619      	mov	r1, r3
 8000fdc:	481a      	ldr	r0, [pc, #104]	; (8001048 <MX_GPIO_Init+0x154>)
 8000fde:	f001 fc37 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_01_EN_Pin MOTOR_01_DIR_Pin MOTOR_02_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_01_EN_Pin|MOTOR_01_DIR_Pin|MOTOR_02_DIR_Pin;
 8000fe2:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4813      	ldr	r0, [pc, #76]	; (8001048 <MX_GPIO_Init+0x154>)
 8000ffc:	f001 fc28 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_01_FAULT_Pin MOTOR_02_FAULT_Pin MOTOR_03_FAULT_Pin BTN_01_Pin */
  GPIO_InitStruct.Pin = MOTOR_01_FAULT_Pin|MOTOR_02_FAULT_Pin|MOTOR_03_FAULT_Pin|BTN_01_Pin;
 8001000:	f640 0385 	movw	r3, #2181	; 0x885
 8001004:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	4619      	mov	r1, r3
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <MX_GPIO_Init+0x158>)
 8001016:	f001 fc1b 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_02_EN_Pin MOTOR_03_EN_Pin HAPTIC_01_DIR_Pin HAPTIC_02_DIR_Pin
                           LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = MOTOR_02_EN_Pin|MOTOR_03_EN_Pin|HAPTIC_01_DIR_Pin|HAPTIC_02_DIR_Pin
 800101a:	f24a 4362 	movw	r3, #42082	; 0xa462
 800101e:	613b      	str	r3, [r7, #16]
                          |LED_01_Pin|LED_02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2302      	movs	r3, #2
 800102a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <MX_GPIO_Init+0x158>)
 8001034:	f001 fc0c 	bl	8002850 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000
 8001044:	40010800 	.word	0x40010800
 8001048:	40011000 	.word	0x40011000
 800104c:	40010c00 	.word	0x40010c00

08001050 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  adcConversionComplete = 1;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_ADC_ConvCpltCallback+0x18>)
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	20000794 	.word	0x20000794
 800106c:	00000000 	.word	0x00000000

08001070 <hand_control_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_hand_control_function */
void hand_control_function(void *argument)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001078:	f00b fca8 	bl	800c9cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  char my_data[24];
  uint32_t last_10ms = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t i = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  double my_pwm = 0;
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // batt_f_Handle_v();
    // motor_f_Handle_v();

    /* All of this should be moved to separate drivers... */
    /* Firstly, ignore everything unless 10ms has passed, and it's our time to work */
    if(HAL_GetTick() - last_10ms > (10-1))
 8001090:	f000 fd44 	bl	8001b1c <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b09      	cmp	r3, #9
 800109c:	f240 81a0 	bls.w	80013e0 <hand_control_function+0x370>
    {
      last_10ms = HAL_GetTick();
 80010a0:	f000 fd3c 	bl	8001b1c <HAL_GetTick>
 80010a4:	62f8      	str	r0, [r7, #44]	; 0x2c
      ////////////////////////////////////////////////////////////////////////
      /// Initial handling of ADC inputs /////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////

      // Start ADC reading of all channels, to be stored via DMA - check if it should be done continuously
      HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultsDMA, adcChannelCount);
 80010a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010aa:	461a      	mov	r2, r3
 80010ac:	4982      	ldr	r1, [pc, #520]	; (80012b8 <hand_control_function+0x248>)
 80010ae:	4883      	ldr	r0, [pc, #524]	; (80012bc <hand_control_function+0x24c>)
 80010b0:	f000 fe16 	bl	8001ce0 <HAL_ADC_Start_DMA>
      // Wait for that to finish - not necessary I think
      // while(adcConversionComplete == 0) {}
      // adcConversionComplete = 0;

      // Store all ADC results in global vars
      my_pot_1 = adcResultsDMA[0][0];
 80010b4:	4b80      	ldr	r3, [pc, #512]	; (80012b8 <hand_control_function+0x248>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b80      	ldr	r3, [pc, #512]	; (80012c0 <hand_control_function+0x250>)
 80010be:	601a      	str	r2, [r3, #0]
      my_pot_2 = adcResultsDMA[0][1];
 80010c0:	4b7d      	ldr	r3, [pc, #500]	; (80012b8 <hand_control_function+0x248>)
 80010c2:	885b      	ldrh	r3, [r3, #2]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b7e      	ldr	r3, [pc, #504]	; (80012c4 <hand_control_function+0x254>)
 80010ca:	601a      	str	r2, [r3, #0]
      my_emg_1 = adcResultsDMA[0][2];
 80010cc:	4b7a      	ldr	r3, [pc, #488]	; (80012b8 <hand_control_function+0x248>)
 80010ce:	889b      	ldrh	r3, [r3, #4]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b7c      	ldr	r3, [pc, #496]	; (80012c8 <hand_control_function+0x258>)
 80010d6:	601a      	str	r2, [r3, #0]
      my_emg_2 = adcResultsDMA[0][3];
 80010d8:	4b77      	ldr	r3, [pc, #476]	; (80012b8 <hand_control_function+0x248>)
 80010da:	88db      	ldrh	r3, [r3, #6]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	461a      	mov	r2, r3
 80010e0:	4b7a      	ldr	r3, [pc, #488]	; (80012cc <hand_control_function+0x25c>)
 80010e2:	601a      	str	r2, [r3, #0]
      my_batt = adcResultsDMA[0][4];
 80010e4:	4b74      	ldr	r3, [pc, #464]	; (80012b8 <hand_control_function+0x248>)
 80010e6:	891b      	ldrh	r3, [r3, #8]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b78      	ldr	r3, [pc, #480]	; (80012d0 <hand_control_function+0x260>)
 80010ee:	601a      	str	r2, [r3, #0]
      my_hall_1 = adcResultsDMA[0][5];
 80010f0:	4b71      	ldr	r3, [pc, #452]	; (80012b8 <hand_control_function+0x248>)
 80010f2:	895b      	ldrh	r3, [r3, #10]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b76      	ldr	r3, [pc, #472]	; (80012d4 <hand_control_function+0x264>)
 80010fa:	601a      	str	r2, [r3, #0]
      my_hall_2 = adcResultsDMA[0][6];
 80010fc:	4b6e      	ldr	r3, [pc, #440]	; (80012b8 <hand_control_function+0x248>)
 80010fe:	899b      	ldrh	r3, [r3, #12]
 8001100:	b29b      	uxth	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	4b74      	ldr	r3, [pc, #464]	; (80012d8 <hand_control_function+0x268>)
 8001106:	601a      	str	r2, [r3, #0]
      my_hall_3 = adcResultsDMA[0][7];
 8001108:	4b6b      	ldr	r3, [pc, #428]	; (80012b8 <hand_control_function+0x248>)
 800110a:	89db      	ldrh	r3, [r3, #14]
 800110c:	b29b      	uxth	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	4b72      	ldr	r3, [pc, #456]	; (80012dc <hand_control_function+0x26c>)
 8001112:	601a      	str	r2, [r3, #0]

      my_batt_volt = ( ( (my_batt / 4096.0) * 3.3 ) * 5.7 ); // 47k and 10k voltage divider -> 5.7 factor
 8001114:	4b6e      	ldr	r3, [pc, #440]	; (80012d0 <hand_control_function+0x260>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f963 	bl	80003e4 <__aeabi_ui2d>
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b6f      	ldr	r3, [pc, #444]	; (80012e0 <hand_control_function+0x270>)
 8001124:	f7ff fb02 	bl	800072c <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	a35b      	add	r3, pc, #364	; (adr r3, 80012a0 <hand_control_function+0x230>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff f9cf 	bl	80004d8 <__aeabi_dmul>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	a359      	add	r3, pc, #356	; (adr r3, 80012a8 <hand_control_function+0x238>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff f9c6 	bl	80004d8 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4964      	ldr	r1, [pc, #400]	; (80012e4 <hand_control_function+0x274>)
 8001152:	e9c1 2300 	strd	r2, r3, [r1]

      // Find max of EMG signal
      my_emg_1_max = 0;
 8001156:	4b64      	ldr	r3, [pc, #400]	; (80012e8 <hand_control_function+0x278>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
      for(i = 0; i < 64; i++)
 800115c:	2300      	movs	r3, #0
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001160:	e018      	b.n	8001194 <hand_control_function+0x124>
      {
        if (adcResultsDMA[i][3] > my_emg_1_max)
 8001162:	4a55      	ldr	r2, [pc, #340]	; (80012b8 <hand_control_function+0x248>)
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4413      	add	r3, r2
 800116a:	3306      	adds	r3, #6
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	4b5d      	ldr	r3, [pc, #372]	; (80012e8 <hand_control_function+0x278>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d909      	bls.n	800118e <hand_control_function+0x11e>
        {
          my_emg_1_max = adcResultsDMA[i][3];
 800117a:	4a4f      	ldr	r2, [pc, #316]	; (80012b8 <hand_control_function+0x248>)
 800117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	4413      	add	r3, r2
 8001182:	3306      	adds	r3, #6
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	b29b      	uxth	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	4b57      	ldr	r3, [pc, #348]	; (80012e8 <hand_control_function+0x278>)
 800118c:	601a      	str	r2, [r3, #0]
      for(i = 0; i < 64; i++)
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	3301      	adds	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
 8001194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001196:	2b3f      	cmp	r3, #63	; 0x3f
 8001198:	d9e3      	bls.n	8001162 <hand_control_function+0xf2>
        }
      }
      my_emg_1 = my_emg_1_max;
 800119a:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <hand_control_function+0x278>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a4a      	ldr	r2, [pc, #296]	; (80012c8 <hand_control_function+0x258>)
 80011a0:	6013      	str	r3, [r2, #0]
      ////////////////////////////////////////////////////////////////////////

      /* Set DIR for all motors to given value (from button) */
      /* And PWM for all motors to given value (from potentiometer) */
      /* If in BTN mode, read button press / in EGM mode, read pot for EMG treshold value */
      if ((my_mode  == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) || (my_mode  == 1 && my_emg_1 > my_pot_1))
 80011a2:	4b52      	ldr	r3, [pc, #328]	; (80012ec <hand_control_function+0x27c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d106      	bne.n	80011b8 <hand_control_function+0x148>
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	4850      	ldr	r0, [pc, #320]	; (80012f0 <hand_control_function+0x280>)
 80011ae:	f001 fcd3 	bl	8002b58 <HAL_GPIO_ReadPin>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00b      	beq.n	80011d0 <hand_control_function+0x160>
 80011b8:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <hand_control_function+0x27c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	f040 80a3 	bne.w	8001308 <hand_control_function+0x298>
 80011c2:	4b41      	ldr	r3, [pc, #260]	; (80012c8 <hand_control_function+0x258>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4b3e      	ldr	r3, [pc, #248]	; (80012c0 <hand_control_function+0x250>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	f240 809c 	bls.w	8001308 <hand_control_function+0x298>
      {
        // Close hand
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d6:	4847      	ldr	r0, [pc, #284]	; (80012f4 <hand_control_function+0x284>)
 80011d8:	f001 fcd5 	bl	8002b86 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e2:	4843      	ldr	r0, [pc, #268]	; (80012f0 <hand_control_function+0x280>)
 80011e4:	f001 fccf 	bl	8002b86 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ee:	4840      	ldr	r0, [pc, #256]	; (80012f0 <hand_control_function+0x280>)
 80011f0:	f001 fcc9 	bl	8002b86 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);  // Motor 1 DIR
 80011f4:	2201      	movs	r2, #1
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	483f      	ldr	r0, [pc, #252]	; (80012f8 <hand_control_function+0x288>)
 80011fa:	f001 fcc4 	bl	8002b86 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001204:	483c      	ldr	r0, [pc, #240]	; (80012f8 <hand_control_function+0x288>)
 8001206:	f001 fcbe 	bl	8002b86 <HAL_GPIO_WritePin>
        my_pwm = (double)my_pot_2 / 40.96;
 800120a:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <hand_control_function+0x254>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f8e8 	bl	80003e4 <__aeabi_ui2d>
 8001214:	a326      	add	r3, pc, #152	; (adr r3, 80012b0 <hand_control_function+0x240>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff fa87 	bl	800072c <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	e9c7 2308 	strd	r2, r3, [r7, #32]
        TIM1->CCR1 = (uint16_t)my_pwm;
 8001226:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800122a:	f7ff fb67 	bl	80008fc <__aeabi_d2uiz>
 800122e:	4603      	mov	r3, r0
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <hand_control_function+0x28c>)
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR2 = (uint16_t)my_pwm;
 8001236:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800123a:	f7ff fb5f 	bl	80008fc <__aeabi_d2uiz>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <hand_control_function+0x28c>)
 8001244:	639a      	str	r2, [r3, #56]	; 0x38
        TIM1->CCR3 = (uint16_t)my_pwm;
 8001246:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800124a:	f7ff fb57 	bl	80008fc <__aeabi_d2uiz>
 800124e:	4603      	mov	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <hand_control_function+0x28c>)
 8001254:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM3->CCR1 = (uint16_t)my_pwm;
 8001256:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800125a:	f7ff fb4f 	bl	80008fc <__aeabi_d2uiz>
 800125e:	4603      	mov	r3, r0
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b27      	ldr	r3, [pc, #156]	; (8001300 <hand_control_function+0x290>)
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
        TIM3->CCR3 = (uint16_t)my_pwm;  // Motor 1 PWM
 8001266:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800126a:	f7ff fb47 	bl	80008fc <__aeabi_d2uiz>
 800126e:	4603      	mov	r3, r0
 8001270:	b29a      	uxth	r2, r3
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <hand_control_function+0x290>)
 8001274:	63da      	str	r2, [r3, #60]	; 0x3c
        // Also, log current hand state
        sprintf(my_data, "1\n");
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	4922      	ldr	r1, [pc, #136]	; (8001304 <hand_control_function+0x294>)
 800127c:	4618      	mov	r0, r3
 800127e:	f00c f847 	bl	800d310 <siprintf>
        CDC_Transmit_FS(my_data, strlen(my_data));
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4618      	mov	r0, r3
 8001288:	f7fe ff62 	bl	8000150 <strlen>
 800128c:	4602      	mov	r2, r0
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f00b fc5d 	bl	800cb54 <CDC_Transmit_FS>
      {
 800129a:	e0a1      	b.n	80013e0 <hand_control_function+0x370>
 800129c:	f3af 8000 	nop.w
 80012a0:	66666666 	.word	0x66666666
 80012a4:	400a6666 	.word	0x400a6666
 80012a8:	cccccccd 	.word	0xcccccccd
 80012ac:	4016cccc 	.word	0x4016cccc
 80012b0:	47ae147b 	.word	0x47ae147b
 80012b4:	40447ae1 	.word	0x40447ae1
 80012b8:	20000394 	.word	0x20000394
 80012bc:	200001ec 	.word	0x200001ec
 80012c0:	2000079c 	.word	0x2000079c
 80012c4:	200007a0 	.word	0x200007a0
 80012c8:	200007a4 	.word	0x200007a4
 80012cc:	200007a8 	.word	0x200007a8
 80012d0:	200007ac 	.word	0x200007ac
 80012d4:	200007b0 	.word	0x200007b0
 80012d8:	200007b4 	.word	0x200007b4
 80012dc:	200007b8 	.word	0x200007b8
 80012e0:	40b00000 	.word	0x40b00000
 80012e4:	200007c0 	.word	0x200007c0
 80012e8:	200007c8 	.word	0x200007c8
 80012ec:	20000798 	.word	0x20000798
 80012f0:	40010c00 	.word	0x40010c00
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40011000 	.word	0x40011000
 80012fc:	40012c00 	.word	0x40012c00
 8001300:	40000400 	.word	0x40000400
 8001304:	0800dd58 	.word	0x0800dd58
      }
      else
      {
        // OpenHand™
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130e:	4838      	ldr	r0, [pc, #224]	; (80013f0 <hand_control_function+0x380>)
 8001310:	f001 fc39 	bl	8002b86 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131a:	4836      	ldr	r0, [pc, #216]	; (80013f4 <hand_control_function+0x384>)
 800131c:	f001 fc33 	bl	8002b86 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001326:	4833      	ldr	r0, [pc, #204]	; (80013f4 <hand_control_function+0x384>)
 8001328:	f001 fc2d 	bl	8002b86 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);  // Motor 1 DIR
 800132c:	2200      	movs	r2, #0
 800132e:	2180      	movs	r1, #128	; 0x80
 8001330:	4831      	ldr	r0, [pc, #196]	; (80013f8 <hand_control_function+0x388>)
 8001332:	f001 fc28 	bl	8002b86 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133c:	482e      	ldr	r0, [pc, #184]	; (80013f8 <hand_control_function+0x388>)
 800133e:	f001 fc22 	bl	8002b86 <HAL_GPIO_WritePin>
        my_pwm = 100.0 - (double)my_pot_2 / 40.96; // PWM should now be inverted (high time/low time should flip, damn these motor drivers!)
 8001342:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <hand_control_function+0x38c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f84c 	bl	80003e4 <__aeabi_ui2d>
 800134c:	a326      	add	r3, pc, #152	; (adr r3, 80013e8 <hand_control_function+0x378>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff f9eb 	bl	800072c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	f04f 0000 	mov.w	r0, #0
 800135e:	4928      	ldr	r1, [pc, #160]	; (8001400 <hand_control_function+0x390>)
 8001360:	f7fe ff02 	bl	8000168 <__aeabi_dsub>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	e9c7 2308 	strd	r2, r3, [r7, #32]
        TIM1->CCR1 = (uint16_t)my_pwm;
 800136c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001370:	f7ff fac4 	bl	80008fc <__aeabi_d2uiz>
 8001374:	4603      	mov	r3, r0
 8001376:	b29a      	uxth	r2, r3
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <hand_control_function+0x394>)
 800137a:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR2 = (uint16_t)my_pwm;
 800137c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001380:	f7ff fabc 	bl	80008fc <__aeabi_d2uiz>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <hand_control_function+0x394>)
 800138a:	639a      	str	r2, [r3, #56]	; 0x38
        TIM1->CCR3 = (uint16_t)my_pwm;
 800138c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001390:	f7ff fab4 	bl	80008fc <__aeabi_d2uiz>
 8001394:	4603      	mov	r3, r0
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <hand_control_function+0x394>)
 800139a:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM3->CCR1 = (uint16_t)my_pwm;
 800139c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013a0:	f7ff faac 	bl	80008fc <__aeabi_d2uiz>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <hand_control_function+0x398>)
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34
        TIM3->CCR3 = (uint16_t)my_pwm;  // Motor 1 PWM
 80013ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013b0:	f7ff faa4 	bl	80008fc <__aeabi_d2uiz>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <hand_control_function+0x398>)
 80013ba:	63da      	str	r2, [r3, #60]	; 0x3c
        // Also, log current hand state
        sprintf(my_data, "0\n");
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4912      	ldr	r1, [pc, #72]	; (800140c <hand_control_function+0x39c>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00b ffa4 	bl	800d310 <siprintf>
        CDC_Transmit_FS(my_data, strlen(my_data));
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7fe febf 	bl	8000150 <strlen>
 80013d2:	4602      	mov	r2, r0
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	4611      	mov	r1, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f00b fbba 	bl	800cb54 <CDC_Transmit_FS>
      ///  End of main task //////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////
    }

    /* Wait 1ms to let other tasks do their thing! And for time to pass quicker while we wait for our 10ms! */
    osDelay(1);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f008 feff 	bl	800a1e4 <osDelay>
    if(HAL_GetTick() - last_10ms > (10-1))
 80013e6:	e653      	b.n	8001090 <hand_control_function+0x20>
 80013e8:	47ae147b 	.word	0x47ae147b
 80013ec:	40447ae1 	.word	0x40447ae1
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40010c00 	.word	0x40010c00
 80013f8:	40011000 	.word	0x40011000
 80013fc:	200007a0 	.word	0x200007a0
 8001400:	40590000 	.word	0x40590000
 8001404:	40012c00 	.word	0x40012c00
 8001408:	40000400 	.word	0x40000400
 800140c:	0800dd5c 	.word	0x0800dd5c

08001410 <system_health_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_system_health_function */
void system_health_function(void *argument)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN system_health_function */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001418:	2140      	movs	r1, #64	; 0x40
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <system_health_function+0x1c>)
 800141c:	f001 fbcb 	bl	8002bb6 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001420:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001424:	f008 fede 	bl	800a1e4 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001428:	e7f6      	b.n	8001418 <system_health_function+0x8>
 800142a:	bf00      	nop
 800142c:	40010c00 	.word	0x40010c00

08001430 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001442:	f000 fb59 	bl	8001af8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40000800 	.word	0x40000800

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	e7fe      	b.n	800145c <Error_Handler+0x8>
	...

08001460 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_MspInit+0x68>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_MspInit+0x68>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6193      	str	r3, [r2, #24]
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_MspInit+0x68>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_MspInit+0x68>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <HAL_MspInit+0x68>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	61d3      	str	r3, [r2, #28]
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_MspInit+0x68>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	210f      	movs	r1, #15
 800149a:	f06f 0001 	mvn.w	r0, #1
 800149e:	f000 ffbe 	bl	800241e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_MspInit+0x6c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_MspInit+0x6c>)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010000 	.word	0x40010000

080014d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0318 	add.w	r3, r7, #24
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a34      	ldr	r2, [pc, #208]	; (80015bc <HAL_ADC_MspInit+0xec>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d160      	bne.n	80015b2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014f0:	4b33      	ldr	r3, [pc, #204]	; (80015c0 <HAL_ADC_MspInit+0xf0>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a32      	ldr	r2, [pc, #200]	; (80015c0 <HAL_ADC_MspInit+0xf0>)
 80014f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <HAL_ADC_MspInit+0xf0>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_ADC_MspInit+0xf0>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a2c      	ldr	r2, [pc, #176]	; (80015c0 <HAL_ADC_MspInit+0xf0>)
 800150e:	f043 0310 	orr.w	r3, r3, #16
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_ADC_MspInit+0xf0>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <HAL_ADC_MspInit+0xf0>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a26      	ldr	r2, [pc, #152]	; (80015c0 <HAL_ADC_MspInit+0xf0>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_ADC_MspInit+0xf0>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATT_SENSE_Pin|HALL_SENSE_01_Pin|HALL_SENSE_02_Pin|HALL_SENSE_03_Pin;
 8001538:	230f      	movs	r3, #15
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153c:	2303      	movs	r3, #3
 800153e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	4619      	mov	r1, r3
 8001546:	481f      	ldr	r0, [pc, #124]	; (80015c4 <HAL_ADC_MspInit+0xf4>)
 8001548:	f001 f982 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TRIM_POT_02_Pin|TRIM_POT_01_Pin|EMG_01_Pin|EMG_02_Pin;
 800154c:	231e      	movs	r3, #30
 800154e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001550:	2303      	movs	r3, #3
 8001552:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 0318 	add.w	r3, r7, #24
 8001558:	4619      	mov	r1, r3
 800155a:	481b      	ldr	r0, [pc, #108]	; (80015c8 <HAL_ADC_MspInit+0xf8>)
 800155c:	f001 f978 	bl	8002850 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <HAL_ADC_MspInit+0xfc>)
 8001562:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <HAL_ADC_MspInit+0x100>)
 8001564:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_ADC_MspInit+0xfc>)
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_ADC_MspInit+0xfc>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_ADC_MspInit+0xfc>)
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <HAL_ADC_MspInit+0xfc>)
 800157a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800157e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_ADC_MspInit+0xfc>)
 8001582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001586:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_ADC_MspInit+0xfc>)
 800158a:	2220      	movs	r2, #32
 800158c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_ADC_MspInit+0xfc>)
 8001590:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001594:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <HAL_ADC_MspInit+0xfc>)
 8001598:	f000 ff6c 	bl	8002474 <HAL_DMA_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 80015a2:	f7ff ff57 	bl	8001454 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_ADC_MspInit+0xfc>)
 80015aa:	621a      	str	r2, [r3, #32]
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <HAL_ADC_MspInit+0xfc>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	3728      	adds	r7, #40	; 0x28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40012400 	.word	0x40012400
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40011000 	.word	0x40011000
 80015c8:	40010800 	.word	0x40010800
 80015cc:	2000021c 	.word	0x2000021c
 80015d0:	40020008 	.word	0x40020008

080015d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <HAL_I2C_MspInit+0x90>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d132      	bne.n	800165a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <HAL_I2C_MspInit+0x94>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <HAL_I2C_MspInit+0x94>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_I2C_MspInit+0x94>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800160c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001612:	2312      	movs	r3, #18
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4812      	ldr	r0, [pc, #72]	; (800166c <HAL_I2C_MspInit+0x98>)
 8001622:	f001 f915 	bl	8002850 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_I2C_MspInit+0x9c>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
 800163c:	4a0c      	ldr	r2, [pc, #48]	; (8001670 <HAL_I2C_MspInit+0x9c>)
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_I2C_MspInit+0x94>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_I2C_MspInit+0x94>)
 8001648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800164c:	61d3      	str	r3, [r2, #28]
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_I2C_MspInit+0x94>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40005400 	.word	0x40005400
 8001668:	40021000 	.word	0x40021000
 800166c:	40010c00 	.word	0x40010c00
 8001670:	40010000 	.word	0x40010000

08001674 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a12      	ldr	r2, [pc, #72]	; (80016cc <HAL_TIM_PWM_MspInit+0x58>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d10c      	bne.n	80016a0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <HAL_TIM_PWM_MspInit+0x5c>)
 800168c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001690:	6193      	str	r3, [r2, #24]
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800169e:	e010      	b.n	80016c2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <HAL_TIM_PWM_MspInit+0x60>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d10b      	bne.n	80016c2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_TIM_PWM_MspInit+0x5c>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_TIM_PWM_MspInit+0x5c>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_TIM_PWM_MspInit+0x5c>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	40012c00 	.word	0x40012c00
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40000400 	.word	0x40000400

080016d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a35      	ldr	r2, [pc, #212]	; (80017c8 <HAL_TIM_MspPostInit+0xf0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d132      	bne.n	800175e <HAL_TIM_MspPostInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f8:	4b34      	ldr	r3, [pc, #208]	; (80017cc <HAL_TIM_MspPostInit+0xf4>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a33      	ldr	r2, [pc, #204]	; (80017cc <HAL_TIM_MspPostInit+0xf4>)
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b31      	ldr	r3, [pc, #196]	; (80017cc <HAL_TIM_MspPostInit+0xf4>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <HAL_TIM_MspPostInit+0xf4>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a2d      	ldr	r2, [pc, #180]	; (80017cc <HAL_TIM_MspPostInit+0xf4>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_TIM_MspPostInit+0xf4>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HAPTIC_01_PWM_Pin;
 8001728:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2302      	movs	r3, #2
 8001734:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HAPTIC_01_PWM_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4824      	ldr	r0, [pc, #144]	; (80017d0 <HAL_TIM_MspPostInit+0xf8>)
 800173e:	f001 f887 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_02_PWM_Pin|MOTOR_03_PWM_Pin;
 8001742:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2302      	movs	r3, #2
 800174e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	481f      	ldr	r0, [pc, #124]	; (80017d4 <HAL_TIM_MspPostInit+0xfc>)
 8001758:	f001 f87a 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800175c:	e02f      	b.n	80017be <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_TIM_MspPostInit+0x100>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d12a      	bne.n	80017be <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_TIM_MspPostInit+0xf4>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a17      	ldr	r2, [pc, #92]	; (80017cc <HAL_TIM_MspPostInit+0xf4>)
 800176e:	f043 0310 	orr.w	r3, r3, #16
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_TIM_MspPostInit+0xf4>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HAPTIC_02_PWM_Pin|MOTOR_01_PWM_Pin;
 8001780:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2302      	movs	r3, #2
 800178c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	4811      	ldr	r0, [pc, #68]	; (80017dc <HAL_TIM_MspPostInit+0x104>)
 8001796:	f001 f85b 	bl	8002850 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_TIM_MspPostInit+0x108>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
 80017b8:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <HAL_TIM_MspPostInit+0x108>)
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	6053      	str	r3, [r2, #4]
}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40012c00 	.word	0x40012c00
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010c00 	.word	0x40010c00
 80017d4:	40010800 	.word	0x40010800
 80017d8:	40000400 	.word	0x40000400
 80017dc:	40011000 	.word	0x40011000
 80017e0:	40010000 	.word	0x40010000

080017e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a25      	ldr	r2, [pc, #148]	; (8001894 <HAL_UART_MspInit+0xb0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d143      	bne.n	800188c <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_UART_MspInit+0xb4>)
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	4a23      	ldr	r2, [pc, #140]	; (8001898 <HAL_UART_MspInit+0xb4>)
 800180a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800180e:	61d3      	str	r3, [r2, #28]
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_UART_MspInit+0xb4>)
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_UART_MspInit+0xb4>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <HAL_UART_MspInit+0xb4>)
 8001822:	f043 0310 	orr.w	r3, r3, #16
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <HAL_UART_MspInit+0xb4>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4814      	ldr	r0, [pc, #80]	; (800189c <HAL_UART_MspInit+0xb8>)
 800184a:	f001 f801 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800184e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	480e      	ldr	r0, [pc, #56]	; (800189c <HAL_UART_MspInit+0xb8>)
 8001864:	f000 fff4 	bl	8002850 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_UART_MspInit+0xbc>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	f043 0310 	orr.w	r3, r3, #16
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
 8001886:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <HAL_UART_MspInit+0xbc>)
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	; 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40004800 	.word	0x40004800
 8001898:	40021000 	.word	0x40021000
 800189c:	40011000 	.word	0x40011000
 80018a0:	40010000 	.word	0x40010000

080018a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08e      	sub	sp, #56	; 0x38
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80018ba:	4b34      	ldr	r3, [pc, #208]	; (800198c <HAL_InitTick+0xe8>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a33      	ldr	r2, [pc, #204]	; (800198c <HAL_InitTick+0xe8>)
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <HAL_InitTick+0xe8>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018d2:	f107 0210 	add.w	r2, r7, #16
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 fc29 	bl	8005134 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d103      	bne.n	80018f4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018ec:	f003 fbfa 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 80018f0:	6378      	str	r0, [r7, #52]	; 0x34
 80018f2:	e004      	b.n	80018fe <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018f4:	f003 fbf6 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 80018f8:	4603      	mov	r3, r0
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001900:	4a23      	ldr	r2, [pc, #140]	; (8001990 <HAL_InitTick+0xec>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	0c9b      	lsrs	r3, r3, #18
 8001908:	3b01      	subs	r3, #1
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_InitTick+0xf0>)
 800190e:	4a22      	ldr	r2, [pc, #136]	; (8001998 <HAL_InitTick+0xf4>)
 8001910:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_InitTick+0xf0>)
 8001914:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001918:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800191a:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <HAL_InitTick+0xf0>)
 800191c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001920:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <HAL_InitTick+0xf0>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_InitTick+0xf0>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_InitTick+0xf0>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001932:	4818      	ldr	r0, [pc, #96]	; (8001994 <HAL_InitTick+0xf0>)
 8001934:	f003 fd02 	bl	800533c <HAL_TIM_Base_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800193e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001942:	2b00      	cmp	r3, #0
 8001944:	d11b      	bne.n	800197e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001946:	4813      	ldr	r0, [pc, #76]	; (8001994 <HAL_InitTick+0xf0>)
 8001948:	f003 fd50 	bl	80053ec <HAL_TIM_Base_Start_IT>
 800194c:	4603      	mov	r3, r0
 800194e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001952:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001956:	2b00      	cmp	r3, #0
 8001958:	d111      	bne.n	800197e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800195a:	201e      	movs	r0, #30
 800195c:	f000 fd7b 	bl	8002456 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b0f      	cmp	r3, #15
 8001964:	d808      	bhi.n	8001978 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001966:	2200      	movs	r2, #0
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	201e      	movs	r0, #30
 800196c:	f000 fd57 	bl	800241e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_InitTick+0xf8>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e002      	b.n	800197e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800197e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001982:	4618      	mov	r0, r3
 8001984:	3738      	adds	r7, #56	; 0x38
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
 8001990:	431bde83 	.word	0x431bde83
 8001994:	200007cc 	.word	0x200007cc
 8001998:	40000800 	.word	0x40000800
 800199c:	20000004 	.word	0x20000004

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler+0x4>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler+0x4>

080019be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
	...

080019cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <DMA1_Channel1_IRQHandler+0x10>)
 80019d2:	f000 fe09 	bl	80025e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000021c 	.word	0x2000021c

080019e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80019e6:	f001 fb68 	bl	80030ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20002ec4 	.word	0x20002ec4

080019f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM4_IRQHandler+0x10>)
 80019fa:	f003 fe3b 	bl	8005674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200007cc 	.word	0x200007cc

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f00b fce8 	bl	800d40c <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20005000 	.word	0x20005000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	20000814 	.word	0x20000814
 8001a70:	20003520 	.word	0x20003520

08001a74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a80:	f7ff fff8 	bl	8001a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a84:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a86:	490c      	ldr	r1, [pc, #48]	; (8001ab8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a88:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a8c:	e002      	b.n	8001a94 <LoopCopyDataInit>

08001a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a92:	3304      	adds	r3, #4

08001a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a98:	d3f9      	bcc.n	8001a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a9c:	4c09      	ldr	r4, [pc, #36]	; (8001ac4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa0:	e001      	b.n	8001aa6 <LoopFillZerobss>

08001aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa4:	3204      	adds	r2, #4

08001aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa8:	d3fb      	bcc.n	8001aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f00b fcb5 	bl	800d418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aae:	f7fe ff73 	bl	8000998 <main>
  bx lr
 8001ab2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab8:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001abc:	0800de70 	.word	0x0800de70
  ldr r2, =_sbss
 8001ac0:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001ac4:	2000351c 	.word	0x2000351c

08001ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC1_2_IRQHandler>
	...

08001acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_Init+0x28>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <HAL_Init+0x28>)
 8001ad6:	f043 0310 	orr.w	r3, r3, #16
 8001ada:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 fc93 	bl	8002408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae2:	200f      	movs	r0, #15
 8001ae4:	f7ff fede 	bl	80018a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae8:	f7ff fcba 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40022000 	.word	0x40022000

08001af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_IncTick+0x1c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_IncTick+0x20>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a03      	ldr	r2, [pc, #12]	; (8001b18 <HAL_IncTick+0x20>)
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	20000008 	.word	0x20000008
 8001b18:	20000818 	.word	0x20000818

08001b1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b20:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <HAL_GetTick+0x10>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	20000818 	.word	0x20000818

08001b30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e0be      	b.n	8001cd0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d109      	bne.n	8001b74 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fcae 	bl	80014d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 faf5 	bl	8002164 <ADC_ConversionStop_Disable>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 8099 	bne.w	8001cbe <HAL_ADC_Init+0x18e>
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 8095 	bne.w	8001cbe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b9c:	f023 0302 	bic.w	r3, r3, #2
 8001ba0:	f043 0202 	orr.w	r2, r3, #2
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bb0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7b1b      	ldrb	r3, [r3, #12]
 8001bb6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bb8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bc8:	d003      	beq.n	8001bd2 <HAL_ADC_Init+0xa2>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d102      	bne.n	8001bd8 <HAL_ADC_Init+0xa8>
 8001bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd6:	e000      	b.n	8001bda <HAL_ADC_Init+0xaa>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7d1b      	ldrb	r3, [r3, #20]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d119      	bne.n	8001c1c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7b1b      	ldrb	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d109      	bne.n	8001c04 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	035a      	lsls	r2, r3, #13
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	e00b      	b.n	8001c1c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	f043 0220 	orr.w	r2, r3, #32
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_ADC_Init+0x1a8>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	68b9      	ldr	r1, [r7, #8]
 8001c40:	430b      	orrs	r3, r1
 8001c42:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c4c:	d003      	beq.n	8001c56 <HAL_ADC_Init+0x126>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d104      	bne.n	8001c60 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	051b      	lsls	r3, r3, #20
 8001c5e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <HAL_ADC_Init+0x1ac>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d10b      	bne.n	8001c9c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	f023 0303 	bic.w	r3, r3, #3
 8001c92:	f043 0201 	orr.w	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c9a:	e018      	b.n	8001cce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	f023 0312 	bic.w	r3, r3, #18
 8001ca4:	f043 0210 	orr.w	r2, r3, #16
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cbc:	e007      	b.n	8001cce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	f043 0210 	orr.w	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	ffe1f7fd 	.word	0xffe1f7fd
 8001cdc:	ff1f0efe 	.word	0xff1f0efe

08001ce0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a64      	ldr	r2, [pc, #400]	; (8001e88 <HAL_ADC_Start_DMA+0x1a8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d004      	beq.n	8001d04 <HAL_ADC_Start_DMA+0x24>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a63      	ldr	r2, [pc, #396]	; (8001e8c <HAL_ADC_Start_DMA+0x1ac>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d106      	bne.n	8001d12 <HAL_ADC_Start_DMA+0x32>
 8001d04:	4b60      	ldr	r3, [pc, #384]	; (8001e88 <HAL_ADC_Start_DMA+0x1a8>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f040 80b3 	bne.w	8001e78 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADC_Start_DMA+0x40>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e0ae      	b.n	8001e7e <HAL_ADC_Start_DMA+0x19e>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 f9c1 	bl	80020b0 <ADC_Enable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f040 809a 	bne.w	8001e6e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a4e      	ldr	r2, [pc, #312]	; (8001e8c <HAL_ADC_Start_DMA+0x1ac>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d105      	bne.n	8001d64 <HAL_ADC_Start_DMA+0x84>
 8001d58:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_ADC_Start_DMA+0x1a8>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d115      	bne.n	8001d90 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d026      	beq.n	8001dcc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d8e:	e01d      	b.n	8001dcc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a39      	ldr	r2, [pc, #228]	; (8001e88 <HAL_ADC_Start_DMA+0x1a8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d004      	beq.n	8001db0 <HAL_ADC_Start_DMA+0xd0>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a38      	ldr	r2, [pc, #224]	; (8001e8c <HAL_ADC_Start_DMA+0x1ac>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d10d      	bne.n	8001dcc <HAL_ADC_Start_DMA+0xec>
 8001db0:	4b35      	ldr	r3, [pc, #212]	; (8001e88 <HAL_ADC_Start_DMA+0x1a8>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d007      	beq.n	8001dcc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dc4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	f023 0206 	bic.w	r2, r3, #6
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001de4:	e002      	b.n	8001dec <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4a25      	ldr	r2, [pc, #148]	; (8001e90 <HAL_ADC_Start_DMA+0x1b0>)
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4a24      	ldr	r2, [pc, #144]	; (8001e94 <HAL_ADC_Start_DMA+0x1b4>)
 8001e02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a23      	ldr	r2, [pc, #140]	; (8001e98 <HAL_ADC_Start_DMA+0x1b8>)
 8001e0a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0202 	mvn.w	r2, #2
 8001e14:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e24:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a18      	ldr	r0, [r3, #32]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	334c      	adds	r3, #76	; 0x4c
 8001e30:	4619      	mov	r1, r3
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f000 fb77 	bl	8002528 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e44:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e48:	d108      	bne.n	8001e5c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e58:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e5a:	e00f      	b.n	8001e7c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e6a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e6c:	e006      	b.n	8001e7c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001e76:	e001      	b.n	8001e7c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40012400 	.word	0x40012400
 8001e8c:	40012800 	.word	0x40012800
 8001e90:	080021e7 	.word	0x080021e7
 8001e94:	08002263 	.word	0x08002263
 8001e98:	0800227f 	.word	0x0800227f

08001e9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x20>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e0dc      	b.n	800209a <HAL_ADC_ConfigChannel+0x1da>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b06      	cmp	r3, #6
 8001eee:	d81c      	bhi.n	8001f2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3b05      	subs	r3, #5
 8001f02:	221f      	movs	r2, #31
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4019      	ands	r1, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	3b05      	subs	r3, #5
 8001f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	635a      	str	r2, [r3, #52]	; 0x34
 8001f28:	e03c      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d81c      	bhi.n	8001f6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	3b23      	subs	r3, #35	; 0x23
 8001f44:	221f      	movs	r2, #31
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	4019      	ands	r1, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b23      	subs	r3, #35	; 0x23
 8001f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
 8001f6a:	e01b      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b41      	subs	r3, #65	; 0x41
 8001f7e:	221f      	movs	r2, #31
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	4019      	ands	r1, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	3b41      	subs	r3, #65	; 0x41
 8001f98:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b09      	cmp	r3, #9
 8001faa:	d91c      	bls.n	8001fe6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68d9      	ldr	r1, [r3, #12]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b1e      	subs	r3, #30
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	4019      	ands	r1, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6898      	ldr	r0, [r3, #8]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3b1e      	subs	r3, #30
 8001fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	e019      	b.n	800201a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6919      	ldr	r1, [r3, #16]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	4019      	ands	r1, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	6898      	ldr	r0, [r3, #8]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	fa00 f203 	lsl.w	r2, r0, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b10      	cmp	r3, #16
 8002020:	d003      	beq.n	800202a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002026:	2b11      	cmp	r3, #17
 8002028:	d132      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d125      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d126      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002050:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b10      	cmp	r3, #16
 8002058:	d11a      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a13      	ldr	r2, [pc, #76]	; (80020ac <HAL_ADC_ConfigChannel+0x1ec>)
 8002060:	fba2 2303 	umull	r2, r3, r2, r3
 8002064:	0c9a      	lsrs	r2, r3, #18
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002070:	e002      	b.n	8002078 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3b01      	subs	r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f9      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x1b2>
 800207e:	e007      	b.n	8002090 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	f043 0220 	orr.w	r2, r3, #32
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002098:	7bfb      	ldrb	r3, [r7, #15]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	40012400 	.word	0x40012400
 80020a8:	20000000 	.word	0x20000000
 80020ac:	431bde83 	.word	0x431bde83

080020b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d040      	beq.n	8002150 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020de:	4b1f      	ldr	r3, [pc, #124]	; (800215c <ADC_Enable+0xac>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <ADC_Enable+0xb0>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	0c9b      	lsrs	r3, r3, #18
 80020ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020ec:	e002      	b.n	80020f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f9      	bne.n	80020ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020fa:	f7ff fd0f 	bl	8001b1c <HAL_GetTick>
 80020fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002100:	e01f      	b.n	8002142 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002102:	f7ff fd0b 	bl	8001b1c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d918      	bls.n	8002142 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d011      	beq.n	8002142 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	f043 0210 	orr.w	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	f043 0201 	orr.w	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e007      	b.n	8002152 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d1d8      	bne.n	8002102 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000000 	.word	0x20000000
 8002160:	431bde83 	.word	0x431bde83

08002164 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b01      	cmp	r3, #1
 800217c:	d12e      	bne.n	80021dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800218e:	f7ff fcc5 	bl	8001b1c <HAL_GetTick>
 8002192:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002194:	e01b      	b.n	80021ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002196:	f7ff fcc1 	bl	8001b1c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d914      	bls.n	80021ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d10d      	bne.n	80021ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	f043 0210 	orr.w	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e007      	b.n	80021de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d0dc      	beq.n	8002196 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d127      	bne.n	8002250 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002216:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800221a:	d115      	bne.n	8002248 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002220:	2b00      	cmp	r3, #0
 8002222:	d111      	bne.n	8002248 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f7fe ff01 	bl	8001050 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800224e:	e004      	b.n	800225a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	4798      	blx	r3
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f7ff fe13 	bl	8001e9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f043 0204 	orr.w	r2, r3, #4
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7ff fe02 	bl	8001eae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d0:	4013      	ands	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e6:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	60d3      	str	r3, [r2, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <__NVIC_GetPriorityGrouping+0x18>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 0307 	and.w	r3, r3, #7
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	2b00      	cmp	r3, #0
 8002328:	db0b      	blt.n	8002342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	4906      	ldr	r1, [pc, #24]	; (800234c <__NVIC_EnableIRQ+0x34>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	2001      	movs	r0, #1
 800233a:	fa00 f202 	lsl.w	r2, r0, r2
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	; (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	; (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	; 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff4f 	bl	80022b4 <__NVIC_SetPriorityGrouping>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002430:	f7ff ff64 	bl	80022fc <__NVIC_GetPriorityGrouping>
 8002434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	6978      	ldr	r0, [r7, #20]
 800243c:	f7ff ffb2 	bl	80023a4 <NVIC_EncodePriority>
 8002440:	4602      	mov	r2, r0
 8002442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff81 	bl	8002350 <__NVIC_SetPriority>
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff57 	bl	8002318 <__NVIC_EnableIRQ>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e043      	b.n	8002512 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_DMA_Init+0xa8>)
 8002492:	4413      	add	r3, r2
 8002494:	4a22      	ldr	r2, [pc, #136]	; (8002520 <HAL_DMA_Init+0xac>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	009a      	lsls	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_DMA_Init+0xb0>)
 80024a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	bffdfff8 	.word	0xbffdfff8
 8002520:	cccccccd 	.word	0xcccccccd
 8002524:	40020000 	.word	0x40020000

08002528 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_DMA_Start_IT+0x20>
 8002544:	2302      	movs	r3, #2
 8002546:	e04b      	b.n	80025e0 <HAL_DMA_Start_IT+0xb8>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d13a      	bne.n	80025d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f937 	bl	80027f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 020e 	orr.w	r2, r2, #14
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	e00f      	b.n	80025c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0204 	bic.w	r2, r2, #4
 80025ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 020a 	orr.w	r2, r2, #10
 80025be:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e005      	b.n	80025de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025da:	2302      	movs	r3, #2
 80025dc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80025de:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	2204      	movs	r2, #4
 8002606:	409a      	lsls	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d04f      	beq.n	80026b0 <HAL_DMA_IRQHandler+0xc8>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d04a      	beq.n	80026b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0204 	bic.w	r2, r2, #4
 8002636:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a66      	ldr	r2, [pc, #408]	; (80027d8 <HAL_DMA_IRQHandler+0x1f0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d029      	beq.n	8002696 <HAL_DMA_IRQHandler+0xae>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a65      	ldr	r2, [pc, #404]	; (80027dc <HAL_DMA_IRQHandler+0x1f4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d022      	beq.n	8002692 <HAL_DMA_IRQHandler+0xaa>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a63      	ldr	r2, [pc, #396]	; (80027e0 <HAL_DMA_IRQHandler+0x1f8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01a      	beq.n	800268c <HAL_DMA_IRQHandler+0xa4>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a62      	ldr	r2, [pc, #392]	; (80027e4 <HAL_DMA_IRQHandler+0x1fc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d012      	beq.n	8002686 <HAL_DMA_IRQHandler+0x9e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a60      	ldr	r2, [pc, #384]	; (80027e8 <HAL_DMA_IRQHandler+0x200>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00a      	beq.n	8002680 <HAL_DMA_IRQHandler+0x98>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a5f      	ldr	r2, [pc, #380]	; (80027ec <HAL_DMA_IRQHandler+0x204>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d102      	bne.n	800267a <HAL_DMA_IRQHandler+0x92>
 8002674:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002678:	e00e      	b.n	8002698 <HAL_DMA_IRQHandler+0xb0>
 800267a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800267e:	e00b      	b.n	8002698 <HAL_DMA_IRQHandler+0xb0>
 8002680:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002684:	e008      	b.n	8002698 <HAL_DMA_IRQHandler+0xb0>
 8002686:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800268a:	e005      	b.n	8002698 <HAL_DMA_IRQHandler+0xb0>
 800268c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002690:	e002      	b.n	8002698 <HAL_DMA_IRQHandler+0xb0>
 8002692:	2340      	movs	r3, #64	; 0x40
 8002694:	e000      	b.n	8002698 <HAL_DMA_IRQHandler+0xb0>
 8002696:	2304      	movs	r3, #4
 8002698:	4a55      	ldr	r2, [pc, #340]	; (80027f0 <HAL_DMA_IRQHandler+0x208>)
 800269a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8094 	beq.w	80027ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026ae:	e08e      	b.n	80027ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	2202      	movs	r2, #2
 80026b6:	409a      	lsls	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d056      	beq.n	800276e <HAL_DMA_IRQHandler+0x186>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d051      	beq.n	800276e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10b      	bne.n	80026f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 020a 	bic.w	r2, r2, #10
 80026e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a38      	ldr	r2, [pc, #224]	; (80027d8 <HAL_DMA_IRQHandler+0x1f0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d029      	beq.n	800274e <HAL_DMA_IRQHandler+0x166>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a37      	ldr	r2, [pc, #220]	; (80027dc <HAL_DMA_IRQHandler+0x1f4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d022      	beq.n	800274a <HAL_DMA_IRQHandler+0x162>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a35      	ldr	r2, [pc, #212]	; (80027e0 <HAL_DMA_IRQHandler+0x1f8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d01a      	beq.n	8002744 <HAL_DMA_IRQHandler+0x15c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a34      	ldr	r2, [pc, #208]	; (80027e4 <HAL_DMA_IRQHandler+0x1fc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d012      	beq.n	800273e <HAL_DMA_IRQHandler+0x156>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a32      	ldr	r2, [pc, #200]	; (80027e8 <HAL_DMA_IRQHandler+0x200>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00a      	beq.n	8002738 <HAL_DMA_IRQHandler+0x150>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a31      	ldr	r2, [pc, #196]	; (80027ec <HAL_DMA_IRQHandler+0x204>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d102      	bne.n	8002732 <HAL_DMA_IRQHandler+0x14a>
 800272c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002730:	e00e      	b.n	8002750 <HAL_DMA_IRQHandler+0x168>
 8002732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002736:	e00b      	b.n	8002750 <HAL_DMA_IRQHandler+0x168>
 8002738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800273c:	e008      	b.n	8002750 <HAL_DMA_IRQHandler+0x168>
 800273e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002742:	e005      	b.n	8002750 <HAL_DMA_IRQHandler+0x168>
 8002744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002748:	e002      	b.n	8002750 <HAL_DMA_IRQHandler+0x168>
 800274a:	2320      	movs	r3, #32
 800274c:	e000      	b.n	8002750 <HAL_DMA_IRQHandler+0x168>
 800274e:	2302      	movs	r3, #2
 8002750:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <HAL_DMA_IRQHandler+0x208>)
 8002752:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	d034      	beq.n	80027ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800276c:	e02f      	b.n	80027ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2208      	movs	r2, #8
 8002774:	409a      	lsls	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d028      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x1e8>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d023      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 020e 	bic.w	r2, r2, #14
 8002796:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a0:	2101      	movs	r1, #1
 80027a2:	fa01 f202 	lsl.w	r2, r1, r2
 80027a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d004      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
    }
  }
  return;
 80027ce:	bf00      	nop
 80027d0:	bf00      	nop
}
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40020008 	.word	0x40020008
 80027dc:	4002001c 	.word	0x4002001c
 80027e0:	40020030 	.word	0x40020030
 80027e4:	40020044 	.word	0x40020044
 80027e8:	40020058 	.word	0x40020058
 80027ec:	4002006c 	.word	0x4002006c
 80027f0:	40020000 	.word	0x40020000

080027f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	2101      	movs	r1, #1
 800280c:	fa01 f202 	lsl.w	r2, r1, r2
 8002810:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b10      	cmp	r3, #16
 8002820:	d108      	bne.n	8002834 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002832:	e007      	b.n	8002844 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	60da      	str	r2, [r3, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
	...

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b08b      	sub	sp, #44	; 0x2c
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002862:	e169      	b.n	8002b38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002864:	2201      	movs	r2, #1
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	429a      	cmp	r2, r3
 800287e:	f040 8158 	bne.w	8002b32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4a9a      	ldr	r2, [pc, #616]	; (8002af0 <HAL_GPIO_Init+0x2a0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d05e      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 800288c:	4a98      	ldr	r2, [pc, #608]	; (8002af0 <HAL_GPIO_Init+0x2a0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d875      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 8002892:	4a98      	ldr	r2, [pc, #608]	; (8002af4 <HAL_GPIO_Init+0x2a4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d058      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 8002898:	4a96      	ldr	r2, [pc, #600]	; (8002af4 <HAL_GPIO_Init+0x2a4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d86f      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 800289e:	4a96      	ldr	r2, [pc, #600]	; (8002af8 <HAL_GPIO_Init+0x2a8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d052      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 80028a4:	4a94      	ldr	r2, [pc, #592]	; (8002af8 <HAL_GPIO_Init+0x2a8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d869      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 80028aa:	4a94      	ldr	r2, [pc, #592]	; (8002afc <HAL_GPIO_Init+0x2ac>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d04c      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 80028b0:	4a92      	ldr	r2, [pc, #584]	; (8002afc <HAL_GPIO_Init+0x2ac>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d863      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 80028b6:	4a92      	ldr	r2, [pc, #584]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d046      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 80028bc:	4a90      	ldr	r2, [pc, #576]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d85d      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 80028c2:	2b12      	cmp	r3, #18
 80028c4:	d82a      	bhi.n	800291c <HAL_GPIO_Init+0xcc>
 80028c6:	2b12      	cmp	r3, #18
 80028c8:	d859      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 80028ca:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <HAL_GPIO_Init+0x80>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	0800294b 	.word	0x0800294b
 80028d4:	08002925 	.word	0x08002925
 80028d8:	08002937 	.word	0x08002937
 80028dc:	08002979 	.word	0x08002979
 80028e0:	0800297f 	.word	0x0800297f
 80028e4:	0800297f 	.word	0x0800297f
 80028e8:	0800297f 	.word	0x0800297f
 80028ec:	0800297f 	.word	0x0800297f
 80028f0:	0800297f 	.word	0x0800297f
 80028f4:	0800297f 	.word	0x0800297f
 80028f8:	0800297f 	.word	0x0800297f
 80028fc:	0800297f 	.word	0x0800297f
 8002900:	0800297f 	.word	0x0800297f
 8002904:	0800297f 	.word	0x0800297f
 8002908:	0800297f 	.word	0x0800297f
 800290c:	0800297f 	.word	0x0800297f
 8002910:	0800297f 	.word	0x0800297f
 8002914:	0800292d 	.word	0x0800292d
 8002918:	08002941 	.word	0x08002941
 800291c:	4a79      	ldr	r2, [pc, #484]	; (8002b04 <HAL_GPIO_Init+0x2b4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002922:	e02c      	b.n	800297e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	623b      	str	r3, [r7, #32]
          break;
 800292a:	e029      	b.n	8002980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	3304      	adds	r3, #4
 8002932:	623b      	str	r3, [r7, #32]
          break;
 8002934:	e024      	b.n	8002980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	3308      	adds	r3, #8
 800293c:	623b      	str	r3, [r7, #32]
          break;
 800293e:	e01f      	b.n	8002980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	330c      	adds	r3, #12
 8002946:	623b      	str	r3, [r7, #32]
          break;
 8002948:	e01a      	b.n	8002980 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002952:	2304      	movs	r3, #4
 8002954:	623b      	str	r3, [r7, #32]
          break;
 8002956:	e013      	b.n	8002980 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002960:	2308      	movs	r3, #8
 8002962:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	611a      	str	r2, [r3, #16]
          break;
 800296a:	e009      	b.n	8002980 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800296c:	2308      	movs	r3, #8
 800296e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	615a      	str	r2, [r3, #20]
          break;
 8002976:	e003      	b.n	8002980 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002978:	2300      	movs	r3, #0
 800297a:	623b      	str	r3, [r7, #32]
          break;
 800297c:	e000      	b.n	8002980 <HAL_GPIO_Init+0x130>
          break;
 800297e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	d801      	bhi.n	800298a <HAL_GPIO_Init+0x13a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	e001      	b.n	800298e <HAL_GPIO_Init+0x13e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3304      	adds	r3, #4
 800298e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2bff      	cmp	r3, #255	; 0xff
 8002994:	d802      	bhi.n	800299c <HAL_GPIO_Init+0x14c>
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	e002      	b.n	80029a2 <HAL_GPIO_Init+0x152>
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	3b08      	subs	r3, #8
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	210f      	movs	r1, #15
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	401a      	ands	r2, r3
 80029b4:	6a39      	ldr	r1, [r7, #32]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	431a      	orrs	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80b1 	beq.w	8002b32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029d0:	4b4d      	ldr	r3, [pc, #308]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	4a4c      	ldr	r2, [pc, #304]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6193      	str	r3, [r2, #24]
 80029dc:	4b4a      	ldr	r3, [pc, #296]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029e8:	4a48      	ldr	r2, [pc, #288]	; (8002b0c <HAL_GPIO_Init+0x2bc>)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	3302      	adds	r3, #2
 80029f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a40      	ldr	r2, [pc, #256]	; (8002b10 <HAL_GPIO_Init+0x2c0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d013      	beq.n	8002a3c <HAL_GPIO_Init+0x1ec>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a3f      	ldr	r2, [pc, #252]	; (8002b14 <HAL_GPIO_Init+0x2c4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00d      	beq.n	8002a38 <HAL_GPIO_Init+0x1e8>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a3e      	ldr	r2, [pc, #248]	; (8002b18 <HAL_GPIO_Init+0x2c8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d007      	beq.n	8002a34 <HAL_GPIO_Init+0x1e4>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a3d      	ldr	r2, [pc, #244]	; (8002b1c <HAL_GPIO_Init+0x2cc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d101      	bne.n	8002a30 <HAL_GPIO_Init+0x1e0>
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e006      	b.n	8002a3e <HAL_GPIO_Init+0x1ee>
 8002a30:	2304      	movs	r3, #4
 8002a32:	e004      	b.n	8002a3e <HAL_GPIO_Init+0x1ee>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e002      	b.n	8002a3e <HAL_GPIO_Init+0x1ee>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_GPIO_Init+0x1ee>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a40:	f002 0203 	and.w	r2, r2, #3
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	4093      	lsls	r3, r2
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a4e:	492f      	ldr	r1, [pc, #188]	; (8002b0c <HAL_GPIO_Init+0x2bc>)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d006      	beq.n	8002a76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a68:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	492c      	ldr	r1, [pc, #176]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]
 8002a74:	e006      	b.n	8002a84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a76:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	4928      	ldr	r1, [pc, #160]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d006      	beq.n	8002a9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a90:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	4922      	ldr	r1, [pc, #136]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60cb      	str	r3, [r1, #12]
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	491e      	ldr	r1, [pc, #120]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	4918      	ldr	r1, [pc, #96]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
 8002ac4:	e006      	b.n	8002ad4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ac6:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	4914      	ldr	r1, [pc, #80]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d021      	beq.n	8002b24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	490e      	ldr	r1, [pc, #56]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]
 8002aec:	e021      	b.n	8002b32 <HAL_GPIO_Init+0x2e2>
 8002aee:	bf00      	nop
 8002af0:	10320000 	.word	0x10320000
 8002af4:	10310000 	.word	0x10310000
 8002af8:	10220000 	.word	0x10220000
 8002afc:	10210000 	.word	0x10210000
 8002b00:	10120000 	.word	0x10120000
 8002b04:	10110000 	.word	0x10110000
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40010000 	.word	0x40010000
 8002b10:	40010800 	.word	0x40010800
 8002b14:	40010c00 	.word	0x40010c00
 8002b18:	40011000 	.word	0x40011000
 8002b1c:	40011400 	.word	0x40011400
 8002b20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	4909      	ldr	r1, [pc, #36]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	3301      	adds	r3, #1
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f47f ae8e 	bne.w	8002864 <HAL_GPIO_Init+0x14>
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	372c      	adds	r7, #44	; 0x2c
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	40010400 	.word	0x40010400

08002b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	887b      	ldrh	r3, [r7, #2]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e001      	b.n	8002b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	807b      	strh	r3, [r7, #2]
 8002b92:	4613      	mov	r3, r2
 8002b94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b96:	787b      	ldrb	r3, [r7, #1]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9c:	887a      	ldrh	r2, [r7, #2]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ba2:	e003      	b.n	8002bac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ba4:	887b      	ldrh	r3, [r7, #2]
 8002ba6:	041a      	lsls	r2, r3, #16
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	611a      	str	r2, [r3, #16]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bc8:	887a      	ldrh	r2, [r7, #2]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	041a      	lsls	r2, r3, #16
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	43d9      	mvns	r1, r3
 8002bd4:	887b      	ldrh	r3, [r7, #2]
 8002bd6:	400b      	ands	r3, r1
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	611a      	str	r2, [r3, #16]
}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e12b      	b.n	8002e52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe fce0 	bl	80015d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2224      	movs	r2, #36	; 0x24
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c4c:	f002 fa4a 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 8002c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4a81      	ldr	r2, [pc, #516]	; (8002e5c <HAL_I2C_Init+0x274>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d807      	bhi.n	8002c6c <HAL_I2C_Init+0x84>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a80      	ldr	r2, [pc, #512]	; (8002e60 <HAL_I2C_Init+0x278>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	bf94      	ite	ls
 8002c64:	2301      	movls	r3, #1
 8002c66:	2300      	movhi	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e006      	b.n	8002c7a <HAL_I2C_Init+0x92>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a7d      	ldr	r2, [pc, #500]	; (8002e64 <HAL_I2C_Init+0x27c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bf94      	ite	ls
 8002c74:	2301      	movls	r3, #1
 8002c76:	2300      	movhi	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0e7      	b.n	8002e52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a78      	ldr	r2, [pc, #480]	; (8002e68 <HAL_I2C_Init+0x280>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0c9b      	lsrs	r3, r3, #18
 8002c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a6a      	ldr	r2, [pc, #424]	; (8002e5c <HAL_I2C_Init+0x274>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d802      	bhi.n	8002cbc <HAL_I2C_Init+0xd4>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	e009      	b.n	8002cd0 <HAL_I2C_Init+0xe8>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	4a69      	ldr	r2, [pc, #420]	; (8002e6c <HAL_I2C_Init+0x284>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	099b      	lsrs	r3, r3, #6
 8002cce:	3301      	adds	r3, #1
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ce2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	495c      	ldr	r1, [pc, #368]	; (8002e5c <HAL_I2C_Init+0x274>)
 8002cec:	428b      	cmp	r3, r1
 8002cee:	d819      	bhi.n	8002d24 <HAL_I2C_Init+0x13c>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e59      	subs	r1, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cfe:	1c59      	adds	r1, r3, #1
 8002d00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d04:	400b      	ands	r3, r1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_I2C_Init+0x138>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1e59      	subs	r1, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1e:	e051      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002d20:	2304      	movs	r3, #4
 8002d22:	e04f      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d111      	bne.n	8002d50 <HAL_I2C_Init+0x168>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1e58      	subs	r0, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	440b      	add	r3, r1
 8002d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e012      	b.n	8002d76 <HAL_I2C_Init+0x18e>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e58      	subs	r0, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	0099      	lsls	r1, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Init+0x196>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e022      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10e      	bne.n	8002da4 <HAL_I2C_Init+0x1bc>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1e58      	subs	r0, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	440b      	add	r3, r1
 8002d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da2:	e00f      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1e58      	subs	r0, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	0099      	lsls	r1, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	6809      	ldr	r1, [r1, #0]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002df2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6911      	ldr	r1, [r2, #16]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68d2      	ldr	r2, [r2, #12]
 8002dfe:	4311      	orrs	r1, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	430b      	orrs	r3, r1
 8002e06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	000186a0 	.word	0x000186a0
 8002e60:	001e847f 	.word	0x001e847f
 8002e64:	003d08ff 	.word	0x003d08ff
 8002e68:	431bde83 	.word	0x431bde83
 8002e6c:	10624dd3 	.word	0x10624dd3

08002e70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e72:	b08b      	sub	sp, #44	; 0x2c
 8002e74:	af06      	add	r7, sp, #24
 8002e76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0f1      	b.n	8003066 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f009 ff90 	bl	800cdbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f003 f9a5 	bl	80061f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	687e      	ldr	r6, [r7, #4]
 8002eb6:	466d      	mov	r5, sp
 8002eb8:	f106 0410 	add.w	r4, r6, #16
 8002ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	602b      	str	r3, [r5, #0]
 8002ec4:	1d33      	adds	r3, r6, #4
 8002ec6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ec8:	6838      	ldr	r0, [r7, #0]
 8002eca:	f003 f96f 	bl	80061ac <USB_CoreInit>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0c2      	b.n	8003066 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 f9a0 	bl	800622c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]
 8002ef0:	e040      	b.n	8002f74 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	440b      	add	r3, r1
 8002f02:	3301      	adds	r3, #1
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	440b      	add	r3, r1
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3303      	adds	r3, #3
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f32:	7bfa      	ldrb	r2, [r7, #15]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	440b      	add	r3, r1
 8002f40:	3338      	adds	r3, #56	; 0x38
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	440b      	add	r3, r1
 8002f54:	333c      	adds	r3, #60	; 0x3c
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	3340      	adds	r3, #64	; 0x40
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	3301      	adds	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d3b9      	bcc.n	8002ef2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	73fb      	strb	r3, [r7, #15]
 8002f82:	e044      	b.n	800300e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	440b      	add	r3, r1
 8002fbe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fdc:	7bfa      	ldrb	r2, [r7, #15]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ff2:	7bfa      	ldrb	r2, [r7, #15]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	3301      	adds	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
 800300e:	7bfa      	ldrb	r2, [r7, #15]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	429a      	cmp	r2, r3
 8003016:	d3b5      	bcc.n	8002f84 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	687e      	ldr	r6, [r7, #4]
 8003020:	466d      	mov	r5, sp
 8003022:	f106 0410 	add.w	r4, r6, #16
 8003026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	602b      	str	r3, [r5, #0]
 800302e:	1d33      	adds	r3, r6, #4
 8003030:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003032:	6838      	ldr	r0, [r7, #0]
 8003034:	f003 f906 	bl	8006244 <USB_DevInit>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2202      	movs	r2, #2
 8003042:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e00d      	b.n	8003066 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f005 fb87 	bl	8008772 <USB_DevDisconnect>

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800306e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_PCD_Start+0x16>
 8003080:	2302      	movs	r3, #2
 8003082:	e016      	b.n	80030b2 <HAL_PCD_Start+0x44>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f003 f89b 	bl	80061cc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003096:	2101      	movs	r1, #1
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f00a f902 	bl	800d2a2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f005 fb5b 	bl	800875e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b088      	sub	sp, #32
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f005 fb5d 	bl	8008786 <USB_ReadInterrupts>
 80030cc:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fb1b 	bl	8003714 <PCD_EP_ISR_Handler>

    return;
 80030de:	e119      	b.n	8003314 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d013      	beq.n	8003112 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fc:	b292      	uxth	r2, r2
 80030fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f009 fed5 	bl	800ceb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003108:	2100      	movs	r1, #0
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f905 	bl	800331a <HAL_PCD_SetAddress>

    return;
 8003110:	e100      	b.n	8003314 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00c      	beq.n	8003136 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003124:	b29a      	uxth	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800312e:	b292      	uxth	r2, r2
 8003130:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003134:	e0ee      	b.n	8003314 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00c      	beq.n	800315a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003148:	b29a      	uxth	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003152:	b292      	uxth	r2, r2
 8003154:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003158:	e0dc      	b.n	8003314 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d027      	beq.n	80031b4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800316c:	b29a      	uxth	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0204 	bic.w	r2, r2, #4
 8003176:	b292      	uxth	r2, r2
 8003178:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003184:	b29a      	uxth	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0208 	bic.w	r2, r2, #8
 800318e:	b292      	uxth	r2, r2
 8003190:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f009 fec5 	bl	800cf24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031ac:	b292      	uxth	r2, r2
 80031ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80031b2:	e0af      	b.n	8003314 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8083 	beq.w	80032c6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e010      	b.n	80031e8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	7ffb      	ldrb	r3, [r7, #31]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	441a      	add	r2, r3
 80031d2:	7ffb      	ldrb	r3, [r7, #31]
 80031d4:	8812      	ldrh	r2, [r2, #0]
 80031d6:	b292      	uxth	r2, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	3320      	adds	r3, #32
 80031dc:	443b      	add	r3, r7
 80031de:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80031e2:	7ffb      	ldrb	r3, [r7, #31]
 80031e4:	3301      	adds	r3, #1
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	7ffb      	ldrb	r3, [r7, #31]
 80031ea:	2b07      	cmp	r3, #7
 80031ec:	d9eb      	bls.n	80031c6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	b292      	uxth	r2, r2
 8003202:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800320e:	b29a      	uxth	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	b292      	uxth	r2, r2
 800321a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800321e:	bf00      	nop
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003228:	b29b      	uxth	r3, r3
 800322a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f6      	beq.n	8003220 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003244:	b292      	uxth	r2, r2
 8003246:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800324a:	2300      	movs	r3, #0
 800324c:	77fb      	strb	r3, [r7, #31]
 800324e:	e00f      	b.n	8003270 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003250:	7ffb      	ldrb	r3, [r7, #31]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	4611      	mov	r1, r2
 8003258:	7ffa      	ldrb	r2, [r7, #31]
 800325a:	0092      	lsls	r2, r2, #2
 800325c:	440a      	add	r2, r1
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	3320      	adds	r3, #32
 8003262:	443b      	add	r3, r7
 8003264:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003268:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800326a:	7ffb      	ldrb	r3, [r7, #31]
 800326c:	3301      	adds	r3, #1
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	7ffb      	ldrb	r3, [r7, #31]
 8003272:	2b07      	cmp	r3, #7
 8003274:	d9ec      	bls.n	8003250 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800327e:	b29a      	uxth	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0208 	orr.w	r2, r2, #8
 8003288:	b292      	uxth	r2, r2
 800328a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003296:	b29a      	uxth	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a0:	b292      	uxth	r2, r2
 80032a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0204 	orr.w	r2, r2, #4
 80032b8:	b292      	uxth	r2, r2
 80032ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f009 fe16 	bl	800cef0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80032c4:	e026      	b.n	8003314 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00f      	beq.n	80032f0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032d8:	b29a      	uxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032e2:	b292      	uxth	r2, r2
 80032e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f009 fdd4 	bl	800ce96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80032ee:	e011      	b.n	8003314 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00c      	beq.n	8003314 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003302:	b29a      	uxth	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800330c:	b292      	uxth	r2, r2
 800330e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003312:	bf00      	nop
  }
}
 8003314:	3720      	adds	r7, #32
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	460b      	mov	r3, r1
 8003324:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_PCD_SetAddress+0x1a>
 8003330:	2302      	movs	r3, #2
 8003332:	e013      	b.n	800335c <HAL_PCD_SetAddress+0x42>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f005 f9f3 	bl	8008738 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	461a      	mov	r2, r3
 8003372:	4603      	mov	r3, r0
 8003374:	70fb      	strb	r3, [r7, #3]
 8003376:	460b      	mov	r3, r1
 8003378:	803b      	strh	r3, [r7, #0]
 800337a:	4613      	mov	r3, r2
 800337c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003386:	2b00      	cmp	r3, #0
 8003388:	da0e      	bge.n	80033a8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	705a      	strb	r2, [r3, #1]
 80033a6:	e00e      	b.n	80033c6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	f003 0207 	and.w	r2, r3, #7
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033d2:	883a      	ldrh	r2, [r7, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	78ba      	ldrb	r2, [r7, #2]
 80033dc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033de:	78bb      	ldrb	r3, [r7, #2]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d102      	bne.n	80033ea <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_PCD_EP_Open+0x94>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e00e      	b.n	8003416 <HAL_PCD_EP_Open+0xb2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68f9      	ldr	r1, [r7, #12]
 8003406:	4618      	mov	r0, r3
 8003408:	f002 ff3c 	bl	8006284 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003414:	7afb      	ldrb	r3, [r7, #11]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	460b      	mov	r3, r1
 8003428:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800342a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800342e:	2b00      	cmp	r3, #0
 8003430:	da0e      	bge.n	8003450 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2201      	movs	r2, #1
 800344c:	705a      	strb	r2, [r3, #1]
 800344e:	e00e      	b.n	800346e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	f003 0207 	and.w	r2, r3, #7
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800346e:	78fb      	ldrb	r3, [r7, #3]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	b2da      	uxtb	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_PCD_EP_Close+0x6a>
 8003484:	2302      	movs	r3, #2
 8003486:	e00e      	b.n	80034a6 <HAL_PCD_EP_Close+0x88>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68f9      	ldr	r1, [r7, #12]
 8003496:	4618      	mov	r0, r3
 8003498:	f003 fab4 	bl	8006a04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b086      	sub	sp, #24
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	460b      	mov	r3, r1
 80034bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034be:	7afb      	ldrb	r3, [r7, #11]
 80034c0:	f003 0207 	and.w	r2, r3, #7
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2200      	movs	r2, #0
 80034e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2200      	movs	r2, #0
 80034ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ee:	7afb      	ldrb	r3, [r7, #11]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6979      	ldr	r1, [r7, #20]
 8003500:	4618      	mov	r0, r3
 8003502:	f003 fc6b 	bl	8006ddc <USB_EPStartXfer>

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	f003 0207 	and.w	r2, r3, #7
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	440b      	add	r3, r1
 800352e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003532:	681b      	ldr	r3, [r3, #0]
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	460b      	mov	r3, r1
 800354c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354e:	7afb      	ldrb	r3, [r7, #11]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4413      	add	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2200      	movs	r2, #0
 8003582:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2201      	movs	r2, #1
 8003588:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800358a:	7afb      	ldrb	r3, [r7, #11]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	b2da      	uxtb	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6979      	ldr	r1, [r7, #20]
 800359c:	4618      	mov	r0, r3
 800359e:	f003 fc1d 	bl	8006ddc <USB_EPStartXfer>

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 0207 	and.w	r2, r3, #7
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d901      	bls.n	80035ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e04c      	b.n	8003664 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	da0e      	bge.n	80035f0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	705a      	strb	r2, [r3, #1]
 80035ee:	e00c      	b.n	800360a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	b2da      	uxtb	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_PCD_EP_SetStall+0x7e>
 8003626:	2302      	movs	r3, #2
 8003628:	e01c      	b.n	8003664 <HAL_PCD_EP_SetStall+0xb8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68f9      	ldr	r1, [r7, #12]
 8003638:	4618      	mov	r0, r3
 800363a:	f004 ff80 	bl	800853e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	2b00      	cmp	r3, #0
 8003646:	d108      	bne.n	800365a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003652:	4619      	mov	r1, r3
 8003654:	4610      	mov	r0, r2
 8003656:	f005 f8a5 	bl	80087a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	f003 020f 	and.w	r2, r3, #15
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	429a      	cmp	r2, r3
 8003684:	d901      	bls.n	800368a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e040      	b.n	800370c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800368a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800368e:	2b00      	cmp	r3, #0
 8003690:	da0e      	bge.n	80036b0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	4413      	add	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	705a      	strb	r2, [r3, #1]
 80036ae:	e00e      	b.n	80036ce <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	f003 0207 	and.w	r2, r3, #7
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_PCD_EP_ClrStall+0x82>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e00e      	b.n	800370c <HAL_PCD_EP_ClrStall+0xa0>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68f9      	ldr	r1, [r7, #12]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f004 ff6e 	bl	80085de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b096      	sub	sp, #88	; 0x58
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800371c:	e3bf      	b.n	8003e9e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003726:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800372a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003738:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800373c:	2b00      	cmp	r3, #0
 800373e:	f040 8179 	bne.w	8003a34 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003742:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b00      	cmp	r3, #0
 800374c:	d152      	bne.n	80037f4 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	b29b      	uxth	r3, r3
 8003756:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	81fb      	strh	r3, [r7, #14]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800376a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800376e:	b29b      	uxth	r3, r3
 8003770:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3328      	adds	r3, #40	; 0x28
 8003776:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003780:	b29b      	uxth	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	3302      	adds	r3, #2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80037a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a6:	695a      	ldr	r2, [r3, #20]
 80037a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	441a      	add	r2, r3
 80037ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80037b2:	2100      	movs	r1, #0
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f009 fb54 	bl	800ce62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 836b 	beq.w	8003e9e <PCD_EP_ISR_Handler+0x78a>
 80037c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f040 8366 	bne.w	8003e9e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	b292      	uxth	r2, r2
 80037e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037f2:	e354      	b.n	8003e9e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037fa:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003806:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800380a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380e:	2b00      	cmp	r3, #0
 8003810:	d034      	beq.n	800387c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381a:	b29b      	uxth	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	3306      	adds	r3, #6
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800383a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800383c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800384c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003850:	b29b      	uxth	r3, r3
 8003852:	f004 fff7 	bl	8008844 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b29a      	uxth	r2, r3
 800385e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003862:	4013      	ands	r3, r2
 8003864:	823b      	strh	r3, [r7, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	8a3a      	ldrh	r2, [r7, #16]
 800386c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003870:	b292      	uxth	r2, r2
 8003872:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f009 fac7 	bl	800ce08 <HAL_PCD_SetupStageCallback>
 800387a:	e310      	b.n	8003e9e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800387c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003880:	2b00      	cmp	r3, #0
 8003882:	f280 830c 	bge.w	8003e9e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	b29a      	uxth	r2, r3
 800388e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003892:	4013      	ands	r3, r2
 8003894:	83fb      	strh	r3, [r7, #30]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	8bfa      	ldrh	r2, [r7, #30]
 800389c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038a0:	b292      	uxth	r2, r2
 80038a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	461a      	mov	r2, r3
 80038b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4413      	add	r3, r2
 80038b8:	3306      	adds	r3, #6
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80038d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d019      	beq.n	800390c <PCD_EP_ISR_Handler+0x1f8>
 80038d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d015      	beq.n	800390c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e6:	6959      	ldr	r1, [r3, #20]
 80038e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80038ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	f004 ffa7 	bl	8008844 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80038f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	441a      	add	r2, r3
 8003900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003902:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003904:	2100      	movs	r1, #0
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f009 fa90 	bl	800ce2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003916:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800391a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800391e:	2b00      	cmp	r3, #0
 8003920:	f040 82bd 	bne.w	8003e9e <PCD_EP_ISR_Handler+0x78a>
 8003924:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003928:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800392c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003930:	f000 82b5 	beq.w	8003e9e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003942:	b29b      	uxth	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	4413      	add	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29b      	uxth	r3, r3
 800395a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800395e:	b29a      	uxth	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	801a      	strh	r2, [r3, #0]
 8003964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b3e      	cmp	r3, #62	; 0x3e
 800396a:	d91d      	bls.n	80039a8 <PCD_EP_ISR_Handler+0x294>
 800396c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	647b      	str	r3, [r7, #68]	; 0x44
 8003974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	2b00      	cmp	r3, #0
 800397e:	d102      	bne.n	8003986 <PCD_EP_ISR_Handler+0x272>
 8003980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003982:	3b01      	subs	r3, #1
 8003984:	647b      	str	r3, [r7, #68]	; 0x44
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	b29a      	uxth	r2, r3
 800398c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398e:	b29b      	uxth	r3, r3
 8003990:	029b      	lsls	r3, r3, #10
 8003992:	b29b      	uxth	r3, r3
 8003994:	4313      	orrs	r3, r2
 8003996:	b29b      	uxth	r3, r3
 8003998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800399c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	801a      	strh	r2, [r3, #0]
 80039a6:	e026      	b.n	80039f6 <PCD_EP_ISR_Handler+0x2e2>
 80039a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <PCD_EP_ISR_Handler+0x2b2>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039be:	b29a      	uxth	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	801a      	strh	r2, [r3, #0]
 80039c4:	e017      	b.n	80039f6 <PCD_EP_ISR_Handler+0x2e2>
 80039c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	085b      	lsrs	r3, r3, #1
 80039cc:	647b      	str	r3, [r7, #68]	; 0x44
 80039ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <PCD_EP_ISR_Handler+0x2cc>
 80039da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039dc:	3301      	adds	r3, #1
 80039de:	647b      	str	r3, [r7, #68]	; 0x44
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	029b      	lsls	r3, r3, #10
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	4313      	orrs	r3, r2
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a06:	827b      	strh	r3, [r7, #18]
 8003a08:	8a7b      	ldrh	r3, [r7, #18]
 8003a0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a0e:	827b      	strh	r3, [r7, #18]
 8003a10:	8a7b      	ldrh	r3, [r7, #18]
 8003a12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a16:	827b      	strh	r3, [r7, #18]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	8a7b      	ldrh	r3, [r7, #18]
 8003a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	8013      	strh	r3, [r2, #0]
 8003a32:	e234      	b.n	8003e9e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a48:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f280 80fc 	bge.w	8003c4a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a68:	4013      	ands	r3, r2
 8003a6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003a80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a84:	b292      	uxth	r2, r2
 8003a86:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003a88:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa0:	7b1b      	ldrb	r3, [r3, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d125      	bne.n	8003af2 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	3306      	adds	r3, #6
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ace:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003ad2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8092 	beq.w	8003c00 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ae2:	6959      	ldr	r1, [r3, #20]
 8003ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ae6:	88da      	ldrh	r2, [r3, #6]
 8003ae8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003aec:	f004 feaa 	bl	8008844 <USB_ReadPMA>
 8003af0:	e086      	b.n	8003c00 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af4:	78db      	ldrb	r3, [r3, #3]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d10a      	bne.n	8003b10 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003afa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003afe:	461a      	mov	r2, r3
 8003b00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f9d9 	bl	8003eba <HAL_PCD_EP_DB_Receive>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003b0e:	e077      	b.n	8003c00 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	441a      	add	r2, r3
 8003b3c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d024      	beq.n	8003bb8 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4413      	add	r3, r2
 8003b82:	3302      	adds	r3, #2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b96:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003b9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d02e      	beq.n	8003c00 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba8:	6959      	ldr	r1, [r3, #20]
 8003baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bac:	891a      	ldrh	r2, [r3, #8]
 8003bae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003bb2:	f004 fe47 	bl	8008844 <USB_ReadPMA>
 8003bb6:	e023      	b.n	8003c00 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	3306      	adds	r3, #6
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003be4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d009      	beq.n	8003c00 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf2:	6959      	ldr	r1, [r3, #20]
 8003bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf6:	895a      	ldrh	r2, [r3, #10]
 8003bf8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003bfc:	f004 fe22 	bl	8008844 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003c08:	441a      	add	r2, r3
 8003c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c0c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003c16:	441a      	add	r2, r3
 8003c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c1a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <PCD_EP_ISR_Handler+0x51c>
 8003c24:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d206      	bcs.n	8003c3e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	4619      	mov	r1, r3
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f009 f8f8 	bl	800ce2c <HAL_PCD_DataOutStageCallback>
 8003c3c:	e005      	b.n	8003c4a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c44:	4618      	mov	r0, r3
 8003c46:	f003 f8c9 	bl	8006ddc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 8123 	beq.w	8003e9e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c58:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	441a      	add	r2, r3
 8003c98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003caa:	78db      	ldrb	r3, [r3, #3]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	f040 80a2 	bne.w	8003df6 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cba:	7b1b      	ldrb	r3, [r3, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8093 	beq.w	8003de8 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d046      	beq.n	8003d5c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd0:	785b      	ldrb	r3, [r3, #1]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d126      	bne.n	8003d24 <PCD_EP_ISR_Handler+0x610>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	4413      	add	r3, r2
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
 8003cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	011a      	lsls	r2, r3, #4
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cfc:	623b      	str	r3, [r7, #32]
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	801a      	strh	r2, [r3, #0]
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	e061      	b.n	8003de8 <PCD_EP_ISR_Handler+0x6d4>
 8003d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d26:	785b      	ldrb	r3, [r3, #1]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d15d      	bne.n	8003de8 <PCD_EP_ISR_Handler+0x6d4>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	4413      	add	r3, r2
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	011a      	lsls	r2, r3, #4
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	2200      	movs	r2, #0
 8003d58:	801a      	strh	r2, [r3, #0]
 8003d5a:	e045      	b.n	8003de8 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d64:	785b      	ldrb	r3, [r3, #1]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d126      	bne.n	8003db8 <PCD_EP_ISR_Handler+0x6a4>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7e:	4413      	add	r3, r2
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
 8003d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	011a      	lsls	r2, r3, #4
 8003d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d90:	633b      	str	r3, [r7, #48]	; 0x30
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	801a      	strh	r2, [r3, #0]
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	801a      	strh	r2, [r3, #0]
 8003db6:	e017      	b.n	8003de8 <PCD_EP_ISR_Handler+0x6d4>
 8003db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dba:	785b      	ldrb	r3, [r3, #1]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d113      	bne.n	8003de8 <PCD_EP_ISR_Handler+0x6d4>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dce:	4413      	add	r3, r2
 8003dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	011a      	lsls	r2, r3, #4
 8003dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dda:	4413      	add	r3, r2
 8003ddc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003de0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2200      	movs	r2, #0
 8003de6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f009 f837 	bl	800ce62 <HAL_PCD_DataInStageCallback>
 8003df4:	e053      	b.n	8003e9e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003df6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d146      	bne.n	8003e90 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	3302      	adds	r3, #2
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d907      	bls.n	8003e4a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e42:	1ad2      	subs	r2, r2, r3
 8003e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e46:	619a      	str	r2, [r3, #24]
 8003e48:	e002      	b.n	8003e50 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d106      	bne.n	8003e66 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f008 ffff 	bl	800ce62 <HAL_PCD_DataInStageCallback>
 8003e64:	e01b      	b.n	8003e9e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e68:	695a      	ldr	r2, [r3, #20]
 8003e6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e6e:	441a      	add	r2, r3
 8003e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e72:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e7c:	441a      	add	r2, r3
 8003e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e80:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f002 ffa7 	bl	8006ddc <USB_EPStartXfer>
 8003e8e:	e006      	b.n	8003e9e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e94:	461a      	mov	r2, r3
 8003e96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f91b 	bl	80040d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	b21b      	sxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f6ff ac37 	blt.w	800371e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3758      	adds	r7, #88	; 0x58
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b088      	sub	sp, #32
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d07e      	beq.n	8003fd0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003efa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	699a      	ldr	r2, [r3, #24]
 8003f00:	8b7b      	ldrh	r3, [r7, #26]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d306      	bcc.n	8003f14 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	8b7b      	ldrh	r3, [r7, #26]
 8003f0c:	1ad2      	subs	r2, r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	619a      	str	r2, [r3, #24]
 8003f12:	e002      	b.n	8003f1a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2200      	movs	r2, #0
 8003f18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d123      	bne.n	8003f6a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3c:	833b      	strh	r3, [r7, #24]
 8003f3e:	8b3b      	ldrh	r3, [r7, #24]
 8003f40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f44:	833b      	strh	r3, [r7, #24]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	441a      	add	r2, r3
 8003f54:	8b3b      	ldrh	r3, [r7, #24]
 8003f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01f      	beq.n	8003fb4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	82fb      	strh	r3, [r7, #22]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	8afb      	ldrh	r3, [r7, #22]
 8003fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003fb4:	8b7b      	ldrh	r3, [r7, #26]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8087 	beq.w	80040ca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	6959      	ldr	r1, [r3, #20]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	891a      	ldrh	r2, [r3, #8]
 8003fc8:	8b7b      	ldrh	r3, [r7, #26]
 8003fca:	f004 fc3b 	bl	8008844 <USB_ReadPMA>
 8003fce:	e07c      	b.n	80040ca <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3306      	adds	r3, #6
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ff8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	8b7b      	ldrh	r3, [r7, #26]
 8004000:	429a      	cmp	r2, r3
 8004002:	d306      	bcc.n	8004012 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	699a      	ldr	r2, [r3, #24]
 8004008:	8b7b      	ldrh	r3, [r7, #26]
 800400a:	1ad2      	subs	r2, r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	619a      	str	r2, [r3, #24]
 8004010:	e002      	b.n	8004018 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2200      	movs	r2, #0
 8004016:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d123      	bne.n	8004068 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	83fb      	strh	r3, [r7, #30]
 800403c:	8bfb      	ldrh	r3, [r7, #30]
 800403e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004042:	83fb      	strh	r3, [r7, #30]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	8bfb      	ldrh	r3, [r7, #30]
 8004054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800405c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004064:	b29b      	uxth	r3, r3
 8004066:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d11f      	bne.n	80040b2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408c:	83bb      	strh	r3, [r7, #28]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	441a      	add	r2, r3
 800409c:	8bbb      	ldrh	r3, [r7, #28]
 800409e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80040b2:	8b7b      	ldrh	r3, [r7, #26]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	6959      	ldr	r1, [r3, #20]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	895a      	ldrh	r2, [r3, #10]
 80040c4:	8b7b      	ldrh	r3, [r7, #26]
 80040c6:	f004 fbbd 	bl	8008844 <USB_ReadPMA>
    }
  }

  return count;
 80040ca:	8b7b      	ldrh	r3, [r7, #26]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3720      	adds	r7, #32
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b0a4      	sub	sp, #144	; 0x90
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	4613      	mov	r3, r2
 80040e0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 81dd 	beq.w	80044a8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	3302      	adds	r3, #2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	6812      	ldr	r2, [r2, #0]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004116:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004122:	429a      	cmp	r2, r3
 8004124:	d907      	bls.n	8004136 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800412e:	1ad2      	subs	r2, r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	619a      	str	r2, [r3, #24]
 8004134:	e002      	b.n	800413c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	f040 80b9 	bne.w	80042b8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	785b      	ldrb	r3, [r3, #1]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d126      	bne.n	800419c <HAL_PCD_EP_DB_Transmit+0xc8>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415c:	b29b      	uxth	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	4413      	add	r3, r2
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	011a      	lsls	r2, r3, #4
 800416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416e:	4413      	add	r3, r2
 8004170:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004180:	b29a      	uxth	r2, r3
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	b29b      	uxth	r3, r3
 800418c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004194:	b29a      	uxth	r2, r3
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	801a      	strh	r2, [r3, #0]
 800419a:	e01a      	b.n	80041d2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d116      	bne.n	80041d2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	637b      	str	r3, [r7, #52]	; 0x34
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b8:	4413      	add	r3, r2
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	011a      	lsls	r2, r3, #4
 80041c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c4:	4413      	add	r3, r2
 80041c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041ca:	633b      	str	r3, [r7, #48]	; 0x30
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	2200      	movs	r2, #0
 80041d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d126      	bne.n	800422e <HAL_PCD_EP_DB_Transmit+0x15a>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	011a      	lsls	r2, r3, #4
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	4413      	add	r3, r2
 8004202:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004206:	61bb      	str	r3, [r7, #24]
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	b29b      	uxth	r3, r3
 800420e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004212:	b29a      	uxth	r2, r3
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	801a      	strh	r2, [r3, #0]
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004226:	b29a      	uxth	r2, r3
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	801a      	strh	r2, [r3, #0]
 800422c:	e017      	b.n	800425e <HAL_PCD_EP_DB_Transmit+0x18a>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	785b      	ldrb	r3, [r3, #1]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d113      	bne.n	800425e <HAL_PCD_EP_DB_Transmit+0x18a>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800423e:	b29b      	uxth	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	4413      	add	r3, r2
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	011a      	lsls	r2, r3, #4
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	4413      	add	r3, r2
 8004252:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004256:	623b      	str	r3, [r7, #32]
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	2200      	movs	r2, #0
 800425c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	4619      	mov	r1, r3
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f008 fdfc 	bl	800ce62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 82fc 	beq.w	800486e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004290:	82fb      	strh	r3, [r7, #22]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	441a      	add	r2, r3
 80042a0:	8afb      	ldrh	r3, [r7, #22]
 80042a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	8013      	strh	r3, [r2, #0]
 80042b6:	e2da      	b.n	800486e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d021      	beq.n	8004306 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042dc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	441a      	add	r2, r3
 80042ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80042f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004302:	b29b      	uxth	r3, r3
 8004304:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800430c:	2b01      	cmp	r3, #1
 800430e:	f040 82ae 	bne.w	800486e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800431a:	441a      	add	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	69da      	ldr	r2, [r3, #28]
 8004324:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004328:	441a      	add	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	6a1a      	ldr	r2, [r3, #32]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	429a      	cmp	r2, r3
 8004338:	d30b      	bcc.n	8004352 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6a1a      	ldr	r2, [r3, #32]
 8004346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800434a:	1ad2      	subs	r2, r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	621a      	str	r2, [r3, #32]
 8004350:	e017      	b.n	8004382 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d108      	bne.n	800436c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800435a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800435e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800436a:	e00a      	b.n	8004382 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2200      	movs	r2, #0
 8004380:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	785b      	ldrb	r3, [r3, #1]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d165      	bne.n	8004456 <HAL_PCD_EP_DB_Transmit+0x382>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004398:	b29b      	uxth	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439e:	4413      	add	r3, r2
 80043a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	011a      	lsls	r2, r3, #4
 80043a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043aa:	4413      	add	r3, r2
 80043ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80043b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043bc:	b29a      	uxth	r2, r3
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043c6:	2b3e      	cmp	r3, #62	; 0x3e
 80043c8:	d91d      	bls.n	8004406 <HAL_PCD_EP_DB_Transmit+0x332>
 80043ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <HAL_PCD_EP_DB_Transmit+0x310>
 80043de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e0:	3b01      	subs	r3, #1
 80043e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	029b      	lsls	r3, r3, #10
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	4313      	orrs	r3, r2
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043fe:	b29a      	uxth	r2, r3
 8004400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004402:	801a      	strh	r2, [r3, #0]
 8004404:	e044      	b.n	8004490 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10a      	bne.n	8004424 <HAL_PCD_EP_DB_Transmit+0x350>
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441c:	b29a      	uxth	r2, r3
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	801a      	strh	r2, [r3, #0]
 8004422:	e035      	b.n	8004490 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004424:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	64bb      	str	r3, [r7, #72]	; 0x48
 800442c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_PCD_EP_DB_Transmit+0x36a>
 8004438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800443a:	3301      	adds	r3, #1
 800443c:	64bb      	str	r3, [r7, #72]	; 0x48
 800443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	b29a      	uxth	r2, r3
 8004444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004446:	b29b      	uxth	r3, r3
 8004448:	029b      	lsls	r3, r3, #10
 800444a:	b29b      	uxth	r3, r3
 800444c:	4313      	orrs	r3, r2
 800444e:	b29a      	uxth	r2, r3
 8004450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004452:	801a      	strh	r2, [r3, #0]
 8004454:	e01c      	b.n	8004490 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	785b      	ldrb	r3, [r3, #1]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d118      	bne.n	8004490 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	647b      	str	r3, [r7, #68]	; 0x44
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800446c:	b29b      	uxth	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004472:	4413      	add	r3, r2
 8004474:	647b      	str	r3, [r7, #68]	; 0x44
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	011a      	lsls	r2, r3, #4
 800447c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447e:	4413      	add	r3, r2
 8004480:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004484:	643b      	str	r3, [r7, #64]	; 0x40
 8004486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800448a:	b29a      	uxth	r2, r3
 800448c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800448e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	6959      	ldr	r1, [r3, #20]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	891a      	ldrh	r2, [r3, #8]
 800449c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f004 f98a 	bl	80087ba <USB_WritePMA>
 80044a6:	e1e2      	b.n	800486e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4413      	add	r3, r2
 80044bc:	3306      	adds	r3, #6
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044d0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80044dc:	429a      	cmp	r2, r3
 80044de:	d307      	bcc.n	80044f0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80044e8:	1ad2      	subs	r2, r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	619a      	str	r2, [r3, #24]
 80044ee:	e002      	b.n	80044f6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2200      	movs	r2, #0
 80044f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f040 80c0 	bne.w	8004680 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	785b      	ldrb	r3, [r3, #1]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d126      	bne.n	8004556 <HAL_PCD_EP_DB_Transmit+0x482>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004516:	b29b      	uxth	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800451c:	4413      	add	r3, r2
 800451e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	011a      	lsls	r2, r3, #4
 8004526:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004528:	4413      	add	r3, r2
 800452a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800452e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29b      	uxth	r3, r3
 8004536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800453a:	b29a      	uxth	r2, r3
 800453c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800453e:	801a      	strh	r2, [r3, #0]
 8004540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	b29b      	uxth	r3, r3
 8004546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800454a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800454e:	b29a      	uxth	r2, r3
 8004550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004552:	801a      	strh	r2, [r3, #0]
 8004554:	e01a      	b.n	800458c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	785b      	ldrb	r3, [r3, #1]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d116      	bne.n	800458c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	667b      	str	r3, [r7, #100]	; 0x64
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800456c:	b29b      	uxth	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004572:	4413      	add	r3, r2
 8004574:	667b      	str	r3, [r7, #100]	; 0x64
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	011a      	lsls	r2, r3, #4
 800457c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800457e:	4413      	add	r3, r2
 8004580:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004584:	663b      	str	r3, [r7, #96]	; 0x60
 8004586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004588:	2200      	movs	r2, #0
 800458a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	677b      	str	r3, [r7, #116]	; 0x74
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	785b      	ldrb	r3, [r3, #1]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d12b      	bne.n	80045f2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ae:	4413      	add	r3, r2
 80045b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	011a      	lsls	r2, r3, #4
 80045b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ba:	4413      	add	r3, r2
 80045bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045ee:	801a      	strh	r2, [r3, #0]
 80045f0:	e017      	b.n	8004622 <HAL_PCD_EP_DB_Transmit+0x54e>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	785b      	ldrb	r3, [r3, #1]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d113      	bne.n	8004622 <HAL_PCD_EP_DB_Transmit+0x54e>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004602:	b29b      	uxth	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004608:	4413      	add	r3, r2
 800460a:	677b      	str	r3, [r7, #116]	; 0x74
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	011a      	lsls	r2, r3, #4
 8004612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004614:	4413      	add	r3, r2
 8004616:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800461a:	673b      	str	r3, [r7, #112]	; 0x70
 800461c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800461e:	2200      	movs	r2, #0
 8004620:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	4619      	mov	r1, r3
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f008 fc1a 	bl	800ce62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004634:	2b00      	cmp	r3, #0
 8004636:	f040 811a 	bne.w	800486e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004654:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	441a      	add	r2, r3
 8004666:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800466a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800466e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467a:	b29b      	uxth	r3, r3
 800467c:	8013      	strh	r3, [r2, #0]
 800467e:	e0f6      	b.n	800486e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d121      	bne.n	80046ce <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	441a      	add	r2, r3
 80046b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	f040 80ca 	bne.w	800486e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	695a      	ldr	r2, [r3, #20]
 80046de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80046e2:	441a      	add	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80046f0:	441a      	add	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d30b      	bcc.n	800471a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6a1a      	ldr	r2, [r3, #32]
 800470e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004712:	1ad2      	subs	r2, r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	621a      	str	r2, [r3, #32]
 8004718:	e017      	b.n	800474a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d108      	bne.n	8004734 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004722:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004732:	e00a      	b.n	800474a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2200      	movs	r2, #0
 8004740:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	657b      	str	r3, [r7, #84]	; 0x54
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	785b      	ldrb	r3, [r3, #1]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d165      	bne.n	8004824 <HAL_PCD_EP_DB_Transmit+0x750>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004766:	b29b      	uxth	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800476c:	4413      	add	r3, r2
 800476e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	011a      	lsls	r2, r3, #4
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	4413      	add	r3, r2
 800477a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800477e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	b29b      	uxth	r3, r3
 8004786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800478a:	b29a      	uxth	r2, r3
 800478c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800478e:	801a      	strh	r2, [r3, #0]
 8004790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004794:	2b3e      	cmp	r3, #62	; 0x3e
 8004796:	d91d      	bls.n	80047d4 <HAL_PCD_EP_DB_Transmit+0x700>
 8004798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <HAL_PCD_EP_DB_Transmit+0x6de>
 80047ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ae:	3b01      	subs	r3, #1
 80047b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	029b      	lsls	r3, r3, #10
 80047be:	b29b      	uxth	r3, r3
 80047c0:	4313      	orrs	r3, r2
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047d0:	801a      	strh	r2, [r3, #0]
 80047d2:	e041      	b.n	8004858 <HAL_PCD_EP_DB_Transmit+0x784>
 80047d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <HAL_PCD_EP_DB_Transmit+0x71e>
 80047dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ee:	801a      	strh	r2, [r3, #0]
 80047f0:	e032      	b.n	8004858 <HAL_PCD_EP_DB_Transmit+0x784>
 80047f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_PCD_EP_DB_Transmit+0x738>
 8004806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004808:	3301      	adds	r3, #1
 800480a:	66bb      	str	r3, [r7, #104]	; 0x68
 800480c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29a      	uxth	r2, r3
 8004812:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004814:	b29b      	uxth	r3, r3
 8004816:	029b      	lsls	r3, r3, #10
 8004818:	b29b      	uxth	r3, r3
 800481a:	4313      	orrs	r3, r2
 800481c:	b29a      	uxth	r2, r3
 800481e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004820:	801a      	strh	r2, [r3, #0]
 8004822:	e019      	b.n	8004858 <HAL_PCD_EP_DB_Transmit+0x784>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d115      	bne.n	8004858 <HAL_PCD_EP_DB_Transmit+0x784>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004834:	b29b      	uxth	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483a:	4413      	add	r3, r2
 800483c:	657b      	str	r3, [r7, #84]	; 0x54
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	011a      	lsls	r2, r3, #4
 8004844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004846:	4413      	add	r3, r2
 8004848:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800484c:	653b      	str	r3, [r7, #80]	; 0x50
 800484e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004852:	b29a      	uxth	r2, r3
 8004854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004856:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6959      	ldr	r1, [r3, #20]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	895a      	ldrh	r2, [r3, #10]
 8004864:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004868:	b29b      	uxth	r3, r3
 800486a:	f003 ffa6 	bl	80087ba <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004888:	82bb      	strh	r3, [r7, #20]
 800488a:	8abb      	ldrh	r3, [r7, #20]
 800488c:	f083 0310 	eor.w	r3, r3, #16
 8004890:	82bb      	strh	r3, [r7, #20]
 8004892:	8abb      	ldrh	r3, [r7, #20]
 8004894:	f083 0320 	eor.w	r3, r3, #32
 8004898:	82bb      	strh	r3, [r7, #20]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	441a      	add	r2, r3
 80048a8:	8abb      	ldrh	r3, [r7, #20]
 80048aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3790      	adds	r7, #144	; 0x90
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	460b      	mov	r3, r1
 80048d4:	817b      	strh	r3, [r7, #10]
 80048d6:	4613      	mov	r3, r2
 80048d8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80048da:	897b      	ldrh	r3, [r7, #10]
 80048dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048e6:	897b      	ldrh	r3, [r7, #10]
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	4613      	mov	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e009      	b.n	8004912 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048fe:	897a      	ldrh	r2, [r7, #10]
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004912:	893b      	ldrh	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d107      	bne.n	8004928 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2200      	movs	r2, #0
 800491c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	b29a      	uxth	r2, r3
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	80da      	strh	r2, [r3, #6]
 8004926:	e00b      	b.n	8004940 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2201      	movs	r2, #1
 800492c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	b29a      	uxth	r2, r3
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	b29a      	uxth	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e272      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 8087 	beq.w	8004a7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800496c:	4b92      	ldr	r3, [pc, #584]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 030c 	and.w	r3, r3, #12
 8004974:	2b04      	cmp	r3, #4
 8004976:	d00c      	beq.n	8004992 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004978:	4b8f      	ldr	r3, [pc, #572]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 030c 	and.w	r3, r3, #12
 8004980:	2b08      	cmp	r3, #8
 8004982:	d112      	bne.n	80049aa <HAL_RCC_OscConfig+0x5e>
 8004984:	4b8c      	ldr	r3, [pc, #560]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800498c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004990:	d10b      	bne.n	80049aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004992:	4b89      	ldr	r3, [pc, #548]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d06c      	beq.n	8004a78 <HAL_RCC_OscConfig+0x12c>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d168      	bne.n	8004a78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e24c      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b2:	d106      	bne.n	80049c2 <HAL_RCC_OscConfig+0x76>
 80049b4:	4b80      	ldr	r3, [pc, #512]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a7f      	ldr	r2, [pc, #508]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 80049ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	e02e      	b.n	8004a20 <HAL_RCC_OscConfig+0xd4>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCC_OscConfig+0x98>
 80049ca:	4b7b      	ldr	r3, [pc, #492]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a7a      	ldr	r2, [pc, #488]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 80049d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	4b78      	ldr	r3, [pc, #480]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a77      	ldr	r2, [pc, #476]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e01d      	b.n	8004a20 <HAL_RCC_OscConfig+0xd4>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCC_OscConfig+0xbc>
 80049ee:	4b72      	ldr	r3, [pc, #456]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a71      	ldr	r2, [pc, #452]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 80049f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	4b6f      	ldr	r3, [pc, #444]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a6e      	ldr	r2, [pc, #440]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e00b      	b.n	8004a20 <HAL_RCC_OscConfig+0xd4>
 8004a08:	4b6b      	ldr	r3, [pc, #428]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a6a      	ldr	r2, [pc, #424]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	4b68      	ldr	r3, [pc, #416]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a67      	ldr	r2, [pc, #412]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d013      	beq.n	8004a50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7fd f878 	bl	8001b1c <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a30:	f7fd f874 	bl	8001b1c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	; 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e200      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	4b5d      	ldr	r3, [pc, #372]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0xe4>
 8004a4e:	e014      	b.n	8004a7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a50:	f7fd f864 	bl	8001b1c <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a58:	f7fd f860 	bl	8001b1c <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b64      	cmp	r3, #100	; 0x64
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e1ec      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6a:	4b53      	ldr	r3, [pc, #332]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x10c>
 8004a76:	e000      	b.n	8004a7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d063      	beq.n	8004b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a86:	4b4c      	ldr	r3, [pc, #304]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a92:	4b49      	ldr	r3, [pc, #292]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d11c      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x18c>
 8004a9e:	4b46      	ldr	r3, [pc, #280]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d116      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aaa:	4b43      	ldr	r3, [pc, #268]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x176>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d001      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e1c0      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac2:	4b3d      	ldr	r3, [pc, #244]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4939      	ldr	r1, [pc, #228]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad6:	e03a      	b.n	8004b4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d020      	beq.n	8004b22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ae0:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae6:	f7fd f819 	bl	8001b1c <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aee:	f7fd f815 	bl	8001b1c <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e1a1      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b00:	4b2d      	ldr	r3, [pc, #180]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0f0      	beq.n	8004aee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0c:	4b2a      	ldr	r3, [pc, #168]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4927      	ldr	r1, [pc, #156]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	600b      	str	r3, [r1, #0]
 8004b20:	e015      	b.n	8004b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b22:	4b26      	ldr	r3, [pc, #152]	; (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b28:	f7fc fff8 	bl	8001b1c <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b30:	f7fc fff4 	bl	8001b1c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e180      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b42:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d03a      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d019      	beq.n	8004b96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b62:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <HAL_RCC_OscConfig+0x274>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b68:	f7fc ffd8 	bl	8001b1c <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b70:	f7fc ffd4 	bl	8001b1c <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e160      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b82:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <HAL_RCC_OscConfig+0x26c>)
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b8e:	2001      	movs	r0, #1
 8004b90:	f000 fb00 	bl	8005194 <RCC_Delay>
 8004b94:	e01c      	b.n	8004bd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b96:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <HAL_RCC_OscConfig+0x274>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9c:	f7fc ffbe 	bl	8001b1c <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba2:	e00f      	b.n	8004bc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba4:	f7fc ffba 	bl	8001b1c <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d908      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e146      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	42420000 	.word	0x42420000
 8004bc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc4:	4b92      	ldr	r3, [pc, #584]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e9      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80a6 	beq.w	8004d2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bde:	2300      	movs	r3, #0
 8004be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004be2:	4b8b      	ldr	r3, [pc, #556]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10d      	bne.n	8004c0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bee:	4b88      	ldr	r3, [pc, #544]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	4a87      	ldr	r2, [pc, #540]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	61d3      	str	r3, [r2, #28]
 8004bfa:	4b85      	ldr	r3, [pc, #532]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c02:	60bb      	str	r3, [r7, #8]
 8004c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c06:	2301      	movs	r3, #1
 8004c08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0a:	4b82      	ldr	r3, [pc, #520]	; (8004e14 <HAL_RCC_OscConfig+0x4c8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d118      	bne.n	8004c48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c16:	4b7f      	ldr	r3, [pc, #508]	; (8004e14 <HAL_RCC_OscConfig+0x4c8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a7e      	ldr	r2, [pc, #504]	; (8004e14 <HAL_RCC_OscConfig+0x4c8>)
 8004c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c22:	f7fc ff7b 	bl	8001b1c <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c2a:	f7fc ff77 	bl	8001b1c <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b64      	cmp	r3, #100	; 0x64
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e103      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3c:	4b75      	ldr	r3, [pc, #468]	; (8004e14 <HAL_RCC_OscConfig+0x4c8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x312>
 8004c50:	4b6f      	ldr	r3, [pc, #444]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	4a6e      	ldr	r2, [pc, #440]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	6213      	str	r3, [r2, #32]
 8004c5c:	e02d      	b.n	8004cba <HAL_RCC_OscConfig+0x36e>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x334>
 8004c66:	4b6a      	ldr	r3, [pc, #424]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	4a69      	ldr	r2, [pc, #420]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	6213      	str	r3, [r2, #32]
 8004c72:	4b67      	ldr	r3, [pc, #412]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	4a66      	ldr	r2, [pc, #408]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004c78:	f023 0304 	bic.w	r3, r3, #4
 8004c7c:	6213      	str	r3, [r2, #32]
 8004c7e:	e01c      	b.n	8004cba <HAL_RCC_OscConfig+0x36e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	2b05      	cmp	r3, #5
 8004c86:	d10c      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x356>
 8004c88:	4b61      	ldr	r3, [pc, #388]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	4a60      	ldr	r2, [pc, #384]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004c8e:	f043 0304 	orr.w	r3, r3, #4
 8004c92:	6213      	str	r3, [r2, #32]
 8004c94:	4b5e      	ldr	r3, [pc, #376]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	4a5d      	ldr	r2, [pc, #372]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	6213      	str	r3, [r2, #32]
 8004ca0:	e00b      	b.n	8004cba <HAL_RCC_OscConfig+0x36e>
 8004ca2:	4b5b      	ldr	r3, [pc, #364]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	4a5a      	ldr	r2, [pc, #360]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	6213      	str	r3, [r2, #32]
 8004cae:	4b58      	ldr	r3, [pc, #352]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	4a57      	ldr	r2, [pc, #348]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004cb4:	f023 0304 	bic.w	r3, r3, #4
 8004cb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d015      	beq.n	8004cee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc2:	f7fc ff2b 	bl	8001b1c <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc8:	e00a      	b.n	8004ce0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cca:	f7fc ff27 	bl	8001b1c <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e0b1      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce0:	4b4b      	ldr	r3, [pc, #300]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0ee      	beq.n	8004cca <HAL_RCC_OscConfig+0x37e>
 8004cec:	e014      	b.n	8004d18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cee:	f7fc ff15 	bl	8001b1c <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf4:	e00a      	b.n	8004d0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf6:	f7fc ff11 	bl	8001b1c <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e09b      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d0c:	4b40      	ldr	r3, [pc, #256]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1ee      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d105      	bne.n	8004d2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1e:	4b3c      	ldr	r3, [pc, #240]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	4a3b      	ldr	r2, [pc, #236]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 8087 	beq.w	8004e42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d34:	4b36      	ldr	r3, [pc, #216]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 030c 	and.w	r3, r3, #12
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d061      	beq.n	8004e04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d146      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d48:	4b33      	ldr	r3, [pc, #204]	; (8004e18 <HAL_RCC_OscConfig+0x4cc>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4e:	f7fc fee5 	bl	8001b1c <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d56:	f7fc fee1 	bl	8001b1c <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e06d      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d68:	4b29      	ldr	r3, [pc, #164]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f0      	bne.n	8004d56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d7c:	d108      	bne.n	8004d90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d7e:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	4921      	ldr	r1, [pc, #132]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d90:	4b1f      	ldr	r3, [pc, #124]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a19      	ldr	r1, [r3, #32]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	430b      	orrs	r3, r1
 8004da2:	491b      	ldr	r1, [pc, #108]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004da8:	4b1b      	ldr	r3, [pc, #108]	; (8004e18 <HAL_RCC_OscConfig+0x4cc>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dae:	f7fc feb5 	bl	8001b1c <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db6:	f7fc feb1 	bl	8001b1c <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e03d      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dc8:	4b11      	ldr	r3, [pc, #68]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x46a>
 8004dd4:	e035      	b.n	8004e42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <HAL_RCC_OscConfig+0x4cc>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ddc:	f7fc fe9e 	bl	8001b1c <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de4:	f7fc fe9a 	bl	8001b1c <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e026      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <HAL_RCC_OscConfig+0x4c4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f0      	bne.n	8004de4 <HAL_RCC_OscConfig+0x498>
 8004e02:	e01e      	b.n	8004e42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d107      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e019      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
 8004e10:	40021000 	.word	0x40021000
 8004e14:	40007000 	.word	0x40007000
 8004e18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d106      	bne.n	8004e3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d001      	beq.n	8004e42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40021000 	.word	0x40021000

08004e50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0d0      	b.n	8005006 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e64:	4b6a      	ldr	r3, [pc, #424]	; (8005010 <HAL_RCC_ClockConfig+0x1c0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d910      	bls.n	8004e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e72:	4b67      	ldr	r3, [pc, #412]	; (8005010 <HAL_RCC_ClockConfig+0x1c0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f023 0207 	bic.w	r2, r3, #7
 8004e7a:	4965      	ldr	r1, [pc, #404]	; (8005010 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e82:	4b63      	ldr	r3, [pc, #396]	; (8005010 <HAL_RCC_ClockConfig+0x1c0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0b8      	b.n	8005006 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d020      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eac:	4b59      	ldr	r3, [pc, #356]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	4a58      	ldr	r2, [pc, #352]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004eb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ec4:	4b53      	ldr	r3, [pc, #332]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4a52      	ldr	r2, [pc, #328]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004eca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ece:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed0:	4b50      	ldr	r3, [pc, #320]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	494d      	ldr	r1, [pc, #308]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d040      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef6:	4b47      	ldr	r3, [pc, #284]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d115      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e07f      	b.n	8005006 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d107      	bne.n	8004f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f0e:	4b41      	ldr	r3, [pc, #260]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e073      	b.n	8005006 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f1e:	4b3d      	ldr	r3, [pc, #244]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e06b      	b.n	8005006 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f2e:	4b39      	ldr	r3, [pc, #228]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f023 0203 	bic.w	r2, r3, #3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	4936      	ldr	r1, [pc, #216]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f40:	f7fc fdec 	bl	8001b1c <HAL_GetTick>
 8004f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f46:	e00a      	b.n	8004f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f48:	f7fc fde8 	bl	8001b1c <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e053      	b.n	8005006 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5e:	4b2d      	ldr	r3, [pc, #180]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f003 020c 	and.w	r2, r3, #12
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d1eb      	bne.n	8004f48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f70:	4b27      	ldr	r3, [pc, #156]	; (8005010 <HAL_RCC_ClockConfig+0x1c0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d210      	bcs.n	8004fa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7e:	4b24      	ldr	r3, [pc, #144]	; (8005010 <HAL_RCC_ClockConfig+0x1c0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 0207 	bic.w	r2, r3, #7
 8004f86:	4922      	ldr	r1, [pc, #136]	; (8005010 <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b20      	ldr	r3, [pc, #128]	; (8005010 <HAL_RCC_ClockConfig+0x1c0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e032      	b.n	8005006 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fac:	4b19      	ldr	r3, [pc, #100]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4916      	ldr	r1, [pc, #88]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d009      	beq.n	8004fde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fca:	4b12      	ldr	r3, [pc, #72]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	490e      	ldr	r1, [pc, #56]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fde:	f000 f821 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	091b      	lsrs	r3, r3, #4
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	490a      	ldr	r1, [pc, #40]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004ff0:	5ccb      	ldrb	r3, [r1, r3]
 8004ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <HAL_RCC_ClockConfig+0x1cc>)
 8004ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_RCC_ClockConfig+0x1d0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fc fc50 	bl	80018a4 <HAL_InitTick>

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40022000 	.word	0x40022000
 8005014:	40021000 	.word	0x40021000
 8005018:	0800de08 	.word	0x0800de08
 800501c:	20000000 	.word	0x20000000
 8005020:	20000004 	.word	0x20000004

08005024 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	2300      	movs	r3, #0
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	2300      	movs	r3, #0
 8005038:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800503e:	4b1e      	ldr	r3, [pc, #120]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b04      	cmp	r3, #4
 800504c:	d002      	beq.n	8005054 <HAL_RCC_GetSysClockFreq+0x30>
 800504e:	2b08      	cmp	r3, #8
 8005050:	d003      	beq.n	800505a <HAL_RCC_GetSysClockFreq+0x36>
 8005052:	e027      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005054:	4b19      	ldr	r3, [pc, #100]	; (80050bc <HAL_RCC_GetSysClockFreq+0x98>)
 8005056:	613b      	str	r3, [r7, #16]
      break;
 8005058:	e027      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	0c9b      	lsrs	r3, r3, #18
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	4a17      	ldr	r2, [pc, #92]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005064:	5cd3      	ldrb	r3, [r2, r3]
 8005066:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d010      	beq.n	8005094 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005072:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	0c5b      	lsrs	r3, r3, #17
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	4a11      	ldr	r2, [pc, #68]	; (80050c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800507e:	5cd3      	ldrb	r3, [r2, r3]
 8005080:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a0d      	ldr	r2, [pc, #52]	; (80050bc <HAL_RCC_GetSysClockFreq+0x98>)
 8005086:	fb03 f202 	mul.w	r2, r3, r2
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	e004      	b.n	800509e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a0c      	ldr	r2, [pc, #48]	; (80050c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005098:	fb02 f303 	mul.w	r3, r2, r3
 800509c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	613b      	str	r3, [r7, #16]
      break;
 80050a2:	e002      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050a4:	4b09      	ldr	r3, [pc, #36]	; (80050cc <HAL_RCC_GetSysClockFreq+0xa8>)
 80050a6:	613b      	str	r3, [r7, #16]
      break;
 80050a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050aa:	693b      	ldr	r3, [r7, #16]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000
 80050bc:	00f42400 	.word	0x00f42400
 80050c0:	0800de20 	.word	0x0800de20
 80050c4:	0800de30 	.word	0x0800de30
 80050c8:	003d0900 	.word	0x003d0900
 80050cc:	007a1200 	.word	0x007a1200

080050d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d4:	4b02      	ldr	r3, [pc, #8]	; (80050e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	20000000 	.word	0x20000000

080050e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050e8:	f7ff fff2 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	4903      	ldr	r1, [pc, #12]	; (8005108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005100:	4618      	mov	r0, r3
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40021000 	.word	0x40021000
 8005108:	0800de18 	.word	0x0800de18

0800510c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005110:	f7ff ffde 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 8005114:	4602      	mov	r2, r0
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	0adb      	lsrs	r3, r3, #11
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	4903      	ldr	r1, [pc, #12]	; (8005130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40021000 	.word	0x40021000
 8005130:	0800de18 	.word	0x0800de18

08005134 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	220f      	movs	r2, #15
 8005142:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005144:	4b11      	ldr	r3, [pc, #68]	; (800518c <HAL_RCC_GetClockConfig+0x58>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f003 0203 	and.w	r2, r3, #3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005150:	4b0e      	ldr	r3, [pc, #56]	; (800518c <HAL_RCC_GetClockConfig+0x58>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800515c:	4b0b      	ldr	r3, [pc, #44]	; (800518c <HAL_RCC_GetClockConfig+0x58>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005168:	4b08      	ldr	r3, [pc, #32]	; (800518c <HAL_RCC_GetClockConfig+0x58>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	08db      	lsrs	r3, r3, #3
 800516e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005176:	4b06      	ldr	r3, [pc, #24]	; (8005190 <HAL_RCC_GetClockConfig+0x5c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0207 	and.w	r2, r3, #7
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr
 800518c:	40021000 	.word	0x40021000
 8005190:	40022000 	.word	0x40022000

08005194 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <RCC_Delay+0x34>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <RCC_Delay+0x38>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	0a5b      	lsrs	r3, r3, #9
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	fb02 f303 	mul.w	r3, r2, r3
 80051ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051b0:	bf00      	nop
  }
  while (Delay --);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1e5a      	subs	r2, r3, #1
 80051b6:	60fa      	str	r2, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f9      	bne.n	80051b0 <RCC_Delay+0x1c>
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr
 80051c8:	20000000 	.word	0x20000000
 80051cc:	10624dd3 	.word	0x10624dd3

080051d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d07d      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80051ec:	2300      	movs	r3, #0
 80051ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f0:	4b4f      	ldr	r3, [pc, #316]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10d      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fc:	4b4c      	ldr	r3, [pc, #304]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	4a4b      	ldr	r2, [pc, #300]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005206:	61d3      	str	r3, [r2, #28]
 8005208:	4b49      	ldr	r3, [pc, #292]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005214:	2301      	movs	r3, #1
 8005216:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005218:	4b46      	ldr	r3, [pc, #280]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005220:	2b00      	cmp	r3, #0
 8005222:	d118      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005224:	4b43      	ldr	r3, [pc, #268]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a42      	ldr	r2, [pc, #264]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800522a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005230:	f7fc fc74 	bl	8001b1c <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005236:	e008      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005238:	f7fc fc70 	bl	8001b1c <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b64      	cmp	r3, #100	; 0x64
 8005244:	d901      	bls.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e06d      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524a:	4b3a      	ldr	r3, [pc, #232]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005256:	4b36      	ldr	r3, [pc, #216]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d02e      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	429a      	cmp	r2, r3
 8005272:	d027      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005274:	4b2e      	ldr	r3, [pc, #184]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800527e:	4b2e      	ldr	r3, [pc, #184]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005280:	2201      	movs	r2, #1
 8005282:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005284:	4b2c      	ldr	r3, [pc, #176]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800528a:	4a29      	ldr	r2, [pc, #164]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d014      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529a:	f7fc fc3f 	bl	8001b1c <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a0:	e00a      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a2:	f7fc fc3b 	bl	8001b1c <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e036      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0ee      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052c4:	4b1a      	ldr	r3, [pc, #104]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	4917      	ldr	r1, [pc, #92]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d105      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052dc:	4b14      	ldr	r3, [pc, #80]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	4a13      	ldr	r2, [pc, #76]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d008      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052f4:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	490b      	ldr	r1, [pc, #44]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005302:	4313      	orrs	r3, r2
 8005304:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	2b00      	cmp	r3, #0
 8005310:	d008      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005312:	4b07      	ldr	r3, [pc, #28]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	4904      	ldr	r1, [pc, #16]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005320:	4313      	orrs	r3, r2
 8005322:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40021000 	.word	0x40021000
 8005334:	40007000 	.word	0x40007000
 8005338:	42420440 	.word	0x42420440

0800533c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e041      	b.n	80053d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f839 	bl	80053da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3304      	adds	r3, #4
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f000 fb68 	bl	8005a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr

080053ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d001      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e03a      	b.n	800547a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a18      	ldr	r2, [pc, #96]	; (8005484 <HAL_TIM_Base_Start_IT+0x98>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00e      	beq.n	8005444 <HAL_TIM_Base_Start_IT+0x58>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542e:	d009      	beq.n	8005444 <HAL_TIM_Base_Start_IT+0x58>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a14      	ldr	r2, [pc, #80]	; (8005488 <HAL_TIM_Base_Start_IT+0x9c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d004      	beq.n	8005444 <HAL_TIM_Base_Start_IT+0x58>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a13      	ldr	r2, [pc, #76]	; (800548c <HAL_TIM_Base_Start_IT+0xa0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d111      	bne.n	8005468 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b06      	cmp	r3, #6
 8005454:	d010      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f042 0201 	orr.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005466:	e007      	b.n	8005478 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	40012c00 	.word	0x40012c00
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800

08005490 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e041      	b.n	8005526 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fc f8dc 	bl	8001674 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	4619      	mov	r1, r3
 80054ce:	4610      	mov	r0, r2
 80054d0:	f000 fabe 	bl	8005a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d109      	bne.n	8005554 <HAL_TIM_PWM_Start+0x24>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b01      	cmp	r3, #1
 800554a:	bf14      	ite	ne
 800554c:	2301      	movne	r3, #1
 800554e:	2300      	moveq	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	e022      	b.n	800559a <HAL_TIM_PWM_Start+0x6a>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2b04      	cmp	r3, #4
 8005558:	d109      	bne.n	800556e <HAL_TIM_PWM_Start+0x3e>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b01      	cmp	r3, #1
 8005564:	bf14      	ite	ne
 8005566:	2301      	movne	r3, #1
 8005568:	2300      	moveq	r3, #0
 800556a:	b2db      	uxtb	r3, r3
 800556c:	e015      	b.n	800559a <HAL_TIM_PWM_Start+0x6a>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b08      	cmp	r3, #8
 8005572:	d109      	bne.n	8005588 <HAL_TIM_PWM_Start+0x58>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	bf14      	ite	ne
 8005580:	2301      	movne	r3, #1
 8005582:	2300      	moveq	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	e008      	b.n	800559a <HAL_TIM_PWM_Start+0x6a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	bf14      	ite	ne
 8005594:	2301      	movne	r3, #1
 8005596:	2300      	moveq	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e05e      	b.n	8005660 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d104      	bne.n	80055b2 <HAL_TIM_PWM_Start+0x82>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055b0:	e013      	b.n	80055da <HAL_TIM_PWM_Start+0xaa>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d104      	bne.n	80055c2 <HAL_TIM_PWM_Start+0x92>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c0:	e00b      	b.n	80055da <HAL_TIM_PWM_Start+0xaa>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d104      	bne.n	80055d2 <HAL_TIM_PWM_Start+0xa2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055d0:	e003      	b.n	80055da <HAL_TIM_PWM_Start+0xaa>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2202      	movs	r2, #2
 80055d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2201      	movs	r2, #1
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 fc1e 	bl	8005e24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1e      	ldr	r2, [pc, #120]	; (8005668 <HAL_TIM_PWM_Start+0x138>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d107      	bne.n	8005602 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005600:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a18      	ldr	r2, [pc, #96]	; (8005668 <HAL_TIM_PWM_Start+0x138>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <HAL_TIM_PWM_Start+0xfa>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005614:	d009      	beq.n	800562a <HAL_TIM_PWM_Start+0xfa>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a14      	ldr	r2, [pc, #80]	; (800566c <HAL_TIM_PWM_Start+0x13c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_TIM_PWM_Start+0xfa>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a12      	ldr	r2, [pc, #72]	; (8005670 <HAL_TIM_PWM_Start+0x140>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d111      	bne.n	800564e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b06      	cmp	r3, #6
 800563a:	d010      	beq.n	800565e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564c:	e007      	b.n	800565e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40012c00 	.word	0x40012c00
 800566c:	40000400 	.word	0x40000400
 8005670:	40000800 	.word	0x40000800

08005674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	d122      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b02      	cmp	r3, #2
 8005696:	d11b      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0202 	mvn.w	r2, #2
 80056a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f9af 	bl	8005a1a <HAL_TIM_IC_CaptureCallback>
 80056bc:	e005      	b.n	80056ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f9a2 	bl	8005a08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f9b1 	bl	8005a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d122      	bne.n	8005724 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d11b      	bne.n	8005724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0204 	mvn.w	r2, #4
 80056f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f985 	bl	8005a1a <HAL_TIM_IC_CaptureCallback>
 8005710:	e005      	b.n	800571e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f978 	bl	8005a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f987 	bl	8005a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b08      	cmp	r3, #8
 8005730:	d122      	bne.n	8005778 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b08      	cmp	r3, #8
 800573e:	d11b      	bne.n	8005778 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0208 	mvn.w	r2, #8
 8005748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2204      	movs	r2, #4
 800574e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f95b 	bl	8005a1a <HAL_TIM_IC_CaptureCallback>
 8005764:	e005      	b.n	8005772 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f94e 	bl	8005a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f95d 	bl	8005a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0310 	and.w	r3, r3, #16
 8005782:	2b10      	cmp	r3, #16
 8005784:	d122      	bne.n	80057cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b10      	cmp	r3, #16
 8005792:	d11b      	bne.n	80057cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0210 	mvn.w	r2, #16
 800579c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2208      	movs	r2, #8
 80057a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f931 	bl	8005a1a <HAL_TIM_IC_CaptureCallback>
 80057b8:	e005      	b.n	80057c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f924 	bl	8005a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f933 	bl	8005a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d10e      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d107      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0201 	mvn.w	r2, #1
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fb fe1c 	bl	8001430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005802:	2b80      	cmp	r3, #128	; 0x80
 8005804:	d10e      	bne.n	8005824 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005810:	2b80      	cmp	r3, #128	; 0x80
 8005812:	d107      	bne.n	8005824 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800581c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fbdc 	bl	8005fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	d10e      	bne.n	8005850 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d107      	bne.n	8005850 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f8f7 	bl	8005a3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b20      	cmp	r3, #32
 800585c:	d10e      	bne.n	800587c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0320 	and.w	r3, r3, #32
 8005868:	2b20      	cmp	r3, #32
 800586a:	d107      	bne.n	800587c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0220 	mvn.w	r2, #32
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fba7 	bl	8005fca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800587c:	bf00      	nop
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800589e:	2302      	movs	r3, #2
 80058a0:	e0ae      	b.n	8005a00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b0c      	cmp	r3, #12
 80058ae:	f200 809f 	bhi.w	80059f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058b2:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	080058ed 	.word	0x080058ed
 80058bc:	080059f1 	.word	0x080059f1
 80058c0:	080059f1 	.word	0x080059f1
 80058c4:	080059f1 	.word	0x080059f1
 80058c8:	0800592d 	.word	0x0800592d
 80058cc:	080059f1 	.word	0x080059f1
 80058d0:	080059f1 	.word	0x080059f1
 80058d4:	080059f1 	.word	0x080059f1
 80058d8:	0800596f 	.word	0x0800596f
 80058dc:	080059f1 	.word	0x080059f1
 80058e0:	080059f1 	.word	0x080059f1
 80058e4:	080059f1 	.word	0x080059f1
 80058e8:	080059af 	.word	0x080059af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f90e 	bl	8005b14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0208 	orr.w	r2, r2, #8
 8005906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0204 	bic.w	r2, r2, #4
 8005916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6999      	ldr	r1, [r3, #24]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	619a      	str	r2, [r3, #24]
      break;
 800592a:	e064      	b.n	80059f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68b9      	ldr	r1, [r7, #8]
 8005932:	4618      	mov	r0, r3
 8005934:	f000 f954 	bl	8005be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6999      	ldr	r1, [r3, #24]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	021a      	lsls	r2, r3, #8
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	619a      	str	r2, [r3, #24]
      break;
 800596c:	e043      	b.n	80059f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 f99d 	bl	8005cb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69da      	ldr	r2, [r3, #28]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0208 	orr.w	r2, r2, #8
 8005988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69da      	ldr	r2, [r3, #28]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0204 	bic.w	r2, r2, #4
 8005998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69d9      	ldr	r1, [r3, #28]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	61da      	str	r2, [r3, #28]
      break;
 80059ac:	e023      	b.n	80059f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 f9e7 	bl	8005d88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69d9      	ldr	r1, [r3, #28]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	021a      	lsls	r2, r3, #8
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	61da      	str	r2, [r3, #28]
      break;
 80059ee:	e002      	b.n	80059f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	75fb      	strb	r3, [r7, #23]
      break;
 80059f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr

08005a1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr

08005a3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr

08005a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a29      	ldr	r2, [pc, #164]	; (8005b08 <TIM_Base_SetConfig+0xb8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00b      	beq.n	8005a80 <TIM_Base_SetConfig+0x30>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a6e:	d007      	beq.n	8005a80 <TIM_Base_SetConfig+0x30>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a26      	ldr	r2, [pc, #152]	; (8005b0c <TIM_Base_SetConfig+0xbc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <TIM_Base_SetConfig+0x30>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a25      	ldr	r2, [pc, #148]	; (8005b10 <TIM_Base_SetConfig+0xc0>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d108      	bne.n	8005a92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a1c      	ldr	r2, [pc, #112]	; (8005b08 <TIM_Base_SetConfig+0xb8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00b      	beq.n	8005ab2 <TIM_Base_SetConfig+0x62>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa0:	d007      	beq.n	8005ab2 <TIM_Base_SetConfig+0x62>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a19      	ldr	r2, [pc, #100]	; (8005b0c <TIM_Base_SetConfig+0xbc>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d003      	beq.n	8005ab2 <TIM_Base_SetConfig+0x62>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a18      	ldr	r2, [pc, #96]	; (8005b10 <TIM_Base_SetConfig+0xc0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d108      	bne.n	8005ac4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a07      	ldr	r2, [pc, #28]	; (8005b08 <TIM_Base_SetConfig+0xb8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d103      	bne.n	8005af8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	615a      	str	r2, [r3, #20]
}
 8005afe:	bf00      	nop
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr
 8005b08:	40012c00 	.word	0x40012c00
 8005b0c:	40000400 	.word	0x40000400
 8005b10:	40000800 	.word	0x40000800

08005b14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f023 0201 	bic.w	r2, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0303 	bic.w	r3, r3, #3
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f023 0302 	bic.w	r3, r3, #2
 8005b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a1c      	ldr	r2, [pc, #112]	; (8005bdc <TIM_OC1_SetConfig+0xc8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d10c      	bne.n	8005b8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0308 	bic.w	r3, r3, #8
 8005b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f023 0304 	bic.w	r3, r3, #4
 8005b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a13      	ldr	r2, [pc, #76]	; (8005bdc <TIM_OC1_SetConfig+0xc8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d111      	bne.n	8005bb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	621a      	str	r2, [r3, #32]
}
 8005bd0:	bf00      	nop
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40012c00 	.word	0x40012c00

08005be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f023 0210 	bic.w	r2, r3, #16
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	021b      	lsls	r3, r3, #8
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0320 	bic.w	r3, r3, #32
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a1d      	ldr	r2, [pc, #116]	; (8005cb0 <TIM_OC2_SetConfig+0xd0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10d      	bne.n	8005c5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a14      	ldr	r2, [pc, #80]	; (8005cb0 <TIM_OC2_SetConfig+0xd0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d113      	bne.n	8005c8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	621a      	str	r2, [r3, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr
 8005cb0:	40012c00 	.word	0x40012c00

08005cb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0303 	bic.w	r3, r3, #3
 8005cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	021b      	lsls	r3, r3, #8
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <TIM_OC3_SetConfig+0xd0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d10d      	bne.n	8005d2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a14      	ldr	r2, [pc, #80]	; (8005d84 <TIM_OC3_SetConfig+0xd0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d113      	bne.n	8005d5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	621a      	str	r2, [r3, #32]
}
 8005d78:	bf00      	nop
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40012c00 	.word	0x40012c00

08005d88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	031b      	lsls	r3, r3, #12
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a0f      	ldr	r2, [pc, #60]	; (8005e20 <TIM_OC4_SetConfig+0x98>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d109      	bne.n	8005dfc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	019b      	lsls	r3, r3, #6
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr
 8005e20:	40012c00 	.word	0x40012c00

08005e24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	2201      	movs	r2, #1
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a1a      	ldr	r2, [r3, #32]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	43db      	mvns	r3, r3
 8005e46:	401a      	ands	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e046      	b.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a16      	ldr	r2, [pc, #88]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00e      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed0:	d009      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a12      	ldr	r2, [pc, #72]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a10      	ldr	r2, [pc, #64]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d10c      	bne.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr
 8005f1c:	40012c00 	.word	0x40012c00
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800

08005f28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e03d      	b.n	8005fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bc80      	pop	{r7}
 8005fc8:	4770      	bx	lr

08005fca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bc80      	pop	{r7}
 8005fda:	4770      	bx	lr

08005fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bc80      	pop	{r7}
 8005fec:	4770      	bx	lr

08005fee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e042      	b.n	8006086 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d106      	bne.n	800601a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7fb fbe5 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2224      	movs	r2, #36	; 0x24
 800601e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006030:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f82c 	bl	8006090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006046:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695a      	ldr	r2, [r3, #20]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006056:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006066:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80060ca:	f023 030c 	bic.w	r3, r3, #12
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6812      	ldr	r2, [r2, #0]
 80060d2:	68b9      	ldr	r1, [r7, #8]
 80060d4:	430b      	orrs	r3, r1
 80060d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a2c      	ldr	r2, [pc, #176]	; (80061a4 <UART_SetConfig+0x114>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d103      	bne.n	8006100 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80060f8:	f7ff f808 	bl	800510c <HAL_RCC_GetPCLK2Freq>
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	e002      	b.n	8006106 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006100:	f7fe fff0 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 8006104:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	009a      	lsls	r2, r3, #2
 8006110:	441a      	add	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	fbb2 f3f3 	udiv	r3, r2, r3
 800611c:	4a22      	ldr	r2, [pc, #136]	; (80061a8 <UART_SetConfig+0x118>)
 800611e:	fba2 2303 	umull	r2, r3, r2, r3
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	0119      	lsls	r1, r3, #4
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	009a      	lsls	r2, r3, #2
 8006130:	441a      	add	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	fbb2 f2f3 	udiv	r2, r2, r3
 800613c:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <UART_SetConfig+0x118>)
 800613e:	fba3 0302 	umull	r0, r3, r3, r2
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	2064      	movs	r0, #100	; 0x64
 8006146:	fb00 f303 	mul.w	r3, r0, r3
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	3332      	adds	r3, #50	; 0x32
 8006150:	4a15      	ldr	r2, [pc, #84]	; (80061a8 <UART_SetConfig+0x118>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800615c:	4419      	add	r1, r3
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	009a      	lsls	r2, r3, #2
 8006168:	441a      	add	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	fbb2 f2f3 	udiv	r2, r2, r3
 8006174:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <UART_SetConfig+0x118>)
 8006176:	fba3 0302 	umull	r0, r3, r3, r2
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	2064      	movs	r0, #100	; 0x64
 800617e:	fb00 f303 	mul.w	r3, r0, r3
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	3332      	adds	r3, #50	; 0x32
 8006188:	4a07      	ldr	r2, [pc, #28]	; (80061a8 <UART_SetConfig+0x118>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	f003 020f 	and.w	r2, r3, #15
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	440a      	add	r2, r1
 800619a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800619c:	bf00      	nop
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40013800 	.word	0x40013800
 80061a8:	51eb851f 	.word	0x51eb851f

080061ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061ac:	b084      	sub	sp, #16
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	f107 0014 	add.w	r0, r7, #20
 80061ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	b004      	add	sp, #16
 80061ca:	4770      	bx	lr

080061cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80061e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	4770      	bx	lr

080061f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006200:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006204:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	b29b      	uxth	r3, r3
 8006212:	43db      	mvns	r3, r3
 8006214:	b29b      	uxth	r3, r3
 8006216:	4013      	ands	r3, r2
 8006218:	b29a      	uxth	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr

0800622c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	bc80      	pop	{r7}
 8006242:	4770      	bx	lr

08006244 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006244:	b084      	sub	sp, #16
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	f107 0014 	add.w	r0, r7, #20
 8006252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	b004      	add	sp, #16
 8006282:	4770      	bx	lr

08006284 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006284:	b480      	push	{r7}
 8006286:	b09d      	sub	sp, #116	; 0x74
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80062a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062aa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	78db      	ldrb	r3, [r3, #3]
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d81f      	bhi.n	80062f6 <USB_ActivateEndpoint+0x72>
 80062b6:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <USB_ActivateEndpoint+0x38>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	080062cd 	.word	0x080062cd
 80062c0:	080062e9 	.word	0x080062e9
 80062c4:	080062ff 	.word	0x080062ff
 80062c8:	080062db 	.word	0x080062db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80062cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80062d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80062d8:	e012      	b.n	8006300 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80062da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80062de:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80062e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80062e6:	e00b      	b.n	8006300 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80062e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80062ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80062f4:	e004      	b.n	8006300 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80062fc:	e000      	b.n	8006300 <USB_ActivateEndpoint+0x7c>
      break;
 80062fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	441a      	add	r2, r3
 800630a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800630e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631e:	b29b      	uxth	r3, r3
 8006320:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006338:	b29a      	uxth	r2, r3
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	b29b      	uxth	r3, r3
 8006340:	4313      	orrs	r3, r2
 8006342:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	441a      	add	r2, r3
 8006350:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800635c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006364:	b29b      	uxth	r3, r3
 8006366:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	7b1b      	ldrb	r3, [r3, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f040 8178 	bne.w	8006662 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	785b      	ldrb	r3, [r3, #1]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 8084 	beq.w	8006484 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006386:	b29b      	uxth	r3, r3
 8006388:	461a      	mov	r2, r3
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	4413      	add	r3, r2
 800638e:	61bb      	str	r3, [r7, #24]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	011a      	lsls	r2, r3, #4
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	88db      	ldrh	r3, [r3, #6]
 80063a4:	085b      	lsrs	r3, r3, #1
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	827b      	strh	r3, [r7, #18]
 80063be:	8a7b      	ldrh	r3, [r7, #18]
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01b      	beq.n	8006400 <USB_ActivateEndpoint+0x17c>
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063de:	823b      	strh	r3, [r7, #16]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	441a      	add	r2, r3
 80063ea:	8a3b      	ldrh	r3, [r7, #16]
 80063ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	78db      	ldrb	r3, [r3, #3]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d020      	beq.n	800644a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641e:	81bb      	strh	r3, [r7, #12]
 8006420:	89bb      	ldrh	r3, [r7, #12]
 8006422:	f083 0320 	eor.w	r3, r3, #32
 8006426:	81bb      	strh	r3, [r7, #12]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	441a      	add	r2, r3
 8006432:	89bb      	ldrh	r3, [r7, #12]
 8006434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006444:	b29b      	uxth	r3, r3
 8006446:	8013      	strh	r3, [r2, #0]
 8006448:	e2d5      	b.n	80069f6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800645c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006460:	81fb      	strh	r3, [r7, #14]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	441a      	add	r2, r3
 800646c:	89fb      	ldrh	r3, [r7, #14]
 800646e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800647a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647e:	b29b      	uxth	r3, r3
 8006480:	8013      	strh	r3, [r2, #0]
 8006482:	e2b8      	b.n	80069f6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	633b      	str	r3, [r7, #48]	; 0x30
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800648e:	b29b      	uxth	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	4413      	add	r3, r2
 8006496:	633b      	str	r3, [r7, #48]	; 0x30
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	011a      	lsls	r2, r3, #4
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80064a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	88db      	ldrh	r3, [r3, #6]
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	4413      	add	r3, r2
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	011a      	lsls	r2, r3, #4
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	4413      	add	r3, r2
 80064d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	801a      	strh	r2, [r3, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b3e      	cmp	r3, #62	; 0x3e
 80064f2:	d91d      	bls.n	8006530 <USB_ActivateEndpoint+0x2ac>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	095b      	lsrs	r3, r3, #5
 80064fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	2b00      	cmp	r3, #0
 8006506:	d102      	bne.n	800650e <USB_ActivateEndpoint+0x28a>
 8006508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800650a:	3b01      	subs	r3, #1
 800650c:	66bb      	str	r3, [r7, #104]	; 0x68
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29a      	uxth	r2, r3
 8006514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006516:	b29b      	uxth	r3, r3
 8006518:	029b      	lsls	r3, r3, #10
 800651a:	b29b      	uxth	r3, r3
 800651c:	4313      	orrs	r3, r2
 800651e:	b29b      	uxth	r3, r3
 8006520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006528:	b29a      	uxth	r2, r3
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	e026      	b.n	800657e <USB_ActivateEndpoint+0x2fa>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10a      	bne.n	800654e <USB_ActivateEndpoint+0x2ca>
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006546:	b29a      	uxth	r2, r3
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	801a      	strh	r2, [r3, #0]
 800654c:	e017      	b.n	800657e <USB_ActivateEndpoint+0x2fa>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	66bb      	str	r3, [r7, #104]	; 0x68
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <USB_ActivateEndpoint+0x2e4>
 8006562:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006564:	3301      	adds	r3, #1
 8006566:	66bb      	str	r3, [r7, #104]	; 0x68
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29a      	uxth	r2, r3
 800656e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006570:	b29b      	uxth	r3, r3
 8006572:	029b      	lsls	r3, r3, #10
 8006574:	b29b      	uxth	r3, r3
 8006576:	4313      	orrs	r3, r2
 8006578:	b29a      	uxth	r2, r3
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	847b      	strh	r3, [r7, #34]	; 0x22
 800658c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800658e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01b      	beq.n	80065ce <USB_ActivateEndpoint+0x34a>
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ac:	843b      	strh	r3, [r7, #32]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	441a      	add	r2, r3
 80065b8:	8c3b      	ldrh	r3, [r7, #32]
 80065ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d124      	bne.n	8006620 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ec:	83bb      	strh	r3, [r7, #28]
 80065ee:	8bbb      	ldrh	r3, [r7, #28]
 80065f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065f4:	83bb      	strh	r3, [r7, #28]
 80065f6:	8bbb      	ldrh	r3, [r7, #28]
 80065f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065fc:	83bb      	strh	r3, [r7, #28]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	441a      	add	r2, r3
 8006608:	8bbb      	ldrh	r3, [r7, #28]
 800660a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661a:	b29b      	uxth	r3, r3
 800661c:	8013      	strh	r3, [r2, #0]
 800661e:	e1ea      	b.n	80069f6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	b29b      	uxth	r3, r3
 800662e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006636:	83fb      	strh	r3, [r7, #30]
 8006638:	8bfb      	ldrh	r3, [r7, #30]
 800663a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800663e:	83fb      	strh	r3, [r7, #30]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	441a      	add	r2, r3
 800664a:	8bfb      	ldrh	r3, [r7, #30]
 800664c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665c:	b29b      	uxth	r3, r3
 800665e:	8013      	strh	r3, [r2, #0]
 8006660:	e1c9      	b.n	80069f6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	78db      	ldrb	r3, [r3, #3]
 8006666:	2b02      	cmp	r3, #2
 8006668:	d11e      	bne.n	80066a8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006680:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	441a      	add	r2, r3
 800668e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800669e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	8013      	strh	r3, [r2, #0]
 80066a6:	e01d      	b.n	80066e4 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	441a      	add	r2, r3
 80066cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80066d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	461a      	mov	r2, r3
 80066f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066f4:	4413      	add	r3, r2
 80066f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	011a      	lsls	r2, r3, #4
 80066fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006700:	4413      	add	r3, r2
 8006702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006706:	65bb      	str	r3, [r7, #88]	; 0x58
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	891b      	ldrh	r3, [r3, #8]
 800670c:	085b      	lsrs	r3, r3, #1
 800670e:	b29b      	uxth	r3, r3
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	b29a      	uxth	r2, r3
 8006714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	657b      	str	r3, [r7, #84]	; 0x54
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006722:	b29b      	uxth	r3, r3
 8006724:	461a      	mov	r2, r3
 8006726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006728:	4413      	add	r3, r2
 800672a:	657b      	str	r3, [r7, #84]	; 0x54
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	011a      	lsls	r2, r3, #4
 8006732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006734:	4413      	add	r3, r2
 8006736:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800673a:	653b      	str	r3, [r7, #80]	; 0x50
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	895b      	ldrh	r3, [r3, #10]
 8006740:	085b      	lsrs	r3, r3, #1
 8006742:	b29b      	uxth	r3, r3
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800674a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	2b00      	cmp	r3, #0
 8006752:	f040 8093 	bne.w	800687c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006766:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800676a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01b      	beq.n	80067aa <USB_ActivateEndpoint+0x526>
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	b29b      	uxth	r3, r3
 8006780:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006788:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	441a      	add	r2, r3
 8006794:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800679e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80067b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80067ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d01b      	beq.n	80067fa <USB_ActivateEndpoint+0x576>
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	441a      	add	r2, r3
 80067e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80067e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	b29b      	uxth	r3, r3
 8006808:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800680c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006810:	873b      	strh	r3, [r7, #56]	; 0x38
 8006812:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006814:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006818:	873b      	strh	r3, [r7, #56]	; 0x38
 800681a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800681c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006820:	873b      	strh	r3, [r7, #56]	; 0x38
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	441a      	add	r2, r3
 800682c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800682e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800683a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683e:	b29b      	uxth	r3, r3
 8006840:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006858:	86fb      	strh	r3, [r7, #54]	; 0x36
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	441a      	add	r2, r3
 8006864:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800686a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006876:	b29b      	uxth	r3, r3
 8006878:	8013      	strh	r3, [r2, #0]
 800687a:	e0bc      	b.n	80069f6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800688c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01d      	beq.n	80068d4 <USB_ActivateEndpoint+0x650>
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	441a      	add	r2, r3
 80068bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80068c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80068e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80068e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01d      	beq.n	800692c <USB_ActivateEndpoint+0x6a8>
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006906:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	441a      	add	r2, r3
 8006914:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006924:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006928:	b29b      	uxth	r3, r3
 800692a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	78db      	ldrb	r3, [r3, #3]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d024      	beq.n	800697e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800694a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800694e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006952:	f083 0320 	eor.w	r3, r3, #32
 8006956:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	441a      	add	r2, r3
 8006964:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800696c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006978:	b29b      	uxth	r3, r3
 800697a:	8013      	strh	r3, [r2, #0]
 800697c:	e01d      	b.n	80069ba <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006994:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	441a      	add	r2, r3
 80069a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80069a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	441a      	add	r2, r3
 80069de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80069e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80069f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3774      	adds	r7, #116	; 0x74
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bc80      	pop	{r7}
 8006a02:	4770      	bx	lr

08006a04 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b08d      	sub	sp, #52	; 0x34
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	7b1b      	ldrb	r3, [r3, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f040 808e 	bne.w	8006b34 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d044      	beq.n	8006aaa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	81bb      	strh	r3, [r7, #12]
 8006a2e:	89bb      	ldrh	r3, [r7, #12]
 8006a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01b      	beq.n	8006a70 <USB_DeactivateEndpoint+0x6c>
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4e:	817b      	strh	r3, [r7, #10]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	441a      	add	r2, r3
 8006a5a:	897b      	ldrh	r3, [r7, #10]
 8006a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a86:	813b      	strh	r3, [r7, #8]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	441a      	add	r2, r3
 8006a92:	893b      	ldrh	r3, [r7, #8]
 8006a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	8013      	strh	r3, [r2, #0]
 8006aa8:	e192      	b.n	8006dd0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	827b      	strh	r3, [r7, #18]
 8006ab8:	8a7b      	ldrh	r3, [r7, #18]
 8006aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d01b      	beq.n	8006afa <USB_DeactivateEndpoint+0xf6>
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad8:	823b      	strh	r3, [r7, #16]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	441a      	add	r2, r3
 8006ae4:	8a3b      	ldrh	r3, [r7, #16]
 8006ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b10:	81fb      	strh	r3, [r7, #14]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	441a      	add	r2, r3
 8006b1c:	89fb      	ldrh	r3, [r7, #14]
 8006b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	8013      	strh	r3, [r2, #0]
 8006b32:	e14d      	b.n	8006dd0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	785b      	ldrb	r3, [r3, #1]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f040 80a5 	bne.w	8006c88 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	843b      	strh	r3, [r7, #32]
 8006b4c:	8c3b      	ldrh	r3, [r7, #32]
 8006b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d01b      	beq.n	8006b8e <USB_DeactivateEndpoint+0x18a>
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6c:	83fb      	strh	r3, [r7, #30]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	441a      	add	r2, r3
 8006b78:	8bfb      	ldrh	r3, [r7, #30]
 8006b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	83bb      	strh	r3, [r7, #28]
 8006b9c:	8bbb      	ldrh	r3, [r7, #28]
 8006b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01b      	beq.n	8006bde <USB_DeactivateEndpoint+0x1da>
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbc:	837b      	strh	r3, [r7, #26]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	441a      	add	r2, r3
 8006bc8:	8b7b      	ldrh	r3, [r7, #26]
 8006bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf4:	833b      	strh	r3, [r7, #24]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	441a      	add	r2, r3
 8006c00:	8b3b      	ldrh	r3, [r7, #24]
 8006c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2c:	82fb      	strh	r3, [r7, #22]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	441a      	add	r2, r3
 8006c38:	8afb      	ldrh	r3, [r7, #22]
 8006c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c64:	82bb      	strh	r3, [r7, #20]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	441a      	add	r2, r3
 8006c70:	8abb      	ldrh	r3, [r7, #20]
 8006c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	8013      	strh	r3, [r2, #0]
 8006c86:	e0a3      	b.n	8006dd0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006c96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01b      	beq.n	8006cd8 <USB_DeactivateEndpoint+0x2d4>
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	441a      	add	r2, r3
 8006cc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ce6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01b      	beq.n	8006d28 <USB_DeactivateEndpoint+0x324>
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	853b      	strh	r3, [r7, #40]	; 0x28
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	441a      	add	r2, r3
 8006d12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	441a      	add	r2, r3
 8006d4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d76:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	441a      	add	r2, r3
 8006d82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dae:	847b      	strh	r3, [r7, #34]	; 0x22
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	441a      	add	r2, r3
 8006dba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3734      	adds	r7, #52	; 0x34
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b0c2      	sub	sp, #264	; 0x108
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dea:	6018      	str	r0, [r3, #0]
 8006dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	785b      	ldrb	r3, [r3, #1]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	f040 86b7 	bne.w	8007b76 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699a      	ldr	r2, [r3, #24]
 8006e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d908      	bls.n	8006e36 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e34:	e007      	b.n	8006e46 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	7b1b      	ldrb	r3, [r3, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d13a      	bne.n	8006ecc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6959      	ldr	r1, [r3, #20]
 8006e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	88da      	ldrh	r2, [r3, #6]
 8006e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e7c:	6800      	ldr	r0, [r0, #0]
 8006e7e:	f001 fc9c 	bl	80087ba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
 8006ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	011a      	lsls	r2, r3, #4
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	801a      	strh	r2, [r3, #0]
 8006ec8:	f000 be1f 	b.w	8007b0a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	78db      	ldrb	r3, [r3, #3]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	f040 8462 	bne.w	80077a2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6a1a      	ldr	r2, [r3, #32]
 8006eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	f240 83df 	bls.w	80076ba <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f22:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	441a      	add	r2, r3
 8006f40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f4c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6a1a      	ldr	r2, [r3, #32]
 8006f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f68:	1ad2      	subs	r2, r2, r3
 8006f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 81c7 	beq.w	800732c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8006faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d177      	bne.n	80070aa <USB_EPStartXfer+0x2ce>
 8006fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	4413      	add	r3, r2
 8006fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	011a      	lsls	r2, r3, #4
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	4413      	add	r3, r2
 8006ff0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007000:	b29a      	uxth	r2, r3
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	801a      	strh	r2, [r3, #0]
 8007006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800700a:	2b3e      	cmp	r3, #62	; 0x3e
 800700c:	d921      	bls.n	8007052 <USB_EPStartXfer+0x276>
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701c:	f003 031f 	and.w	r3, r3, #31
 8007020:	2b00      	cmp	r3, #0
 8007022:	d104      	bne.n	800702e <USB_EPStartXfer+0x252>
 8007024:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007028:	3b01      	subs	r3, #1
 800702a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	b29a      	uxth	r2, r3
 8007034:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007038:	b29b      	uxth	r3, r3
 800703a:	029b      	lsls	r3, r3, #10
 800703c:	b29b      	uxth	r3, r3
 800703e:	4313      	orrs	r3, r2
 8007040:	b29b      	uxth	r3, r3
 8007042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800704a:	b29a      	uxth	r2, r3
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	801a      	strh	r2, [r3, #0]
 8007050:	e050      	b.n	80070f4 <USB_EPStartXfer+0x318>
 8007052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <USB_EPStartXfer+0x294>
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	b29b      	uxth	r3, r3
 8007060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007068:	b29a      	uxth	r2, r3
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	e041      	b.n	80070f4 <USB_EPStartXfer+0x318>
 8007070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007074:	085b      	lsrs	r3, r3, #1
 8007076:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800707a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <USB_EPStartXfer+0x2b4>
 8007086:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800708a:	3301      	adds	r3, #1
 800708c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	b29a      	uxth	r2, r3
 8007096:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800709a:	b29b      	uxth	r3, r3
 800709c:	029b      	lsls	r3, r3, #10
 800709e:	b29b      	uxth	r3, r3
 80070a0:	4313      	orrs	r3, r2
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	801a      	strh	r2, [r3, #0]
 80070a8:	e024      	b.n	80070f4 <USB_EPStartXfer+0x318>
 80070aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d11c      	bne.n	80070f4 <USB_EPStartXfer+0x318>
 80070ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	461a      	mov	r2, r3
 80070cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ce:	4413      	add	r3, r2
 80070d0:	633b      	str	r3, [r7, #48]	; 0x30
 80070d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	011a      	lsls	r2, r3, #4
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	4413      	add	r3, r2
 80070e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	895b      	ldrh	r3, [r3, #10]
 8007100:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6959      	ldr	r1, [r3, #20]
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007114:	b29b      	uxth	r3, r3
 8007116:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800711a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800711e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007122:	6800      	ldr	r0, [r0, #0]
 8007124:	f001 fb49 	bl	80087ba <USB_WritePMA>
            ep->xfer_buff += len;
 8007128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	695a      	ldr	r2, [r3, #20]
 8007134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007138:	441a      	add	r2, r3
 800713a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a1a      	ldr	r2, [r3, #32]
 8007152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	429a      	cmp	r2, r3
 8007160:	d90f      	bls.n	8007182 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6a1a      	ldr	r2, [r3, #32]
 800716e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007172:	1ad2      	subs	r2, r2, r3
 8007174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	621a      	str	r2, [r3, #32]
 8007180:	e00e      	b.n	80071a0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2200      	movs	r2, #0
 800719e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	785b      	ldrb	r3, [r3, #1]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d177      	bne.n	80072a0 <USB_EPStartXfer+0x4c4>
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	4413      	add	r3, r2
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	011a      	lsls	r2, r3, #4
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	4413      	add	r3, r2
 80071e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	801a      	strh	r2, [r3, #0]
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007200:	2b3e      	cmp	r3, #62	; 0x3e
 8007202:	d921      	bls.n	8007248 <USB_EPStartXfer+0x46c>
 8007204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007208:	095b      	lsrs	r3, r3, #5
 800720a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800720e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007212:	f003 031f 	and.w	r3, r3, #31
 8007216:	2b00      	cmp	r3, #0
 8007218:	d104      	bne.n	8007224 <USB_EPStartXfer+0x448>
 800721a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800721e:	3b01      	subs	r3, #1
 8007220:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29a      	uxth	r2, r3
 800722a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800722e:	b29b      	uxth	r3, r3
 8007230:	029b      	lsls	r3, r3, #10
 8007232:	b29b      	uxth	r3, r3
 8007234:	4313      	orrs	r3, r2
 8007236:	b29b      	uxth	r3, r3
 8007238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007240:	b29a      	uxth	r2, r3
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	801a      	strh	r2, [r3, #0]
 8007246:	e056      	b.n	80072f6 <USB_EPStartXfer+0x51a>
 8007248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <USB_EPStartXfer+0x48a>
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	b29b      	uxth	r3, r3
 8007256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800725e:	b29a      	uxth	r2, r3
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	e047      	b.n	80072f6 <USB_EPStartXfer+0x51a>
 8007266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d004      	beq.n	8007286 <USB_EPStartXfer+0x4aa>
 800727c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007280:	3301      	adds	r3, #1
 8007282:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29a      	uxth	r2, r3
 800728c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007290:	b29b      	uxth	r3, r3
 8007292:	029b      	lsls	r3, r3, #10
 8007294:	b29b      	uxth	r3, r3
 8007296:	4313      	orrs	r3, r2
 8007298:	b29a      	uxth	r2, r3
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	801a      	strh	r2, [r3, #0]
 800729e:	e02a      	b.n	80072f6 <USB_EPStartXfer+0x51a>
 80072a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d122      	bne.n	80072f6 <USB_EPStartXfer+0x51a>
 80072b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	623b      	str	r3, [r7, #32]
 80072bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	4413      	add	r3, r2
 80072d2:	623b      	str	r3, [r7, #32]
 80072d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	011a      	lsls	r2, r3, #4
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	4413      	add	r3, r2
 80072e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072ea:	61fb      	str	r3, [r7, #28]
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	891b      	ldrh	r3, [r3, #8]
 8007302:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6959      	ldr	r1, [r3, #20]
 8007312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007316:	b29b      	uxth	r3, r3
 8007318:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800731c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007320:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007324:	6800      	ldr	r0, [r0, #0]
 8007326:	f001 fa48 	bl	80087ba <USB_WritePMA>
 800732a:	e3ee      	b.n	8007b0a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800732c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d177      	bne.n	800742c <USB_EPStartXfer+0x650>
 800733c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007340:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	64bb      	str	r3, [r7, #72]	; 0x48
 8007348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007356:	b29b      	uxth	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800735c:	4413      	add	r3, r2
 800735e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	011a      	lsls	r2, r3, #4
 800736e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007370:	4413      	add	r3, r2
 8007372:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007376:	647b      	str	r3, [r7, #68]	; 0x44
 8007378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007382:	b29a      	uxth	r2, r3
 8007384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800738c:	2b3e      	cmp	r3, #62	; 0x3e
 800738e:	d921      	bls.n	80073d4 <USB_EPStartXfer+0x5f8>
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007394:	095b      	lsrs	r3, r3, #5
 8007396:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800739a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739e:	f003 031f 	and.w	r3, r3, #31
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d104      	bne.n	80073b0 <USB_EPStartXfer+0x5d4>
 80073a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073aa:	3b01      	subs	r3, #1
 80073ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	029b      	lsls	r3, r3, #10
 80073be:	b29b      	uxth	r3, r3
 80073c0:	4313      	orrs	r3, r2
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073d0:	801a      	strh	r2, [r3, #0]
 80073d2:	e056      	b.n	8007482 <USB_EPStartXfer+0x6a6>
 80073d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <USB_EPStartXfer+0x616>
 80073dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e047      	b.n	8007482 <USB_EPStartXfer+0x6a6>
 80073f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	d004      	beq.n	8007412 <USB_EPStartXfer+0x636>
 8007408:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800740c:	3301      	adds	r3, #1
 800740e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29a      	uxth	r2, r3
 8007418:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800741c:	b29b      	uxth	r3, r3
 800741e:	029b      	lsls	r3, r3, #10
 8007420:	b29b      	uxth	r3, r3
 8007422:	4313      	orrs	r3, r2
 8007424:	b29a      	uxth	r2, r3
 8007426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007428:	801a      	strh	r2, [r3, #0]
 800742a:	e02a      	b.n	8007482 <USB_EPStartXfer+0x6a6>
 800742c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d122      	bne.n	8007482 <USB_EPStartXfer+0x6a6>
 800743c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	653b      	str	r3, [r7, #80]	; 0x50
 8007448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800744c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007456:	b29b      	uxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800745c:	4413      	add	r3, r2
 800745e:	653b      	str	r3, [r7, #80]	; 0x50
 8007460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	011a      	lsls	r2, r3, #4
 800746e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007470:	4413      	add	r3, r2
 8007472:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800747c:	b29a      	uxth	r2, r3
 800747e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007480:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	891b      	ldrh	r3, [r3, #8]
 800748e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6959      	ldr	r1, [r3, #20]
 800749e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074b0:	6800      	ldr	r0, [r0, #0]
 80074b2:	f001 f982 	bl	80087ba <USB_WritePMA>
            ep->xfer_buff += len;
 80074b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695a      	ldr	r2, [r3, #20]
 80074c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c6:	441a      	add	r2, r3
 80074c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6a1a      	ldr	r2, [r3, #32]
 80074e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d90f      	bls.n	8007510 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80074f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6a1a      	ldr	r2, [r3, #32]
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007500:	1ad2      	subs	r2, r2, r3
 8007502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	621a      	str	r2, [r3, #32]
 800750e:	e00e      	b.n	800752e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2200      	movs	r2, #0
 800752c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800752e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	643b      	str	r3, [r7, #64]	; 0x40
 800753a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	785b      	ldrb	r3, [r3, #1]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d177      	bne.n	800763a <USB_EPStartXfer+0x85e>
 800754a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	63bb      	str	r3, [r7, #56]	; 0x38
 8007556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007564:	b29b      	uxth	r3, r3
 8007566:	461a      	mov	r2, r3
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	4413      	add	r3, r2
 800756c:	63bb      	str	r3, [r7, #56]	; 0x38
 800756e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	011a      	lsls	r2, r3, #4
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	4413      	add	r3, r2
 8007580:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007584:	637b      	str	r3, [r7, #52]	; 0x34
 8007586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007590:	b29a      	uxth	r2, r3
 8007592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007594:	801a      	strh	r2, [r3, #0]
 8007596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800759a:	2b3e      	cmp	r3, #62	; 0x3e
 800759c:	d921      	bls.n	80075e2 <USB_EPStartXfer+0x806>
 800759e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <USB_EPStartXfer+0x7e2>
 80075b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b8:	3b01      	subs	r3, #1
 80075ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	029b      	lsls	r3, r3, #10
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	4313      	orrs	r3, r2
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075da:	b29a      	uxth	r2, r3
 80075dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075de:	801a      	strh	r2, [r3, #0]
 80075e0:	e050      	b.n	8007684 <USB_EPStartXfer+0x8a8>
 80075e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10a      	bne.n	8007600 <USB_EPStartXfer+0x824>
 80075ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fc:	801a      	strh	r2, [r3, #0]
 80075fe:	e041      	b.n	8007684 <USB_EPStartXfer+0x8a8>
 8007600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007604:	085b      	lsrs	r3, r3, #1
 8007606:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <USB_EPStartXfer+0x844>
 8007616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761a:	3301      	adds	r3, #1
 800761c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29a      	uxth	r2, r3
 8007626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800762a:	b29b      	uxth	r3, r3
 800762c:	029b      	lsls	r3, r3, #10
 800762e:	b29b      	uxth	r3, r3
 8007630:	4313      	orrs	r3, r2
 8007632:	b29a      	uxth	r2, r3
 8007634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007636:	801a      	strh	r2, [r3, #0]
 8007638:	e024      	b.n	8007684 <USB_EPStartXfer+0x8a8>
 800763a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	785b      	ldrb	r3, [r3, #1]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d11c      	bne.n	8007684 <USB_EPStartXfer+0x8a8>
 800764a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007658:	b29b      	uxth	r3, r3
 800765a:	461a      	mov	r2, r3
 800765c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800765e:	4413      	add	r3, r2
 8007660:	643b      	str	r3, [r7, #64]	; 0x40
 8007662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	011a      	lsls	r2, r3, #4
 8007670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007672:	4413      	add	r3, r2
 8007674:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767e:	b29a      	uxth	r2, r3
 8007680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007682:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	895b      	ldrh	r3, [r3, #10]
 8007690:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6959      	ldr	r1, [r3, #20]
 80076a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80076aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80076ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80076b2:	6800      	ldr	r0, [r0, #0]
 80076b4:	f001 f881 	bl	80087ba <USB_WritePMA>
 80076b8:	e227      	b.n	8007b0a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80076ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80076ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80076ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80076f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	441a      	add	r2, r3
 800770e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800771e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007722:	b29b      	uxth	r3, r3
 8007724:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007740:	b29b      	uxth	r3, r3
 8007742:	461a      	mov	r2, r3
 8007744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007746:	4413      	add	r3, r2
 8007748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800774a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	011a      	lsls	r2, r3, #4
 8007758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800775a:	4413      	add	r3, r2
 800775c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007760:	65bb      	str	r3, [r7, #88]	; 0x58
 8007762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007766:	b29a      	uxth	r2, r3
 8007768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800776a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800776c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	891b      	ldrh	r3, [r3, #8]
 8007778:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800777c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6959      	ldr	r1, [r3, #20]
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800778c:	b29b      	uxth	r3, r3
 800778e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007792:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007796:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800779a:	6800      	ldr	r0, [r0, #0]
 800779c:	f001 f80d 	bl	80087ba <USB_WritePMA>
 80077a0:	e1b3      	b.n	8007b0a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80077a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6a1a      	ldr	r2, [r3, #32]
 80077ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b2:	1ad2      	subs	r2, r2, r3
 80077b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80c6 	beq.w	8007974 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	673b      	str	r3, [r7, #112]	; 0x70
 80077f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	785b      	ldrb	r3, [r3, #1]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d177      	bne.n	80078f4 <USB_EPStartXfer+0xb18>
 8007804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007808:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007814:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800781e:	b29b      	uxth	r3, r3
 8007820:	461a      	mov	r2, r3
 8007822:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007824:	4413      	add	r3, r2
 8007826:	66bb      	str	r3, [r7, #104]	; 0x68
 8007828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	011a      	lsls	r2, r3, #4
 8007836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007838:	4413      	add	r3, r2
 800783a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800783e:	667b      	str	r3, [r7, #100]	; 0x64
 8007840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800784a:	b29a      	uxth	r2, r3
 800784c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800784e:	801a      	strh	r2, [r3, #0]
 8007850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007854:	2b3e      	cmp	r3, #62	; 0x3e
 8007856:	d921      	bls.n	800789c <USB_EPStartXfer+0xac0>
 8007858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785c:	095b      	lsrs	r3, r3, #5
 800785e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007866:	f003 031f 	and.w	r3, r3, #31
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <USB_EPStartXfer+0xa9c>
 800786e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007872:	3b01      	subs	r3, #1
 8007874:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	b29a      	uxth	r2, r3
 800787e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007882:	b29b      	uxth	r3, r3
 8007884:	029b      	lsls	r3, r3, #10
 8007886:	b29b      	uxth	r3, r3
 8007888:	4313      	orrs	r3, r2
 800788a:	b29b      	uxth	r3, r3
 800788c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007894:	b29a      	uxth	r2, r3
 8007896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007898:	801a      	strh	r2, [r3, #0]
 800789a:	e050      	b.n	800793e <USB_EPStartXfer+0xb62>
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10a      	bne.n	80078ba <USB_EPStartXfer+0xade>
 80078a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078b6:	801a      	strh	r2, [r3, #0]
 80078b8:	e041      	b.n	800793e <USB_EPStartXfer+0xb62>
 80078ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078be:	085b      	lsrs	r3, r3, #1
 80078c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d004      	beq.n	80078da <USB_EPStartXfer+0xafe>
 80078d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078d4:	3301      	adds	r3, #1
 80078d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	b29a      	uxth	r2, r3
 80078e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	029b      	lsls	r3, r3, #10
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	4313      	orrs	r3, r2
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078f0:	801a      	strh	r2, [r3, #0]
 80078f2:	e024      	b.n	800793e <USB_EPStartXfer+0xb62>
 80078f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	785b      	ldrb	r3, [r3, #1]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d11c      	bne.n	800793e <USB_EPStartXfer+0xb62>
 8007904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007908:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007912:	b29b      	uxth	r3, r3
 8007914:	461a      	mov	r2, r3
 8007916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007918:	4413      	add	r3, r2
 800791a:	673b      	str	r3, [r7, #112]	; 0x70
 800791c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	011a      	lsls	r2, r3, #4
 800792a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800792c:	4413      	add	r3, r2
 800792e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007932:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007938:	b29a      	uxth	r2, r3
 800793a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800793c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800793e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	895b      	ldrh	r3, [r3, #10]
 800794a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800794e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6959      	ldr	r1, [r3, #20]
 800795a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800795e:	b29b      	uxth	r3, r3
 8007960:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007964:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007968:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800796c:	6800      	ldr	r0, [r0, #0]
 800796e:	f000 ff24 	bl	80087ba <USB_WritePMA>
 8007972:	e0ca      	b.n	8007b0a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d177      	bne.n	8007a74 <USB_EPStartXfer+0xc98>
 8007984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007988:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800799e:	b29b      	uxth	r3, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079a4:	4413      	add	r3, r2
 80079a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	011a      	lsls	r2, r3, #4
 80079b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079b8:	4413      	add	r3, r2
 80079ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079be:	67bb      	str	r3, [r7, #120]	; 0x78
 80079c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079ce:	801a      	strh	r2, [r3, #0]
 80079d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d4:	2b3e      	cmp	r3, #62	; 0x3e
 80079d6:	d921      	bls.n	8007a1c <USB_EPStartXfer+0xc40>
 80079d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079dc:	095b      	lsrs	r3, r3, #5
 80079de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e6:	f003 031f 	and.w	r3, r3, #31
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d104      	bne.n	80079f8 <USB_EPStartXfer+0xc1c>
 80079ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80079f2:	3b01      	subs	r3, #1
 80079f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	029b      	lsls	r3, r3, #10
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a18:	801a      	strh	r2, [r3, #0]
 8007a1a:	e05c      	b.n	8007ad6 <USB_EPStartXfer+0xcfa>
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10a      	bne.n	8007a3a <USB_EPStartXfer+0xc5e>
 8007a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a36:	801a      	strh	r2, [r3, #0]
 8007a38:	e04d      	b.n	8007ad6 <USB_EPStartXfer+0xcfa>
 8007a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a3e:	085b      	lsrs	r3, r3, #1
 8007a40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d004      	beq.n	8007a5a <USB_EPStartXfer+0xc7e>
 8007a50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a54:	3301      	adds	r3, #1
 8007a56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	029b      	lsls	r3, r3, #10
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a70:	801a      	strh	r2, [r3, #0]
 8007a72:	e030      	b.n	8007ad6 <USB_EPStartXfer+0xcfa>
 8007a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	785b      	ldrb	r3, [r3, #1]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d128      	bne.n	8007ad6 <USB_EPStartXfer+0xcfa>
 8007a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	011a      	lsls	r2, r3, #4
 8007abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ac6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ad4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	891b      	ldrh	r3, [r3, #8]
 8007ae2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6959      	ldr	r1, [r3, #20]
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007afc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007b00:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b04:	6800      	ldr	r0, [r0, #0]
 8007b06:	f000 fe58 	bl	80087ba <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b30:	817b      	strh	r3, [r7, #10]
 8007b32:	897b      	ldrh	r3, [r7, #10]
 8007b34:	f083 0310 	eor.w	r3, r3, #16
 8007b38:	817b      	strh	r3, [r7, #10]
 8007b3a:	897b      	ldrh	r3, [r7, #10]
 8007b3c:	f083 0320 	eor.w	r3, r3, #32
 8007b40:	817b      	strh	r3, [r7, #10]
 8007b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	441a      	add	r2, r3
 8007b5c:	897b      	ldrh	r3, [r7, #10]
 8007b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	8013      	strh	r3, [r2, #0]
 8007b72:	f000 bcde 	b.w	8008532 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	7b1b      	ldrb	r3, [r3, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f040 80bb 	bne.w	8007cfe <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	699a      	ldr	r2, [r3, #24]
 8007b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d917      	bls.n	8007bd4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	699a      	ldr	r2, [r3, #24]
 8007bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc4:	1ad2      	subs	r2, r2, r3
 8007bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	619a      	str	r2, [r3, #24]
 8007bd2:	e00e      	b.n	8007bf2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	461a      	mov	r2, r3
 8007c12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c16:	4413      	add	r3, r2
 8007c18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	011a      	lsls	r2, r3, #4
 8007c2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c2e:	4413      	add	r3, r2
 8007c30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c4a:	801a      	strh	r2, [r3, #0]
 8007c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c50:	2b3e      	cmp	r3, #62	; 0x3e
 8007c52:	d924      	bls.n	8007c9e <USB_EPStartXfer+0xec2>
 8007c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c58:	095b      	lsrs	r3, r3, #5
 8007c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c62:	f003 031f 	and.w	r3, r3, #31
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d104      	bne.n	8007c74 <USB_EPStartXfer+0xe98>
 8007c6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	029b      	lsls	r3, r3, #10
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	4313      	orrs	r3, r2
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c98:	801a      	strh	r2, [r3, #0]
 8007c9a:	f000 bc10 	b.w	80084be <USB_EPStartXfer+0x16e2>
 8007c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10c      	bne.n	8007cc0 <USB_EPStartXfer+0xee4>
 8007ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cbc:	801a      	strh	r2, [r3, #0]
 8007cbe:	e3fe      	b.n	80084be <USB_EPStartXfer+0x16e2>
 8007cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc4:	085b      	lsrs	r3, r3, #1
 8007cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d004      	beq.n	8007ce0 <USB_EPStartXfer+0xf04>
 8007cd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cda:	3301      	adds	r3, #1
 8007cdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	029b      	lsls	r3, r3, #10
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cfa:	801a      	strh	r2, [r3, #0]
 8007cfc:	e3df      	b.n	80084be <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	78db      	ldrb	r3, [r3, #3]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	f040 8218 	bne.w	8008140 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f040 809d 	bne.w	8007e5c <USB_EPStartXfer+0x1080>
 8007d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	461a      	mov	r2, r3
 8007d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d46:	4413      	add	r3, r2
 8007d48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	011a      	lsls	r2, r3, #4
 8007d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d5e:	4413      	add	r3, r2
 8007d60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d7a:	801a      	strh	r2, [r3, #0]
 8007d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	2b3e      	cmp	r3, #62	; 0x3e
 8007d8a:	d92b      	bls.n	8007de4 <USB_EPStartXfer+0x1008>
 8007d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	095b      	lsrs	r3, r3, #5
 8007d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	f003 031f 	and.w	r3, r3, #31
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d104      	bne.n	8007dbc <USB_EPStartXfer+0xfe0>
 8007db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db6:	3b01      	subs	r3, #1
 8007db8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	029b      	lsls	r3, r3, #10
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	e070      	b.n	8007ec6 <USB_EPStartXfer+0x10ea>
 8007de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10c      	bne.n	8007e0e <USB_EPStartXfer+0x1032>
 8007df4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e0a:	801a      	strh	r2, [r3, #0]
 8007e0c:	e05b      	b.n	8007ec6 <USB_EPStartXfer+0x10ea>
 8007e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	085b      	lsrs	r3, r3, #1
 8007e1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d004      	beq.n	8007e3e <USB_EPStartXfer+0x1062>
 8007e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e38:	3301      	adds	r3, #1
 8007e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	029b      	lsls	r3, r3, #10
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	4313      	orrs	r3, r2
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e58:	801a      	strh	r2, [r3, #0]
 8007e5a:	e034      	b.n	8007ec6 <USB_EPStartXfer+0x10ea>
 8007e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d12c      	bne.n	8007ec6 <USB_EPStartXfer+0x10ea>
 8007e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e90:	4413      	add	r3, r2
 8007e92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	011a      	lsls	r2, r3, #4
 8007ea4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007eae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ec4:	801a      	strh	r2, [r3, #0]
 8007ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	785b      	ldrb	r3, [r3, #1]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f040 809d 	bne.w	8008020 <USB_EPStartXfer+0x1244>
 8007ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	461a      	mov	r2, r3
 8007f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	011a      	lsls	r2, r3, #4
 8007f1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f22:	4413      	add	r3, r2
 8007f24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f4e:	d92b      	bls.n	8007fa8 <USB_EPStartXfer+0x11cc>
 8007f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	095b      	lsrs	r3, r3, #5
 8007f5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	f003 031f 	and.w	r3, r3, #31
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d104      	bne.n	8007f80 <USB_EPStartXfer+0x11a4>
 8007f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	029b      	lsls	r3, r3, #10
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	4313      	orrs	r3, r2
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fa4:	801a      	strh	r2, [r3, #0]
 8007fa6:	e069      	b.n	800807c <USB_EPStartXfer+0x12a0>
 8007fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10c      	bne.n	8007fd2 <USB_EPStartXfer+0x11f6>
 8007fb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fce:	801a      	strh	r2, [r3, #0]
 8007fd0:	e054      	b.n	800807c <USB_EPStartXfer+0x12a0>
 8007fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	085b      	lsrs	r3, r3, #1
 8007fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d004      	beq.n	8008002 <USB_EPStartXfer+0x1226>
 8007ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008002:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	b29a      	uxth	r2, r3
 800800a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800800e:	b29b      	uxth	r3, r3
 8008010:	029b      	lsls	r3, r3, #10
 8008012:	b29b      	uxth	r3, r3
 8008014:	4313      	orrs	r3, r2
 8008016:	b29a      	uxth	r2, r3
 8008018:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800801c:	801a      	strh	r2, [r3, #0]
 800801e:	e02d      	b.n	800807c <USB_EPStartXfer+0x12a0>
 8008020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	785b      	ldrb	r3, [r3, #1]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d125      	bne.n	800807c <USB_EPStartXfer+0x12a0>
 8008030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800803e:	b29b      	uxth	r3, r3
 8008040:	461a      	mov	r2, r3
 8008042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008046:	4413      	add	r3, r2
 8008048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800804c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	011a      	lsls	r2, r3, #4
 800805a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800805e:	4413      	add	r3, r2
 8008060:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008064:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	b29a      	uxth	r2, r3
 8008076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800807a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800807c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8218 	beq.w	80084be <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800808e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800809c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d005      	beq.n	80080c6 <USB_EPStartXfer+0x12ea>
 80080ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10d      	bne.n	80080e2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f040 81f5 	bne.w	80084be <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f040 81ee 	bne.w	80084be <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80080e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008108:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800810c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008110:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	441a      	add	r2, r3
 8008126:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800812a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800812e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008136:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800813a:	b29b      	uxth	r3, r3
 800813c:	8013      	strh	r3, [r2, #0]
 800813e:	e1be      	b.n	80084be <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	78db      	ldrb	r3, [r3, #3]
 800814c:	2b01      	cmp	r3, #1
 800814e:	f040 81b4 	bne.w	80084ba <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699a      	ldr	r2, [r3, #24]
 800815e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	429a      	cmp	r2, r3
 800816c:	d917      	bls.n	800819e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800816e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800817e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699a      	ldr	r2, [r3, #24]
 800818a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800818e:	1ad2      	subs	r2, r2, r3
 8008190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	619a      	str	r2, [r3, #24]
 800819c:	e00e      	b.n	80081bc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800819e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80081ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2200      	movs	r2, #0
 80081ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80081bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f040 8085 	bne.w	80082d8 <USB_EPStartXfer+0x14fc>
 80081ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081f2:	4413      	add	r3, r2
 80081f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	011a      	lsls	r2, r3, #4
 8008206:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800820a:	4413      	add	r3, r2
 800820c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008214:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008220:	b29a      	uxth	r2, r3
 8008222:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008226:	801a      	strh	r2, [r3, #0]
 8008228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800822c:	2b3e      	cmp	r3, #62	; 0x3e
 800822e:	d923      	bls.n	8008278 <USB_EPStartXfer+0x149c>
 8008230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008234:	095b      	lsrs	r3, r3, #5
 8008236:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800823a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800823e:	f003 031f 	and.w	r3, r3, #31
 8008242:	2b00      	cmp	r3, #0
 8008244:	d104      	bne.n	8008250 <USB_EPStartXfer+0x1474>
 8008246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800824a:	3b01      	subs	r3, #1
 800824c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	b29a      	uxth	r2, r3
 8008258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800825c:	b29b      	uxth	r3, r3
 800825e:	029b      	lsls	r3, r3, #10
 8008260:	b29b      	uxth	r3, r3
 8008262:	4313      	orrs	r3, r2
 8008264:	b29b      	uxth	r3, r3
 8008266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800826a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800826e:	b29a      	uxth	r2, r3
 8008270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008274:	801a      	strh	r2, [r3, #0]
 8008276:	e060      	b.n	800833a <USB_EPStartXfer+0x155e>
 8008278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10c      	bne.n	800829a <USB_EPStartXfer+0x14be>
 8008280:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800828c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008290:	b29a      	uxth	r2, r3
 8008292:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008296:	801a      	strh	r2, [r3, #0]
 8008298:	e04f      	b.n	800833a <USB_EPStartXfer+0x155e>
 800829a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800829e:	085b      	lsrs	r3, r3, #1
 80082a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80082a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <USB_EPStartXfer+0x14de>
 80082b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082b4:	3301      	adds	r3, #1
 80082b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80082ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	029b      	lsls	r3, r3, #10
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4313      	orrs	r3, r2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082d4:	801a      	strh	r2, [r3, #0]
 80082d6:	e030      	b.n	800833a <USB_EPStartXfer+0x155e>
 80082d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	785b      	ldrb	r3, [r3, #1]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d128      	bne.n	800833a <USB_EPStartXfer+0x155e>
 80082e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008304:	b29b      	uxth	r3, r3
 8008306:	461a      	mov	r2, r3
 8008308:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800830c:	4413      	add	r3, r2
 800830e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	011a      	lsls	r2, r3, #4
 8008320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008324:	4413      	add	r3, r2
 8008326:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800832a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800832e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008332:	b29a      	uxth	r2, r3
 8008334:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008338:	801a      	strh	r2, [r3, #0]
 800833a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800834c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	785b      	ldrb	r3, [r3, #1]
 8008354:	2b00      	cmp	r3, #0
 8008356:	f040 8085 	bne.w	8008464 <USB_EPStartXfer+0x1688>
 800835a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800835e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008376:	b29b      	uxth	r3, r3
 8008378:	461a      	mov	r2, r3
 800837a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800837e:	4413      	add	r3, r2
 8008380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	011a      	lsls	r2, r3, #4
 8008392:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008396:	4413      	add	r3, r2
 8008398:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800839c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083b2:	801a      	strh	r2, [r3, #0]
 80083b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b8:	2b3e      	cmp	r3, #62	; 0x3e
 80083ba:	d923      	bls.n	8008404 <USB_EPStartXfer+0x1628>
 80083bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ca:	f003 031f 	and.w	r3, r3, #31
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d104      	bne.n	80083dc <USB_EPStartXfer+0x1600>
 80083d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083d6:	3b01      	subs	r3, #1
 80083d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	029b      	lsls	r3, r3, #10
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	4313      	orrs	r3, r2
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	e05c      	b.n	80084be <USB_EPStartXfer+0x16e2>
 8008404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10c      	bne.n	8008426 <USB_EPStartXfer+0x164a>
 800840c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800841c:	b29a      	uxth	r2, r3
 800841e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008422:	801a      	strh	r2, [r3, #0]
 8008424:	e04b      	b.n	80084be <USB_EPStartXfer+0x16e2>
 8008426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800842a:	085b      	lsrs	r3, r3, #1
 800842c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	d004      	beq.n	8008446 <USB_EPStartXfer+0x166a>
 800843c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008440:	3301      	adds	r3, #1
 8008442:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	b29a      	uxth	r2, r3
 800844e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008452:	b29b      	uxth	r3, r3
 8008454:	029b      	lsls	r3, r3, #10
 8008456:	b29b      	uxth	r3, r3
 8008458:	4313      	orrs	r3, r2
 800845a:	b29a      	uxth	r2, r3
 800845c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008460:	801a      	strh	r2, [r3, #0]
 8008462:	e02c      	b.n	80084be <USB_EPStartXfer+0x16e2>
 8008464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d124      	bne.n	80084be <USB_EPStartXfer+0x16e2>
 8008474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008478:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008482:	b29b      	uxth	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800848a:	4413      	add	r3, r2
 800848c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	011a      	lsls	r2, r3, #4
 800849e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80084a2:	4413      	add	r3, r2
 80084a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80084b6:	801a      	strh	r2, [r3, #0]
 80084b8:	e001      	b.n	80084be <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e03a      	b.n	8008534 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	b29b      	uxth	r3, r3
 80084dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80084e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80084ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80084f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80084f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008504:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	441a      	add	r2, r3
 800851a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800851e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800852a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852e:	b29b      	uxth	r3, r3
 8008530:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	785b      	ldrb	r3, [r3, #1]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d020      	beq.n	8008592 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	b29b      	uxth	r3, r3
 800855e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008566:	81bb      	strh	r3, [r7, #12]
 8008568:	89bb      	ldrh	r3, [r7, #12]
 800856a:	f083 0310 	eor.w	r3, r3, #16
 800856e:	81bb      	strh	r3, [r7, #12]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	441a      	add	r2, r3
 800857a:	89bb      	ldrh	r3, [r7, #12]
 800857c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800858c:	b29b      	uxth	r3, r3
 800858e:	8013      	strh	r3, [r2, #0]
 8008590:	e01f      	b.n	80085d2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a8:	81fb      	strh	r3, [r7, #14]
 80085aa:	89fb      	ldrh	r3, [r7, #14]
 80085ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085b0:	81fb      	strh	r3, [r7, #14]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	441a      	add	r2, r3
 80085bc:	89fb      	ldrh	r3, [r7, #14]
 80085be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	bc80      	pop	{r7}
 80085dc:	4770      	bx	lr

080085de <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085de:	b480      	push	{r7}
 80085e0:	b087      	sub	sp, #28
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	7b1b      	ldrb	r3, [r3, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f040 809d 	bne.w	800872c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	785b      	ldrb	r3, [r3, #1]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d04c      	beq.n	8008694 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	823b      	strh	r3, [r7, #16]
 8008608:	8a3b      	ldrh	r3, [r7, #16]
 800860a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800860e:	2b00      	cmp	r3, #0
 8008610:	d01b      	beq.n	800864a <USB_EPClearStall+0x6c>
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	b29b      	uxth	r3, r3
 8008620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008628:	81fb      	strh	r3, [r7, #14]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	441a      	add	r2, r3
 8008634:	89fb      	ldrh	r3, [r7, #14]
 8008636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800863a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800863e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008642:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008646:	b29b      	uxth	r3, r3
 8008648:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	78db      	ldrb	r3, [r3, #3]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d06c      	beq.n	800872c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008668:	81bb      	strh	r3, [r7, #12]
 800866a:	89bb      	ldrh	r3, [r7, #12]
 800866c:	f083 0320 	eor.w	r3, r3, #32
 8008670:	81bb      	strh	r3, [r7, #12]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	441a      	add	r2, r3
 800867c:	89bb      	ldrh	r3, [r7, #12]
 800867e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800868a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800868e:	b29b      	uxth	r3, r3
 8008690:	8013      	strh	r3, [r2, #0]
 8008692:	e04b      	b.n	800872c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	82fb      	strh	r3, [r7, #22]
 80086a2:	8afb      	ldrh	r3, [r7, #22]
 80086a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d01b      	beq.n	80086e4 <USB_EPClearStall+0x106>
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c2:	82bb      	strh	r3, [r7, #20]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	441a      	add	r2, r3
 80086ce:	8abb      	ldrh	r3, [r7, #20]
 80086d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086fa:	827b      	strh	r3, [r7, #18]
 80086fc:	8a7b      	ldrh	r3, [r7, #18]
 80086fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008702:	827b      	strh	r3, [r7, #18]
 8008704:	8a7b      	ldrh	r3, [r7, #18]
 8008706:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800870a:	827b      	strh	r3, [r7, #18]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	441a      	add	r2, r3
 8008716:	8a7b      	ldrh	r3, [r7, #18]
 8008718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800871c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008728:	b29b      	uxth	r3, r3
 800872a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr

08008738 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2280      	movs	r2, #128	; 0x80
 800874e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	bc80      	pop	{r7}
 800875c:	4770      	bx	lr

0800875e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	bc80      	pop	{r7}
 8008770:	4770      	bx	lr

08008772 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	bc80      	pop	{r7}
 8008784:	4770      	bx	lr

08008786 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008786:	b480      	push	{r7}
 8008788:	b085      	sub	sp, #20
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008794:	b29b      	uxth	r3, r3
 8008796:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008798:	68fb      	ldr	r3, [r7, #12]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr

080087a4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bc80      	pop	{r7}
 80087b8:	4770      	bx	lr

080087ba <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b08b      	sub	sp, #44	; 0x2c
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	4611      	mov	r1, r2
 80087c6:	461a      	mov	r2, r3
 80087c8:	460b      	mov	r3, r1
 80087ca:	80fb      	strh	r3, [r7, #6]
 80087cc:	4613      	mov	r3, r2
 80087ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80087d0:	88bb      	ldrh	r3, [r7, #4]
 80087d2:	3301      	adds	r3, #1
 80087d4:	085b      	lsrs	r3, r3, #1
 80087d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087e0:	88fb      	ldrh	r3, [r7, #6]
 80087e2:	005a      	lsls	r2, r3, #1
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	627b      	str	r3, [r7, #36]	; 0x24
 80087f2:	e01e      	b.n	8008832 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	3301      	adds	r3, #1
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	b21a      	sxth	r2, r3
 8008804:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008808:	4313      	orrs	r3, r2
 800880a:	b21b      	sxth	r3, r3
 800880c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	8a7a      	ldrh	r2, [r7, #18]
 8008812:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	3302      	adds	r3, #2
 8008818:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	3302      	adds	r3, #2
 800881e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	3301      	adds	r3, #1
 8008824:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	3301      	adds	r3, #1
 800882a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	3b01      	subs	r3, #1
 8008830:	627b      	str	r3, [r7, #36]	; 0x24
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1dd      	bne.n	80087f4 <USB_WritePMA+0x3a>
  }
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	372c      	adds	r7, #44	; 0x2c
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr

08008844 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008844:	b480      	push	{r7}
 8008846:	b08b      	sub	sp, #44	; 0x2c
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	4611      	mov	r1, r2
 8008850:	461a      	mov	r2, r3
 8008852:	460b      	mov	r3, r1
 8008854:	80fb      	strh	r3, [r7, #6]
 8008856:	4613      	mov	r3, r2
 8008858:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800885a:	88bb      	ldrh	r3, [r7, #4]
 800885c:	085b      	lsrs	r3, r3, #1
 800885e:	b29b      	uxth	r3, r3
 8008860:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800886a:	88fb      	ldrh	r3, [r7, #6]
 800886c:	005a      	lsls	r2, r3, #1
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	4413      	add	r3, r2
 8008872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008876:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	627b      	str	r3, [r7, #36]	; 0x24
 800887c:	e01b      	b.n	80088b6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	b29b      	uxth	r3, r3
 8008884:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	3302      	adds	r3, #2
 800888a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	b2da      	uxtb	r2, r3
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	3301      	adds	r3, #1
 8008898:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	0a1b      	lsrs	r3, r3, #8
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	3301      	adds	r3, #1
 80088a8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80088aa:	6a3b      	ldr	r3, [r7, #32]
 80088ac:	3302      	adds	r3, #2
 80088ae:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	3b01      	subs	r3, #1
 80088b4:	627b      	str	r3, [r7, #36]	; 0x24
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e0      	bne.n	800887e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80088bc:	88bb      	ldrh	r3, [r7, #4]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d007      	beq.n	80088d8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	701a      	strb	r2, [r3, #0]
  }
}
 80088d8:	bf00      	nop
 80088da:	372c      	adds	r7, #44	; 0x2c
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr

080088e2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	7c1b      	ldrb	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d115      	bne.n	8008926 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088fe:	2202      	movs	r2, #2
 8008900:	2181      	movs	r1, #129	; 0x81
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f004 fb91 	bl	800d02a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800890e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008912:	2202      	movs	r2, #2
 8008914:	2101      	movs	r1, #1
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f004 fb87 	bl	800d02a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008924:	e012      	b.n	800894c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008926:	2340      	movs	r3, #64	; 0x40
 8008928:	2202      	movs	r2, #2
 800892a:	2181      	movs	r1, #129	; 0x81
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f004 fb7c 	bl	800d02a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008938:	2340      	movs	r3, #64	; 0x40
 800893a:	2202      	movs	r2, #2
 800893c:	2101      	movs	r1, #1
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f004 fb73 	bl	800d02a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800894c:	2308      	movs	r3, #8
 800894e:	2203      	movs	r2, #3
 8008950:	2182      	movs	r1, #130	; 0x82
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f004 fb69 	bl	800d02a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800895e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008962:	f004 fc89 	bl	800d278 <USBD_static_malloc>
 8008966:	4602      	mov	r2, r0
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008974:	2b00      	cmp	r3, #0
 8008976:	d102      	bne.n	800897e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008978:	2301      	movs	r3, #1
 800897a:	73fb      	strb	r3, [r7, #15]
 800897c:	e026      	b.n	80089cc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008984:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2200      	movs	r2, #0
 8008994:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2200      	movs	r2, #0
 800899c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	7c1b      	ldrb	r3, [r3, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d109      	bne.n	80089bc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089b2:	2101      	movs	r1, #1
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f004 fc29 	bl	800d20c <USBD_LL_PrepareReceive>
 80089ba:	e007      	b.n	80089cc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089c2:	2340      	movs	r3, #64	; 0x40
 80089c4:	2101      	movs	r1, #1
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f004 fc20 	bl	800d20c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	460b      	mov	r3, r1
 80089e0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80089e6:	2181      	movs	r1, #129	; 0x81
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f004 fb44 	bl	800d076 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80089f4:	2101      	movs	r1, #1
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f004 fb3d 	bl	800d076 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008a04:	2182      	movs	r1, #130	; 0x82
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f004 fb35 	bl	800d076 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00e      	beq.n	8008a3a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f004 fc2f 	bl	800d290 <USBD_static_free>
    pdev->pClassData = NULL;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a54:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d039      	beq.n	8008ae2 <USBD_CDC_Setup+0x9e>
 8008a6e:	2b20      	cmp	r3, #32
 8008a70:	d17f      	bne.n	8008b72 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	88db      	ldrh	r3, [r3, #6]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d029      	beq.n	8008ace <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	b25b      	sxtb	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	da11      	bge.n	8008aa8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008a90:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	88d2      	ldrh	r2, [r2, #6]
 8008a96:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a98:	6939      	ldr	r1, [r7, #16]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	88db      	ldrh	r3, [r3, #6]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f001 fa0a 	bl	8009eba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008aa6:	e06b      	b.n	8008b80 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	785a      	ldrb	r2, [r3, #1]
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	88db      	ldrh	r3, [r3, #6]
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008abe:	6939      	ldr	r1, [r7, #16]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	88db      	ldrh	r3, [r3, #6]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 fa25 	bl	8009f16 <USBD_CtlPrepareRx>
      break;
 8008acc:	e058      	b.n	8008b80 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	7850      	ldrb	r0, [r2, #1]
 8008ada:	2200      	movs	r2, #0
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	4798      	blx	r3
      break;
 8008ae0:	e04e      	b.n	8008b80 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	785b      	ldrb	r3, [r3, #1]
 8008ae6:	2b0b      	cmp	r3, #11
 8008ae8:	d02e      	beq.n	8008b48 <USBD_CDC_Setup+0x104>
 8008aea:	2b0b      	cmp	r3, #11
 8008aec:	dc38      	bgt.n	8008b60 <USBD_CDC_Setup+0x11c>
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <USBD_CDC_Setup+0xb4>
 8008af2:	2b0a      	cmp	r3, #10
 8008af4:	d014      	beq.n	8008b20 <USBD_CDC_Setup+0xdc>
 8008af6:	e033      	b.n	8008b60 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d107      	bne.n	8008b12 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008b02:	f107 030c 	add.w	r3, r7, #12
 8008b06:	2202      	movs	r2, #2
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 f9d5 	bl	8009eba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b10:	e02e      	b.n	8008b70 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 f966 	bl	8009de6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b1e:	e027      	b.n	8008b70 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d107      	bne.n	8008b3a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b2a:	f107 030f 	add.w	r3, r7, #15
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 f9c1 	bl	8009eba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b38:	e01a      	b.n	8008b70 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 f952 	bl	8009de6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b42:	2302      	movs	r3, #2
 8008b44:	75fb      	strb	r3, [r7, #23]
          break;
 8008b46:	e013      	b.n	8008b70 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d00d      	beq.n	8008b6e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f001 f946 	bl	8009de6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b5e:	e006      	b.n	8008b6e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f001 f93f 	bl	8009de6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b68:	2302      	movs	r3, #2
 8008b6a:	75fb      	strb	r3, [r7, #23]
          break;
 8008b6c:	e000      	b.n	8008b70 <USBD_CDC_Setup+0x12c>
          break;
 8008b6e:	bf00      	nop
      }
      break;
 8008b70:	e006      	b.n	8008b80 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 f936 	bl	8009de6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b7e:	bf00      	nop
  }

  return ret;
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3718      	adds	r7, #24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b084      	sub	sp, #16
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	460b      	mov	r3, r1
 8008b94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ba4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d03a      	beq.n	8008c26 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008bb0:	78fa      	ldrb	r2, [r7, #3]
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4413      	add	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	440b      	add	r3, r1
 8008bbe:	331c      	adds	r3, #28
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d029      	beq.n	8008c1a <USBD_CDC_DataIn+0x90>
 8008bc6:	78fa      	ldrb	r2, [r7, #3]
 8008bc8:	6879      	ldr	r1, [r7, #4]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	440b      	add	r3, r1
 8008bd4:	331c      	adds	r3, #28
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	78f9      	ldrb	r1, [r7, #3]
 8008bda:	68b8      	ldr	r0, [r7, #8]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	440b      	add	r3, r1
 8008be2:	00db      	lsls	r3, r3, #3
 8008be4:	4403      	add	r3, r0
 8008be6:	3338      	adds	r3, #56	; 0x38
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bee:	fb01 f303 	mul.w	r3, r1, r3
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d110      	bne.n	8008c1a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	6879      	ldr	r1, [r7, #4]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	440b      	add	r3, r1
 8008c06:	331c      	adds	r3, #28
 8008c08:	2200      	movs	r2, #0
 8008c0a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c0c:	78f9      	ldrb	r1, [r7, #3]
 8008c0e:	2300      	movs	r3, #0
 8008c10:	2200      	movs	r2, #0
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f004 fad7 	bl	800d1c6 <USBD_LL_Transmit>
 8008c18:	e003      	b.n	8008c22 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	e000      	b.n	8008c28 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008c26:	2302      	movs	r3, #2
  }
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c42:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c44:	78fb      	ldrb	r3, [r7, #3]
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f004 fb02 	bl	800d252 <USBD_LL_GetRxDataSize>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00d      	beq.n	8008c7c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c74:	4611      	mov	r1, r2
 8008c76:	4798      	blx	r3

    return USBD_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e000      	b.n	8008c7e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008c7c:	2302      	movs	r3, #2
  }
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b084      	sub	sp, #16
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c94:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d015      	beq.n	8008ccc <USBD_CDC_EP0_RxReady+0x46>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ca6:	2bff      	cmp	r3, #255	; 0xff
 8008ca8:	d010      	beq.n	8008ccc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008cb8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cc0:	b292      	uxth	r2, r2
 8008cc2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	22ff      	movs	r2, #255	; 0xff
 8008cc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
	...

08008cd8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2243      	movs	r2, #67	; 0x43
 8008ce4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008ce6:	4b03      	ldr	r3, [pc, #12]	; (8008cf4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bc80      	pop	{r7}
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	20000094 	.word	0x20000094

08008cf8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2243      	movs	r2, #67	; 0x43
 8008d04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008d06:	4b03      	ldr	r3, [pc, #12]	; (8008d14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bc80      	pop	{r7}
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	20000050 	.word	0x20000050

08008d18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2243      	movs	r2, #67	; 0x43
 8008d24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008d26:	4b03      	ldr	r3, [pc, #12]	; (8008d34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bc80      	pop	{r7}
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	200000d8 	.word	0x200000d8

08008d38 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	220a      	movs	r2, #10
 8008d44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008d46:	4b03      	ldr	r3, [pc, #12]	; (8008d54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	2000000c 	.word	0x2000000c

08008d58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008d62:	2302      	movs	r3, #2
 8008d64:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d005      	beq.n	8008d78 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bc80      	pop	{r7}
 8008d82:	4770      	bx	lr

08008d84 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d98:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	68ba      	ldr	r2, [r7, #8]
 8008d9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008da2:	88fa      	ldrh	r2, [r7, #6]
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	371c      	adds	r7, #28
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bc80      	pop	{r7}
 8008db4:	4770      	bx	lr

08008db6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b085      	sub	sp, #20
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bc80      	pop	{r7}
 8008dda:	4770      	bx	lr

08008ddc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d01c      	beq.n	8008e30 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d115      	bne.n	8008e2c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	2181      	movs	r1, #129	; 0x81
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f004 f9cf 	bl	800d1c6 <USBD_LL_Transmit>

      return USBD_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	e002      	b.n	8008e32 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e000      	b.n	8008e32 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008e30:	2302      	movs	r3, #2
  }
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e48:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d017      	beq.n	8008e84 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	7c1b      	ldrb	r3, [r3, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d109      	bne.n	8008e70 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e66:	2101      	movs	r1, #1
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f004 f9cf 	bl	800d20c <USBD_LL_PrepareReceive>
 8008e6e:	e007      	b.n	8008e80 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e76:	2340      	movs	r3, #64	; 0x40
 8008e78:	2101      	movs	r1, #1
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f004 f9c6 	bl	800d20c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	e000      	b.n	8008e86 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008e84:	2302      	movs	r3, #2
  }
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	60f8      	str	r0, [r7, #12]
 8008e96:	60b9      	str	r1, [r7, #8]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	e01a      	b.n	8008edc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d003      	beq.n	8008ec6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	79fa      	ldrb	r2, [r7, #7]
 8008ed2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f004 f833 	bl	800cf40 <USBD_LL_Init>

  return USBD_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d006      	beq.n	8008f06 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73fb      	strb	r3, [r7, #15]
 8008f04:	e001      	b.n	8008f0a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008f06:	2302      	movs	r3, #2
 8008f08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bc80      	pop	{r7}
 8008f14:	4770      	bx	lr

08008f16 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b082      	sub	sp, #8
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f004 f868 	bl	800cff4 <USBD_LL_Start>

  return USBD_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bc80      	pop	{r7}
 8008f40:	4770      	bx	lr

08008f42 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f4e:	2302      	movs	r3, #2
 8008f50:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00c      	beq.n	8008f76 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	78fa      	ldrb	r2, [r7, #3]
 8008f66:	4611      	mov	r1, r2
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	4798      	blx	r3
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d101      	bne.n	8008f76 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	78fa      	ldrb	r2, [r7, #3]
 8008f96:	4611      	mov	r1, r2
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	4798      	blx	r3

  return USBD_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 fed8 	bl	8009d6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008fcc:	461a      	mov	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008fda:	f003 031f 	and.w	r3, r3, #31
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d016      	beq.n	8009010 <USBD_LL_SetupStage+0x6a>
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d81c      	bhi.n	8009020 <USBD_LL_SetupStage+0x7a>
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d002      	beq.n	8008ff0 <USBD_LL_SetupStage+0x4a>
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d008      	beq.n	8009000 <USBD_LL_SetupStage+0x5a>
 8008fee:	e017      	b.n	8009020 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f9cb 	bl	8009394 <USBD_StdDevReq>
      break;
 8008ffe:	e01a      	b.n	8009036 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fa2d 	bl	8009468 <USBD_StdItfReq>
      break;
 800900e:	e012      	b.n	8009036 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fa6d 	bl	80094f8 <USBD_StdEPReq>
      break;
 800901e:	e00a      	b.n	8009036 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009026:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800902a:	b2db      	uxtb	r3, r3
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f004 f840 	bl	800d0b4 <USBD_LL_StallEP>
      break;
 8009034:	bf00      	nop
  }

  return USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	460b      	mov	r3, r1
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800904e:	7afb      	ldrb	r3, [r7, #11]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d14b      	bne.n	80090ec <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800905a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009062:	2b03      	cmp	r3, #3
 8009064:	d134      	bne.n	80090d0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	68da      	ldr	r2, [r3, #12]
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	429a      	cmp	r2, r3
 8009070:	d919      	bls.n	80090a6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	1ad2      	subs	r2, r2, r3
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009088:	429a      	cmp	r2, r3
 800908a:	d203      	bcs.n	8009094 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009090:	b29b      	uxth	r3, r3
 8009092:	e002      	b.n	800909a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009098:	b29b      	uxth	r3, r3
 800909a:	461a      	mov	r2, r3
 800909c:	6879      	ldr	r1, [r7, #4]
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f000 ff57 	bl	8009f52 <USBD_CtlContinueRx>
 80090a4:	e038      	b.n	8009118 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00a      	beq.n	80090c8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	d105      	bne.n	80090c8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 ff54 	bl	8009f76 <USBD_CtlSendStatus>
 80090ce:	e023      	b.n	8009118 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090d6:	2b05      	cmp	r3, #5
 80090d8:	d11e      	bne.n	8009118 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80090e2:	2100      	movs	r1, #0
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f003 ffe5 	bl	800d0b4 <USBD_LL_StallEP>
 80090ea:	e015      	b.n	8009118 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00d      	beq.n	8009114 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d108      	bne.n	8009114 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	7afa      	ldrb	r2, [r7, #11]
 800910c:	4611      	mov	r1, r2
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	4798      	blx	r3
 8009112:	e001      	b.n	8009118 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009114:	2302      	movs	r3, #2
 8009116:	e000      	b.n	800911a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b086      	sub	sp, #24
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	460b      	mov	r3, r1
 800912c:	607a      	str	r2, [r7, #4]
 800912e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009130:	7afb      	ldrb	r3, [r7, #11]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d17f      	bne.n	8009236 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3314      	adds	r3, #20
 800913a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009142:	2b02      	cmp	r3, #2
 8009144:	d15c      	bne.n	8009200 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	68da      	ldr	r2, [r3, #12]
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	429a      	cmp	r2, r3
 8009150:	d915      	bls.n	800917e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	68da      	ldr	r2, [r3, #12]
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	1ad2      	subs	r2, r2, r3
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	b29b      	uxth	r3, r3
 8009166:	461a      	mov	r2, r3
 8009168:	6879      	ldr	r1, [r7, #4]
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f000 fec1 	bl	8009ef2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009170:	2300      	movs	r3, #0
 8009172:	2200      	movs	r2, #0
 8009174:	2100      	movs	r1, #0
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f004 f848 	bl	800d20c <USBD_LL_PrepareReceive>
 800917c:	e04e      	b.n	800921c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	6912      	ldr	r2, [r2, #16]
 8009186:	fbb3 f1f2 	udiv	r1, r3, r2
 800918a:	fb01 f202 	mul.w	r2, r1, r2
 800918e:	1a9b      	subs	r3, r3, r2
 8009190:	2b00      	cmp	r3, #0
 8009192:	d11c      	bne.n	80091ce <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	689a      	ldr	r2, [r3, #8]
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800919c:	429a      	cmp	r2, r3
 800919e:	d316      	bcc.n	80091ce <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	689a      	ldr	r2, [r3, #8]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d20f      	bcs.n	80091ce <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091ae:	2200      	movs	r2, #0
 80091b0:	2100      	movs	r1, #0
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f000 fe9d 	bl	8009ef2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091c0:	2300      	movs	r3, #0
 80091c2:	2200      	movs	r2, #0
 80091c4:	2100      	movs	r1, #0
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f004 f820 	bl	800d20c <USBD_LL_PrepareReceive>
 80091cc:	e026      	b.n	800921c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80091e0:	2b03      	cmp	r3, #3
 80091e2:	d105      	bne.n	80091f0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80091f0:	2180      	movs	r1, #128	; 0x80
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f003 ff5e 	bl	800d0b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 fecf 	bl	8009f9c <USBD_CtlReceiveStatus>
 80091fe:	e00d      	b.n	800921c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009206:	2b04      	cmp	r3, #4
 8009208:	d004      	beq.n	8009214 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009210:	2b00      	cmp	r3, #0
 8009212:	d103      	bne.n	800921c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009214:	2180      	movs	r1, #128	; 0x80
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f003 ff4c 	bl	800d0b4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009222:	2b01      	cmp	r3, #1
 8009224:	d11d      	bne.n	8009262 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f7ff fe81 	bl	8008f2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009234:	e015      	b.n	8009262 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00d      	beq.n	800925e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009248:	2b03      	cmp	r3, #3
 800924a:	d108      	bne.n	800925e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	7afa      	ldrb	r2, [r7, #11]
 8009256:	4611      	mov	r1, r2
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	4798      	blx	r3
 800925c:	e001      	b.n	8009262 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800925e:	2302      	movs	r3, #2
 8009260:	e000      	b.n	8009264 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009274:	2340      	movs	r3, #64	; 0x40
 8009276:	2200      	movs	r2, #0
 8009278:	2100      	movs	r1, #0
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f003 fed5 	bl	800d02a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2240      	movs	r2, #64	; 0x40
 800928c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009290:	2340      	movs	r3, #64	; 0x40
 8009292:	2200      	movs	r2, #0
 8009294:	2180      	movs	r1, #128	; 0x80
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f003 fec7 	bl	800d02a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2240      	movs	r2, #64	; 0x40
 80092a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d009      	beq.n	80092e4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	6852      	ldr	r2, [r2, #4]
 80092dc:	b2d2      	uxtb	r2, r2
 80092de:	4611      	mov	r1, r2
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	4798      	blx	r3
  }

  return USBD_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	460b      	mov	r3, r1
 80092f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	bc80      	pop	{r7}
 800930a:	4770      	bx	lr

0800930c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2204      	movs	r2, #4
 8009324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	bc80      	pop	{r7}
 8009332:	4770      	bx	lr

08009334 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009342:	2b04      	cmp	r3, #4
 8009344:	d105      	bne.n	8009352 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	bc80      	pop	{r7}
 800935c:	4770      	bx	lr

0800935e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b082      	sub	sp, #8
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800936c:	2b03      	cmp	r3, #3
 800936e:	d10b      	bne.n	8009388 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d005      	beq.n	8009388 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009382:	69db      	ldr	r3, [r3, #28]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
	...

08009394 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093aa:	2b40      	cmp	r3, #64	; 0x40
 80093ac:	d005      	beq.n	80093ba <USBD_StdDevReq+0x26>
 80093ae:	2b40      	cmp	r3, #64	; 0x40
 80093b0:	d84f      	bhi.n	8009452 <USBD_StdDevReq+0xbe>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d009      	beq.n	80093ca <USBD_StdDevReq+0x36>
 80093b6:	2b20      	cmp	r3, #32
 80093b8:	d14b      	bne.n	8009452 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	4798      	blx	r3
      break;
 80093c8:	e048      	b.n	800945c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	2b09      	cmp	r3, #9
 80093d0:	d839      	bhi.n	8009446 <USBD_StdDevReq+0xb2>
 80093d2:	a201      	add	r2, pc, #4	; (adr r2, 80093d8 <USBD_StdDevReq+0x44>)
 80093d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d8:	08009429 	.word	0x08009429
 80093dc:	0800943d 	.word	0x0800943d
 80093e0:	08009447 	.word	0x08009447
 80093e4:	08009433 	.word	0x08009433
 80093e8:	08009447 	.word	0x08009447
 80093ec:	0800940b 	.word	0x0800940b
 80093f0:	08009401 	.word	0x08009401
 80093f4:	08009447 	.word	0x08009447
 80093f8:	0800941f 	.word	0x0800941f
 80093fc:	08009415 	.word	0x08009415
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f9dc 	bl	80097c0 <USBD_GetDescriptor>
          break;
 8009408:	e022      	b.n	8009450 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fb3f 	bl	8009a90 <USBD_SetAddress>
          break;
 8009412:	e01d      	b.n	8009450 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fb7e 	bl	8009b18 <USBD_SetConfig>
          break;
 800941c:	e018      	b.n	8009450 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fc07 	bl	8009c34 <USBD_GetConfig>
          break;
 8009426:	e013      	b.n	8009450 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fc37 	bl	8009c9e <USBD_GetStatus>
          break;
 8009430:	e00e      	b.n	8009450 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fc65 	bl	8009d04 <USBD_SetFeature>
          break;
 800943a:	e009      	b.n	8009450 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fc74 	bl	8009d2c <USBD_ClrFeature>
          break;
 8009444:	e004      	b.n	8009450 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fccc 	bl	8009de6 <USBD_CtlError>
          break;
 800944e:	bf00      	nop
      }
      break;
 8009450:	e004      	b.n	800945c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fcc6 	bl	8009de6 <USBD_CtlError>
      break;
 800945a:	bf00      	nop
  }

  return ret;
 800945c:	7bfb      	ldrb	r3, [r7, #15]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop

08009468 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800947e:	2b40      	cmp	r3, #64	; 0x40
 8009480:	d005      	beq.n	800948e <USBD_StdItfReq+0x26>
 8009482:	2b40      	cmp	r3, #64	; 0x40
 8009484:	d82e      	bhi.n	80094e4 <USBD_StdItfReq+0x7c>
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <USBD_StdItfReq+0x26>
 800948a:	2b20      	cmp	r3, #32
 800948c:	d12a      	bne.n	80094e4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009494:	3b01      	subs	r3, #1
 8009496:	2b02      	cmp	r3, #2
 8009498:	d81d      	bhi.n	80094d6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	889b      	ldrh	r3, [r3, #4]
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d813      	bhi.n	80094cc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	4798      	blx	r3
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	88db      	ldrh	r3, [r3, #6]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d110      	bne.n	80094e0 <USBD_StdItfReq+0x78>
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10d      	bne.n	80094e0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fd56 	bl	8009f76 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80094ca:	e009      	b.n	80094e0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fc89 	bl	8009de6 <USBD_CtlError>
          break;
 80094d4:	e004      	b.n	80094e0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fc84 	bl	8009de6 <USBD_CtlError>
          break;
 80094de:	e000      	b.n	80094e2 <USBD_StdItfReq+0x7a>
          break;
 80094e0:	bf00      	nop
      }
      break;
 80094e2:	e004      	b.n	80094ee <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fc7d 	bl	8009de6 <USBD_CtlError>
      break;
 80094ec:	bf00      	nop
  }

  return USBD_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	889b      	ldrh	r3, [r3, #4]
 800950a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009514:	2b40      	cmp	r3, #64	; 0x40
 8009516:	d007      	beq.n	8009528 <USBD_StdEPReq+0x30>
 8009518:	2b40      	cmp	r3, #64	; 0x40
 800951a:	f200 8146 	bhi.w	80097aa <USBD_StdEPReq+0x2b2>
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00a      	beq.n	8009538 <USBD_StdEPReq+0x40>
 8009522:	2b20      	cmp	r3, #32
 8009524:	f040 8141 	bne.w	80097aa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	4798      	blx	r3
      break;
 8009536:	e13d      	b.n	80097b4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009540:	2b20      	cmp	r3, #32
 8009542:	d10a      	bne.n	800955a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	4798      	blx	r3
 8009552:	4603      	mov	r3, r0
 8009554:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009556:	7bfb      	ldrb	r3, [r7, #15]
 8009558:	e12d      	b.n	80097b6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	785b      	ldrb	r3, [r3, #1]
 800955e:	2b03      	cmp	r3, #3
 8009560:	d007      	beq.n	8009572 <USBD_StdEPReq+0x7a>
 8009562:	2b03      	cmp	r3, #3
 8009564:	f300 811b 	bgt.w	800979e <USBD_StdEPReq+0x2a6>
 8009568:	2b00      	cmp	r3, #0
 800956a:	d072      	beq.n	8009652 <USBD_StdEPReq+0x15a>
 800956c:	2b01      	cmp	r3, #1
 800956e:	d03a      	beq.n	80095e6 <USBD_StdEPReq+0xee>
 8009570:	e115      	b.n	800979e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009578:	2b02      	cmp	r3, #2
 800957a:	d002      	beq.n	8009582 <USBD_StdEPReq+0x8a>
 800957c:	2b03      	cmp	r3, #3
 800957e:	d015      	beq.n	80095ac <USBD_StdEPReq+0xb4>
 8009580:	e02b      	b.n	80095da <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00c      	beq.n	80095a2 <USBD_StdEPReq+0xaa>
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	2b80      	cmp	r3, #128	; 0x80
 800958c:	d009      	beq.n	80095a2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800958e:	7bbb      	ldrb	r3, [r7, #14]
 8009590:	4619      	mov	r1, r3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f003 fd8e 	bl	800d0b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009598:	2180      	movs	r1, #128	; 0x80
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f003 fd8a 	bl	800d0b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095a0:	e020      	b.n	80095e4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80095a2:	6839      	ldr	r1, [r7, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fc1e 	bl	8009de6 <USBD_CtlError>
              break;
 80095aa:	e01b      	b.n	80095e4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	885b      	ldrh	r3, [r3, #2]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10e      	bne.n	80095d2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00b      	beq.n	80095d2 <USBD_StdEPReq+0xda>
 80095ba:	7bbb      	ldrb	r3, [r7, #14]
 80095bc:	2b80      	cmp	r3, #128	; 0x80
 80095be:	d008      	beq.n	80095d2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	88db      	ldrh	r3, [r3, #6]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d104      	bne.n	80095d2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80095c8:	7bbb      	ldrb	r3, [r7, #14]
 80095ca:	4619      	mov	r1, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f003 fd71 	bl	800d0b4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fccf 	bl	8009f76 <USBD_CtlSendStatus>

              break;
 80095d8:	e004      	b.n	80095e4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fc02 	bl	8009de6 <USBD_CtlError>
              break;
 80095e2:	bf00      	nop
          }
          break;
 80095e4:	e0e0      	b.n	80097a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d002      	beq.n	80095f6 <USBD_StdEPReq+0xfe>
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d015      	beq.n	8009620 <USBD_StdEPReq+0x128>
 80095f4:	e026      	b.n	8009644 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095f6:	7bbb      	ldrb	r3, [r7, #14]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00c      	beq.n	8009616 <USBD_StdEPReq+0x11e>
 80095fc:	7bbb      	ldrb	r3, [r7, #14]
 80095fe:	2b80      	cmp	r3, #128	; 0x80
 8009600:	d009      	beq.n	8009616 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009602:	7bbb      	ldrb	r3, [r7, #14]
 8009604:	4619      	mov	r1, r3
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f003 fd54 	bl	800d0b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800960c:	2180      	movs	r1, #128	; 0x80
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f003 fd50 	bl	800d0b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009614:	e01c      	b.n	8009650 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fbe4 	bl	8009de6 <USBD_CtlError>
              break;
 800961e:	e017      	b.n	8009650 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	885b      	ldrh	r3, [r3, #2]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d112      	bne.n	800964e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009628:	7bbb      	ldrb	r3, [r7, #14]
 800962a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800962e:	2b00      	cmp	r3, #0
 8009630:	d004      	beq.n	800963c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f003 fd5b 	bl	800d0f2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fc9a 	bl	8009f76 <USBD_CtlSendStatus>
              }
              break;
 8009642:	e004      	b.n	800964e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fbcd 	bl	8009de6 <USBD_CtlError>
              break;
 800964c:	e000      	b.n	8009650 <USBD_StdEPReq+0x158>
              break;
 800964e:	bf00      	nop
          }
          break;
 8009650:	e0aa      	b.n	80097a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009658:	2b02      	cmp	r3, #2
 800965a:	d002      	beq.n	8009662 <USBD_StdEPReq+0x16a>
 800965c:	2b03      	cmp	r3, #3
 800965e:	d032      	beq.n	80096c6 <USBD_StdEPReq+0x1ce>
 8009660:	e097      	b.n	8009792 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009662:	7bbb      	ldrb	r3, [r7, #14]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d007      	beq.n	8009678 <USBD_StdEPReq+0x180>
 8009668:	7bbb      	ldrb	r3, [r7, #14]
 800966a:	2b80      	cmp	r3, #128	; 0x80
 800966c:	d004      	beq.n	8009678 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fbb8 	bl	8009de6 <USBD_CtlError>
                break;
 8009676:	e091      	b.n	800979c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800967c:	2b00      	cmp	r3, #0
 800967e:	da0b      	bge.n	8009698 <USBD_StdEPReq+0x1a0>
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009686:	4613      	mov	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	3310      	adds	r3, #16
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	4413      	add	r3, r2
 8009694:	3304      	adds	r3, #4
 8009696:	e00b      	b.n	80096b0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800969e:	4613      	mov	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	4413      	add	r3, r2
 80096ae:	3304      	adds	r3, #4
 80096b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2202      	movs	r2, #2
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fbfb 	bl	8009eba <USBD_CtlSendData>
              break;
 80096c4:	e06a      	b.n	800979c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80096c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	da11      	bge.n	80096f2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
 80096d0:	f003 020f 	and.w	r2, r3, #15
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	440b      	add	r3, r1
 80096e0:	3318      	adds	r3, #24
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d117      	bne.n	8009718 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fb7b 	bl	8009de6 <USBD_CtlError>
                  break;
 80096f0:	e054      	b.n	800979c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80096f2:	7bbb      	ldrb	r3, [r7, #14]
 80096f4:	f003 020f 	and.w	r2, r3, #15
 80096f8:	6879      	ldr	r1, [r7, #4]
 80096fa:	4613      	mov	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	440b      	add	r3, r1
 8009704:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d104      	bne.n	8009718 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fb68 	bl	8009de6 <USBD_CtlError>
                  break;
 8009716:	e041      	b.n	800979c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800971c:	2b00      	cmp	r3, #0
 800971e:	da0b      	bge.n	8009738 <USBD_StdEPReq+0x240>
 8009720:	7bbb      	ldrb	r3, [r7, #14]
 8009722:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009726:	4613      	mov	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	3310      	adds	r3, #16
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	4413      	add	r3, r2
 8009734:	3304      	adds	r3, #4
 8009736:	e00b      	b.n	8009750 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009738:	7bbb      	ldrb	r3, [r7, #14]
 800973a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800973e:	4613      	mov	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	4413      	add	r3, r2
 800974e:	3304      	adds	r3, #4
 8009750:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <USBD_StdEPReq+0x266>
 8009758:	7bbb      	ldrb	r3, [r7, #14]
 800975a:	2b80      	cmp	r3, #128	; 0x80
 800975c:	d103      	bne.n	8009766 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	2200      	movs	r2, #0
 8009762:	601a      	str	r2, [r3, #0]
 8009764:	e00e      	b.n	8009784 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009766:	7bbb      	ldrb	r3, [r7, #14]
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f003 fce0 	bl	800d130 <USBD_LL_IsStallEP>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2201      	movs	r2, #1
 800977a:	601a      	str	r2, [r3, #0]
 800977c:	e002      	b.n	8009784 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2200      	movs	r2, #0
 8009782:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2202      	movs	r2, #2
 8009788:	4619      	mov	r1, r3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fb95 	bl	8009eba <USBD_CtlSendData>
              break;
 8009790:	e004      	b.n	800979c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009792:	6839      	ldr	r1, [r7, #0]
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fb26 	bl	8009de6 <USBD_CtlError>
              break;
 800979a:	bf00      	nop
          }
          break;
 800979c:	e004      	b.n	80097a8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fb20 	bl	8009de6 <USBD_CtlError>
          break;
 80097a6:	bf00      	nop
      }
      break;
 80097a8:	e004      	b.n	80097b4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fb1a 	bl	8009de6 <USBD_CtlError>
      break;
 80097b2:	bf00      	nop
  }

  return ret;
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097ca:	2300      	movs	r3, #0
 80097cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80097d2:	2300      	movs	r3, #0
 80097d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	885b      	ldrh	r3, [r3, #2]
 80097da:	0a1b      	lsrs	r3, r3, #8
 80097dc:	b29b      	uxth	r3, r3
 80097de:	3b01      	subs	r3, #1
 80097e0:	2b06      	cmp	r3, #6
 80097e2:	f200 8128 	bhi.w	8009a36 <USBD_GetDescriptor+0x276>
 80097e6:	a201      	add	r2, pc, #4	; (adr r2, 80097ec <USBD_GetDescriptor+0x2c>)
 80097e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ec:	08009809 	.word	0x08009809
 80097f0:	08009821 	.word	0x08009821
 80097f4:	08009861 	.word	0x08009861
 80097f8:	08009a37 	.word	0x08009a37
 80097fc:	08009a37 	.word	0x08009a37
 8009800:	080099d7 	.word	0x080099d7
 8009804:	08009a03 	.word	0x08009a03
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	7c12      	ldrb	r2, [r2, #16]
 8009814:	f107 0108 	add.w	r1, r7, #8
 8009818:	4610      	mov	r0, r2
 800981a:	4798      	blx	r3
 800981c:	60f8      	str	r0, [r7, #12]
      break;
 800981e:	e112      	b.n	8009a46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	7c1b      	ldrb	r3, [r3, #16]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10d      	bne.n	8009844 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800982e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009830:	f107 0208 	add.w	r2, r7, #8
 8009834:	4610      	mov	r0, r2
 8009836:	4798      	blx	r3
 8009838:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3301      	adds	r3, #1
 800983e:	2202      	movs	r2, #2
 8009840:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009842:	e100      	b.n	8009a46 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	f107 0208 	add.w	r2, r7, #8
 8009850:	4610      	mov	r0, r2
 8009852:	4798      	blx	r3
 8009854:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3301      	adds	r3, #1
 800985a:	2202      	movs	r2, #2
 800985c:	701a      	strb	r2, [r3, #0]
      break;
 800985e:	e0f2      	b.n	8009a46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	885b      	ldrh	r3, [r3, #2]
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b05      	cmp	r3, #5
 8009868:	f200 80ac 	bhi.w	80099c4 <USBD_GetDescriptor+0x204>
 800986c:	a201      	add	r2, pc, #4	; (adr r2, 8009874 <USBD_GetDescriptor+0xb4>)
 800986e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009872:	bf00      	nop
 8009874:	0800988d 	.word	0x0800988d
 8009878:	080098c1 	.word	0x080098c1
 800987c:	080098f5 	.word	0x080098f5
 8009880:	08009929 	.word	0x08009929
 8009884:	0800995d 	.word	0x0800995d
 8009888:	08009991 	.word	0x08009991
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00b      	beq.n	80098b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	7c12      	ldrb	r2, [r2, #16]
 80098a4:	f107 0108 	add.w	r1, r7, #8
 80098a8:	4610      	mov	r0, r2
 80098aa:	4798      	blx	r3
 80098ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ae:	e091      	b.n	80099d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fa97 	bl	8009de6 <USBD_CtlError>
            err++;
 80098b8:	7afb      	ldrb	r3, [r7, #11]
 80098ba:	3301      	adds	r3, #1
 80098bc:	72fb      	strb	r3, [r7, #11]
          break;
 80098be:	e089      	b.n	80099d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00b      	beq.n	80098e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	7c12      	ldrb	r2, [r2, #16]
 80098d8:	f107 0108 	add.w	r1, r7, #8
 80098dc:	4610      	mov	r0, r2
 80098de:	4798      	blx	r3
 80098e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098e2:	e077      	b.n	80099d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fa7d 	bl	8009de6 <USBD_CtlError>
            err++;
 80098ec:	7afb      	ldrb	r3, [r7, #11]
 80098ee:	3301      	adds	r3, #1
 80098f0:	72fb      	strb	r3, [r7, #11]
          break;
 80098f2:	e06f      	b.n	80099d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00b      	beq.n	8009918 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	7c12      	ldrb	r2, [r2, #16]
 800990c:	f107 0108 	add.w	r1, r7, #8
 8009910:	4610      	mov	r0, r2
 8009912:	4798      	blx	r3
 8009914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009916:	e05d      	b.n	80099d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fa63 	bl	8009de6 <USBD_CtlError>
            err++;
 8009920:	7afb      	ldrb	r3, [r7, #11]
 8009922:	3301      	adds	r3, #1
 8009924:	72fb      	strb	r3, [r7, #11]
          break;
 8009926:	e055      	b.n	80099d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00b      	beq.n	800994c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	7c12      	ldrb	r2, [r2, #16]
 8009940:	f107 0108 	add.w	r1, r7, #8
 8009944:	4610      	mov	r0, r2
 8009946:	4798      	blx	r3
 8009948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800994a:	e043      	b.n	80099d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fa49 	bl	8009de6 <USBD_CtlError>
            err++;
 8009954:	7afb      	ldrb	r3, [r7, #11]
 8009956:	3301      	adds	r3, #1
 8009958:	72fb      	strb	r3, [r7, #11]
          break;
 800995a:	e03b      	b.n	80099d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009962:	695b      	ldr	r3, [r3, #20]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00b      	beq.n	8009980 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800996e:	695b      	ldr	r3, [r3, #20]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	7c12      	ldrb	r2, [r2, #16]
 8009974:	f107 0108 	add.w	r1, r7, #8
 8009978:	4610      	mov	r0, r2
 800997a:	4798      	blx	r3
 800997c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800997e:	e029      	b.n	80099d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fa2f 	bl	8009de6 <USBD_CtlError>
            err++;
 8009988:	7afb      	ldrb	r3, [r7, #11]
 800998a:	3301      	adds	r3, #1
 800998c:	72fb      	strb	r3, [r7, #11]
          break;
 800998e:	e021      	b.n	80099d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00b      	beq.n	80099b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	7c12      	ldrb	r2, [r2, #16]
 80099a8:	f107 0108 	add.w	r1, r7, #8
 80099ac:	4610      	mov	r0, r2
 80099ae:	4798      	blx	r3
 80099b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099b2:	e00f      	b.n	80099d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fa15 	bl	8009de6 <USBD_CtlError>
            err++;
 80099bc:	7afb      	ldrb	r3, [r7, #11]
 80099be:	3301      	adds	r3, #1
 80099c0:	72fb      	strb	r3, [r7, #11]
          break;
 80099c2:	e007      	b.n	80099d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fa0d 	bl	8009de6 <USBD_CtlError>
          err++;
 80099cc:	7afb      	ldrb	r3, [r7, #11]
 80099ce:	3301      	adds	r3, #1
 80099d0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80099d2:	e038      	b.n	8009a46 <USBD_GetDescriptor+0x286>
 80099d4:	e037      	b.n	8009a46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	7c1b      	ldrb	r3, [r3, #16]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d109      	bne.n	80099f2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e6:	f107 0208 	add.w	r2, r7, #8
 80099ea:	4610      	mov	r0, r2
 80099ec:	4798      	blx	r3
 80099ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099f0:	e029      	b.n	8009a46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f9f6 	bl	8009de6 <USBD_CtlError>
        err++;
 80099fa:	7afb      	ldrb	r3, [r7, #11]
 80099fc:	3301      	adds	r3, #1
 80099fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009a00:	e021      	b.n	8009a46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	7c1b      	ldrb	r3, [r3, #16]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10d      	bne.n	8009a26 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a12:	f107 0208 	add.w	r2, r7, #8
 8009a16:	4610      	mov	r0, r2
 8009a18:	4798      	blx	r3
 8009a1a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	2207      	movs	r2, #7
 8009a22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a24:	e00f      	b.n	8009a46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f9dc 	bl	8009de6 <USBD_CtlError>
        err++;
 8009a2e:	7afb      	ldrb	r3, [r7, #11]
 8009a30:	3301      	adds	r3, #1
 8009a32:	72fb      	strb	r3, [r7, #11]
      break;
 8009a34:	e007      	b.n	8009a46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009a36:	6839      	ldr	r1, [r7, #0]
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f9d4 	bl	8009de6 <USBD_CtlError>
      err++;
 8009a3e:	7afb      	ldrb	r3, [r7, #11]
 8009a40:	3301      	adds	r3, #1
 8009a42:	72fb      	strb	r3, [r7, #11]
      break;
 8009a44:	bf00      	nop
  }

  if (err != 0U)
 8009a46:	7afb      	ldrb	r3, [r7, #11]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d11c      	bne.n	8009a86 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009a4c:	893b      	ldrh	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d011      	beq.n	8009a76 <USBD_GetDescriptor+0x2b6>
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	88db      	ldrh	r3, [r3, #6]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00d      	beq.n	8009a76 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	88da      	ldrh	r2, [r3, #6]
 8009a5e:	893b      	ldrh	r3, [r7, #8]
 8009a60:	4293      	cmp	r3, r2
 8009a62:	bf28      	it	cs
 8009a64:	4613      	movcs	r3, r2
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a6a:	893b      	ldrh	r3, [r7, #8]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	68f9      	ldr	r1, [r7, #12]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fa22 	bl	8009eba <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	88db      	ldrh	r3, [r3, #6]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d104      	bne.n	8009a88 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fa79 	bl	8009f76 <USBD_CtlSendStatus>
 8009a84:	e000      	b.n	8009a88 <USBD_GetDescriptor+0x2c8>
    return;
 8009a86:	bf00      	nop
    }
  }
}
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop

08009a90 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	889b      	ldrh	r3, [r3, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d130      	bne.n	8009b04 <USBD_SetAddress+0x74>
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	88db      	ldrh	r3, [r3, #6]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d12c      	bne.n	8009b04 <USBD_SetAddress+0x74>
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	885b      	ldrh	r3, [r3, #2]
 8009aae:	2b7f      	cmp	r3, #127	; 0x7f
 8009ab0:	d828      	bhi.n	8009b04 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	885b      	ldrh	r3, [r3, #2]
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009abc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac4:	2b03      	cmp	r3, #3
 8009ac6:	d104      	bne.n	8009ad2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f98b 	bl	8009de6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ad0:	e01d      	b.n	8009b0e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	7bfa      	ldrb	r2, [r7, #15]
 8009ad6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f003 fb52 	bl	800d188 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fa46 	bl	8009f76 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d004      	beq.n	8009afa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009af8:	e009      	b.n	8009b0e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b02:	e004      	b.n	8009b0e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f96d 	bl	8009de6 <USBD_CtlError>
  }
}
 8009b0c:	bf00      	nop
 8009b0e:	bf00      	nop
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
	...

08009b18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	885b      	ldrh	r3, [r3, #2]
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	4b41      	ldr	r3, [pc, #260]	; (8009c30 <USBD_SetConfig+0x118>)
 8009b2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b2c:	4b40      	ldr	r3, [pc, #256]	; (8009c30 <USBD_SetConfig+0x118>)
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d904      	bls.n	8009b3e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f955 	bl	8009de6 <USBD_CtlError>
 8009b3c:	e075      	b.n	8009c2a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d002      	beq.n	8009b4e <USBD_SetConfig+0x36>
 8009b48:	2b03      	cmp	r3, #3
 8009b4a:	d023      	beq.n	8009b94 <USBD_SetConfig+0x7c>
 8009b4c:	e062      	b.n	8009c14 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009b4e:	4b38      	ldr	r3, [pc, #224]	; (8009c30 <USBD_SetConfig+0x118>)
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d01a      	beq.n	8009b8c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009b56:	4b36      	ldr	r3, [pc, #216]	; (8009c30 <USBD_SetConfig+0x118>)
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2203      	movs	r2, #3
 8009b64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b68:	4b31      	ldr	r3, [pc, #196]	; (8009c30 <USBD_SetConfig+0x118>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7ff f9e7 	bl	8008f42 <USBD_SetClassConfig>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d104      	bne.n	8009b84 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f932 	bl	8009de6 <USBD_CtlError>
            return;
 8009b82:	e052      	b.n	8009c2a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f9f6 	bl	8009f76 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b8a:	e04e      	b.n	8009c2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f9f2 	bl	8009f76 <USBD_CtlSendStatus>
        break;
 8009b92:	e04a      	b.n	8009c2a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009b94:	4b26      	ldr	r3, [pc, #152]	; (8009c30 <USBD_SetConfig+0x118>)
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d112      	bne.n	8009bc2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2202      	movs	r2, #2
 8009ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009ba4:	4b22      	ldr	r3, [pc, #136]	; (8009c30 <USBD_SetConfig+0x118>)
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009bae:	4b20      	ldr	r3, [pc, #128]	; (8009c30 <USBD_SetConfig+0x118>)
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff f9e3 	bl	8008f80 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f9db 	bl	8009f76 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009bc0:	e033      	b.n	8009c2a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009bc2:	4b1b      	ldr	r3, [pc, #108]	; (8009c30 <USBD_SetConfig+0x118>)
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d01d      	beq.n	8009c0c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f7ff f9d1 	bl	8008f80 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009bde:	4b14      	ldr	r3, [pc, #80]	; (8009c30 <USBD_SetConfig+0x118>)
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	461a      	mov	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009be8:	4b11      	ldr	r3, [pc, #68]	; (8009c30 <USBD_SetConfig+0x118>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7ff f9a7 	bl	8008f42 <USBD_SetClassConfig>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d104      	bne.n	8009c04 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009bfa:	6839      	ldr	r1, [r7, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f8f2 	bl	8009de6 <USBD_CtlError>
            return;
 8009c02:	e012      	b.n	8009c2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f9b6 	bl	8009f76 <USBD_CtlSendStatus>
        break;
 8009c0a:	e00e      	b.n	8009c2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f9b2 	bl	8009f76 <USBD_CtlSendStatus>
        break;
 8009c12:	e00a      	b.n	8009c2a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f8e5 	bl	8009de6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009c1c:	4b04      	ldr	r3, [pc, #16]	; (8009c30 <USBD_SetConfig+0x118>)
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7ff f9ac 	bl	8008f80 <USBD_ClrClassConfig>
        break;
 8009c28:	bf00      	nop
    }
  }
}
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	2000081c 	.word	0x2000081c

08009c34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	88db      	ldrh	r3, [r3, #6]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d004      	beq.n	8009c50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f8cc 	bl	8009de6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c4e:	e022      	b.n	8009c96 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	dc02      	bgt.n	8009c60 <USBD_GetConfig+0x2c>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	dc03      	bgt.n	8009c66 <USBD_GetConfig+0x32>
 8009c5e:	e015      	b.n	8009c8c <USBD_GetConfig+0x58>
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d00b      	beq.n	8009c7c <USBD_GetConfig+0x48>
 8009c64:	e012      	b.n	8009c8c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	3308      	adds	r3, #8
 8009c70:	2201      	movs	r2, #1
 8009c72:	4619      	mov	r1, r3
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f920 	bl	8009eba <USBD_CtlSendData>
        break;
 8009c7a:	e00c      	b.n	8009c96 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	2201      	movs	r2, #1
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f918 	bl	8009eba <USBD_CtlSendData>
        break;
 8009c8a:	e004      	b.n	8009c96 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f8a9 	bl	8009de6 <USBD_CtlError>
        break;
 8009c94:	bf00      	nop
}
 8009c96:	bf00      	nop
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d81e      	bhi.n	8009cf2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	88db      	ldrh	r3, [r3, #6]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d004      	beq.n	8009cc6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f891 	bl	8009de6 <USBD_CtlError>
        break;
 8009cc4:	e01a      	b.n	8009cfc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d005      	beq.n	8009ce2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	f043 0202 	orr.w	r2, r3, #2
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	330c      	adds	r3, #12
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f8e5 	bl	8009eba <USBD_CtlSendData>
      break;
 8009cf0:	e004      	b.n	8009cfc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f876 	bl	8009de6 <USBD_CtlError>
      break;
 8009cfa:	bf00      	nop
  }
}
 8009cfc:	bf00      	nop
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	885b      	ldrh	r3, [r3, #2]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d106      	bne.n	8009d24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f929 	bl	8009f76 <USBD_CtlSendStatus>
  }
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d80b      	bhi.n	8009d5a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	885b      	ldrh	r3, [r3, #2]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d10c      	bne.n	8009d64 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f90f 	bl	8009f76 <USBD_CtlSendStatus>
      }
      break;
 8009d58:	e004      	b.n	8009d64 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f842 	bl	8009de6 <USBD_CtlError>
      break;
 8009d62:	e000      	b.n	8009d66 <USBD_ClrFeature+0x3a>
      break;
 8009d64:	bf00      	nop
  }
}
 8009d66:	bf00      	nop
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	781a      	ldrb	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	785a      	ldrb	r2, [r3, #1]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	3302      	adds	r3, #2
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	3303      	adds	r3, #3
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	021b      	lsls	r3, r3, #8
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	4413      	add	r3, r2
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	3304      	adds	r3, #4
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	b29a      	uxth	r2, r3
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	3305      	adds	r3, #5
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	021b      	lsls	r3, r3, #8
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	4413      	add	r3, r2
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	3306      	adds	r3, #6
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	3307      	adds	r3, #7
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	021b      	lsls	r3, r3, #8
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	4413      	add	r3, r2
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	80da      	strh	r2, [r3, #6]

}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bc80      	pop	{r7}
 8009de4:	4770      	bx	lr

08009de6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b082      	sub	sp, #8
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009df0:	2180      	movs	r1, #128	; 0x80
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f003 f95e 	bl	800d0b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009df8:	2100      	movs	r1, #0
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f003 f95a 	bl	800d0b4 <USBD_LL_StallEP>
}
 8009e00:	bf00      	nop
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e14:	2300      	movs	r3, #0
 8009e16:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d032      	beq.n	8009e84 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f000 f834 	bl	8009e8c <USBD_GetLen>
 8009e24:	4603      	mov	r3, r0
 8009e26:	3301      	adds	r3, #1
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	005b      	lsls	r3, r3, #1
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
 8009e34:	1c5a      	adds	r2, r3, #1
 8009e36:	75fa      	strb	r2, [r7, #23]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	7812      	ldrb	r2, [r2, #0]
 8009e42:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009e44:	7dfb      	ldrb	r3, [r7, #23]
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	75fa      	strb	r2, [r7, #23]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	4413      	add	r3, r2
 8009e50:	2203      	movs	r2, #3
 8009e52:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009e54:	e012      	b.n	8009e7c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	1c5a      	adds	r2, r3, #1
 8009e5a:	60fa      	str	r2, [r7, #12]
 8009e5c:	7dfa      	ldrb	r2, [r7, #23]
 8009e5e:	1c51      	adds	r1, r2, #1
 8009e60:	75f9      	strb	r1, [r7, #23]
 8009e62:	4611      	mov	r1, r2
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	440a      	add	r2, r1
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009e6c:	7dfb      	ldrb	r3, [r7, #23]
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	75fa      	strb	r2, [r7, #23]
 8009e72:	461a      	mov	r2, r3
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	4413      	add	r3, r2
 8009e78:	2200      	movs	r2, #0
 8009e7a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e8      	bne.n	8009e56 <USBD_GetString+0x4e>
    }
  }
}
 8009e84:	bf00      	nop
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e94:	2300      	movs	r3, #0
 8009e96:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009e98:	e005      	b.n	8009ea6 <USBD_GetLen+0x1a>
  {
    len++;
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1f5      	bne.n	8009e9a <USBD_GetLen+0xe>
  }

  return len;
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bc80      	pop	{r7}
 8009eb8:	4770      	bx	lr

08009eba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	60f8      	str	r0, [r7, #12]
 8009ec2:	60b9      	str	r1, [r7, #8]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2202      	movs	r2, #2
 8009ecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009ed0:	88fa      	ldrh	r2, [r7, #6]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009ed6:	88fa      	ldrh	r2, [r7, #6]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009edc:	88fb      	ldrh	r3, [r7, #6]
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f003 f96f 	bl	800d1c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b084      	sub	sp, #16
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	60f8      	str	r0, [r7, #12]
 8009efa:	60b9      	str	r1, [r7, #8]
 8009efc:	4613      	mov	r3, r2
 8009efe:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f00:	88fb      	ldrh	r3, [r7, #6]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	2100      	movs	r1, #0
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f003 f95d 	bl	800d1c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b084      	sub	sp, #16
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	60f8      	str	r0, [r7, #12]
 8009f1e:	60b9      	str	r1, [r7, #8]
 8009f20:	4613      	mov	r3, r2
 8009f22:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2203      	movs	r2, #3
 8009f28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009f2c:	88fa      	ldrh	r2, [r7, #6]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009f34:	88fa      	ldrh	r2, [r7, #6]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f3c:	88fb      	ldrh	r3, [r7, #6]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	2100      	movs	r1, #0
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f003 f962 	bl	800d20c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	60f8      	str	r0, [r7, #12]
 8009f5a:	60b9      	str	r1, [r7, #8]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f60:	88fb      	ldrh	r3, [r7, #6]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	2100      	movs	r1, #0
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f003 f950 	bl	800d20c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2204      	movs	r2, #4
 8009f82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f86:	2300      	movs	r3, #0
 8009f88:	2200      	movs	r2, #0
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f003 f91a 	bl	800d1c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2205      	movs	r2, #5
 8009fa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fac:	2300      	movs	r3, #0
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f003 f92a 	bl	800d20c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fca:	f3ef 8305 	mrs	r3, IPSR
 8009fce:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fd0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10f      	bne.n	8009ff6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8009fda:	607b      	str	r3, [r7, #4]
  return(result);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d109      	bne.n	8009ff6 <osKernelInitialize+0x32>
 8009fe2:	4b10      	ldr	r3, [pc, #64]	; (800a024 <osKernelInitialize+0x60>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d109      	bne.n	8009ffe <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009fea:	f3ef 8311 	mrs	r3, BASEPRI
 8009fee:	603b      	str	r3, [r7, #0]
  return(result);
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009ff6:	f06f 0305 	mvn.w	r3, #5
 8009ffa:	60fb      	str	r3, [r7, #12]
 8009ffc:	e00c      	b.n	800a018 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009ffe:	4b09      	ldr	r3, [pc, #36]	; (800a024 <osKernelInitialize+0x60>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d105      	bne.n	800a012 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a006:	4b07      	ldr	r3, [pc, #28]	; (800a024 <osKernelInitialize+0x60>)
 800a008:	2201      	movs	r2, #1
 800a00a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	60fb      	str	r3, [r7, #12]
 800a010:	e002      	b.n	800a018 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a012:	f04f 33ff 	mov.w	r3, #4294967295
 800a016:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a018:	68fb      	ldr	r3, [r7, #12]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3714      	adds	r7, #20
 800a01e:	46bd      	mov	sp, r7
 800a020:	bc80      	pop	{r7}
 800a022:	4770      	bx	lr
 800a024:	20000820 	.word	0x20000820

0800a028 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a02e:	f3ef 8305 	mrs	r3, IPSR
 800a032:	60bb      	str	r3, [r7, #8]
  return(result);
 800a034:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10f      	bne.n	800a05a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a03a:	f3ef 8310 	mrs	r3, PRIMASK
 800a03e:	607b      	str	r3, [r7, #4]
  return(result);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d109      	bne.n	800a05a <osKernelStart+0x32>
 800a046:	4b11      	ldr	r3, [pc, #68]	; (800a08c <osKernelStart+0x64>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d109      	bne.n	800a062 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a04e:	f3ef 8311 	mrs	r3, BASEPRI
 800a052:	603b      	str	r3, [r7, #0]
  return(result);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d003      	beq.n	800a062 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a05a:	f06f 0305 	mvn.w	r3, #5
 800a05e:	60fb      	str	r3, [r7, #12]
 800a060:	e00e      	b.n	800a080 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800a062:	4b0a      	ldr	r3, [pc, #40]	; (800a08c <osKernelStart+0x64>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d107      	bne.n	800a07a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800a06a:	4b08      	ldr	r3, [pc, #32]	; (800a08c <osKernelStart+0x64>)
 800a06c:	2202      	movs	r2, #2
 800a06e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a070:	f001 f890 	bl	800b194 <vTaskStartScheduler>
      stat = osOK;
 800a074:	2300      	movs	r3, #0
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	e002      	b.n	800a080 <osKernelStart+0x58>
    } else {
      stat = osError;
 800a07a:	f04f 33ff 	mov.w	r3, #4294967295
 800a07e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a080:	68fb      	ldr	r3, [r7, #12]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	20000820 	.word	0x20000820

0800a090 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a090:	b580      	push	{r7, lr}
 800a092:	b092      	sub	sp, #72	; 0x48
 800a094:	af04      	add	r7, sp, #16
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a09c:	2300      	movs	r3, #0
 800a09e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0a0:	f3ef 8305 	mrs	r3, IPSR
 800a0a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f040 8094 	bne.w	800a1d6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a0b2:	623b      	str	r3, [r7, #32]
  return(result);
 800a0b4:	6a3b      	ldr	r3, [r7, #32]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f040 808d 	bne.w	800a1d6 <osThreadNew+0x146>
 800a0bc:	4b48      	ldr	r3, [pc, #288]	; (800a1e0 <osThreadNew+0x150>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d106      	bne.n	800a0d2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0c4:	f3ef 8311 	mrs	r3, BASEPRI
 800a0c8:	61fb      	str	r3, [r7, #28]
  return(result);
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f040 8082 	bne.w	800a1d6 <osThreadNew+0x146>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d07e      	beq.n	800a1d6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800a0d8:	2380      	movs	r3, #128	; 0x80
 800a0da:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800a0dc:	2318      	movs	r3, #24
 800a0de:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800a0e4:	f107 031b 	add.w	r3, r7, #27
 800a0e8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800a0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ee:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d045      	beq.n	800a182 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <osThreadNew+0x74>
        name = attr->name;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a114:	2b00      	cmp	r3, #0
 800a116:	d008      	beq.n	800a12a <osThreadNew+0x9a>
 800a118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11a:	2b38      	cmp	r3, #56	; 0x38
 800a11c:	d805      	bhi.n	800a12a <osThreadNew+0x9a>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	f003 0301 	and.w	r3, r3, #1
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <osThreadNew+0x9e>
        return (NULL);
 800a12a:	2300      	movs	r3, #0
 800a12c:	e054      	b.n	800a1d8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	695b      	ldr	r3, [r3, #20]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	089b      	lsrs	r3, r3, #2
 800a13c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00e      	beq.n	800a164 <osThreadNew+0xd4>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	2ba7      	cmp	r3, #167	; 0xa7
 800a14c:	d90a      	bls.n	800a164 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a152:	2b00      	cmp	r3, #0
 800a154:	d006      	beq.n	800a164 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <osThreadNew+0xd4>
        mem = 1;
 800a15e:	2301      	movs	r3, #1
 800a160:	62bb      	str	r3, [r7, #40]	; 0x28
 800a162:	e010      	b.n	800a186 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10c      	bne.n	800a186 <osThreadNew+0xf6>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d108      	bne.n	800a186 <osThreadNew+0xf6>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d104      	bne.n	800a186 <osThreadNew+0xf6>
          mem = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a180:	e001      	b.n	800a186 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a182:	2300      	movs	r3, #0
 800a184:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800a186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d110      	bne.n	800a1ae <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a194:	9202      	str	r2, [sp, #8]
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f000 fe12 	bl	800adcc <xTaskCreateStatic>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	617b      	str	r3, [r7, #20]
 800a1ac:	e013      	b.n	800a1d6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d110      	bne.n	800a1d6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	f107 0314 	add.w	r3, r7, #20
 800a1bc:	9301      	str	r3, [sp, #4]
 800a1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f000 fe5c 	bl	800ae84 <xTaskCreate>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d001      	beq.n	800a1d6 <osThreadNew+0x146>
          hTask = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a1d6:	697b      	ldr	r3, [r7, #20]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3738      	adds	r7, #56	; 0x38
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	20000820 	.word	0x20000820

0800a1e4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1ec:	f3ef 8305 	mrs	r3, IPSR
 800a1f0:	613b      	str	r3, [r7, #16]
  return(result);
 800a1f2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10f      	bne.n	800a218 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a1fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d109      	bne.n	800a218 <osDelay+0x34>
 800a204:	4b0d      	ldr	r3, [pc, #52]	; (800a23c <osDelay+0x58>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d109      	bne.n	800a220 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a20c:	f3ef 8311 	mrs	r3, BASEPRI
 800a210:	60bb      	str	r3, [r7, #8]
  return(result);
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d003      	beq.n	800a220 <osDelay+0x3c>
    stat = osErrorISR;
 800a218:	f06f 0305 	mvn.w	r3, #5
 800a21c:	617b      	str	r3, [r7, #20]
 800a21e:	e007      	b.n	800a230 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a220:	2300      	movs	r3, #0
 800a222:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 ff7e 	bl	800b12c <vTaskDelay>
    }
  }

  return (stat);
 800a230:	697b      	ldr	r3, [r7, #20]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20000820 	.word	0x20000820

0800a240 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4a06      	ldr	r2, [pc, #24]	; (800a268 <vApplicationGetIdleTaskMemory+0x28>)
 800a250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	4a05      	ldr	r2, [pc, #20]	; (800a26c <vApplicationGetIdleTaskMemory+0x2c>)
 800a256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2280      	movs	r2, #128	; 0x80
 800a25c:	601a      	str	r2, [r3, #0]
}
 800a25e:	bf00      	nop
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	bc80      	pop	{r7}
 800a266:	4770      	bx	lr
 800a268:	20000824 	.word	0x20000824
 800a26c:	200008cc 	.word	0x200008cc

0800a270 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	4a07      	ldr	r2, [pc, #28]	; (800a29c <vApplicationGetTimerTaskMemory+0x2c>)
 800a280:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	4a06      	ldr	r2, [pc, #24]	; (800a2a0 <vApplicationGetTimerTaskMemory+0x30>)
 800a286:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a28e:	601a      	str	r2, [r3, #0]
}
 800a290:	bf00      	nop
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	bc80      	pop	{r7}
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	20000acc 	.word	0x20000acc
 800a2a0:	20000b74 	.word	0x20000b74

0800a2a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f103 0208 	add.w	r2, r3, #8
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f103 0208 	add.w	r2, r3, #8
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f103 0208 	add.w	r2, r3, #8
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bc80      	pop	{r7}
 800a2e0:	4770      	bx	lr

0800a2e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bc80      	pop	{r7}
 800a2f8:	4770      	bx	lr

0800a2fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b085      	sub	sp, #20
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	689a      	ldr	r2, [r3, #8]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	683a      	ldr	r2, [r7, #0]
 800a31e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	601a      	str	r2, [r3, #0]
}
 800a336:	bf00      	nop
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bc80      	pop	{r7}
 800a33e:	4770      	bx	lr

0800a340 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a356:	d103      	bne.n	800a360 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	e00c      	b.n	800a37a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	3308      	adds	r3, #8
 800a364:	60fb      	str	r3, [r7, #12]
 800a366:	e002      	b.n	800a36e <vListInsert+0x2e>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	60fb      	str	r3, [r7, #12]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	429a      	cmp	r2, r3
 800a378:	d2f6      	bcs.n	800a368 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	685a      	ldr	r2, [r3, #4]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	1c5a      	adds	r2, r3, #1
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	601a      	str	r2, [r3, #0]
}
 800a3a6:	bf00      	nop
 800a3a8:	3714      	adds	r7, #20
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bc80      	pop	{r7}
 800a3ae:	4770      	bx	lr

0800a3b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	6892      	ldr	r2, [r2, #8]
 800a3c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	6852      	ldr	r2, [r2, #4]
 800a3d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d103      	bne.n	800a3e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	689a      	ldr	r2, [r3, #8]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	1e5a      	subs	r2, r3, #1
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bc80      	pop	{r7}
 800a400:	4770      	bx	lr
	...

0800a404 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a42e:	f001 fff5 	bl	800c41c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a43a:	68f9      	ldr	r1, [r7, #12]
 800a43c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a43e:	fb01 f303 	mul.w	r3, r1, r3
 800a442:	441a      	add	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45e:	3b01      	subs	r3, #1
 800a460:	68f9      	ldr	r1, [r7, #12]
 800a462:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a464:	fb01 f303 	mul.w	r3, r1, r3
 800a468:	441a      	add	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	22ff      	movs	r2, #255	; 0xff
 800a472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	22ff      	movs	r2, #255	; 0xff
 800a47a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d114      	bne.n	800a4ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d01a      	beq.n	800a4c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	3310      	adds	r3, #16
 800a490:	4618      	mov	r0, r3
 800a492:	f001 f91b 	bl	800b6cc <xTaskRemoveFromEventList>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d012      	beq.n	800a4c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a49c:	4b0c      	ldr	r3, [pc, #48]	; (800a4d0 <xQueueGenericReset+0xcc>)
 800a49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	e009      	b.n	800a4c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3310      	adds	r3, #16
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7ff fef6 	bl	800a2a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	3324      	adds	r3, #36	; 0x24
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7ff fef1 	bl	800a2a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4c2:	f001 ffdb 	bl	800c47c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4c6:	2301      	movs	r3, #1
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	e000ed04 	.word	0xe000ed04

0800a4d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b08e      	sub	sp, #56	; 0x38
 800a4d8:	af02      	add	r7, sp, #8
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
 800a4e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10a      	bne.n	800a4fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4fa:	bf00      	nop
 800a4fc:	e7fe      	b.n	800a4fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d002      	beq.n	800a526 <xQueueGenericCreateStatic+0x52>
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <xQueueGenericCreateStatic+0x56>
 800a526:	2301      	movs	r3, #1
 800a528:	e000      	b.n	800a52c <xQueueGenericCreateStatic+0x58>
 800a52a:	2300      	movs	r3, #0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10a      	bne.n	800a546 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a534:	f383 8811 	msr	BASEPRI, r3
 800a538:	f3bf 8f6f 	isb	sy
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	623b      	str	r3, [r7, #32]
}
 800a542:	bf00      	nop
 800a544:	e7fe      	b.n	800a544 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d102      	bne.n	800a552 <xQueueGenericCreateStatic+0x7e>
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <xQueueGenericCreateStatic+0x82>
 800a552:	2301      	movs	r3, #1
 800a554:	e000      	b.n	800a558 <xQueueGenericCreateStatic+0x84>
 800a556:	2300      	movs	r3, #0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10a      	bne.n	800a572 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	61fb      	str	r3, [r7, #28]
}
 800a56e:	bf00      	nop
 800a570:	e7fe      	b.n	800a570 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a572:	2350      	movs	r3, #80	; 0x50
 800a574:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	2b50      	cmp	r3, #80	; 0x50
 800a57a:	d00a      	beq.n	800a592 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	61bb      	str	r3, [r7, #24]
}
 800a58e:	bf00      	nop
 800a590:	e7fe      	b.n	800a590 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00d      	beq.n	800a5b8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	68b9      	ldr	r1, [r7, #8]
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f000 f805 	bl	800a5c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3730      	adds	r7, #48	; 0x30
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b084      	sub	sp, #16
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	60f8      	str	r0, [r7, #12]
 800a5ca:	60b9      	str	r1, [r7, #8]
 800a5cc:	607a      	str	r2, [r7, #4]
 800a5ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d103      	bne.n	800a5de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	69ba      	ldr	r2, [r7, #24]
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	e002      	b.n	800a5e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	69b8      	ldr	r0, [r7, #24]
 800a5f4:	f7ff ff06 	bl	800a404 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	78fa      	ldrb	r2, [r7, #3]
 800a5fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a600:	bf00      	nop
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08e      	sub	sp, #56	; 0x38
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a616:	2300      	movs	r3, #0
 800a618:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10a      	bne.n	800a63a <xQueueGenericSend+0x32>
	__asm volatile
 800a624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a636:	bf00      	nop
 800a638:	e7fe      	b.n	800a638 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d103      	bne.n	800a648 <xQueueGenericSend+0x40>
 800a640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <xQueueGenericSend+0x44>
 800a648:	2301      	movs	r3, #1
 800a64a:	e000      	b.n	800a64e <xQueueGenericSend+0x46>
 800a64c:	2300      	movs	r3, #0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d10a      	bne.n	800a668 <xQueueGenericSend+0x60>
	__asm volatile
 800a652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a664:	bf00      	nop
 800a666:	e7fe      	b.n	800a666 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d103      	bne.n	800a676 <xQueueGenericSend+0x6e>
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a672:	2b01      	cmp	r3, #1
 800a674:	d101      	bne.n	800a67a <xQueueGenericSend+0x72>
 800a676:	2301      	movs	r3, #1
 800a678:	e000      	b.n	800a67c <xQueueGenericSend+0x74>
 800a67a:	2300      	movs	r3, #0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10a      	bne.n	800a696 <xQueueGenericSend+0x8e>
	__asm volatile
 800a680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	623b      	str	r3, [r7, #32]
}
 800a692:	bf00      	nop
 800a694:	e7fe      	b.n	800a694 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a696:	f001 f9df 	bl	800ba58 <xTaskGetSchedulerState>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d102      	bne.n	800a6a6 <xQueueGenericSend+0x9e>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <xQueueGenericSend+0xa2>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e000      	b.n	800a6ac <xQueueGenericSend+0xa4>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10a      	bne.n	800a6c6 <xQueueGenericSend+0xbe>
	__asm volatile
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	61fb      	str	r3, [r7, #28]
}
 800a6c2:	bf00      	nop
 800a6c4:	e7fe      	b.n	800a6c4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6c6:	f001 fea9 	bl	800c41c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d302      	bcc.n	800a6dc <xQueueGenericSend+0xd4>
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d129      	bne.n	800a730 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	68b9      	ldr	r1, [r7, #8]
 800a6e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6e2:	f000 fa07 	bl	800aaf4 <prvCopyDataToQueue>
 800a6e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d010      	beq.n	800a712 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f2:	3324      	adds	r3, #36	; 0x24
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 ffe9 	bl	800b6cc <xTaskRemoveFromEventList>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d013      	beq.n	800a728 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a700:	4b3f      	ldr	r3, [pc, #252]	; (800a800 <xQueueGenericSend+0x1f8>)
 800a702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a706:	601a      	str	r2, [r3, #0]
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	e00a      	b.n	800a728 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a714:	2b00      	cmp	r3, #0
 800a716:	d007      	beq.n	800a728 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a718:	4b39      	ldr	r3, [pc, #228]	; (800a800 <xQueueGenericSend+0x1f8>)
 800a71a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a71e:	601a      	str	r2, [r3, #0]
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a728:	f001 fea8 	bl	800c47c <vPortExitCritical>
				return pdPASS;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e063      	b.n	800a7f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d103      	bne.n	800a73e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a736:	f001 fea1 	bl	800c47c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a73a:	2300      	movs	r3, #0
 800a73c:	e05c      	b.n	800a7f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a740:	2b00      	cmp	r3, #0
 800a742:	d106      	bne.n	800a752 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a744:	f107 0314 	add.w	r3, r7, #20
 800a748:	4618      	mov	r0, r3
 800a74a:	f001 f823 	bl	800b794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a74e:	2301      	movs	r3, #1
 800a750:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a752:	f001 fe93 	bl	800c47c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a756:	f000 fd8d 	bl	800b274 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a75a:	f001 fe5f 	bl	800c41c <vPortEnterCritical>
 800a75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a764:	b25b      	sxtb	r3, r3
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76a:	d103      	bne.n	800a774 <xQueueGenericSend+0x16c>
 800a76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a77a:	b25b      	sxtb	r3, r3
 800a77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a780:	d103      	bne.n	800a78a <xQueueGenericSend+0x182>
 800a782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a784:	2200      	movs	r2, #0
 800a786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a78a:	f001 fe77 	bl	800c47c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a78e:	1d3a      	adds	r2, r7, #4
 800a790:	f107 0314 	add.w	r3, r7, #20
 800a794:	4611      	mov	r1, r2
 800a796:	4618      	mov	r0, r3
 800a798:	f001 f812 	bl	800b7c0 <xTaskCheckForTimeOut>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d124      	bne.n	800a7ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7a4:	f000 fa9e 	bl	800ace4 <prvIsQueueFull>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d018      	beq.n	800a7e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	3310      	adds	r3, #16
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 ff38 	bl	800b62c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a7bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7be:	f000 fa29 	bl	800ac14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a7c2:	f000 fd65 	bl	800b290 <xTaskResumeAll>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f47f af7c 	bne.w	800a6c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a7ce:	4b0c      	ldr	r3, [pc, #48]	; (800a800 <xQueueGenericSend+0x1f8>)
 800a7d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	e772      	b.n	800a6c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a7e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7e2:	f000 fa17 	bl	800ac14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7e6:	f000 fd53 	bl	800b290 <xTaskResumeAll>
 800a7ea:	e76c      	b.n	800a6c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a7ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7ee:	f000 fa11 	bl	800ac14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7f2:	f000 fd4d 	bl	800b290 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a7f6:	2300      	movs	r3, #0
		}
	}
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3738      	adds	r7, #56	; 0x38
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	e000ed04 	.word	0xe000ed04

0800a804 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b08e      	sub	sp, #56	; 0x38
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
 800a810:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10a      	bne.n	800a832 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a82e:	bf00      	nop
 800a830:	e7fe      	b.n	800a830 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d103      	bne.n	800a840 <xQueueGenericSendFromISR+0x3c>
 800a838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d101      	bne.n	800a844 <xQueueGenericSendFromISR+0x40>
 800a840:	2301      	movs	r3, #1
 800a842:	e000      	b.n	800a846 <xQueueGenericSendFromISR+0x42>
 800a844:	2300      	movs	r3, #0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10a      	bne.n	800a860 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	623b      	str	r3, [r7, #32]
}
 800a85c:	bf00      	nop
 800a85e:	e7fe      	b.n	800a85e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	2b02      	cmp	r3, #2
 800a864:	d103      	bne.n	800a86e <xQueueGenericSendFromISR+0x6a>
 800a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d101      	bne.n	800a872 <xQueueGenericSendFromISR+0x6e>
 800a86e:	2301      	movs	r3, #1
 800a870:	e000      	b.n	800a874 <xQueueGenericSendFromISR+0x70>
 800a872:	2300      	movs	r3, #0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10a      	bne.n	800a88e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87c:	f383 8811 	msr	BASEPRI, r3
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	61fb      	str	r3, [r7, #28]
}
 800a88a:	bf00      	nop
 800a88c:	e7fe      	b.n	800a88c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a88e:	f001 fe87 	bl	800c5a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a892:	f3ef 8211 	mrs	r2, BASEPRI
 800a896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89a:	f383 8811 	msr	BASEPRI, r3
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	61ba      	str	r2, [r7, #24]
 800a8a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a8aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d302      	bcc.n	800a8c0 <xQueueGenericSendFromISR+0xbc>
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d12c      	bne.n	800a91a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	68b9      	ldr	r1, [r7, #8]
 800a8ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8d0:	f000 f910 	bl	800aaf4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8dc:	d112      	bne.n	800a904 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d016      	beq.n	800a914 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	3324      	adds	r3, #36	; 0x24
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 feee 	bl	800b6cc <xTaskRemoveFromEventList>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00e      	beq.n	800a914 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00b      	beq.n	800a914 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	601a      	str	r2, [r3, #0]
 800a902:	e007      	b.n	800a914 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a904:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a908:	3301      	adds	r3, #1
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	b25a      	sxtb	r2, r3
 800a90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a914:	2301      	movs	r3, #1
 800a916:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a918:	e001      	b.n	800a91e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	637b      	str	r3, [r7, #52]	; 0x34
 800a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a920:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a928:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3738      	adds	r7, #56	; 0x38
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b08c      	sub	sp, #48	; 0x30
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a940:	2300      	movs	r3, #0
 800a942:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10a      	bne.n	800a964 <xQueueReceive+0x30>
	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	623b      	str	r3, [r7, #32]
}
 800a960:	bf00      	nop
 800a962:	e7fe      	b.n	800a962 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d103      	bne.n	800a972 <xQueueReceive+0x3e>
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <xQueueReceive+0x42>
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <xQueueReceive+0x44>
 800a976:	2300      	movs	r3, #0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10a      	bne.n	800a992 <xQueueReceive+0x5e>
	__asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	61fb      	str	r3, [r7, #28]
}
 800a98e:	bf00      	nop
 800a990:	e7fe      	b.n	800a990 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a992:	f001 f861 	bl	800ba58 <xTaskGetSchedulerState>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d102      	bne.n	800a9a2 <xQueueReceive+0x6e>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <xQueueReceive+0x72>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e000      	b.n	800a9a8 <xQueueReceive+0x74>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <xQueueReceive+0x8e>
	__asm volatile
 800a9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	61bb      	str	r3, [r7, #24]
}
 800a9be:	bf00      	nop
 800a9c0:	e7fe      	b.n	800a9c0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9c2:	f001 fd2b 	bl	800c41c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d01f      	beq.n	800aa12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9d2:	68b9      	ldr	r1, [r7, #8]
 800a9d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9d6:	f000 f8f7 	bl	800abc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9dc:	1e5a      	subs	r2, r3, #1
 800a9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00f      	beq.n	800aa0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ec:	3310      	adds	r3, #16
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fe6c 	bl	800b6cc <xTaskRemoveFromEventList>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d007      	beq.n	800aa0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9fa:	4b3d      	ldr	r3, [pc, #244]	; (800aaf0 <xQueueReceive+0x1bc>)
 800a9fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa00:	601a      	str	r2, [r3, #0]
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa0a:	f001 fd37 	bl	800c47c <vPortExitCritical>
				return pdPASS;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e069      	b.n	800aae6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d103      	bne.n	800aa20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa18:	f001 fd30 	bl	800c47c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	e062      	b.n	800aae6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d106      	bne.n	800aa34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa26:	f107 0310 	add.w	r3, r7, #16
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 feb2 	bl	800b794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa30:	2301      	movs	r3, #1
 800aa32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa34:	f001 fd22 	bl	800c47c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa38:	f000 fc1c 	bl	800b274 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa3c:	f001 fcee 	bl	800c41c <vPortEnterCritical>
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa46:	b25b      	sxtb	r3, r3
 800aa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4c:	d103      	bne.n	800aa56 <xQueueReceive+0x122>
 800aa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa5c:	b25b      	sxtb	r3, r3
 800aa5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa62:	d103      	bne.n	800aa6c <xQueueReceive+0x138>
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa6c:	f001 fd06 	bl	800c47c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa70:	1d3a      	adds	r2, r7, #4
 800aa72:	f107 0310 	add.w	r3, r7, #16
 800aa76:	4611      	mov	r1, r2
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 fea1 	bl	800b7c0 <xTaskCheckForTimeOut>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d123      	bne.n	800aacc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa86:	f000 f917 	bl	800acb8 <prvIsQueueEmpty>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d017      	beq.n	800aac0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	3324      	adds	r3, #36	; 0x24
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	4611      	mov	r1, r2
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f000 fdc7 	bl	800b62c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaa0:	f000 f8b8 	bl	800ac14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aaa4:	f000 fbf4 	bl	800b290 <xTaskResumeAll>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d189      	bne.n	800a9c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aaae:	4b10      	ldr	r3, [pc, #64]	; (800aaf0 <xQueueReceive+0x1bc>)
 800aab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab4:	601a      	str	r2, [r3, #0]
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	e780      	b.n	800a9c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aac2:	f000 f8a7 	bl	800ac14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aac6:	f000 fbe3 	bl	800b290 <xTaskResumeAll>
 800aaca:	e77a      	b.n	800a9c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aacc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aace:	f000 f8a1 	bl	800ac14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aad2:	f000 fbdd 	bl	800b290 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aad8:	f000 f8ee 	bl	800acb8 <prvIsQueueEmpty>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f43f af6f 	beq.w	800a9c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aae4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3730      	adds	r7, #48	; 0x30
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	e000ed04 	.word	0xe000ed04

0800aaf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab00:	2300      	movs	r3, #0
 800ab02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10d      	bne.n	800ab2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d14d      	bne.n	800abb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 ffb8 	bl	800ba94 <xTaskPriorityDisinherit>
 800ab24:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	605a      	str	r2, [r3, #4]
 800ab2c:	e043      	b.n	800abb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d119      	bne.n	800ab68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6898      	ldr	r0, [r3, #8]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	68b9      	ldr	r1, [r7, #8]
 800ab40:	f002 fc90 	bl	800d464 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	689a      	ldr	r2, [r3, #8]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4c:	441a      	add	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	689a      	ldr	r2, [r3, #8]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d32b      	bcc.n	800abb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	609a      	str	r2, [r3, #8]
 800ab66:	e026      	b.n	800abb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	68d8      	ldr	r0, [r3, #12]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab70:	461a      	mov	r2, r3
 800ab72:	68b9      	ldr	r1, [r7, #8]
 800ab74:	f002 fc76 	bl	800d464 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	68da      	ldr	r2, [r3, #12]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab80:	425b      	negs	r3, r3
 800ab82:	441a      	add	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	68da      	ldr	r2, [r3, #12]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d207      	bcs.n	800aba4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9c:	425b      	negs	r3, r3
 800ab9e:	441a      	add	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d105      	bne.n	800abb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	3b01      	subs	r3, #1
 800abb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800abbe:	697b      	ldr	r3, [r7, #20]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3718      	adds	r7, #24
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d018      	beq.n	800ac0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe2:	441a      	add	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	68da      	ldr	r2, [r3, #12]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d303      	bcc.n	800abfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	68d9      	ldr	r1, [r3, #12]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac04:	461a      	mov	r2, r3
 800ac06:	6838      	ldr	r0, [r7, #0]
 800ac08:	f002 fc2c 	bl	800d464 <memcpy>
	}
}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac1c:	f001 fbfe 	bl	800c41c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac28:	e011      	b.n	800ac4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d012      	beq.n	800ac58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	3324      	adds	r3, #36	; 0x24
 800ac36:	4618      	mov	r0, r3
 800ac38:	f000 fd48 	bl	800b6cc <xTaskRemoveFromEventList>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac42:	f000 fe1f 	bl	800b884 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	dce9      	bgt.n	800ac2a <prvUnlockQueue+0x16>
 800ac56:	e000      	b.n	800ac5a <prvUnlockQueue+0x46>
					break;
 800ac58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	22ff      	movs	r2, #255	; 0xff
 800ac5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ac62:	f001 fc0b 	bl	800c47c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac66:	f001 fbd9 	bl	800c41c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac72:	e011      	b.n	800ac98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d012      	beq.n	800aca2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3310      	adds	r3, #16
 800ac80:	4618      	mov	r0, r3
 800ac82:	f000 fd23 	bl	800b6cc <xTaskRemoveFromEventList>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac8c:	f000 fdfa 	bl	800b884 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
 800ac92:	3b01      	subs	r3, #1
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	dce9      	bgt.n	800ac74 <prvUnlockQueue+0x60>
 800aca0:	e000      	b.n	800aca4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aca2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	22ff      	movs	r2, #255	; 0xff
 800aca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800acac:	f001 fbe6 	bl	800c47c <vPortExitCritical>
}
 800acb0:	bf00      	nop
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acc0:	f001 fbac 	bl	800c41c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d102      	bne.n	800acd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800accc:	2301      	movs	r3, #1
 800acce:	60fb      	str	r3, [r7, #12]
 800acd0:	e001      	b.n	800acd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800acd2:	2300      	movs	r3, #0
 800acd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acd6:	f001 fbd1 	bl	800c47c <vPortExitCritical>

	return xReturn;
 800acda:	68fb      	ldr	r3, [r7, #12]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acec:	f001 fb96 	bl	800c41c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d102      	bne.n	800ad02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800acfc:	2301      	movs	r3, #1
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	e001      	b.n	800ad06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad02:	2300      	movs	r3, #0
 800ad04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad06:	f001 fbb9 	bl	800c47c <vPortExitCritical>

	return xReturn;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]
 800ad22:	e014      	b.n	800ad4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad24:	4a0e      	ldr	r2, [pc, #56]	; (800ad60 <vQueueAddToRegistry+0x4c>)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d10b      	bne.n	800ad48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad30:	490b      	ldr	r1, [pc, #44]	; (800ad60 <vQueueAddToRegistry+0x4c>)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad3a:	4a09      	ldr	r2, [pc, #36]	; (800ad60 <vQueueAddToRegistry+0x4c>)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	4413      	add	r3, r2
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad46:	e006      	b.n	800ad56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	60fb      	str	r3, [r7, #12]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2b07      	cmp	r3, #7
 800ad52:	d9e7      	bls.n	800ad24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad54:	bf00      	nop
 800ad56:	bf00      	nop
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bc80      	pop	{r7}
 800ad5e:	4770      	bx	lr
 800ad60:	20000f74 	.word	0x20000f74

0800ad64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad74:	f001 fb52 	bl	800c41c <vPortEnterCritical>
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad7e:	b25b      	sxtb	r3, r3
 800ad80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad84:	d103      	bne.n	800ad8e <vQueueWaitForMessageRestricted+0x2a>
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad94:	b25b      	sxtb	r3, r3
 800ad96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9a:	d103      	bne.n	800ada4 <vQueueWaitForMessageRestricted+0x40>
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ada4:	f001 fb6a 	bl	800c47c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adac:	2b00      	cmp	r3, #0
 800adae:	d106      	bne.n	800adbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	3324      	adds	r3, #36	; 0x24
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	68b9      	ldr	r1, [r7, #8]
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 fc5b 	bl	800b674 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800adbe:	6978      	ldr	r0, [r7, #20]
 800adc0:	f7ff ff28 	bl	800ac14 <prvUnlockQueue>
	}
 800adc4:	bf00      	nop
 800adc6:	3718      	adds	r7, #24
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b08e      	sub	sp, #56	; 0x38
 800add0:	af04      	add	r7, sp, #16
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
 800add8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10a      	bne.n	800adf6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	623b      	str	r3, [r7, #32]
}
 800adf2:	bf00      	nop
 800adf4:	e7fe      	b.n	800adf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800adf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10a      	bne.n	800ae12 <xTaskCreateStatic+0x46>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	61fb      	str	r3, [r7, #28]
}
 800ae0e:	bf00      	nop
 800ae10:	e7fe      	b.n	800ae10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae12:	23a8      	movs	r3, #168	; 0xa8
 800ae14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	2ba8      	cmp	r3, #168	; 0xa8
 800ae1a:	d00a      	beq.n	800ae32 <xTaskCreateStatic+0x66>
	__asm volatile
 800ae1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae20:	f383 8811 	msr	BASEPRI, r3
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	61bb      	str	r3, [r7, #24]
}
 800ae2e:	bf00      	nop
 800ae30:	e7fe      	b.n	800ae30 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d01e      	beq.n	800ae76 <xTaskCreateStatic+0xaa>
 800ae38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d01b      	beq.n	800ae76 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae40:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae46:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4a:	2202      	movs	r2, #2
 800ae4c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae50:	2300      	movs	r3, #0
 800ae52:	9303      	str	r3, [sp, #12]
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	9302      	str	r3, [sp, #8]
 800ae58:	f107 0314 	add.w	r3, r7, #20
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	68b9      	ldr	r1, [r7, #8]
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f000 f851 	bl	800af10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae70:	f000 f8ec 	bl	800b04c <prvAddNewTaskToReadyList>
 800ae74:	e001      	b.n	800ae7a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800ae76:	2300      	movs	r3, #0
 800ae78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae7a:	697b      	ldr	r3, [r7, #20]
	}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3728      	adds	r7, #40	; 0x28
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08c      	sub	sp, #48	; 0x30
 800ae88:	af04      	add	r7, sp, #16
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	603b      	str	r3, [r7, #0]
 800ae90:	4613      	mov	r3, r2
 800ae92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae94:	88fb      	ldrh	r3, [r7, #6]
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f001 fbbf 	bl	800c61c <pvPortMalloc>
 800ae9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00e      	beq.n	800aec4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800aea6:	20a8      	movs	r0, #168	; 0xa8
 800aea8:	f001 fbb8 	bl	800c61c <pvPortMalloc>
 800aeac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d003      	beq.n	800aebc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	631a      	str	r2, [r3, #48]	; 0x30
 800aeba:	e005      	b.n	800aec8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aebc:	6978      	ldr	r0, [r7, #20]
 800aebe:	f001 fc71 	bl	800c7a4 <vPortFree>
 800aec2:	e001      	b.n	800aec8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aec4:	2300      	movs	r3, #0
 800aec6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d017      	beq.n	800aefe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aed6:	88fa      	ldrh	r2, [r7, #6]
 800aed8:	2300      	movs	r3, #0
 800aeda:	9303      	str	r3, [sp, #12]
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	9302      	str	r3, [sp, #8]
 800aee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee2:	9301      	str	r3, [sp, #4]
 800aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee6:	9300      	str	r3, [sp, #0]
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	68b9      	ldr	r1, [r7, #8]
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 f80f 	bl	800af10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aef2:	69f8      	ldr	r0, [r7, #28]
 800aef4:	f000 f8aa 	bl	800b04c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aef8:	2301      	movs	r3, #1
 800aefa:	61bb      	str	r3, [r7, #24]
 800aefc:	e002      	b.n	800af04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aefe:	f04f 33ff 	mov.w	r3, #4294967295
 800af02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af04:	69bb      	ldr	r3, [r7, #24]
	}
 800af06:	4618      	mov	r0, r3
 800af08:	3720      	adds	r7, #32
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
	...

0800af10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b088      	sub	sp, #32
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
 800af1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	461a      	mov	r2, r3
 800af28:	21a5      	movs	r1, #165	; 0xa5
 800af2a:	f002 fa11 	bl	800d350 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800af38:	3b01      	subs	r3, #1
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	f023 0307 	bic.w	r3, r3, #7
 800af46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	f003 0307 	and.w	r3, r3, #7
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00a      	beq.n	800af68 <prvInitialiseNewTask+0x58>
	__asm volatile
 800af52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af56:	f383 8811 	msr	BASEPRI, r3
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	617b      	str	r3, [r7, #20]
}
 800af64:	bf00      	nop
 800af66:	e7fe      	b.n	800af66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af68:	2300      	movs	r3, #0
 800af6a:	61fb      	str	r3, [r7, #28]
 800af6c:	e012      	b.n	800af94 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	4413      	add	r3, r2
 800af74:	7819      	ldrb	r1, [r3, #0]
 800af76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	4413      	add	r3, r2
 800af7c:	3334      	adds	r3, #52	; 0x34
 800af7e:	460a      	mov	r2, r1
 800af80:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	4413      	add	r3, r2
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d006      	beq.n	800af9c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	3301      	adds	r3, #1
 800af92:	61fb      	str	r3, [r7, #28]
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	2b0f      	cmp	r3, #15
 800af98:	d9e9      	bls.n	800af6e <prvInitialiseNewTask+0x5e>
 800af9a:	e000      	b.n	800af9e <prvInitialiseNewTask+0x8e>
		{
			break;
 800af9c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800afa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa8:	2b37      	cmp	r3, #55	; 0x37
 800afaa:	d901      	bls.n	800afb0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800afac:	2337      	movs	r3, #55	; 0x37
 800afae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800afbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbe:	2200      	movs	r2, #0
 800afc0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	3304      	adds	r3, #4
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7ff f98b 	bl	800a2e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800afcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afce:	3318      	adds	r3, #24
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7ff f986 	bl	800a2e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800afe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	2200      	movs	r2, #0
 800aff0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff6:	2200      	movs	r2, #0
 800aff8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800affc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affe:	3354      	adds	r3, #84	; 0x54
 800b000:	224c      	movs	r2, #76	; 0x4c
 800b002:	2100      	movs	r1, #0
 800b004:	4618      	mov	r0, r3
 800b006:	f002 f9a3 	bl	800d350 <memset>
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	4a0c      	ldr	r2, [pc, #48]	; (800b040 <prvInitialiseNewTask+0x130>)
 800b00e:	659a      	str	r2, [r3, #88]	; 0x58
 800b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b012:	4a0c      	ldr	r2, [pc, #48]	; (800b044 <prvInitialiseNewTask+0x134>)
 800b014:	65da      	str	r2, [r3, #92]	; 0x5c
 800b016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b018:	4a0b      	ldr	r2, [pc, #44]	; (800b048 <prvInitialiseNewTask+0x138>)
 800b01a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	68f9      	ldr	r1, [r7, #12]
 800b020:	69b8      	ldr	r0, [r7, #24]
 800b022:	f001 f90b 	bl	800c23c <pxPortInitialiseStack>
 800b026:	4602      	mov	r2, r0
 800b028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d002      	beq.n	800b038 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b036:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b038:	bf00      	nop
 800b03a:	3720      	adds	r7, #32
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	200033d4 	.word	0x200033d4
 800b044:	2000343c 	.word	0x2000343c
 800b048:	200034a4 	.word	0x200034a4

0800b04c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b054:	f001 f9e2 	bl	800c41c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b058:	4b2d      	ldr	r3, [pc, #180]	; (800b110 <prvAddNewTaskToReadyList+0xc4>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	3301      	adds	r3, #1
 800b05e:	4a2c      	ldr	r2, [pc, #176]	; (800b110 <prvAddNewTaskToReadyList+0xc4>)
 800b060:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b062:	4b2c      	ldr	r3, [pc, #176]	; (800b114 <prvAddNewTaskToReadyList+0xc8>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d109      	bne.n	800b07e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b06a:	4a2a      	ldr	r2, [pc, #168]	; (800b114 <prvAddNewTaskToReadyList+0xc8>)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b070:	4b27      	ldr	r3, [pc, #156]	; (800b110 <prvAddNewTaskToReadyList+0xc4>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d110      	bne.n	800b09a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b078:	f000 fc28 	bl	800b8cc <prvInitialiseTaskLists>
 800b07c:	e00d      	b.n	800b09a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b07e:	4b26      	ldr	r3, [pc, #152]	; (800b118 <prvAddNewTaskToReadyList+0xcc>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d109      	bne.n	800b09a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b086:	4b23      	ldr	r3, [pc, #140]	; (800b114 <prvAddNewTaskToReadyList+0xc8>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b090:	429a      	cmp	r2, r3
 800b092:	d802      	bhi.n	800b09a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b094:	4a1f      	ldr	r2, [pc, #124]	; (800b114 <prvAddNewTaskToReadyList+0xc8>)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b09a:	4b20      	ldr	r3, [pc, #128]	; (800b11c <prvAddNewTaskToReadyList+0xd0>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	4a1e      	ldr	r2, [pc, #120]	; (800b11c <prvAddNewTaskToReadyList+0xd0>)
 800b0a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0a4:	4b1d      	ldr	r3, [pc, #116]	; (800b11c <prvAddNewTaskToReadyList+0xd0>)
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b0:	4b1b      	ldr	r3, [pc, #108]	; (800b120 <prvAddNewTaskToReadyList+0xd4>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d903      	bls.n	800b0c0 <prvAddNewTaskToReadyList+0x74>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0bc:	4a18      	ldr	r2, [pc, #96]	; (800b120 <prvAddNewTaskToReadyList+0xd4>)
 800b0be:	6013      	str	r3, [r2, #0]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4a15      	ldr	r2, [pc, #84]	; (800b124 <prvAddNewTaskToReadyList+0xd8>)
 800b0ce:	441a      	add	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	f7ff f90f 	bl	800a2fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0dc:	f001 f9ce 	bl	800c47c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0e0:	4b0d      	ldr	r3, [pc, #52]	; (800b118 <prvAddNewTaskToReadyList+0xcc>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00e      	beq.n	800b106 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0e8:	4b0a      	ldr	r3, [pc, #40]	; (800b114 <prvAddNewTaskToReadyList+0xc8>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d207      	bcs.n	800b106 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b0f6:	4b0c      	ldr	r3, [pc, #48]	; (800b128 <prvAddNewTaskToReadyList+0xdc>)
 800b0f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0fc:	601a      	str	r2, [r3, #0]
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b106:	bf00      	nop
 800b108:	3708      	adds	r7, #8
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	20001488 	.word	0x20001488
 800b114:	20000fb4 	.word	0x20000fb4
 800b118:	20001494 	.word	0x20001494
 800b11c:	200014a4 	.word	0x200014a4
 800b120:	20001490 	.word	0x20001490
 800b124:	20000fb8 	.word	0x20000fb8
 800b128:	e000ed04 	.word	0xe000ed04

0800b12c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b134:	2300      	movs	r3, #0
 800b136:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d017      	beq.n	800b16e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b13e:	4b13      	ldr	r3, [pc, #76]	; (800b18c <vTaskDelay+0x60>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00a      	beq.n	800b15c <vTaskDelay+0x30>
	__asm volatile
 800b146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14a:	f383 8811 	msr	BASEPRI, r3
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	f3bf 8f4f 	dsb	sy
 800b156:	60bb      	str	r3, [r7, #8]
}
 800b158:	bf00      	nop
 800b15a:	e7fe      	b.n	800b15a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b15c:	f000 f88a 	bl	800b274 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b160:	2100      	movs	r1, #0
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 fd04 	bl	800bb70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b168:	f000 f892 	bl	800b290 <xTaskResumeAll>
 800b16c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d107      	bne.n	800b184 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b174:	4b06      	ldr	r3, [pc, #24]	; (800b190 <vTaskDelay+0x64>)
 800b176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b17a:	601a      	str	r2, [r3, #0]
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b184:	bf00      	nop
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	200014b0 	.word	0x200014b0
 800b190:	e000ed04 	.word	0xe000ed04

0800b194 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b08a      	sub	sp, #40	; 0x28
 800b198:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b19a:	2300      	movs	r3, #0
 800b19c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1a2:	463a      	mov	r2, r7
 800b1a4:	1d39      	adds	r1, r7, #4
 800b1a6:	f107 0308 	add.w	r3, r7, #8
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7ff f848 	bl	800a240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1b0:	6839      	ldr	r1, [r7, #0]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	68ba      	ldr	r2, [r7, #8]
 800b1b6:	9202      	str	r2, [sp, #8]
 800b1b8:	9301      	str	r3, [sp, #4]
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	2300      	movs	r3, #0
 800b1c0:	460a      	mov	r2, r1
 800b1c2:	4924      	ldr	r1, [pc, #144]	; (800b254 <vTaskStartScheduler+0xc0>)
 800b1c4:	4824      	ldr	r0, [pc, #144]	; (800b258 <vTaskStartScheduler+0xc4>)
 800b1c6:	f7ff fe01 	bl	800adcc <xTaskCreateStatic>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	4a23      	ldr	r2, [pc, #140]	; (800b25c <vTaskStartScheduler+0xc8>)
 800b1ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b1d0:	4b22      	ldr	r3, [pc, #136]	; (800b25c <vTaskStartScheduler+0xc8>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d002      	beq.n	800b1de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	617b      	str	r3, [r7, #20]
 800b1dc:	e001      	b.n	800b1e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d102      	bne.n	800b1ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b1e8:	f000 fd16 	bl	800bc18 <xTimerCreateTimerTask>
 800b1ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d11b      	bne.n	800b22c <vTaskStartScheduler+0x98>
	__asm volatile
 800b1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f8:	f383 8811 	msr	BASEPRI, r3
 800b1fc:	f3bf 8f6f 	isb	sy
 800b200:	f3bf 8f4f 	dsb	sy
 800b204:	613b      	str	r3, [r7, #16]
}
 800b206:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b208:	4b15      	ldr	r3, [pc, #84]	; (800b260 <vTaskStartScheduler+0xcc>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	3354      	adds	r3, #84	; 0x54
 800b20e:	4a15      	ldr	r2, [pc, #84]	; (800b264 <vTaskStartScheduler+0xd0>)
 800b210:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b212:	4b15      	ldr	r3, [pc, #84]	; (800b268 <vTaskStartScheduler+0xd4>)
 800b214:	f04f 32ff 	mov.w	r2, #4294967295
 800b218:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b21a:	4b14      	ldr	r3, [pc, #80]	; (800b26c <vTaskStartScheduler+0xd8>)
 800b21c:	2201      	movs	r2, #1
 800b21e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b220:	4b13      	ldr	r3, [pc, #76]	; (800b270 <vTaskStartScheduler+0xdc>)
 800b222:	2200      	movs	r2, #0
 800b224:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b226:	f001 f887 	bl	800c338 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b22a:	e00e      	b.n	800b24a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b232:	d10a      	bne.n	800b24a <vTaskStartScheduler+0xb6>
	__asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	60fb      	str	r3, [r7, #12]
}
 800b246:	bf00      	nop
 800b248:	e7fe      	b.n	800b248 <vTaskStartScheduler+0xb4>
}
 800b24a:	bf00      	nop
 800b24c:	3718      	adds	r7, #24
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	0800dd60 	.word	0x0800dd60
 800b258:	0800b89d 	.word	0x0800b89d
 800b25c:	200014ac 	.word	0x200014ac
 800b260:	20000fb4 	.word	0x20000fb4
 800b264:	200001cc 	.word	0x200001cc
 800b268:	200014a8 	.word	0x200014a8
 800b26c:	20001494 	.word	0x20001494
 800b270:	2000148c 	.word	0x2000148c

0800b274 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b274:	b480      	push	{r7}
 800b276:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b278:	4b04      	ldr	r3, [pc, #16]	; (800b28c <vTaskSuspendAll+0x18>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	3301      	adds	r3, #1
 800b27e:	4a03      	ldr	r2, [pc, #12]	; (800b28c <vTaskSuspendAll+0x18>)
 800b280:	6013      	str	r3, [r2, #0]
}
 800b282:	bf00      	nop
 800b284:	46bd      	mov	sp, r7
 800b286:	bc80      	pop	{r7}
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	200014b0 	.word	0x200014b0

0800b290 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b296:	2300      	movs	r3, #0
 800b298:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b29a:	2300      	movs	r3, #0
 800b29c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b29e:	4b42      	ldr	r3, [pc, #264]	; (800b3a8 <xTaskResumeAll+0x118>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10a      	bne.n	800b2bc <xTaskResumeAll+0x2c>
	__asm volatile
 800b2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	603b      	str	r3, [r7, #0]
}
 800b2b8:	bf00      	nop
 800b2ba:	e7fe      	b.n	800b2ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2bc:	f001 f8ae 	bl	800c41c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2c0:	4b39      	ldr	r3, [pc, #228]	; (800b3a8 <xTaskResumeAll+0x118>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	4a38      	ldr	r2, [pc, #224]	; (800b3a8 <xTaskResumeAll+0x118>)
 800b2c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2ca:	4b37      	ldr	r3, [pc, #220]	; (800b3a8 <xTaskResumeAll+0x118>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d162      	bne.n	800b398 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2d2:	4b36      	ldr	r3, [pc, #216]	; (800b3ac <xTaskResumeAll+0x11c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d05e      	beq.n	800b398 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2da:	e02f      	b.n	800b33c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b2dc:	4b34      	ldr	r3, [pc, #208]	; (800b3b0 <xTaskResumeAll+0x120>)
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	3318      	adds	r3, #24
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff f861 	bl	800a3b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3304      	adds	r3, #4
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7ff f85c 	bl	800a3b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fc:	4b2d      	ldr	r3, [pc, #180]	; (800b3b4 <xTaskResumeAll+0x124>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	429a      	cmp	r2, r3
 800b302:	d903      	bls.n	800b30c <xTaskResumeAll+0x7c>
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b308:	4a2a      	ldr	r2, [pc, #168]	; (800b3b4 <xTaskResumeAll+0x124>)
 800b30a:	6013      	str	r3, [r2, #0]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b310:	4613      	mov	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4413      	add	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4a27      	ldr	r2, [pc, #156]	; (800b3b8 <xTaskResumeAll+0x128>)
 800b31a:	441a      	add	r2, r3
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	3304      	adds	r3, #4
 800b320:	4619      	mov	r1, r3
 800b322:	4610      	mov	r0, r2
 800b324:	f7fe ffe9 	bl	800a2fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32c:	4b23      	ldr	r3, [pc, #140]	; (800b3bc <xTaskResumeAll+0x12c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b332:	429a      	cmp	r2, r3
 800b334:	d302      	bcc.n	800b33c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b336:	4b22      	ldr	r3, [pc, #136]	; (800b3c0 <xTaskResumeAll+0x130>)
 800b338:	2201      	movs	r2, #1
 800b33a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b33c:	4b1c      	ldr	r3, [pc, #112]	; (800b3b0 <xTaskResumeAll+0x120>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1cb      	bne.n	800b2dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d001      	beq.n	800b34e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b34a:	f000 fb61 	bl	800ba10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b34e:	4b1d      	ldr	r3, [pc, #116]	; (800b3c4 <xTaskResumeAll+0x134>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d010      	beq.n	800b37c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b35a:	f000 f845 	bl	800b3e8 <xTaskIncrementTick>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b364:	4b16      	ldr	r3, [pc, #88]	; (800b3c0 <xTaskResumeAll+0x130>)
 800b366:	2201      	movs	r2, #1
 800b368:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1f1      	bne.n	800b35a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b376:	4b13      	ldr	r3, [pc, #76]	; (800b3c4 <xTaskResumeAll+0x134>)
 800b378:	2200      	movs	r2, #0
 800b37a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b37c:	4b10      	ldr	r3, [pc, #64]	; (800b3c0 <xTaskResumeAll+0x130>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d009      	beq.n	800b398 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b384:	2301      	movs	r3, #1
 800b386:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b388:	4b0f      	ldr	r3, [pc, #60]	; (800b3c8 <xTaskResumeAll+0x138>)
 800b38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b38e:	601a      	str	r2, [r3, #0]
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b398:	f001 f870 	bl	800c47c <vPortExitCritical>

	return xAlreadyYielded;
 800b39c:	68bb      	ldr	r3, [r7, #8]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	200014b0 	.word	0x200014b0
 800b3ac:	20001488 	.word	0x20001488
 800b3b0:	20001448 	.word	0x20001448
 800b3b4:	20001490 	.word	0x20001490
 800b3b8:	20000fb8 	.word	0x20000fb8
 800b3bc:	20000fb4 	.word	0x20000fb4
 800b3c0:	2000149c 	.word	0x2000149c
 800b3c4:	20001498 	.word	0x20001498
 800b3c8:	e000ed04 	.word	0xe000ed04

0800b3cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b3d2:	4b04      	ldr	r3, [pc, #16]	; (800b3e4 <xTaskGetTickCount+0x18>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b3d8:	687b      	ldr	r3, [r7, #4]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	370c      	adds	r7, #12
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bc80      	pop	{r7}
 800b3e2:	4770      	bx	lr
 800b3e4:	2000148c 	.word	0x2000148c

0800b3e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3f2:	4b51      	ldr	r3, [pc, #324]	; (800b538 <xTaskIncrementTick+0x150>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f040 808e 	bne.w	800b518 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3fc:	4b4f      	ldr	r3, [pc, #316]	; (800b53c <xTaskIncrementTick+0x154>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3301      	adds	r3, #1
 800b402:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b404:	4a4d      	ldr	r2, [pc, #308]	; (800b53c <xTaskIncrementTick+0x154>)
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d120      	bne.n	800b452 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b410:	4b4b      	ldr	r3, [pc, #300]	; (800b540 <xTaskIncrementTick+0x158>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00a      	beq.n	800b430 <xTaskIncrementTick+0x48>
	__asm volatile
 800b41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	603b      	str	r3, [r7, #0]
}
 800b42c:	bf00      	nop
 800b42e:	e7fe      	b.n	800b42e <xTaskIncrementTick+0x46>
 800b430:	4b43      	ldr	r3, [pc, #268]	; (800b540 <xTaskIncrementTick+0x158>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	60fb      	str	r3, [r7, #12]
 800b436:	4b43      	ldr	r3, [pc, #268]	; (800b544 <xTaskIncrementTick+0x15c>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a41      	ldr	r2, [pc, #260]	; (800b540 <xTaskIncrementTick+0x158>)
 800b43c:	6013      	str	r3, [r2, #0]
 800b43e:	4a41      	ldr	r2, [pc, #260]	; (800b544 <xTaskIncrementTick+0x15c>)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6013      	str	r3, [r2, #0]
 800b444:	4b40      	ldr	r3, [pc, #256]	; (800b548 <xTaskIncrementTick+0x160>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	3301      	adds	r3, #1
 800b44a:	4a3f      	ldr	r2, [pc, #252]	; (800b548 <xTaskIncrementTick+0x160>)
 800b44c:	6013      	str	r3, [r2, #0]
 800b44e:	f000 fadf 	bl	800ba10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b452:	4b3e      	ldr	r3, [pc, #248]	; (800b54c <xTaskIncrementTick+0x164>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	693a      	ldr	r2, [r7, #16]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d34e      	bcc.n	800b4fa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b45c:	4b38      	ldr	r3, [pc, #224]	; (800b540 <xTaskIncrementTick+0x158>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <xTaskIncrementTick+0x82>
 800b466:	2301      	movs	r3, #1
 800b468:	e000      	b.n	800b46c <xTaskIncrementTick+0x84>
 800b46a:	2300      	movs	r3, #0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d004      	beq.n	800b47a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b470:	4b36      	ldr	r3, [pc, #216]	; (800b54c <xTaskIncrementTick+0x164>)
 800b472:	f04f 32ff 	mov.w	r2, #4294967295
 800b476:	601a      	str	r2, [r3, #0]
					break;
 800b478:	e03f      	b.n	800b4fa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b47a:	4b31      	ldr	r3, [pc, #196]	; (800b540 <xTaskIncrementTick+0x158>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d203      	bcs.n	800b49a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b492:	4a2e      	ldr	r2, [pc, #184]	; (800b54c <xTaskIncrementTick+0x164>)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6013      	str	r3, [r2, #0]
						break;
 800b498:	e02f      	b.n	800b4fa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	3304      	adds	r3, #4
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7fe ff86 	bl	800a3b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d004      	beq.n	800b4b6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	3318      	adds	r3, #24
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fe ff7d 	bl	800a3b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ba:	4b25      	ldr	r3, [pc, #148]	; (800b550 <xTaskIncrementTick+0x168>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d903      	bls.n	800b4ca <xTaskIncrementTick+0xe2>
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c6:	4a22      	ldr	r2, [pc, #136]	; (800b550 <xTaskIncrementTick+0x168>)
 800b4c8:	6013      	str	r3, [r2, #0]
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	4413      	add	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4a1f      	ldr	r2, [pc, #124]	; (800b554 <xTaskIncrementTick+0x16c>)
 800b4d8:	441a      	add	r2, r3
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	3304      	adds	r3, #4
 800b4de:	4619      	mov	r1, r3
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	f7fe ff0a 	bl	800a2fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ea:	4b1b      	ldr	r3, [pc, #108]	; (800b558 <xTaskIncrementTick+0x170>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d3b3      	bcc.n	800b45c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4f8:	e7b0      	b.n	800b45c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4fa:	4b17      	ldr	r3, [pc, #92]	; (800b558 <xTaskIncrementTick+0x170>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b500:	4914      	ldr	r1, [pc, #80]	; (800b554 <xTaskIncrementTick+0x16c>)
 800b502:	4613      	mov	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	4413      	add	r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	440b      	add	r3, r1
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d907      	bls.n	800b522 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b512:	2301      	movs	r3, #1
 800b514:	617b      	str	r3, [r7, #20]
 800b516:	e004      	b.n	800b522 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b518:	4b10      	ldr	r3, [pc, #64]	; (800b55c <xTaskIncrementTick+0x174>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	3301      	adds	r3, #1
 800b51e:	4a0f      	ldr	r2, [pc, #60]	; (800b55c <xTaskIncrementTick+0x174>)
 800b520:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b522:	4b0f      	ldr	r3, [pc, #60]	; (800b560 <xTaskIncrementTick+0x178>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d001      	beq.n	800b52e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b52a:	2301      	movs	r3, #1
 800b52c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b52e:	697b      	ldr	r3, [r7, #20]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3718      	adds	r7, #24
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	200014b0 	.word	0x200014b0
 800b53c:	2000148c 	.word	0x2000148c
 800b540:	20001440 	.word	0x20001440
 800b544:	20001444 	.word	0x20001444
 800b548:	200014a0 	.word	0x200014a0
 800b54c:	200014a8 	.word	0x200014a8
 800b550:	20001490 	.word	0x20001490
 800b554:	20000fb8 	.word	0x20000fb8
 800b558:	20000fb4 	.word	0x20000fb4
 800b55c:	20001498 	.word	0x20001498
 800b560:	2000149c 	.word	0x2000149c

0800b564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b56a:	4b2a      	ldr	r3, [pc, #168]	; (800b614 <vTaskSwitchContext+0xb0>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d003      	beq.n	800b57a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b572:	4b29      	ldr	r3, [pc, #164]	; (800b618 <vTaskSwitchContext+0xb4>)
 800b574:	2201      	movs	r2, #1
 800b576:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b578:	e046      	b.n	800b608 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b57a:	4b27      	ldr	r3, [pc, #156]	; (800b618 <vTaskSwitchContext+0xb4>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b580:	4b26      	ldr	r3, [pc, #152]	; (800b61c <vTaskSwitchContext+0xb8>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	60fb      	str	r3, [r7, #12]
 800b586:	e010      	b.n	800b5aa <vTaskSwitchContext+0x46>
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10a      	bne.n	800b5a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	607b      	str	r3, [r7, #4]
}
 800b5a0:	bf00      	nop
 800b5a2:	e7fe      	b.n	800b5a2 <vTaskSwitchContext+0x3e>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	60fb      	str	r3, [r7, #12]
 800b5aa:	491d      	ldr	r1, [pc, #116]	; (800b620 <vTaskSwitchContext+0xbc>)
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	4413      	add	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	440b      	add	r3, r1
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0e4      	beq.n	800b588 <vTaskSwitchContext+0x24>
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	4413      	add	r3, r2
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	4a15      	ldr	r2, [pc, #84]	; (800b620 <vTaskSwitchContext+0xbc>)
 800b5ca:	4413      	add	r3, r2
 800b5cc:	60bb      	str	r3, [r7, #8]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	685a      	ldr	r2, [r3, #4]
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	605a      	str	r2, [r3, #4]
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	685a      	ldr	r2, [r3, #4]
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	3308      	adds	r3, #8
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d104      	bne.n	800b5ee <vTaskSwitchContext+0x8a>
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	685a      	ldr	r2, [r3, #4]
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	605a      	str	r2, [r3, #4]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	4a0b      	ldr	r2, [pc, #44]	; (800b624 <vTaskSwitchContext+0xc0>)
 800b5f6:	6013      	str	r3, [r2, #0]
 800b5f8:	4a08      	ldr	r2, [pc, #32]	; (800b61c <vTaskSwitchContext+0xb8>)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b5fe:	4b09      	ldr	r3, [pc, #36]	; (800b624 <vTaskSwitchContext+0xc0>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3354      	adds	r3, #84	; 0x54
 800b604:	4a08      	ldr	r2, [pc, #32]	; (800b628 <vTaskSwitchContext+0xc4>)
 800b606:	6013      	str	r3, [r2, #0]
}
 800b608:	bf00      	nop
 800b60a:	3714      	adds	r7, #20
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bc80      	pop	{r7}
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	200014b0 	.word	0x200014b0
 800b618:	2000149c 	.word	0x2000149c
 800b61c:	20001490 	.word	0x20001490
 800b620:	20000fb8 	.word	0x20000fb8
 800b624:	20000fb4 	.word	0x20000fb4
 800b628:	200001cc 	.word	0x200001cc

0800b62c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10a      	bne.n	800b652 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b640:	f383 8811 	msr	BASEPRI, r3
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	60fb      	str	r3, [r7, #12]
}
 800b64e:	bf00      	nop
 800b650:	e7fe      	b.n	800b650 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b652:	4b07      	ldr	r3, [pc, #28]	; (800b670 <vTaskPlaceOnEventList+0x44>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	3318      	adds	r3, #24
 800b658:	4619      	mov	r1, r3
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7fe fe70 	bl	800a340 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b660:	2101      	movs	r1, #1
 800b662:	6838      	ldr	r0, [r7, #0]
 800b664:	f000 fa84 	bl	800bb70 <prvAddCurrentTaskToDelayedList>
}
 800b668:	bf00      	nop
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	20000fb4 	.word	0x20000fb4

0800b674 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10a      	bne.n	800b69c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	617b      	str	r3, [r7, #20]
}
 800b698:	bf00      	nop
 800b69a:	e7fe      	b.n	800b69a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b69c:	4b0a      	ldr	r3, [pc, #40]	; (800b6c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	3318      	adds	r3, #24
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f7fe fe28 	bl	800a2fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6b6:	6879      	ldr	r1, [r7, #4]
 800b6b8:	68b8      	ldr	r0, [r7, #8]
 800b6ba:	f000 fa59 	bl	800bb70 <prvAddCurrentTaskToDelayedList>
	}
 800b6be:	bf00      	nop
 800b6c0:	3718      	adds	r7, #24
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	20000fb4 	.word	0x20000fb4

0800b6cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d10a      	bne.n	800b6f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	60fb      	str	r3, [r7, #12]
}
 800b6f4:	bf00      	nop
 800b6f6:	e7fe      	b.n	800b6f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	3318      	adds	r3, #24
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fe fe57 	bl	800a3b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b702:	4b1e      	ldr	r3, [pc, #120]	; (800b77c <xTaskRemoveFromEventList+0xb0>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d11d      	bne.n	800b746 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	3304      	adds	r3, #4
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fe fe4e 	bl	800a3b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b718:	4b19      	ldr	r3, [pc, #100]	; (800b780 <xTaskRemoveFromEventList+0xb4>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d903      	bls.n	800b728 <xTaskRemoveFromEventList+0x5c>
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b724:	4a16      	ldr	r2, [pc, #88]	; (800b780 <xTaskRemoveFromEventList+0xb4>)
 800b726:	6013      	str	r3, [r2, #0]
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72c:	4613      	mov	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4a13      	ldr	r2, [pc, #76]	; (800b784 <xTaskRemoveFromEventList+0xb8>)
 800b736:	441a      	add	r2, r3
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	3304      	adds	r3, #4
 800b73c:	4619      	mov	r1, r3
 800b73e:	4610      	mov	r0, r2
 800b740:	f7fe fddb 	bl	800a2fa <vListInsertEnd>
 800b744:	e005      	b.n	800b752 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	3318      	adds	r3, #24
 800b74a:	4619      	mov	r1, r3
 800b74c:	480e      	ldr	r0, [pc, #56]	; (800b788 <xTaskRemoveFromEventList+0xbc>)
 800b74e:	f7fe fdd4 	bl	800a2fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b756:	4b0d      	ldr	r3, [pc, #52]	; (800b78c <xTaskRemoveFromEventList+0xc0>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d905      	bls.n	800b76c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b760:	2301      	movs	r3, #1
 800b762:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b764:	4b0a      	ldr	r3, [pc, #40]	; (800b790 <xTaskRemoveFromEventList+0xc4>)
 800b766:	2201      	movs	r2, #1
 800b768:	601a      	str	r2, [r3, #0]
 800b76a:	e001      	b.n	800b770 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b76c:	2300      	movs	r3, #0
 800b76e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b770:	697b      	ldr	r3, [r7, #20]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3718      	adds	r7, #24
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	200014b0 	.word	0x200014b0
 800b780:	20001490 	.word	0x20001490
 800b784:	20000fb8 	.word	0x20000fb8
 800b788:	20001448 	.word	0x20001448
 800b78c:	20000fb4 	.word	0x20000fb4
 800b790:	2000149c 	.word	0x2000149c

0800b794 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b79c:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <vTaskInternalSetTimeOutState+0x24>)
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7a4:	4b05      	ldr	r3, [pc, #20]	; (800b7bc <vTaskInternalSetTimeOutState+0x28>)
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	605a      	str	r2, [r3, #4]
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bc80      	pop	{r7}
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	200014a0 	.word	0x200014a0
 800b7bc:	2000148c 	.word	0x2000148c

0800b7c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10a      	bne.n	800b7e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	613b      	str	r3, [r7, #16]
}
 800b7e2:	bf00      	nop
 800b7e4:	e7fe      	b.n	800b7e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10a      	bne.n	800b802 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	60fb      	str	r3, [r7, #12]
}
 800b7fe:	bf00      	nop
 800b800:	e7fe      	b.n	800b800 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b802:	f000 fe0b 	bl	800c41c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b806:	4b1d      	ldr	r3, [pc, #116]	; (800b87c <xTaskCheckForTimeOut+0xbc>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	69ba      	ldr	r2, [r7, #24]
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81e:	d102      	bne.n	800b826 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b820:	2300      	movs	r3, #0
 800b822:	61fb      	str	r3, [r7, #28]
 800b824:	e023      	b.n	800b86e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	4b15      	ldr	r3, [pc, #84]	; (800b880 <xTaskCheckForTimeOut+0xc0>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d007      	beq.n	800b842 <xTaskCheckForTimeOut+0x82>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	69ba      	ldr	r2, [r7, #24]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d302      	bcc.n	800b842 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b83c:	2301      	movs	r3, #1
 800b83e:	61fb      	str	r3, [r7, #28]
 800b840:	e015      	b.n	800b86e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	697a      	ldr	r2, [r7, #20]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d20b      	bcs.n	800b864 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	1ad2      	subs	r2, r2, r3
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f7ff ff9b 	bl	800b794 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b85e:	2300      	movs	r3, #0
 800b860:	61fb      	str	r3, [r7, #28]
 800b862:	e004      	b.n	800b86e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	2200      	movs	r2, #0
 800b868:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b86a:	2301      	movs	r3, #1
 800b86c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b86e:	f000 fe05 	bl	800c47c <vPortExitCritical>

	return xReturn;
 800b872:	69fb      	ldr	r3, [r7, #28]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3720      	adds	r7, #32
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	2000148c 	.word	0x2000148c
 800b880:	200014a0 	.word	0x200014a0

0800b884 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b884:	b480      	push	{r7}
 800b886:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b888:	4b03      	ldr	r3, [pc, #12]	; (800b898 <vTaskMissedYield+0x14>)
 800b88a:	2201      	movs	r2, #1
 800b88c:	601a      	str	r2, [r3, #0]
}
 800b88e:	bf00      	nop
 800b890:	46bd      	mov	sp, r7
 800b892:	bc80      	pop	{r7}
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	2000149c 	.word	0x2000149c

0800b89c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8a4:	f000 f852 	bl	800b94c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8a8:	4b06      	ldr	r3, [pc, #24]	; (800b8c4 <prvIdleTask+0x28>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d9f9      	bls.n	800b8a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8b0:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <prvIdleTask+0x2c>)
 800b8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8c0:	e7f0      	b.n	800b8a4 <prvIdleTask+0x8>
 800b8c2:	bf00      	nop
 800b8c4:	20000fb8 	.word	0x20000fb8
 800b8c8:	e000ed04 	.word	0xe000ed04

0800b8cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	607b      	str	r3, [r7, #4]
 800b8d6:	e00c      	b.n	800b8f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	4413      	add	r3, r2
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	4a12      	ldr	r2, [pc, #72]	; (800b92c <prvInitialiseTaskLists+0x60>)
 800b8e4:	4413      	add	r3, r2
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fe fcdc 	bl	800a2a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	607b      	str	r3, [r7, #4]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2b37      	cmp	r3, #55	; 0x37
 800b8f6:	d9ef      	bls.n	800b8d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b8f8:	480d      	ldr	r0, [pc, #52]	; (800b930 <prvInitialiseTaskLists+0x64>)
 800b8fa:	f7fe fcd3 	bl	800a2a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8fe:	480d      	ldr	r0, [pc, #52]	; (800b934 <prvInitialiseTaskLists+0x68>)
 800b900:	f7fe fcd0 	bl	800a2a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b904:	480c      	ldr	r0, [pc, #48]	; (800b938 <prvInitialiseTaskLists+0x6c>)
 800b906:	f7fe fccd 	bl	800a2a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b90a:	480c      	ldr	r0, [pc, #48]	; (800b93c <prvInitialiseTaskLists+0x70>)
 800b90c:	f7fe fcca 	bl	800a2a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b910:	480b      	ldr	r0, [pc, #44]	; (800b940 <prvInitialiseTaskLists+0x74>)
 800b912:	f7fe fcc7 	bl	800a2a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b916:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <prvInitialiseTaskLists+0x78>)
 800b918:	4a05      	ldr	r2, [pc, #20]	; (800b930 <prvInitialiseTaskLists+0x64>)
 800b91a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b91c:	4b0a      	ldr	r3, [pc, #40]	; (800b948 <prvInitialiseTaskLists+0x7c>)
 800b91e:	4a05      	ldr	r2, [pc, #20]	; (800b934 <prvInitialiseTaskLists+0x68>)
 800b920:	601a      	str	r2, [r3, #0]
}
 800b922:	bf00      	nop
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	20000fb8 	.word	0x20000fb8
 800b930:	20001418 	.word	0x20001418
 800b934:	2000142c 	.word	0x2000142c
 800b938:	20001448 	.word	0x20001448
 800b93c:	2000145c 	.word	0x2000145c
 800b940:	20001474 	.word	0x20001474
 800b944:	20001440 	.word	0x20001440
 800b948:	20001444 	.word	0x20001444

0800b94c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b952:	e019      	b.n	800b988 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b954:	f000 fd62 	bl	800c41c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b958:	4b10      	ldr	r3, [pc, #64]	; (800b99c <prvCheckTasksWaitingTermination+0x50>)
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	3304      	adds	r3, #4
 800b964:	4618      	mov	r0, r3
 800b966:	f7fe fd23 	bl	800a3b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b96a:	4b0d      	ldr	r3, [pc, #52]	; (800b9a0 <prvCheckTasksWaitingTermination+0x54>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3b01      	subs	r3, #1
 800b970:	4a0b      	ldr	r2, [pc, #44]	; (800b9a0 <prvCheckTasksWaitingTermination+0x54>)
 800b972:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b974:	4b0b      	ldr	r3, [pc, #44]	; (800b9a4 <prvCheckTasksWaitingTermination+0x58>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	3b01      	subs	r3, #1
 800b97a:	4a0a      	ldr	r2, [pc, #40]	; (800b9a4 <prvCheckTasksWaitingTermination+0x58>)
 800b97c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b97e:	f000 fd7d 	bl	800c47c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f810 	bl	800b9a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b988:	4b06      	ldr	r3, [pc, #24]	; (800b9a4 <prvCheckTasksWaitingTermination+0x58>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d1e1      	bne.n	800b954 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b990:	bf00      	nop
 800b992:	bf00      	nop
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	2000145c 	.word	0x2000145c
 800b9a0:	20001488 	.word	0x20001488
 800b9a4:	20001470 	.word	0x20001470

0800b9a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	3354      	adds	r3, #84	; 0x54
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f001 fcd3 	bl	800d360 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d108      	bne.n	800b9d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f000 feeb 	bl	800c7a4 <vPortFree>
				vPortFree( pxTCB );
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fee8 	bl	800c7a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b9d4:	e018      	b.n	800ba08 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d103      	bne.n	800b9e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 fedf 	bl	800c7a4 <vPortFree>
	}
 800b9e6:	e00f      	b.n	800ba08 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b9ee:	2b02      	cmp	r3, #2
 800b9f0:	d00a      	beq.n	800ba08 <prvDeleteTCB+0x60>
	__asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	60fb      	str	r3, [r7, #12]
}
 800ba04:	bf00      	nop
 800ba06:	e7fe      	b.n	800ba06 <prvDeleteTCB+0x5e>
	}
 800ba08:	bf00      	nop
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba16:	4b0e      	ldr	r3, [pc, #56]	; (800ba50 <prvResetNextTaskUnblockTime+0x40>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <prvResetNextTaskUnblockTime+0x14>
 800ba20:	2301      	movs	r3, #1
 800ba22:	e000      	b.n	800ba26 <prvResetNextTaskUnblockTime+0x16>
 800ba24:	2300      	movs	r3, #0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d004      	beq.n	800ba34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba2a:	4b0a      	ldr	r3, [pc, #40]	; (800ba54 <prvResetNextTaskUnblockTime+0x44>)
 800ba2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba32:	e008      	b.n	800ba46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ba34:	4b06      	ldr	r3, [pc, #24]	; (800ba50 <prvResetNextTaskUnblockTime+0x40>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	4a04      	ldr	r2, [pc, #16]	; (800ba54 <prvResetNextTaskUnblockTime+0x44>)
 800ba44:	6013      	str	r3, [r2, #0]
}
 800ba46:	bf00      	nop
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bc80      	pop	{r7}
 800ba4e:	4770      	bx	lr
 800ba50:	20001440 	.word	0x20001440
 800ba54:	200014a8 	.word	0x200014a8

0800ba58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba5e:	4b0b      	ldr	r3, [pc, #44]	; (800ba8c <xTaskGetSchedulerState+0x34>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d102      	bne.n	800ba6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba66:	2301      	movs	r3, #1
 800ba68:	607b      	str	r3, [r7, #4]
 800ba6a:	e008      	b.n	800ba7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba6c:	4b08      	ldr	r3, [pc, #32]	; (800ba90 <xTaskGetSchedulerState+0x38>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d102      	bne.n	800ba7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba74:	2302      	movs	r3, #2
 800ba76:	607b      	str	r3, [r7, #4]
 800ba78:	e001      	b.n	800ba7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba7e:	687b      	ldr	r3, [r7, #4]
	}
 800ba80:	4618      	mov	r0, r3
 800ba82:	370c      	adds	r7, #12
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bc80      	pop	{r7}
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop
 800ba8c:	20001494 	.word	0x20001494
 800ba90:	200014b0 	.word	0x200014b0

0800ba94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800baa0:	2300      	movs	r3, #0
 800baa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d056      	beq.n	800bb58 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800baaa:	4b2e      	ldr	r3, [pc, #184]	; (800bb64 <xTaskPriorityDisinherit+0xd0>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	693a      	ldr	r2, [r7, #16]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d00a      	beq.n	800baca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab8:	f383 8811 	msr	BASEPRI, r3
 800babc:	f3bf 8f6f 	isb	sy
 800bac0:	f3bf 8f4f 	dsb	sy
 800bac4:	60fb      	str	r3, [r7, #12]
}
 800bac6:	bf00      	nop
 800bac8:	e7fe      	b.n	800bac8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10a      	bne.n	800bae8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	60bb      	str	r3, [r7, #8]
}
 800bae4:	bf00      	nop
 800bae6:	e7fe      	b.n	800bae6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baec:	1e5a      	subs	r2, r3, #1
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d02c      	beq.n	800bb58 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d128      	bne.n	800bb58 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	3304      	adds	r3, #4
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fe fc50 	bl	800a3b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb28:	4b0f      	ldr	r3, [pc, #60]	; (800bb68 <xTaskPriorityDisinherit+0xd4>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d903      	bls.n	800bb38 <xTaskPriorityDisinherit+0xa4>
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb34:	4a0c      	ldr	r2, [pc, #48]	; (800bb68 <xTaskPriorityDisinherit+0xd4>)
 800bb36:	6013      	str	r3, [r2, #0]
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4a09      	ldr	r2, [pc, #36]	; (800bb6c <xTaskPriorityDisinherit+0xd8>)
 800bb46:	441a      	add	r2, r3
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	4610      	mov	r0, r2
 800bb50:	f7fe fbd3 	bl	800a2fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb54:	2301      	movs	r3, #1
 800bb56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb58:	697b      	ldr	r3, [r7, #20]
	}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3718      	adds	r7, #24
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	20000fb4 	.word	0x20000fb4
 800bb68:	20001490 	.word	0x20001490
 800bb6c:	20000fb8 	.word	0x20000fb8

0800bb70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb7a:	4b21      	ldr	r3, [pc, #132]	; (800bc00 <prvAddCurrentTaskToDelayedList+0x90>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb80:	4b20      	ldr	r3, [pc, #128]	; (800bc04 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	3304      	adds	r3, #4
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7fe fc12 	bl	800a3b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb92:	d10a      	bne.n	800bbaa <prvAddCurrentTaskToDelayedList+0x3a>
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d007      	beq.n	800bbaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb9a:	4b1a      	ldr	r3, [pc, #104]	; (800bc04 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	3304      	adds	r3, #4
 800bba0:	4619      	mov	r1, r3
 800bba2:	4819      	ldr	r0, [pc, #100]	; (800bc08 <prvAddCurrentTaskToDelayedList+0x98>)
 800bba4:	f7fe fba9 	bl	800a2fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bba8:	e026      	b.n	800bbf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4413      	add	r3, r2
 800bbb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbb2:	4b14      	ldr	r3, [pc, #80]	; (800bc04 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbba:	68ba      	ldr	r2, [r7, #8]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d209      	bcs.n	800bbd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbc2:	4b12      	ldr	r3, [pc, #72]	; (800bc0c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	4b0f      	ldr	r3, [pc, #60]	; (800bc04 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	3304      	adds	r3, #4
 800bbcc:	4619      	mov	r1, r3
 800bbce:	4610      	mov	r0, r2
 800bbd0:	f7fe fbb6 	bl	800a340 <vListInsert>
}
 800bbd4:	e010      	b.n	800bbf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbd6:	4b0e      	ldr	r3, [pc, #56]	; (800bc10 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	4b0a      	ldr	r3, [pc, #40]	; (800bc04 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	3304      	adds	r3, #4
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	4610      	mov	r0, r2
 800bbe4:	f7fe fbac 	bl	800a340 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bbe8:	4b0a      	ldr	r3, [pc, #40]	; (800bc14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d202      	bcs.n	800bbf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bbf2:	4a08      	ldr	r2, [pc, #32]	; (800bc14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	6013      	str	r3, [r2, #0]
}
 800bbf8:	bf00      	nop
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	2000148c 	.word	0x2000148c
 800bc04:	20000fb4 	.word	0x20000fb4
 800bc08:	20001474 	.word	0x20001474
 800bc0c:	20001444 	.word	0x20001444
 800bc10:	20001440 	.word	0x20001440
 800bc14:	200014a8 	.word	0x200014a8

0800bc18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b08a      	sub	sp, #40	; 0x28
 800bc1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc22:	f000 facb 	bl	800c1bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc26:	4b1c      	ldr	r3, [pc, #112]	; (800bc98 <xTimerCreateTimerTask+0x80>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d021      	beq.n	800bc72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc32:	2300      	movs	r3, #0
 800bc34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc36:	1d3a      	adds	r2, r7, #4
 800bc38:	f107 0108 	add.w	r1, r7, #8
 800bc3c:	f107 030c 	add.w	r3, r7, #12
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fe fb15 	bl	800a270 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc46:	6879      	ldr	r1, [r7, #4]
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	9202      	str	r2, [sp, #8]
 800bc4e:	9301      	str	r3, [sp, #4]
 800bc50:	2302      	movs	r3, #2
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	2300      	movs	r3, #0
 800bc56:	460a      	mov	r2, r1
 800bc58:	4910      	ldr	r1, [pc, #64]	; (800bc9c <xTimerCreateTimerTask+0x84>)
 800bc5a:	4811      	ldr	r0, [pc, #68]	; (800bca0 <xTimerCreateTimerTask+0x88>)
 800bc5c:	f7ff f8b6 	bl	800adcc <xTaskCreateStatic>
 800bc60:	4603      	mov	r3, r0
 800bc62:	4a10      	ldr	r2, [pc, #64]	; (800bca4 <xTimerCreateTimerTask+0x8c>)
 800bc64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc66:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <xTimerCreateTimerTask+0x8c>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d001      	beq.n	800bc72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10a      	bne.n	800bc8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	613b      	str	r3, [r7, #16]
}
 800bc8a:	bf00      	nop
 800bc8c:	e7fe      	b.n	800bc8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bc8e:	697b      	ldr	r3, [r7, #20]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3718      	adds	r7, #24
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	200014e4 	.word	0x200014e4
 800bc9c:	0800dd68 	.word	0x0800dd68
 800bca0:	0800bdc5 	.word	0x0800bdc5
 800bca4:	200014e8 	.word	0x200014e8

0800bca8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b08a      	sub	sp, #40	; 0x28
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10a      	bne.n	800bcd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	623b      	str	r3, [r7, #32]
}
 800bcd2:	bf00      	nop
 800bcd4:	e7fe      	b.n	800bcd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bcd6:	4b1a      	ldr	r3, [pc, #104]	; (800bd40 <xTimerGenericCommand+0x98>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d02a      	beq.n	800bd34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	2b05      	cmp	r3, #5
 800bcee:	dc18      	bgt.n	800bd22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bcf0:	f7ff feb2 	bl	800ba58 <xTaskGetSchedulerState>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	d109      	bne.n	800bd0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bcfa:	4b11      	ldr	r3, [pc, #68]	; (800bd40 <xTimerGenericCommand+0x98>)
 800bcfc:	6818      	ldr	r0, [r3, #0]
 800bcfe:	f107 0110 	add.w	r1, r7, #16
 800bd02:	2300      	movs	r3, #0
 800bd04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd06:	f7fe fc7f 	bl	800a608 <xQueueGenericSend>
 800bd0a:	6278      	str	r0, [r7, #36]	; 0x24
 800bd0c:	e012      	b.n	800bd34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd0e:	4b0c      	ldr	r3, [pc, #48]	; (800bd40 <xTimerGenericCommand+0x98>)
 800bd10:	6818      	ldr	r0, [r3, #0]
 800bd12:	f107 0110 	add.w	r1, r7, #16
 800bd16:	2300      	movs	r3, #0
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f7fe fc75 	bl	800a608 <xQueueGenericSend>
 800bd1e:	6278      	str	r0, [r7, #36]	; 0x24
 800bd20:	e008      	b.n	800bd34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd22:	4b07      	ldr	r3, [pc, #28]	; (800bd40 <xTimerGenericCommand+0x98>)
 800bd24:	6818      	ldr	r0, [r3, #0]
 800bd26:	f107 0110 	add.w	r1, r7, #16
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	683a      	ldr	r2, [r7, #0]
 800bd2e:	f7fe fd69 	bl	800a804 <xQueueGenericSendFromISR>
 800bd32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3728      	adds	r7, #40	; 0x28
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	200014e4 	.word	0x200014e4

0800bd44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	af02      	add	r7, sp, #8
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd4e:	4b1c      	ldr	r3, [pc, #112]	; (800bdc0 <prvProcessExpiredTimer+0x7c>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7fe fb27 	bl	800a3b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	69db      	ldr	r3, [r3, #28]
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d122      	bne.n	800bdb0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	699a      	ldr	r2, [r3, #24]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	18d1      	adds	r1, r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	683a      	ldr	r2, [r7, #0]
 800bd76:	6978      	ldr	r0, [r7, #20]
 800bd78:	f000 f8c8 	bl	800bf0c <prvInsertTimerInActiveList>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d016      	beq.n	800bdb0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd82:	2300      	movs	r3, #0
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	2300      	movs	r3, #0
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	6978      	ldr	r0, [r7, #20]
 800bd8e:	f7ff ff8b 	bl	800bca8 <xTimerGenericCommand>
 800bd92:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d10a      	bne.n	800bdb0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800bd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9e:	f383 8811 	msr	BASEPRI, r3
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	f3bf 8f4f 	dsb	sy
 800bdaa:	60fb      	str	r3, [r7, #12]
}
 800bdac:	bf00      	nop
 800bdae:	e7fe      	b.n	800bdae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb4:	6978      	ldr	r0, [r7, #20]
 800bdb6:	4798      	blx	r3
}
 800bdb8:	bf00      	nop
 800bdba:	3718      	adds	r7, #24
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	200014dc 	.word	0x200014dc

0800bdc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bdcc:	f107 0308 	add.w	r3, r7, #8
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f000 f857 	bl	800be84 <prvGetNextExpireTime>
 800bdd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	4619      	mov	r1, r3
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f000 f803 	bl	800bde8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bde2:	f000 f8d5 	bl	800bf90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bde6:	e7f1      	b.n	800bdcc <prvTimerTask+0x8>

0800bde8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bdf2:	f7ff fa3f 	bl	800b274 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdf6:	f107 0308 	add.w	r3, r7, #8
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f000 f866 	bl	800becc <prvSampleTimeNow>
 800be00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d130      	bne.n	800be6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10a      	bne.n	800be24 <prvProcessTimerOrBlockTask+0x3c>
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	429a      	cmp	r2, r3
 800be14:	d806      	bhi.n	800be24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be16:	f7ff fa3b 	bl	800b290 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be1a:	68f9      	ldr	r1, [r7, #12]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f7ff ff91 	bl	800bd44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be22:	e024      	b.n	800be6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d008      	beq.n	800be3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be2a:	4b13      	ldr	r3, [pc, #76]	; (800be78 <prvProcessTimerOrBlockTask+0x90>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	bf0c      	ite	eq
 800be34:	2301      	moveq	r3, #1
 800be36:	2300      	movne	r3, #0
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be3c:	4b0f      	ldr	r3, [pc, #60]	; (800be7c <prvProcessTimerOrBlockTask+0x94>)
 800be3e:	6818      	ldr	r0, [r3, #0]
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	1ad3      	subs	r3, r2, r3
 800be46:	683a      	ldr	r2, [r7, #0]
 800be48:	4619      	mov	r1, r3
 800be4a:	f7fe ff8b 	bl	800ad64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be4e:	f7ff fa1f 	bl	800b290 <xTaskResumeAll>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d10a      	bne.n	800be6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be58:	4b09      	ldr	r3, [pc, #36]	; (800be80 <prvProcessTimerOrBlockTask+0x98>)
 800be5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be5e:	601a      	str	r2, [r3, #0]
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	f3bf 8f6f 	isb	sy
}
 800be68:	e001      	b.n	800be6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800be6a:	f7ff fa11 	bl	800b290 <xTaskResumeAll>
}
 800be6e:	bf00      	nop
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	200014e0 	.word	0x200014e0
 800be7c:	200014e4 	.word	0x200014e4
 800be80:	e000ed04 	.word	0xe000ed04

0800be84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800be8c:	4b0e      	ldr	r3, [pc, #56]	; (800bec8 <prvGetNextExpireTime+0x44>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	bf0c      	ite	eq
 800be96:	2301      	moveq	r3, #1
 800be98:	2300      	movne	r3, #0
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	461a      	mov	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d105      	bne.n	800beb6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800beaa:	4b07      	ldr	r3, [pc, #28]	; (800bec8 <prvGetNextExpireTime+0x44>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	60fb      	str	r3, [r7, #12]
 800beb4:	e001      	b.n	800beba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800beb6:	2300      	movs	r3, #0
 800beb8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800beba:	68fb      	ldr	r3, [r7, #12]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3714      	adds	r7, #20
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bc80      	pop	{r7}
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	200014dc 	.word	0x200014dc

0800becc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bed4:	f7ff fa7a 	bl	800b3cc <xTaskGetTickCount>
 800bed8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800beda:	4b0b      	ldr	r3, [pc, #44]	; (800bf08 <prvSampleTimeNow+0x3c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68fa      	ldr	r2, [r7, #12]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d205      	bcs.n	800bef0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bee4:	f000 f908 	bl	800c0f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	601a      	str	r2, [r3, #0]
 800beee:	e002      	b.n	800bef6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bef6:	4a04      	ldr	r2, [pc, #16]	; (800bf08 <prvSampleTimeNow+0x3c>)
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800befc:	68fb      	ldr	r3, [r7, #12]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	200014ec 	.word	0x200014ec

0800bf0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
 800bf18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	68ba      	ldr	r2, [r7, #8]
 800bf22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d812      	bhi.n	800bf58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	1ad2      	subs	r2, r2, r3
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d302      	bcc.n	800bf46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf40:	2301      	movs	r3, #1
 800bf42:	617b      	str	r3, [r7, #20]
 800bf44:	e01b      	b.n	800bf7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf46:	4b10      	ldr	r3, [pc, #64]	; (800bf88 <prvInsertTimerInActiveList+0x7c>)
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	4619      	mov	r1, r3
 800bf50:	4610      	mov	r0, r2
 800bf52:	f7fe f9f5 	bl	800a340 <vListInsert>
 800bf56:	e012      	b.n	800bf7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d206      	bcs.n	800bf6e <prvInsertTimerInActiveList+0x62>
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d302      	bcc.n	800bf6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	e007      	b.n	800bf7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf6e:	4b07      	ldr	r3, [pc, #28]	; (800bf8c <prvInsertTimerInActiveList+0x80>)
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	3304      	adds	r3, #4
 800bf76:	4619      	mov	r1, r3
 800bf78:	4610      	mov	r0, r2
 800bf7a:	f7fe f9e1 	bl	800a340 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bf7e:	697b      	ldr	r3, [r7, #20]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3718      	adds	r7, #24
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	200014e0 	.word	0x200014e0
 800bf8c:	200014dc 	.word	0x200014dc

0800bf90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b08e      	sub	sp, #56	; 0x38
 800bf94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf96:	e09d      	b.n	800c0d4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	da18      	bge.n	800bfd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bf9e:	1d3b      	adds	r3, r7, #4
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10a      	bne.n	800bfc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	61fb      	str	r3, [r7, #28]
}
 800bfbc:	bf00      	nop
 800bfbe:	e7fe      	b.n	800bfbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfc6:	6850      	ldr	r0, [r2, #4]
 800bfc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfca:	6892      	ldr	r2, [r2, #8]
 800bfcc:	4611      	mov	r1, r2
 800bfce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	db7e      	blt.n	800c0d4 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfdc:	695b      	ldr	r3, [r3, #20]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d004      	beq.n	800bfec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fe f9e2 	bl	800a3b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bfec:	463b      	mov	r3, r7
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7ff ff6c 	bl	800becc <prvSampleTimeNow>
 800bff4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b09      	cmp	r3, #9
 800bffa:	d86a      	bhi.n	800c0d2 <prvProcessReceivedCommands+0x142>
 800bffc:	a201      	add	r2, pc, #4	; (adr r2, 800c004 <prvProcessReceivedCommands+0x74>)
 800bffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c002:	bf00      	nop
 800c004:	0800c02d 	.word	0x0800c02d
 800c008:	0800c02d 	.word	0x0800c02d
 800c00c:	0800c02d 	.word	0x0800c02d
 800c010:	0800c0d5 	.word	0x0800c0d5
 800c014:	0800c089 	.word	0x0800c089
 800c018:	0800c0c1 	.word	0x0800c0c1
 800c01c:	0800c02d 	.word	0x0800c02d
 800c020:	0800c02d 	.word	0x0800c02d
 800c024:	0800c0d5 	.word	0x0800c0d5
 800c028:	0800c089 	.word	0x0800c089
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c030:	699b      	ldr	r3, [r3, #24]
 800c032:	18d1      	adds	r1, r2, r3
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c03a:	f7ff ff67 	bl	800bf0c <prvInsertTimerInActiveList>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d047      	beq.n	800c0d4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c04a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04e:	69db      	ldr	r3, [r3, #28]
 800c050:	2b01      	cmp	r3, #1
 800c052:	d13f      	bne.n	800c0d4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c054:	68ba      	ldr	r2, [r7, #8]
 800c056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c058:	699b      	ldr	r3, [r3, #24]
 800c05a:	441a      	add	r2, r3
 800c05c:	2300      	movs	r3, #0
 800c05e:	9300      	str	r3, [sp, #0]
 800c060:	2300      	movs	r3, #0
 800c062:	2100      	movs	r1, #0
 800c064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c066:	f7ff fe1f 	bl	800bca8 <xTimerGenericCommand>
 800c06a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c06c:	6a3b      	ldr	r3, [r7, #32]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d130      	bne.n	800c0d4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800c072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	61bb      	str	r3, [r7, #24]
}
 800c084:	bf00      	nop
 800c086:	e7fe      	b.n	800c086 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c088:	68ba      	ldr	r2, [r7, #8]
 800c08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c090:	699b      	ldr	r3, [r3, #24]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10a      	bne.n	800c0ac <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800c096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09a:	f383 8811 	msr	BASEPRI, r3
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	617b      	str	r3, [r7, #20]
}
 800c0a8:	bf00      	nop
 800c0aa:	e7fe      	b.n	800c0aa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ae:	699a      	ldr	r2, [r3, #24]
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b2:	18d1      	adds	r1, r2, r3
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0ba:	f7ff ff27 	bl	800bf0c <prvInsertTimerInActiveList>
					break;
 800c0be:	e009      	b.n	800c0d4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d104      	bne.n	800c0d4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800c0ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0cc:	f000 fb6a 	bl	800c7a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c0d0:	e000      	b.n	800c0d4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800c0d2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0d4:	4b07      	ldr	r3, [pc, #28]	; (800c0f4 <prvProcessReceivedCommands+0x164>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	1d39      	adds	r1, r7, #4
 800c0da:	2200      	movs	r2, #0
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fe fc29 	bl	800a934 <xQueueReceive>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f47f af57 	bne.w	800bf98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	3730      	adds	r7, #48	; 0x30
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	200014e4 	.word	0x200014e4

0800c0f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b088      	sub	sp, #32
 800c0fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0fe:	e045      	b.n	800c18c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c100:	4b2c      	ldr	r3, [pc, #176]	; (800c1b4 <prvSwitchTimerLists+0xbc>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c10a:	4b2a      	ldr	r3, [pc, #168]	; (800c1b4 <prvSwitchTimerLists+0xbc>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	3304      	adds	r3, #4
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fe f949 	bl	800a3b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	69db      	ldr	r3, [r3, #28]
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d12e      	bne.n	800c18c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	699b      	ldr	r3, [r3, #24]
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	4413      	add	r3, r2
 800c136:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c138:	68ba      	ldr	r2, [r7, #8]
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d90e      	bls.n	800c15e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c14c:	4b19      	ldr	r3, [pc, #100]	; (800c1b4 <prvSwitchTimerLists+0xbc>)
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	3304      	adds	r3, #4
 800c154:	4619      	mov	r1, r3
 800c156:	4610      	mov	r0, r2
 800c158:	f7fe f8f2 	bl	800a340 <vListInsert>
 800c15c:	e016      	b.n	800c18c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c15e:	2300      	movs	r3, #0
 800c160:	9300      	str	r3, [sp, #0]
 800c162:	2300      	movs	r3, #0
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	2100      	movs	r1, #0
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f7ff fd9d 	bl	800bca8 <xTimerGenericCommand>
 800c16e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10a      	bne.n	800c18c <prvSwitchTimerLists+0x94>
	__asm volatile
 800c176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17a:	f383 8811 	msr	BASEPRI, r3
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	603b      	str	r3, [r7, #0]
}
 800c188:	bf00      	nop
 800c18a:	e7fe      	b.n	800c18a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c18c:	4b09      	ldr	r3, [pc, #36]	; (800c1b4 <prvSwitchTimerLists+0xbc>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1b4      	bne.n	800c100 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c196:	4b07      	ldr	r3, [pc, #28]	; (800c1b4 <prvSwitchTimerLists+0xbc>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c19c:	4b06      	ldr	r3, [pc, #24]	; (800c1b8 <prvSwitchTimerLists+0xc0>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a04      	ldr	r2, [pc, #16]	; (800c1b4 <prvSwitchTimerLists+0xbc>)
 800c1a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c1a4:	4a04      	ldr	r2, [pc, #16]	; (800c1b8 <prvSwitchTimerLists+0xc0>)
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	6013      	str	r3, [r2, #0]
}
 800c1aa:	bf00      	nop
 800c1ac:	3718      	adds	r7, #24
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	200014dc 	.word	0x200014dc
 800c1b8:	200014e0 	.word	0x200014e0

0800c1bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c1c2:	f000 f92b 	bl	800c41c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c1c6:	4b15      	ldr	r3, [pc, #84]	; (800c21c <prvCheckForValidListAndQueue+0x60>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d120      	bne.n	800c210 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c1ce:	4814      	ldr	r0, [pc, #80]	; (800c220 <prvCheckForValidListAndQueue+0x64>)
 800c1d0:	f7fe f868 	bl	800a2a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c1d4:	4813      	ldr	r0, [pc, #76]	; (800c224 <prvCheckForValidListAndQueue+0x68>)
 800c1d6:	f7fe f865 	bl	800a2a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c1da:	4b13      	ldr	r3, [pc, #76]	; (800c228 <prvCheckForValidListAndQueue+0x6c>)
 800c1dc:	4a10      	ldr	r2, [pc, #64]	; (800c220 <prvCheckForValidListAndQueue+0x64>)
 800c1de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c1e0:	4b12      	ldr	r3, [pc, #72]	; (800c22c <prvCheckForValidListAndQueue+0x70>)
 800c1e2:	4a10      	ldr	r2, [pc, #64]	; (800c224 <prvCheckForValidListAndQueue+0x68>)
 800c1e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	4b11      	ldr	r3, [pc, #68]	; (800c230 <prvCheckForValidListAndQueue+0x74>)
 800c1ec:	4a11      	ldr	r2, [pc, #68]	; (800c234 <prvCheckForValidListAndQueue+0x78>)
 800c1ee:	2110      	movs	r1, #16
 800c1f0:	200a      	movs	r0, #10
 800c1f2:	f7fe f96f 	bl	800a4d4 <xQueueGenericCreateStatic>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	4a08      	ldr	r2, [pc, #32]	; (800c21c <prvCheckForValidListAndQueue+0x60>)
 800c1fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c1fc:	4b07      	ldr	r3, [pc, #28]	; (800c21c <prvCheckForValidListAndQueue+0x60>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d005      	beq.n	800c210 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c204:	4b05      	ldr	r3, [pc, #20]	; (800c21c <prvCheckForValidListAndQueue+0x60>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	490b      	ldr	r1, [pc, #44]	; (800c238 <prvCheckForValidListAndQueue+0x7c>)
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fe fd82 	bl	800ad14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c210:	f000 f934 	bl	800c47c <vPortExitCritical>
}
 800c214:	bf00      	nop
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	200014e4 	.word	0x200014e4
 800c220:	200014b4 	.word	0x200014b4
 800c224:	200014c8 	.word	0x200014c8
 800c228:	200014dc 	.word	0x200014dc
 800c22c:	200014e0 	.word	0x200014e0
 800c230:	20001590 	.word	0x20001590
 800c234:	200014f0 	.word	0x200014f0
 800c238:	0800dd70 	.word	0x0800dd70

0800c23c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c23c:	b480      	push	{r7}
 800c23e:	b085      	sub	sp, #20
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	3b04      	subs	r3, #4
 800c24c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	3b04      	subs	r3, #4
 800c25a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	f023 0201 	bic.w	r2, r3, #1
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3b04      	subs	r3, #4
 800c26a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c26c:	4a08      	ldr	r2, [pc, #32]	; (800c290 <pxPortInitialiseStack+0x54>)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	3b14      	subs	r3, #20
 800c276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	3b20      	subs	r3, #32
 800c282:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c284:	68fb      	ldr	r3, [r7, #12]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3714      	adds	r7, #20
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bc80      	pop	{r7}
 800c28e:	4770      	bx	lr
 800c290:	0800c295 	.word	0x0800c295

0800c294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c294:	b480      	push	{r7}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c29a:	2300      	movs	r3, #0
 800c29c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c29e:	4b12      	ldr	r3, [pc, #72]	; (800c2e8 <prvTaskExitError+0x54>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a6:	d00a      	beq.n	800c2be <prvTaskExitError+0x2a>
	__asm volatile
 800c2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ac:	f383 8811 	msr	BASEPRI, r3
 800c2b0:	f3bf 8f6f 	isb	sy
 800c2b4:	f3bf 8f4f 	dsb	sy
 800c2b8:	60fb      	str	r3, [r7, #12]
}
 800c2ba:	bf00      	nop
 800c2bc:	e7fe      	b.n	800c2bc <prvTaskExitError+0x28>
	__asm volatile
 800c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	60bb      	str	r3, [r7, #8]
}
 800c2d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c2d2:	bf00      	nop
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d0fc      	beq.n	800c2d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c2da:	bf00      	nop
 800c2dc:	bf00      	nop
 800c2de:	3714      	adds	r7, #20
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bc80      	pop	{r7}
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	2000011c 	.word	0x2000011c
 800c2ec:	00000000 	.word	0x00000000

0800c2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c2f0:	4b07      	ldr	r3, [pc, #28]	; (800c310 <pxCurrentTCBConst2>)
 800c2f2:	6819      	ldr	r1, [r3, #0]
 800c2f4:	6808      	ldr	r0, [r1, #0]
 800c2f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c2fa:	f380 8809 	msr	PSP, r0
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f04f 0000 	mov.w	r0, #0
 800c306:	f380 8811 	msr	BASEPRI, r0
 800c30a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c30e:	4770      	bx	lr

0800c310 <pxCurrentTCBConst2>:
 800c310:	20000fb4 	.word	0x20000fb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c314:	bf00      	nop
 800c316:	bf00      	nop

0800c318 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c318:	4806      	ldr	r0, [pc, #24]	; (800c334 <prvPortStartFirstTask+0x1c>)
 800c31a:	6800      	ldr	r0, [r0, #0]
 800c31c:	6800      	ldr	r0, [r0, #0]
 800c31e:	f380 8808 	msr	MSP, r0
 800c322:	b662      	cpsie	i
 800c324:	b661      	cpsie	f
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	df00      	svc	0
 800c330:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c332:	bf00      	nop
 800c334:	e000ed08 	.word	0xe000ed08

0800c338 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c33e:	4b32      	ldr	r3, [pc, #200]	; (800c408 <xPortStartScheduler+0xd0>)
 800c340:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	b2db      	uxtb	r3, r3
 800c348:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	22ff      	movs	r2, #255	; 0xff
 800c34e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	b2db      	uxtb	r3, r3
 800c356:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c358:	78fb      	ldrb	r3, [r7, #3]
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c360:	b2da      	uxtb	r2, r3
 800c362:	4b2a      	ldr	r3, [pc, #168]	; (800c40c <xPortStartScheduler+0xd4>)
 800c364:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c366:	4b2a      	ldr	r3, [pc, #168]	; (800c410 <xPortStartScheduler+0xd8>)
 800c368:	2207      	movs	r2, #7
 800c36a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c36c:	e009      	b.n	800c382 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c36e:	4b28      	ldr	r3, [pc, #160]	; (800c410 <xPortStartScheduler+0xd8>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	3b01      	subs	r3, #1
 800c374:	4a26      	ldr	r2, [pc, #152]	; (800c410 <xPortStartScheduler+0xd8>)
 800c376:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c378:	78fb      	ldrb	r3, [r7, #3]
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	005b      	lsls	r3, r3, #1
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c382:	78fb      	ldrb	r3, [r7, #3]
 800c384:	b2db      	uxtb	r3, r3
 800c386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c38a:	2b80      	cmp	r3, #128	; 0x80
 800c38c:	d0ef      	beq.n	800c36e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c38e:	4b20      	ldr	r3, [pc, #128]	; (800c410 <xPortStartScheduler+0xd8>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f1c3 0307 	rsb	r3, r3, #7
 800c396:	2b04      	cmp	r3, #4
 800c398:	d00a      	beq.n	800c3b0 <xPortStartScheduler+0x78>
	__asm volatile
 800c39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39e:	f383 8811 	msr	BASEPRI, r3
 800c3a2:	f3bf 8f6f 	isb	sy
 800c3a6:	f3bf 8f4f 	dsb	sy
 800c3aa:	60bb      	str	r3, [r7, #8]
}
 800c3ac:	bf00      	nop
 800c3ae:	e7fe      	b.n	800c3ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c3b0:	4b17      	ldr	r3, [pc, #92]	; (800c410 <xPortStartScheduler+0xd8>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	021b      	lsls	r3, r3, #8
 800c3b6:	4a16      	ldr	r2, [pc, #88]	; (800c410 <xPortStartScheduler+0xd8>)
 800c3b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c3ba:	4b15      	ldr	r3, [pc, #84]	; (800c410 <xPortStartScheduler+0xd8>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c3c2:	4a13      	ldr	r2, [pc, #76]	; (800c410 <xPortStartScheduler+0xd8>)
 800c3c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3ce:	4b11      	ldr	r3, [pc, #68]	; (800c414 <xPortStartScheduler+0xdc>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a10      	ldr	r2, [pc, #64]	; (800c414 <xPortStartScheduler+0xdc>)
 800c3d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c3d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3da:	4b0e      	ldr	r3, [pc, #56]	; (800c414 <xPortStartScheduler+0xdc>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a0d      	ldr	r2, [pc, #52]	; (800c414 <xPortStartScheduler+0xdc>)
 800c3e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c3e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3e6:	f000 f8b9 	bl	800c55c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3ea:	4b0b      	ldr	r3, [pc, #44]	; (800c418 <xPortStartScheduler+0xe0>)
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c3f0:	f7ff ff92 	bl	800c318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c3f4:	f7ff f8b6 	bl	800b564 <vTaskSwitchContext>
	prvTaskExitError();
 800c3f8:	f7ff ff4c 	bl	800c294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3fc:	2300      	movs	r3, #0
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	e000e400 	.word	0xe000e400
 800c40c:	200015e0 	.word	0x200015e0
 800c410:	200015e4 	.word	0x200015e4
 800c414:	e000ed20 	.word	0xe000ed20
 800c418:	2000011c 	.word	0x2000011c

0800c41c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
	__asm volatile
 800c422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c426:	f383 8811 	msr	BASEPRI, r3
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	607b      	str	r3, [r7, #4]
}
 800c434:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c436:	4b0f      	ldr	r3, [pc, #60]	; (800c474 <vPortEnterCritical+0x58>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	3301      	adds	r3, #1
 800c43c:	4a0d      	ldr	r2, [pc, #52]	; (800c474 <vPortEnterCritical+0x58>)
 800c43e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c440:	4b0c      	ldr	r3, [pc, #48]	; (800c474 <vPortEnterCritical+0x58>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2b01      	cmp	r3, #1
 800c446:	d10f      	bne.n	800c468 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c448:	4b0b      	ldr	r3, [pc, #44]	; (800c478 <vPortEnterCritical+0x5c>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00a      	beq.n	800c468 <vPortEnterCritical+0x4c>
	__asm volatile
 800c452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c456:	f383 8811 	msr	BASEPRI, r3
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	603b      	str	r3, [r7, #0]
}
 800c464:	bf00      	nop
 800c466:	e7fe      	b.n	800c466 <vPortEnterCritical+0x4a>
	}
}
 800c468:	bf00      	nop
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bc80      	pop	{r7}
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	2000011c 	.word	0x2000011c
 800c478:	e000ed04 	.word	0xe000ed04

0800c47c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c482:	4b11      	ldr	r3, [pc, #68]	; (800c4c8 <vPortExitCritical+0x4c>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d10a      	bne.n	800c4a0 <vPortExitCritical+0x24>
	__asm volatile
 800c48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48e:	f383 8811 	msr	BASEPRI, r3
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	607b      	str	r3, [r7, #4]
}
 800c49c:	bf00      	nop
 800c49e:	e7fe      	b.n	800c49e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c4a0:	4b09      	ldr	r3, [pc, #36]	; (800c4c8 <vPortExitCritical+0x4c>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	4a08      	ldr	r2, [pc, #32]	; (800c4c8 <vPortExitCritical+0x4c>)
 800c4a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4aa:	4b07      	ldr	r3, [pc, #28]	; (800c4c8 <vPortExitCritical+0x4c>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d105      	bne.n	800c4be <vPortExitCritical+0x42>
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	f383 8811 	msr	BASEPRI, r3
}
 800c4bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4be:	bf00      	nop
 800c4c0:	370c      	adds	r7, #12
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bc80      	pop	{r7}
 800c4c6:	4770      	bx	lr
 800c4c8:	2000011c 	.word	0x2000011c
 800c4cc:	00000000 	.word	0x00000000

0800c4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c4d0:	f3ef 8009 	mrs	r0, PSP
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	4b0d      	ldr	r3, [pc, #52]	; (800c510 <pxCurrentTCBConst>)
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c4e0:	6010      	str	r0, [r2, #0]
 800c4e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c4e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c4ea:	f380 8811 	msr	BASEPRI, r0
 800c4ee:	f7ff f839 	bl	800b564 <vTaskSwitchContext>
 800c4f2:	f04f 0000 	mov.w	r0, #0
 800c4f6:	f380 8811 	msr	BASEPRI, r0
 800c4fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c4fe:	6819      	ldr	r1, [r3, #0]
 800c500:	6808      	ldr	r0, [r1, #0]
 800c502:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c506:	f380 8809 	msr	PSP, r0
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	4770      	bx	lr

0800c510 <pxCurrentTCBConst>:
 800c510:	20000fb4 	.word	0x20000fb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c514:	bf00      	nop
 800c516:	bf00      	nop

0800c518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
	__asm volatile
 800c51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	607b      	str	r3, [r7, #4]
}
 800c530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c532:	f7fe ff59 	bl	800b3e8 <xTaskIncrementTick>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d003      	beq.n	800c544 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c53c:	4b06      	ldr	r3, [pc, #24]	; (800c558 <SysTick_Handler+0x40>)
 800c53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c542:	601a      	str	r2, [r3, #0]
 800c544:	2300      	movs	r3, #0
 800c546:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	f383 8811 	msr	BASEPRI, r3
}
 800c54e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c550:	bf00      	nop
 800c552:	3708      	adds	r7, #8
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	e000ed04 	.word	0xe000ed04

0800c55c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c55c:	b480      	push	{r7}
 800c55e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c560:	4b0a      	ldr	r3, [pc, #40]	; (800c58c <vPortSetupTimerInterrupt+0x30>)
 800c562:	2200      	movs	r2, #0
 800c564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c566:	4b0a      	ldr	r3, [pc, #40]	; (800c590 <vPortSetupTimerInterrupt+0x34>)
 800c568:	2200      	movs	r2, #0
 800c56a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c56c:	4b09      	ldr	r3, [pc, #36]	; (800c594 <vPortSetupTimerInterrupt+0x38>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a09      	ldr	r2, [pc, #36]	; (800c598 <vPortSetupTimerInterrupt+0x3c>)
 800c572:	fba2 2303 	umull	r2, r3, r2, r3
 800c576:	099b      	lsrs	r3, r3, #6
 800c578:	4a08      	ldr	r2, [pc, #32]	; (800c59c <vPortSetupTimerInterrupt+0x40>)
 800c57a:	3b01      	subs	r3, #1
 800c57c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c57e:	4b03      	ldr	r3, [pc, #12]	; (800c58c <vPortSetupTimerInterrupt+0x30>)
 800c580:	2207      	movs	r2, #7
 800c582:	601a      	str	r2, [r3, #0]
}
 800c584:	bf00      	nop
 800c586:	46bd      	mov	sp, r7
 800c588:	bc80      	pop	{r7}
 800c58a:	4770      	bx	lr
 800c58c:	e000e010 	.word	0xe000e010
 800c590:	e000e018 	.word	0xe000e018
 800c594:	20000000 	.word	0x20000000
 800c598:	10624dd3 	.word	0x10624dd3
 800c59c:	e000e014 	.word	0xe000e014

0800c5a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c5a6:	f3ef 8305 	mrs	r3, IPSR
 800c5aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2b0f      	cmp	r3, #15
 800c5b0:	d914      	bls.n	800c5dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5b2:	4a16      	ldr	r2, [pc, #88]	; (800c60c <vPortValidateInterruptPriority+0x6c>)
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5bc:	4b14      	ldr	r3, [pc, #80]	; (800c610 <vPortValidateInterruptPriority+0x70>)
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	7afa      	ldrb	r2, [r7, #11]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d20a      	bcs.n	800c5dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ca:	f383 8811 	msr	BASEPRI, r3
 800c5ce:	f3bf 8f6f 	isb	sy
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	607b      	str	r3, [r7, #4]
}
 800c5d8:	bf00      	nop
 800c5da:	e7fe      	b.n	800c5da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5dc:	4b0d      	ldr	r3, [pc, #52]	; (800c614 <vPortValidateInterruptPriority+0x74>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c5e4:	4b0c      	ldr	r3, [pc, #48]	; (800c618 <vPortValidateInterruptPriority+0x78>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d90a      	bls.n	800c602 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	603b      	str	r3, [r7, #0]
}
 800c5fe:	bf00      	nop
 800c600:	e7fe      	b.n	800c600 <vPortValidateInterruptPriority+0x60>
	}
 800c602:	bf00      	nop
 800c604:	3714      	adds	r7, #20
 800c606:	46bd      	mov	sp, r7
 800c608:	bc80      	pop	{r7}
 800c60a:	4770      	bx	lr
 800c60c:	e000e3f0 	.word	0xe000e3f0
 800c610:	200015e0 	.word	0x200015e0
 800c614:	e000ed0c 	.word	0xe000ed0c
 800c618:	200015e4 	.word	0x200015e4

0800c61c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b08a      	sub	sp, #40	; 0x28
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c624:	2300      	movs	r3, #0
 800c626:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c628:	f7fe fe24 	bl	800b274 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c62c:	4b58      	ldr	r3, [pc, #352]	; (800c790 <pvPortMalloc+0x174>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c634:	f000 f910 	bl	800c858 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c638:	4b56      	ldr	r3, [pc, #344]	; (800c794 <pvPortMalloc+0x178>)
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4013      	ands	r3, r2
 800c640:	2b00      	cmp	r3, #0
 800c642:	f040 808e 	bne.w	800c762 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d01d      	beq.n	800c688 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c64c:	2208      	movs	r2, #8
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4413      	add	r3, r2
 800c652:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f003 0307 	and.w	r3, r3, #7
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d014      	beq.n	800c688 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f023 0307 	bic.w	r3, r3, #7
 800c664:	3308      	adds	r3, #8
 800c666:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f003 0307 	and.w	r3, r3, #7
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00a      	beq.n	800c688 <pvPortMalloc+0x6c>
	__asm volatile
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	617b      	str	r3, [r7, #20]
}
 800c684:	bf00      	nop
 800c686:	e7fe      	b.n	800c686 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d069      	beq.n	800c762 <pvPortMalloc+0x146>
 800c68e:	4b42      	ldr	r3, [pc, #264]	; (800c798 <pvPortMalloc+0x17c>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	429a      	cmp	r2, r3
 800c696:	d864      	bhi.n	800c762 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c698:	4b40      	ldr	r3, [pc, #256]	; (800c79c <pvPortMalloc+0x180>)
 800c69a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c69c:	4b3f      	ldr	r3, [pc, #252]	; (800c79c <pvPortMalloc+0x180>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6a2:	e004      	b.n	800c6ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d903      	bls.n	800c6c0 <pvPortMalloc+0xa4>
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d1f1      	bne.n	800c6a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6c0:	4b33      	ldr	r3, [pc, #204]	; (800c790 <pvPortMalloc+0x174>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d04b      	beq.n	800c762 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2208      	movs	r2, #8
 800c6d0:	4413      	add	r3, r2
 800c6d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
 800c6da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6de:	685a      	ldr	r2, [r3, #4]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	1ad2      	subs	r2, r2, r3
 800c6e4:	2308      	movs	r3, #8
 800c6e6:	005b      	lsls	r3, r3, #1
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d91f      	bls.n	800c72c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	f003 0307 	and.w	r3, r3, #7
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00a      	beq.n	800c714 <pvPortMalloc+0xf8>
	__asm volatile
 800c6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	613b      	str	r3, [r7, #16]
}
 800c710:	bf00      	nop
 800c712:	e7fe      	b.n	800c712 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c716:	685a      	ldr	r2, [r3, #4]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	1ad2      	subs	r2, r2, r3
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c726:	69b8      	ldr	r0, [r7, #24]
 800c728:	f000 f8f8 	bl	800c91c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c72c:	4b1a      	ldr	r3, [pc, #104]	; (800c798 <pvPortMalloc+0x17c>)
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	1ad3      	subs	r3, r2, r3
 800c736:	4a18      	ldr	r2, [pc, #96]	; (800c798 <pvPortMalloc+0x17c>)
 800c738:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c73a:	4b17      	ldr	r3, [pc, #92]	; (800c798 <pvPortMalloc+0x17c>)
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	4b18      	ldr	r3, [pc, #96]	; (800c7a0 <pvPortMalloc+0x184>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	429a      	cmp	r2, r3
 800c744:	d203      	bcs.n	800c74e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c746:	4b14      	ldr	r3, [pc, #80]	; (800c798 <pvPortMalloc+0x17c>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a15      	ldr	r2, [pc, #84]	; (800c7a0 <pvPortMalloc+0x184>)
 800c74c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c750:	685a      	ldr	r2, [r3, #4]
 800c752:	4b10      	ldr	r3, [pc, #64]	; (800c794 <pvPortMalloc+0x178>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	431a      	orrs	r2, r3
 800c758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75e:	2200      	movs	r2, #0
 800c760:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c762:	f7fe fd95 	bl	800b290 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	f003 0307 	and.w	r3, r3, #7
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00a      	beq.n	800c786 <pvPortMalloc+0x16a>
	__asm volatile
 800c770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c774:	f383 8811 	msr	BASEPRI, r3
 800c778:	f3bf 8f6f 	isb	sy
 800c77c:	f3bf 8f4f 	dsb	sy
 800c780:	60fb      	str	r3, [r7, #12]
}
 800c782:	bf00      	nop
 800c784:	e7fe      	b.n	800c784 <pvPortMalloc+0x168>
	return pvReturn;
 800c786:	69fb      	ldr	r3, [r7, #28]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3728      	adds	r7, #40	; 0x28
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	200021f0 	.word	0x200021f0
 800c794:	200021fc 	.word	0x200021fc
 800c798:	200021f4 	.word	0x200021f4
 800c79c:	200021e8 	.word	0x200021e8
 800c7a0:	200021f8 	.word	0x200021f8

0800c7a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b086      	sub	sp, #24
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d048      	beq.n	800c848 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7b6:	2308      	movs	r3, #8
 800c7b8:	425b      	negs	r3, r3
 800c7ba:	697a      	ldr	r2, [r7, #20]
 800c7bc:	4413      	add	r3, r2
 800c7be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	685a      	ldr	r2, [r3, #4]
 800c7c8:	4b21      	ldr	r3, [pc, #132]	; (800c850 <vPortFree+0xac>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4013      	ands	r3, r2
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d10a      	bne.n	800c7e8 <vPortFree+0x44>
	__asm volatile
 800c7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	60fb      	str	r3, [r7, #12]
}
 800c7e4:	bf00      	nop
 800c7e6:	e7fe      	b.n	800c7e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d00a      	beq.n	800c806 <vPortFree+0x62>
	__asm volatile
 800c7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f4:	f383 8811 	msr	BASEPRI, r3
 800c7f8:	f3bf 8f6f 	isb	sy
 800c7fc:	f3bf 8f4f 	dsb	sy
 800c800:	60bb      	str	r3, [r7, #8]
}
 800c802:	bf00      	nop
 800c804:	e7fe      	b.n	800c804 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	685a      	ldr	r2, [r3, #4]
 800c80a:	4b11      	ldr	r3, [pc, #68]	; (800c850 <vPortFree+0xac>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4013      	ands	r3, r2
 800c810:	2b00      	cmp	r3, #0
 800c812:	d019      	beq.n	800c848 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d115      	bne.n	800c848 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	685a      	ldr	r2, [r3, #4]
 800c820:	4b0b      	ldr	r3, [pc, #44]	; (800c850 <vPortFree+0xac>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	43db      	mvns	r3, r3
 800c826:	401a      	ands	r2, r3
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c82c:	f7fe fd22 	bl	800b274 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	685a      	ldr	r2, [r3, #4]
 800c834:	4b07      	ldr	r3, [pc, #28]	; (800c854 <vPortFree+0xb0>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4413      	add	r3, r2
 800c83a:	4a06      	ldr	r2, [pc, #24]	; (800c854 <vPortFree+0xb0>)
 800c83c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c83e:	6938      	ldr	r0, [r7, #16]
 800c840:	f000 f86c 	bl	800c91c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c844:	f7fe fd24 	bl	800b290 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c848:	bf00      	nop
 800c84a:	3718      	adds	r7, #24
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	200021fc 	.word	0x200021fc
 800c854:	200021f4 	.word	0x200021f4

0800c858 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c85e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c862:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c864:	4b27      	ldr	r3, [pc, #156]	; (800c904 <prvHeapInit+0xac>)
 800c866:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f003 0307 	and.w	r3, r3, #7
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d00c      	beq.n	800c88c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	3307      	adds	r3, #7
 800c876:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f023 0307 	bic.w	r3, r3, #7
 800c87e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	4a1f      	ldr	r2, [pc, #124]	; (800c904 <prvHeapInit+0xac>)
 800c888:	4413      	add	r3, r2
 800c88a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c890:	4a1d      	ldr	r2, [pc, #116]	; (800c908 <prvHeapInit+0xb0>)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c896:	4b1c      	ldr	r3, [pc, #112]	; (800c908 <prvHeapInit+0xb0>)
 800c898:	2200      	movs	r2, #0
 800c89a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8a4:	2208      	movs	r2, #8
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	1a9b      	subs	r3, r3, r2
 800c8aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f023 0307 	bic.w	r3, r3, #7
 800c8b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	4a15      	ldr	r2, [pc, #84]	; (800c90c <prvHeapInit+0xb4>)
 800c8b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8ba:	4b14      	ldr	r3, [pc, #80]	; (800c90c <prvHeapInit+0xb4>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8c2:	4b12      	ldr	r3, [pc, #72]	; (800c90c <prvHeapInit+0xb4>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	1ad2      	subs	r2, r2, r3
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8d8:	4b0c      	ldr	r3, [pc, #48]	; (800c90c <prvHeapInit+0xb4>)
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	4a0a      	ldr	r2, [pc, #40]	; (800c910 <prvHeapInit+0xb8>)
 800c8e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	4a09      	ldr	r2, [pc, #36]	; (800c914 <prvHeapInit+0xbc>)
 800c8ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8f0:	4b09      	ldr	r3, [pc, #36]	; (800c918 <prvHeapInit+0xc0>)
 800c8f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c8f6:	601a      	str	r2, [r3, #0]
}
 800c8f8:	bf00      	nop
 800c8fa:	3714      	adds	r7, #20
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bc80      	pop	{r7}
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	200015e8 	.word	0x200015e8
 800c908:	200021e8 	.word	0x200021e8
 800c90c:	200021f0 	.word	0x200021f0
 800c910:	200021f8 	.word	0x200021f8
 800c914:	200021f4 	.word	0x200021f4
 800c918:	200021fc 	.word	0x200021fc

0800c91c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c924:	4b27      	ldr	r3, [pc, #156]	; (800c9c4 <prvInsertBlockIntoFreeList+0xa8>)
 800c926:	60fb      	str	r3, [r7, #12]
 800c928:	e002      	b.n	800c930 <prvInsertBlockIntoFreeList+0x14>
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	60fb      	str	r3, [r7, #12]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	429a      	cmp	r2, r3
 800c938:	d8f7      	bhi.n	800c92a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	4413      	add	r3, r2
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d108      	bne.n	800c95e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	685a      	ldr	r2, [r3, #4]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	441a      	add	r2, r3
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	68ba      	ldr	r2, [r7, #8]
 800c968:	441a      	add	r2, r3
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d118      	bne.n	800c9a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681a      	ldr	r2, [r3, #0]
 800c976:	4b14      	ldr	r3, [pc, #80]	; (800c9c8 <prvInsertBlockIntoFreeList+0xac>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d00d      	beq.n	800c99a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	685a      	ldr	r2, [r3, #4]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	441a      	add	r2, r3
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	601a      	str	r2, [r3, #0]
 800c998:	e008      	b.n	800c9ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c99a:	4b0b      	ldr	r3, [pc, #44]	; (800c9c8 <prvInsertBlockIntoFreeList+0xac>)
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	601a      	str	r2, [r3, #0]
 800c9a2:	e003      	b.n	800c9ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d002      	beq.n	800c9ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9ba:	bf00      	nop
 800c9bc:	3714      	adds	r7, #20
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bc80      	pop	{r7}
 800c9c2:	4770      	bx	lr
 800c9c4:	200021e8 	.word	0x200021e8
 800c9c8:	200021f0 	.word	0x200021f0

0800c9cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	4912      	ldr	r1, [pc, #72]	; (800ca1c <MX_USB_DEVICE_Init+0x50>)
 800c9d4:	4812      	ldr	r0, [pc, #72]	; (800ca20 <MX_USB_DEVICE_Init+0x54>)
 800c9d6:	f7fc fa5a 	bl	8008e8e <USBD_Init>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d001      	beq.n	800c9e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c9e0:	f7f4 fd38 	bl	8001454 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c9e4:	490f      	ldr	r1, [pc, #60]	; (800ca24 <MX_USB_DEVICE_Init+0x58>)
 800c9e6:	480e      	ldr	r0, [pc, #56]	; (800ca20 <MX_USB_DEVICE_Init+0x54>)
 800c9e8:	f7fc fa7c 	bl	8008ee4 <USBD_RegisterClass>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c9f2:	f7f4 fd2f 	bl	8001454 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c9f6:	490c      	ldr	r1, [pc, #48]	; (800ca28 <MX_USB_DEVICE_Init+0x5c>)
 800c9f8:	4809      	ldr	r0, [pc, #36]	; (800ca20 <MX_USB_DEVICE_Init+0x54>)
 800c9fa:	f7fc f9ad 	bl	8008d58 <USBD_CDC_RegisterInterface>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d001      	beq.n	800ca08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ca04:	f7f4 fd26 	bl	8001454 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca08:	4805      	ldr	r0, [pc, #20]	; (800ca20 <MX_USB_DEVICE_Init+0x54>)
 800ca0a:	f7fc fa84 	bl	8008f16 <USBD_Start>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d001      	beq.n	800ca18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ca14:	f7f4 fd1e 	bl	8001454 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca18:	bf00      	nop
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	20000130 	.word	0x20000130
 800ca20:	20002200 	.word	0x20002200
 800ca24:	20000018 	.word	0x20000018
 800ca28:	20000120 	.word	0x20000120

0800ca2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ca30:	2200      	movs	r2, #0
 800ca32:	4905      	ldr	r1, [pc, #20]	; (800ca48 <CDC_Init_FS+0x1c>)
 800ca34:	4805      	ldr	r0, [pc, #20]	; (800ca4c <CDC_Init_FS+0x20>)
 800ca36:	f7fc f9a5 	bl	8008d84 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca3a:	4905      	ldr	r1, [pc, #20]	; (800ca50 <CDC_Init_FS+0x24>)
 800ca3c:	4803      	ldr	r0, [pc, #12]	; (800ca4c <CDC_Init_FS+0x20>)
 800ca3e:	f7fc f9ba 	bl	8008db6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	200028c4 	.word	0x200028c4
 800ca4c:	20002200 	.word	0x20002200
 800ca50:	200024c4 	.word	0x200024c4

0800ca54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca54:	b480      	push	{r7}
 800ca56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bc80      	pop	{r7}
 800ca60:	4770      	bx	lr
	...

0800ca64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	6039      	str	r1, [r7, #0]
 800ca6e:	71fb      	strb	r3, [r7, #7]
 800ca70:	4613      	mov	r3, r2
 800ca72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca74:	79fb      	ldrb	r3, [r7, #7]
 800ca76:	2b23      	cmp	r3, #35	; 0x23
 800ca78:	d84a      	bhi.n	800cb10 <CDC_Control_FS+0xac>
 800ca7a:	a201      	add	r2, pc, #4	; (adr r2, 800ca80 <CDC_Control_FS+0x1c>)
 800ca7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca80:	0800cb11 	.word	0x0800cb11
 800ca84:	0800cb11 	.word	0x0800cb11
 800ca88:	0800cb11 	.word	0x0800cb11
 800ca8c:	0800cb11 	.word	0x0800cb11
 800ca90:	0800cb11 	.word	0x0800cb11
 800ca94:	0800cb11 	.word	0x0800cb11
 800ca98:	0800cb11 	.word	0x0800cb11
 800ca9c:	0800cb11 	.word	0x0800cb11
 800caa0:	0800cb11 	.word	0x0800cb11
 800caa4:	0800cb11 	.word	0x0800cb11
 800caa8:	0800cb11 	.word	0x0800cb11
 800caac:	0800cb11 	.word	0x0800cb11
 800cab0:	0800cb11 	.word	0x0800cb11
 800cab4:	0800cb11 	.word	0x0800cb11
 800cab8:	0800cb11 	.word	0x0800cb11
 800cabc:	0800cb11 	.word	0x0800cb11
 800cac0:	0800cb11 	.word	0x0800cb11
 800cac4:	0800cb11 	.word	0x0800cb11
 800cac8:	0800cb11 	.word	0x0800cb11
 800cacc:	0800cb11 	.word	0x0800cb11
 800cad0:	0800cb11 	.word	0x0800cb11
 800cad4:	0800cb11 	.word	0x0800cb11
 800cad8:	0800cb11 	.word	0x0800cb11
 800cadc:	0800cb11 	.word	0x0800cb11
 800cae0:	0800cb11 	.word	0x0800cb11
 800cae4:	0800cb11 	.word	0x0800cb11
 800cae8:	0800cb11 	.word	0x0800cb11
 800caec:	0800cb11 	.word	0x0800cb11
 800caf0:	0800cb11 	.word	0x0800cb11
 800caf4:	0800cb11 	.word	0x0800cb11
 800caf8:	0800cb11 	.word	0x0800cb11
 800cafc:	0800cb11 	.word	0x0800cb11
 800cb00:	0800cb11 	.word	0x0800cb11
 800cb04:	0800cb11 	.word	0x0800cb11
 800cb08:	0800cb11 	.word	0x0800cb11
 800cb0c:	0800cb11 	.word	0x0800cb11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb10:	bf00      	nop
  }

  return (USBD_OK);
 800cb12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bc80      	pop	{r7}
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop

0800cb20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb2a:	6879      	ldr	r1, [r7, #4]
 800cb2c:	4808      	ldr	r0, [pc, #32]	; (800cb50 <CDC_Receive_FS+0x30>)
 800cb2e:	f7fc f942 	bl	8008db6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb32:	4807      	ldr	r0, [pc, #28]	; (800cb50 <CDC_Receive_FS+0x30>)
 800cb34:	f7fc f981 	bl	8008e3a <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	4619      	mov	r1, r3
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 f807 	bl	800cb54 <CDC_Transmit_FS>
  return (USBD_OK);
 800cb46:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	20002200 	.word	0x20002200

0800cb54 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	460b      	mov	r3, r1
 800cb5e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cb60:	2300      	movs	r3, #0
 800cb62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cb64:	4b0d      	ldr	r3, [pc, #52]	; (800cb9c <CDC_Transmit_FS+0x48>)
 800cb66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb6a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d001      	beq.n	800cb7a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cb76:	2301      	movs	r3, #1
 800cb78:	e00b      	b.n	800cb92 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cb7a:	887b      	ldrh	r3, [r7, #2]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	6879      	ldr	r1, [r7, #4]
 800cb80:	4806      	ldr	r0, [pc, #24]	; (800cb9c <CDC_Transmit_FS+0x48>)
 800cb82:	f7fc f8ff 	bl	8008d84 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cb86:	4805      	ldr	r0, [pc, #20]	; (800cb9c <CDC_Transmit_FS+0x48>)
 800cb88:	f7fc f928 	bl	8008ddc <USBD_CDC_TransmitPacket>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	20002200 	.word	0x20002200

0800cba0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	4603      	mov	r3, r0
 800cba8:	6039      	str	r1, [r7, #0]
 800cbaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	2212      	movs	r2, #18
 800cbb0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbb2:	4b03      	ldr	r3, [pc, #12]	; (800cbc0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bc80      	pop	{r7}
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop
 800cbc0:	2000014c 	.word	0x2000014c

0800cbc4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	4603      	mov	r3, r0
 800cbcc:	6039      	str	r1, [r7, #0]
 800cbce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	2204      	movs	r2, #4
 800cbd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbd6:	4b03      	ldr	r3, [pc, #12]	; (800cbe4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bc80      	pop	{r7}
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	20000160 	.word	0x20000160

0800cbe8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	4603      	mov	r3, r0
 800cbf0:	6039      	str	r1, [r7, #0]
 800cbf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbf4:	79fb      	ldrb	r3, [r7, #7]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d105      	bne.n	800cc06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbfa:	683a      	ldr	r2, [r7, #0]
 800cbfc:	4907      	ldr	r1, [pc, #28]	; (800cc1c <USBD_FS_ProductStrDescriptor+0x34>)
 800cbfe:	4808      	ldr	r0, [pc, #32]	; (800cc20 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc00:	f7fd f902 	bl	8009e08 <USBD_GetString>
 800cc04:	e004      	b.n	800cc10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc06:	683a      	ldr	r2, [r7, #0]
 800cc08:	4904      	ldr	r1, [pc, #16]	; (800cc1c <USBD_FS_ProductStrDescriptor+0x34>)
 800cc0a:	4805      	ldr	r0, [pc, #20]	; (800cc20 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc0c:	f7fd f8fc 	bl	8009e08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc10:	4b02      	ldr	r3, [pc, #8]	; (800cc1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3708      	adds	r7, #8
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	20002cc4 	.word	0x20002cc4
 800cc20:	0800dd78 	.word	0x0800dd78

0800cc24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	6039      	str	r1, [r7, #0]
 800cc2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc30:	683a      	ldr	r2, [r7, #0]
 800cc32:	4904      	ldr	r1, [pc, #16]	; (800cc44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc34:	4804      	ldr	r0, [pc, #16]	; (800cc48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc36:	f7fd f8e7 	bl	8009e08 <USBD_GetString>
  return USBD_StrDesc;
 800cc3a:	4b02      	ldr	r3, [pc, #8]	; (800cc44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	20002cc4 	.word	0x20002cc4
 800cc48:	0800dd90 	.word	0x0800dd90

0800cc4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	4603      	mov	r3, r0
 800cc54:	6039      	str	r1, [r7, #0]
 800cc56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	221a      	movs	r2, #26
 800cc5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc5e:	f000 f843 	bl	800cce8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc62:	4b02      	ldr	r3, [pc, #8]	; (800cc6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	20000164 	.word	0x20000164

0800cc70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	4603      	mov	r3, r0
 800cc78:	6039      	str	r1, [r7, #0]
 800cc7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc7c:	79fb      	ldrb	r3, [r7, #7]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d105      	bne.n	800cc8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc82:	683a      	ldr	r2, [r7, #0]
 800cc84:	4907      	ldr	r1, [pc, #28]	; (800cca4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc86:	4808      	ldr	r0, [pc, #32]	; (800cca8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc88:	f7fd f8be 	bl	8009e08 <USBD_GetString>
 800cc8c:	e004      	b.n	800cc98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	4904      	ldr	r1, [pc, #16]	; (800cca4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc92:	4805      	ldr	r0, [pc, #20]	; (800cca8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc94:	f7fd f8b8 	bl	8009e08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc98:	4b02      	ldr	r3, [pc, #8]	; (800cca4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	20002cc4 	.word	0x20002cc4
 800cca8:	0800dda4 	.word	0x0800dda4

0800ccac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	6039      	str	r1, [r7, #0]
 800ccb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccb8:	79fb      	ldrb	r3, [r7, #7]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d105      	bne.n	800ccca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	4907      	ldr	r1, [pc, #28]	; (800cce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccc2:	4808      	ldr	r0, [pc, #32]	; (800cce4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccc4:	f7fd f8a0 	bl	8009e08 <USBD_GetString>
 800ccc8:	e004      	b.n	800ccd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	4904      	ldr	r1, [pc, #16]	; (800cce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccce:	4805      	ldr	r0, [pc, #20]	; (800cce4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccd0:	f7fd f89a 	bl	8009e08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccd4:	4b02      	ldr	r3, [pc, #8]	; (800cce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	20002cc4 	.word	0x20002cc4
 800cce4:	0800ddb0 	.word	0x0800ddb0

0800cce8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccee:	4b0f      	ldr	r3, [pc, #60]	; (800cd2c <Get_SerialNum+0x44>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ccf4:	4b0e      	ldr	r3, [pc, #56]	; (800cd30 <Get_SerialNum+0x48>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ccfa:	4b0e      	ldr	r3, [pc, #56]	; (800cd34 <Get_SerialNum+0x4c>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4413      	add	r3, r2
 800cd06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d009      	beq.n	800cd22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd0e:	2208      	movs	r2, #8
 800cd10:	4909      	ldr	r1, [pc, #36]	; (800cd38 <Get_SerialNum+0x50>)
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f000 f814 	bl	800cd40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd18:	2204      	movs	r2, #4
 800cd1a:	4908      	ldr	r1, [pc, #32]	; (800cd3c <Get_SerialNum+0x54>)
 800cd1c:	68b8      	ldr	r0, [r7, #8]
 800cd1e:	f000 f80f 	bl	800cd40 <IntToUnicode>
  }
}
 800cd22:	bf00      	nop
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	1ffff7e8 	.word	0x1ffff7e8
 800cd30:	1ffff7ec 	.word	0x1ffff7ec
 800cd34:	1ffff7f0 	.word	0x1ffff7f0
 800cd38:	20000166 	.word	0x20000166
 800cd3c:	20000176 	.word	0x20000176

0800cd40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b087      	sub	sp, #28
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd52:	2300      	movs	r3, #0
 800cd54:	75fb      	strb	r3, [r7, #23]
 800cd56:	e027      	b.n	800cda8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	0f1b      	lsrs	r3, r3, #28
 800cd5c:	2b09      	cmp	r3, #9
 800cd5e:	d80b      	bhi.n	800cd78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	0f1b      	lsrs	r3, r3, #28
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	7dfb      	ldrb	r3, [r7, #23]
 800cd68:	005b      	lsls	r3, r3, #1
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	440b      	add	r3, r1
 800cd70:	3230      	adds	r2, #48	; 0x30
 800cd72:	b2d2      	uxtb	r2, r2
 800cd74:	701a      	strb	r2, [r3, #0]
 800cd76:	e00a      	b.n	800cd8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	0f1b      	lsrs	r3, r3, #28
 800cd7c:	b2da      	uxtb	r2, r3
 800cd7e:	7dfb      	ldrb	r3, [r7, #23]
 800cd80:	005b      	lsls	r3, r3, #1
 800cd82:	4619      	mov	r1, r3
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	440b      	add	r3, r1
 800cd88:	3237      	adds	r2, #55	; 0x37
 800cd8a:	b2d2      	uxtb	r2, r2
 800cd8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	011b      	lsls	r3, r3, #4
 800cd92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
 800cd96:	005b      	lsls	r3, r3, #1
 800cd98:	3301      	adds	r3, #1
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	2200      	movs	r2, #0
 800cda0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cda2:	7dfb      	ldrb	r3, [r7, #23]
 800cda4:	3301      	adds	r3, #1
 800cda6:	75fb      	strb	r3, [r7, #23]
 800cda8:	7dfa      	ldrb	r2, [r7, #23]
 800cdaa:	79fb      	ldrb	r3, [r7, #7]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d3d3      	bcc.n	800cd58 <IntToUnicode+0x18>
  }
}
 800cdb0:	bf00      	nop
 800cdb2:	bf00      	nop
 800cdb4:	371c      	adds	r7, #28
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bc80      	pop	{r7}
 800cdba:	4770      	bx	lr

0800cdbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a0d      	ldr	r2, [pc, #52]	; (800ce00 <HAL_PCD_MspInit+0x44>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d113      	bne.n	800cdf6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cdce:	4b0d      	ldr	r3, [pc, #52]	; (800ce04 <HAL_PCD_MspInit+0x48>)
 800cdd0:	69db      	ldr	r3, [r3, #28]
 800cdd2:	4a0c      	ldr	r2, [pc, #48]	; (800ce04 <HAL_PCD_MspInit+0x48>)
 800cdd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cdd8:	61d3      	str	r3, [r2, #28]
 800cdda:	4b0a      	ldr	r3, [pc, #40]	; (800ce04 <HAL_PCD_MspInit+0x48>)
 800cddc:	69db      	ldr	r3, [r3, #28]
 800cdde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cde2:	60fb      	str	r3, [r7, #12]
 800cde4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800cde6:	2200      	movs	r2, #0
 800cde8:	2105      	movs	r1, #5
 800cdea:	2014      	movs	r0, #20
 800cdec:	f7f5 fb17 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cdf0:	2014      	movs	r0, #20
 800cdf2:	f7f5 fb30 	bl	8002456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cdf6:	bf00      	nop
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	40005c00 	.word	0x40005c00
 800ce04:	40021000 	.word	0x40021000

0800ce08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4610      	mov	r0, r2
 800ce20:	f7fc f8c1 	bl	8008fa6 <USBD_LL_SetupStage>
}
 800ce24:	bf00      	nop
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	460b      	mov	r3, r1
 800ce36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800ce3e:	78fa      	ldrb	r2, [r7, #3]
 800ce40:	6879      	ldr	r1, [r7, #4]
 800ce42:	4613      	mov	r3, r2
 800ce44:	009b      	lsls	r3, r3, #2
 800ce46:	4413      	add	r3, r2
 800ce48:	00db      	lsls	r3, r3, #3
 800ce4a:	440b      	add	r3, r1
 800ce4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	78fb      	ldrb	r3, [r7, #3]
 800ce54:	4619      	mov	r1, r3
 800ce56:	f7fc f8f3 	bl	8009040 <USBD_LL_DataOutStage>
}
 800ce5a:	bf00      	nop
 800ce5c:	3708      	adds	r7, #8
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b082      	sub	sp, #8
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800ce74:	78fa      	ldrb	r2, [r7, #3]
 800ce76:	6879      	ldr	r1, [r7, #4]
 800ce78:	4613      	mov	r3, r2
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	4413      	add	r3, r2
 800ce7e:	00db      	lsls	r3, r3, #3
 800ce80:	440b      	add	r3, r1
 800ce82:	333c      	adds	r3, #60	; 0x3c
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	78fb      	ldrb	r3, [r7, #3]
 800ce88:	4619      	mov	r1, r3
 800ce8a:	f7fc f94a 	bl	8009122 <USBD_LL_DataInStage>
}
 800ce8e:	bf00      	nop
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b082      	sub	sp, #8
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fc fa5a 	bl	800935e <USBD_LL_SOF>
}
 800ceaa:	bf00      	nop
 800ceac:	3708      	adds	r7, #8
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b084      	sub	sp, #16
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ceba:	2301      	movs	r3, #1
 800cebc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	2b02      	cmp	r3, #2
 800cec4:	d001      	beq.n	800ceca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cec6:	f7f4 fac5 	bl	8001454 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ced0:	7bfa      	ldrb	r2, [r7, #15]
 800ced2:	4611      	mov	r1, r2
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7fc fa0a 	bl	80092ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fc f9c3 	bl	800926c <USBD_LL_Reset>
}
 800cee6:	bf00      	nop
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
	...

0800cef0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fc fa04 	bl	800930c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	699b      	ldr	r3, [r3, #24]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d005      	beq.n	800cf18 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf0c:	4b04      	ldr	r3, [pc, #16]	; (800cf20 <HAL_PCD_SuspendCallback+0x30>)
 800cf0e:	691b      	ldr	r3, [r3, #16]
 800cf10:	4a03      	ldr	r2, [pc, #12]	; (800cf20 <HAL_PCD_SuspendCallback+0x30>)
 800cf12:	f043 0306 	orr.w	r3, r3, #6
 800cf16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf18:	bf00      	nop
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	e000ed00 	.word	0xe000ed00

0800cf24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7fc f9fe 	bl	8009334 <USBD_LL_Resume>
}
 800cf38:	bf00      	nop
 800cf3a:	3708      	adds	r7, #8
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cf48:	4a28      	ldr	r2, [pc, #160]	; (800cfec <USBD_LL_Init+0xac>)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4a26      	ldr	r2, [pc, #152]	; (800cfec <USBD_LL_Init+0xac>)
 800cf54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cf58:	4b24      	ldr	r3, [pc, #144]	; (800cfec <USBD_LL_Init+0xac>)
 800cf5a:	4a25      	ldr	r2, [pc, #148]	; (800cff0 <USBD_LL_Init+0xb0>)
 800cf5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cf5e:	4b23      	ldr	r3, [pc, #140]	; (800cfec <USBD_LL_Init+0xac>)
 800cf60:	2208      	movs	r2, #8
 800cf62:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cf64:	4b21      	ldr	r3, [pc, #132]	; (800cfec <USBD_LL_Init+0xac>)
 800cf66:	2202      	movs	r2, #2
 800cf68:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cf6a:	4b20      	ldr	r3, [pc, #128]	; (800cfec <USBD_LL_Init+0xac>)
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cf70:	4b1e      	ldr	r3, [pc, #120]	; (800cfec <USBD_LL_Init+0xac>)
 800cf72:	2200      	movs	r2, #0
 800cf74:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cf76:	4b1d      	ldr	r3, [pc, #116]	; (800cfec <USBD_LL_Init+0xac>)
 800cf78:	2200      	movs	r2, #0
 800cf7a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cf7c:	481b      	ldr	r0, [pc, #108]	; (800cfec <USBD_LL_Init+0xac>)
 800cf7e:	f7f5 ff77 	bl	8002e70 <HAL_PCD_Init>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cf88:	f7f4 fa64 	bl	8001454 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf92:	2318      	movs	r3, #24
 800cf94:	2200      	movs	r2, #0
 800cf96:	2100      	movs	r1, #0
 800cf98:	f7f7 fc96 	bl	80048c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cfa2:	2358      	movs	r3, #88	; 0x58
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	2180      	movs	r1, #128	; 0x80
 800cfa8:	f7f7 fc8e 	bl	80048c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cfb2:	23c0      	movs	r3, #192	; 0xc0
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	2181      	movs	r1, #129	; 0x81
 800cfb8:	f7f7 fc86 	bl	80048c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cfc2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	2101      	movs	r1, #1
 800cfca:	f7f7 fc7d 	bl	80048c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cfd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfd8:	2200      	movs	r2, #0
 800cfda:	2182      	movs	r1, #130	; 0x82
 800cfdc:	f7f7 fc74 	bl	80048c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	20002ec4 	.word	0x20002ec4
 800cff0:	40005c00 	.word	0x40005c00

0800cff4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cffc:	2300      	movs	r3, #0
 800cffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d000:	2300      	movs	r3, #0
 800d002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7f6 f82f 	bl	800306e <HAL_PCD_Start>
 800d010:	4603      	mov	r3, r0
 800d012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d014:	7bfb      	ldrb	r3, [r7, #15]
 800d016:	4618      	mov	r0, r3
 800d018:	f000 f94e 	bl	800d2b8 <USBD_Get_USB_Status>
 800d01c:	4603      	mov	r3, r0
 800d01e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d020:	7bbb      	ldrb	r3, [r7, #14]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b084      	sub	sp, #16
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	4608      	mov	r0, r1
 800d034:	4611      	mov	r1, r2
 800d036:	461a      	mov	r2, r3
 800d038:	4603      	mov	r3, r0
 800d03a:	70fb      	strb	r3, [r7, #3]
 800d03c:	460b      	mov	r3, r1
 800d03e:	70bb      	strb	r3, [r7, #2]
 800d040:	4613      	mov	r3, r2
 800d042:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d044:	2300      	movs	r3, #0
 800d046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d048:	2300      	movs	r3, #0
 800d04a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d052:	78bb      	ldrb	r3, [r7, #2]
 800d054:	883a      	ldrh	r2, [r7, #0]
 800d056:	78f9      	ldrb	r1, [r7, #3]
 800d058:	f7f6 f984 	bl	8003364 <HAL_PCD_EP_Open>
 800d05c:	4603      	mov	r3, r0
 800d05e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d060:	7bfb      	ldrb	r3, [r7, #15]
 800d062:	4618      	mov	r0, r3
 800d064:	f000 f928 	bl	800d2b8 <USBD_Get_USB_Status>
 800d068:	4603      	mov	r3, r0
 800d06a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d06c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}

0800d076 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d076:	b580      	push	{r7, lr}
 800d078:	b084      	sub	sp, #16
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]
 800d07e:	460b      	mov	r3, r1
 800d080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d086:	2300      	movs	r3, #0
 800d088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d090:	78fa      	ldrb	r2, [r7, #3]
 800d092:	4611      	mov	r1, r2
 800d094:	4618      	mov	r0, r3
 800d096:	f7f6 f9c2 	bl	800341e <HAL_PCD_EP_Close>
 800d09a:	4603      	mov	r3, r0
 800d09c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f000 f909 	bl	800d2b8 <USBD_Get_USB_Status>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	460b      	mov	r3, r1
 800d0be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0ce:	78fa      	ldrb	r2, [r7, #3]
 800d0d0:	4611      	mov	r1, r2
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7f6 fa6a 	bl	80035ac <HAL_PCD_EP_SetStall>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0dc:	7bfb      	ldrb	r3, [r7, #15]
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f000 f8ea 	bl	800d2b8 <USBD_Get_USB_Status>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b084      	sub	sp, #16
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0fe:	2300      	movs	r3, #0
 800d100:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d102:	2300      	movs	r3, #0
 800d104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d10c:	78fa      	ldrb	r2, [r7, #3]
 800d10e:	4611      	mov	r1, r2
 800d110:	4618      	mov	r0, r3
 800d112:	f7f6 faab 	bl	800366c <HAL_PCD_EP_ClrStall>
 800d116:	4603      	mov	r3, r0
 800d118:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d11a:	7bfb      	ldrb	r3, [r7, #15]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 f8cb 	bl	800d2b8 <USBD_Get_USB_Status>
 800d122:	4603      	mov	r3, r0
 800d124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d126:	7bbb      	ldrb	r3, [r7, #14]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3710      	adds	r7, #16
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	460b      	mov	r3, r1
 800d13a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d142:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	da0c      	bge.n	800d166 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d14c:	78fb      	ldrb	r3, [r7, #3]
 800d14e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d152:	68f9      	ldr	r1, [r7, #12]
 800d154:	1c5a      	adds	r2, r3, #1
 800d156:	4613      	mov	r3, r2
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4413      	add	r3, r2
 800d15c:	00db      	lsls	r3, r3, #3
 800d15e:	440b      	add	r3, r1
 800d160:	3302      	adds	r3, #2
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	e00b      	b.n	800d17e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d166:	78fb      	ldrb	r3, [r7, #3]
 800d168:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d16c:	68f9      	ldr	r1, [r7, #12]
 800d16e:	4613      	mov	r3, r2
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	4413      	add	r3, r2
 800d174:	00db      	lsls	r3, r3, #3
 800d176:	440b      	add	r3, r1
 800d178:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d17c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3714      	adds	r7, #20
 800d182:	46bd      	mov	sp, r7
 800d184:	bc80      	pop	{r7}
 800d186:	4770      	bx	lr

0800d188 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b084      	sub	sp, #16
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	460b      	mov	r3, r1
 800d192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d194:	2300      	movs	r3, #0
 800d196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d198:	2300      	movs	r3, #0
 800d19a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1a2:	78fa      	ldrb	r2, [r7, #3]
 800d1a4:	4611      	mov	r1, r2
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7f6 f8b7 	bl	800331a <HAL_PCD_SetAddress>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1b0:	7bfb      	ldrb	r3, [r7, #15]
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f000 f880 	bl	800d2b8 <USBD_Get_USB_Status>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}

0800d1c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d1c6:	b580      	push	{r7, lr}
 800d1c8:	b086      	sub	sp, #24
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	60f8      	str	r0, [r7, #12]
 800d1ce:	607a      	str	r2, [r7, #4]
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	72fb      	strb	r3, [r7, #11]
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d1e8:	893b      	ldrh	r3, [r7, #8]
 800d1ea:	7af9      	ldrb	r1, [r7, #11]
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	f7f6 f9a6 	bl	800353e <HAL_PCD_EP_Transmit>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1f6:	7dfb      	ldrb	r3, [r7, #23]
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f000 f85d 	bl	800d2b8 <USBD_Get_USB_Status>
 800d1fe:	4603      	mov	r3, r0
 800d200:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d202:	7dbb      	ldrb	r3, [r7, #22]
}
 800d204:	4618      	mov	r0, r3
 800d206:	3718      	adds	r7, #24
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b086      	sub	sp, #24
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	607a      	str	r2, [r7, #4]
 800d216:	461a      	mov	r2, r3
 800d218:	460b      	mov	r3, r1
 800d21a:	72fb      	strb	r3, [r7, #11]
 800d21c:	4613      	mov	r3, r2
 800d21e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d220:	2300      	movs	r3, #0
 800d222:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d224:	2300      	movs	r3, #0
 800d226:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d22e:	893b      	ldrh	r3, [r7, #8]
 800d230:	7af9      	ldrb	r1, [r7, #11]
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	f7f6 f93b 	bl	80034ae <HAL_PCD_EP_Receive>
 800d238:	4603      	mov	r3, r0
 800d23a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 f83a 	bl	800d2b8 <USBD_Get_USB_Status>
 800d244:	4603      	mov	r3, r0
 800d246:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d248:	7dbb      	ldrb	r3, [r7, #22]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3718      	adds	r7, #24
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b082      	sub	sp, #8
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	460b      	mov	r3, r1
 800d25c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d264:	78fa      	ldrb	r2, [r7, #3]
 800d266:	4611      	mov	r1, r2
 800d268:	4618      	mov	r0, r3
 800d26a:	f7f6 f951 	bl	8003510 <HAL_PCD_EP_GetRxCount>
 800d26e:	4603      	mov	r3, r0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d280:	4b02      	ldr	r3, [pc, #8]	; (800d28c <USBD_static_malloc+0x14>)
}
 800d282:	4618      	mov	r0, r3
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	bc80      	pop	{r7}
 800d28a:	4770      	bx	lr
 800d28c:	200031b4 	.word	0x200031b4

0800d290 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]

}
 800d298:	bf00      	nop
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bc80      	pop	{r7}
 800d2a0:	4770      	bx	lr

0800d2a2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2a2:	b480      	push	{r7}
 800d2a4:	b083      	sub	sp, #12
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d2ae:	bf00      	nop
 800d2b0:	370c      	adds	r7, #12
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bc80      	pop	{r7}
 800d2b6:	4770      	bx	lr

0800d2b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	4603      	mov	r3, r0
 800d2c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d2c6:	79fb      	ldrb	r3, [r7, #7]
 800d2c8:	2b03      	cmp	r3, #3
 800d2ca:	d817      	bhi.n	800d2fc <USBD_Get_USB_Status+0x44>
 800d2cc:	a201      	add	r2, pc, #4	; (adr r2, 800d2d4 <USBD_Get_USB_Status+0x1c>)
 800d2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2d2:	bf00      	nop
 800d2d4:	0800d2e5 	.word	0x0800d2e5
 800d2d8:	0800d2eb 	.word	0x0800d2eb
 800d2dc:	0800d2f1 	.word	0x0800d2f1
 800d2e0:	0800d2f7 	.word	0x0800d2f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d2e8:	e00b      	b.n	800d302 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2ea:	2302      	movs	r3, #2
 800d2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ee:	e008      	b.n	800d302 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2f4:	e005      	b.n	800d302 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d2f6:	2302      	movs	r3, #2
 800d2f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d2fa:	e002      	b.n	800d302 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d2fc:	2302      	movs	r3, #2
 800d2fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d300:	bf00      	nop
  }
  return usb_status;
 800d302:	7bfb      	ldrb	r3, [r7, #15]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3714      	adds	r7, #20
 800d308:	46bd      	mov	sp, r7
 800d30a:	bc80      	pop	{r7}
 800d30c:	4770      	bx	lr
 800d30e:	bf00      	nop

0800d310 <siprintf>:
 800d310:	b40e      	push	{r1, r2, r3}
 800d312:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d316:	b500      	push	{lr}
 800d318:	b09c      	sub	sp, #112	; 0x70
 800d31a:	ab1d      	add	r3, sp, #116	; 0x74
 800d31c:	9002      	str	r0, [sp, #8]
 800d31e:	9006      	str	r0, [sp, #24]
 800d320:	9107      	str	r1, [sp, #28]
 800d322:	9104      	str	r1, [sp, #16]
 800d324:	4808      	ldr	r0, [pc, #32]	; (800d348 <siprintf+0x38>)
 800d326:	4909      	ldr	r1, [pc, #36]	; (800d34c <siprintf+0x3c>)
 800d328:	f853 2b04 	ldr.w	r2, [r3], #4
 800d32c:	9105      	str	r1, [sp, #20]
 800d32e:	6800      	ldr	r0, [r0, #0]
 800d330:	a902      	add	r1, sp, #8
 800d332:	9301      	str	r3, [sp, #4]
 800d334:	f000 f9f2 	bl	800d71c <_svfiprintf_r>
 800d338:	2200      	movs	r2, #0
 800d33a:	9b02      	ldr	r3, [sp, #8]
 800d33c:	701a      	strb	r2, [r3, #0]
 800d33e:	b01c      	add	sp, #112	; 0x70
 800d340:	f85d eb04 	ldr.w	lr, [sp], #4
 800d344:	b003      	add	sp, #12
 800d346:	4770      	bx	lr
 800d348:	200001cc 	.word	0x200001cc
 800d34c:	ffff0208 	.word	0xffff0208

0800d350 <memset>:
 800d350:	4603      	mov	r3, r0
 800d352:	4402      	add	r2, r0
 800d354:	4293      	cmp	r3, r2
 800d356:	d100      	bne.n	800d35a <memset+0xa>
 800d358:	4770      	bx	lr
 800d35a:	f803 1b01 	strb.w	r1, [r3], #1
 800d35e:	e7f9      	b.n	800d354 <memset+0x4>

0800d360 <_reclaim_reent>:
 800d360:	4b29      	ldr	r3, [pc, #164]	; (800d408 <_reclaim_reent+0xa8>)
 800d362:	b570      	push	{r4, r5, r6, lr}
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4604      	mov	r4, r0
 800d368:	4283      	cmp	r3, r0
 800d36a:	d04b      	beq.n	800d404 <_reclaim_reent+0xa4>
 800d36c:	69c3      	ldr	r3, [r0, #28]
 800d36e:	b143      	cbz	r3, 800d382 <_reclaim_reent+0x22>
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d144      	bne.n	800d400 <_reclaim_reent+0xa0>
 800d376:	69e3      	ldr	r3, [r4, #28]
 800d378:	6819      	ldr	r1, [r3, #0]
 800d37a:	b111      	cbz	r1, 800d382 <_reclaim_reent+0x22>
 800d37c:	4620      	mov	r0, r4
 800d37e:	f000 f87f 	bl	800d480 <_free_r>
 800d382:	6961      	ldr	r1, [r4, #20]
 800d384:	b111      	cbz	r1, 800d38c <_reclaim_reent+0x2c>
 800d386:	4620      	mov	r0, r4
 800d388:	f000 f87a 	bl	800d480 <_free_r>
 800d38c:	69e1      	ldr	r1, [r4, #28]
 800d38e:	b111      	cbz	r1, 800d396 <_reclaim_reent+0x36>
 800d390:	4620      	mov	r0, r4
 800d392:	f000 f875 	bl	800d480 <_free_r>
 800d396:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d398:	b111      	cbz	r1, 800d3a0 <_reclaim_reent+0x40>
 800d39a:	4620      	mov	r0, r4
 800d39c:	f000 f870 	bl	800d480 <_free_r>
 800d3a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3a2:	b111      	cbz	r1, 800d3aa <_reclaim_reent+0x4a>
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f000 f86b 	bl	800d480 <_free_r>
 800d3aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d3ac:	b111      	cbz	r1, 800d3b4 <_reclaim_reent+0x54>
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f000 f866 	bl	800d480 <_free_r>
 800d3b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d3b6:	b111      	cbz	r1, 800d3be <_reclaim_reent+0x5e>
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f000 f861 	bl	800d480 <_free_r>
 800d3be:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d3c0:	b111      	cbz	r1, 800d3c8 <_reclaim_reent+0x68>
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f000 f85c 	bl	800d480 <_free_r>
 800d3c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d3ca:	b111      	cbz	r1, 800d3d2 <_reclaim_reent+0x72>
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	f000 f857 	bl	800d480 <_free_r>
 800d3d2:	6a23      	ldr	r3, [r4, #32]
 800d3d4:	b1b3      	cbz	r3, 800d404 <_reclaim_reent+0xa4>
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3dc:	4718      	bx	r3
 800d3de:	5949      	ldr	r1, [r1, r5]
 800d3e0:	b941      	cbnz	r1, 800d3f4 <_reclaim_reent+0x94>
 800d3e2:	3504      	adds	r5, #4
 800d3e4:	69e3      	ldr	r3, [r4, #28]
 800d3e6:	2d80      	cmp	r5, #128	; 0x80
 800d3e8:	68d9      	ldr	r1, [r3, #12]
 800d3ea:	d1f8      	bne.n	800d3de <_reclaim_reent+0x7e>
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f000 f847 	bl	800d480 <_free_r>
 800d3f2:	e7c0      	b.n	800d376 <_reclaim_reent+0x16>
 800d3f4:	680e      	ldr	r6, [r1, #0]
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f000 f842 	bl	800d480 <_free_r>
 800d3fc:	4631      	mov	r1, r6
 800d3fe:	e7ef      	b.n	800d3e0 <_reclaim_reent+0x80>
 800d400:	2500      	movs	r5, #0
 800d402:	e7ef      	b.n	800d3e4 <_reclaim_reent+0x84>
 800d404:	bd70      	pop	{r4, r5, r6, pc}
 800d406:	bf00      	nop
 800d408:	200001cc 	.word	0x200001cc

0800d40c <__errno>:
 800d40c:	4b01      	ldr	r3, [pc, #4]	; (800d414 <__errno+0x8>)
 800d40e:	6818      	ldr	r0, [r3, #0]
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	200001cc 	.word	0x200001cc

0800d418 <__libc_init_array>:
 800d418:	b570      	push	{r4, r5, r6, lr}
 800d41a:	2600      	movs	r6, #0
 800d41c:	4d0c      	ldr	r5, [pc, #48]	; (800d450 <__libc_init_array+0x38>)
 800d41e:	4c0d      	ldr	r4, [pc, #52]	; (800d454 <__libc_init_array+0x3c>)
 800d420:	1b64      	subs	r4, r4, r5
 800d422:	10a4      	asrs	r4, r4, #2
 800d424:	42a6      	cmp	r6, r4
 800d426:	d109      	bne.n	800d43c <__libc_init_array+0x24>
 800d428:	f000 fc7a 	bl	800dd20 <_init>
 800d42c:	2600      	movs	r6, #0
 800d42e:	4d0a      	ldr	r5, [pc, #40]	; (800d458 <__libc_init_array+0x40>)
 800d430:	4c0a      	ldr	r4, [pc, #40]	; (800d45c <__libc_init_array+0x44>)
 800d432:	1b64      	subs	r4, r4, r5
 800d434:	10a4      	asrs	r4, r4, #2
 800d436:	42a6      	cmp	r6, r4
 800d438:	d105      	bne.n	800d446 <__libc_init_array+0x2e>
 800d43a:	bd70      	pop	{r4, r5, r6, pc}
 800d43c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d440:	4798      	blx	r3
 800d442:	3601      	adds	r6, #1
 800d444:	e7ee      	b.n	800d424 <__libc_init_array+0xc>
 800d446:	f855 3b04 	ldr.w	r3, [r5], #4
 800d44a:	4798      	blx	r3
 800d44c:	3601      	adds	r6, #1
 800d44e:	e7f2      	b.n	800d436 <__libc_init_array+0x1e>
 800d450:	0800de68 	.word	0x0800de68
 800d454:	0800de68 	.word	0x0800de68
 800d458:	0800de68 	.word	0x0800de68
 800d45c:	0800de6c 	.word	0x0800de6c

0800d460 <__retarget_lock_acquire_recursive>:
 800d460:	4770      	bx	lr

0800d462 <__retarget_lock_release_recursive>:
 800d462:	4770      	bx	lr

0800d464 <memcpy>:
 800d464:	440a      	add	r2, r1
 800d466:	4291      	cmp	r1, r2
 800d468:	f100 33ff 	add.w	r3, r0, #4294967295
 800d46c:	d100      	bne.n	800d470 <memcpy+0xc>
 800d46e:	4770      	bx	lr
 800d470:	b510      	push	{r4, lr}
 800d472:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d476:	4291      	cmp	r1, r2
 800d478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d47c:	d1f9      	bne.n	800d472 <memcpy+0xe>
 800d47e:	bd10      	pop	{r4, pc}

0800d480 <_free_r>:
 800d480:	b538      	push	{r3, r4, r5, lr}
 800d482:	4605      	mov	r5, r0
 800d484:	2900      	cmp	r1, #0
 800d486:	d040      	beq.n	800d50a <_free_r+0x8a>
 800d488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d48c:	1f0c      	subs	r4, r1, #4
 800d48e:	2b00      	cmp	r3, #0
 800d490:	bfb8      	it	lt
 800d492:	18e4      	addlt	r4, r4, r3
 800d494:	f000 f8dc 	bl	800d650 <__malloc_lock>
 800d498:	4a1c      	ldr	r2, [pc, #112]	; (800d50c <_free_r+0x8c>)
 800d49a:	6813      	ldr	r3, [r2, #0]
 800d49c:	b933      	cbnz	r3, 800d4ac <_free_r+0x2c>
 800d49e:	6063      	str	r3, [r4, #4]
 800d4a0:	6014      	str	r4, [r2, #0]
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4a8:	f000 b8d8 	b.w	800d65c <__malloc_unlock>
 800d4ac:	42a3      	cmp	r3, r4
 800d4ae:	d908      	bls.n	800d4c2 <_free_r+0x42>
 800d4b0:	6820      	ldr	r0, [r4, #0]
 800d4b2:	1821      	adds	r1, r4, r0
 800d4b4:	428b      	cmp	r3, r1
 800d4b6:	bf01      	itttt	eq
 800d4b8:	6819      	ldreq	r1, [r3, #0]
 800d4ba:	685b      	ldreq	r3, [r3, #4]
 800d4bc:	1809      	addeq	r1, r1, r0
 800d4be:	6021      	streq	r1, [r4, #0]
 800d4c0:	e7ed      	b.n	800d49e <_free_r+0x1e>
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	b10b      	cbz	r3, 800d4cc <_free_r+0x4c>
 800d4c8:	42a3      	cmp	r3, r4
 800d4ca:	d9fa      	bls.n	800d4c2 <_free_r+0x42>
 800d4cc:	6811      	ldr	r1, [r2, #0]
 800d4ce:	1850      	adds	r0, r2, r1
 800d4d0:	42a0      	cmp	r0, r4
 800d4d2:	d10b      	bne.n	800d4ec <_free_r+0x6c>
 800d4d4:	6820      	ldr	r0, [r4, #0]
 800d4d6:	4401      	add	r1, r0
 800d4d8:	1850      	adds	r0, r2, r1
 800d4da:	4283      	cmp	r3, r0
 800d4dc:	6011      	str	r1, [r2, #0]
 800d4de:	d1e0      	bne.n	800d4a2 <_free_r+0x22>
 800d4e0:	6818      	ldr	r0, [r3, #0]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	4408      	add	r0, r1
 800d4e6:	6010      	str	r0, [r2, #0]
 800d4e8:	6053      	str	r3, [r2, #4]
 800d4ea:	e7da      	b.n	800d4a2 <_free_r+0x22>
 800d4ec:	d902      	bls.n	800d4f4 <_free_r+0x74>
 800d4ee:	230c      	movs	r3, #12
 800d4f0:	602b      	str	r3, [r5, #0]
 800d4f2:	e7d6      	b.n	800d4a2 <_free_r+0x22>
 800d4f4:	6820      	ldr	r0, [r4, #0]
 800d4f6:	1821      	adds	r1, r4, r0
 800d4f8:	428b      	cmp	r3, r1
 800d4fa:	bf01      	itttt	eq
 800d4fc:	6819      	ldreq	r1, [r3, #0]
 800d4fe:	685b      	ldreq	r3, [r3, #4]
 800d500:	1809      	addeq	r1, r1, r0
 800d502:	6021      	streq	r1, [r4, #0]
 800d504:	6063      	str	r3, [r4, #4]
 800d506:	6054      	str	r4, [r2, #4]
 800d508:	e7cb      	b.n	800d4a2 <_free_r+0x22>
 800d50a:	bd38      	pop	{r3, r4, r5, pc}
 800d50c:	20003514 	.word	0x20003514

0800d510 <sbrk_aligned>:
 800d510:	b570      	push	{r4, r5, r6, lr}
 800d512:	4e0e      	ldr	r6, [pc, #56]	; (800d54c <sbrk_aligned+0x3c>)
 800d514:	460c      	mov	r4, r1
 800d516:	6831      	ldr	r1, [r6, #0]
 800d518:	4605      	mov	r5, r0
 800d51a:	b911      	cbnz	r1, 800d522 <sbrk_aligned+0x12>
 800d51c:	f000 fbaa 	bl	800dc74 <_sbrk_r>
 800d520:	6030      	str	r0, [r6, #0]
 800d522:	4621      	mov	r1, r4
 800d524:	4628      	mov	r0, r5
 800d526:	f000 fba5 	bl	800dc74 <_sbrk_r>
 800d52a:	1c43      	adds	r3, r0, #1
 800d52c:	d00a      	beq.n	800d544 <sbrk_aligned+0x34>
 800d52e:	1cc4      	adds	r4, r0, #3
 800d530:	f024 0403 	bic.w	r4, r4, #3
 800d534:	42a0      	cmp	r0, r4
 800d536:	d007      	beq.n	800d548 <sbrk_aligned+0x38>
 800d538:	1a21      	subs	r1, r4, r0
 800d53a:	4628      	mov	r0, r5
 800d53c:	f000 fb9a 	bl	800dc74 <_sbrk_r>
 800d540:	3001      	adds	r0, #1
 800d542:	d101      	bne.n	800d548 <sbrk_aligned+0x38>
 800d544:	f04f 34ff 	mov.w	r4, #4294967295
 800d548:	4620      	mov	r0, r4
 800d54a:	bd70      	pop	{r4, r5, r6, pc}
 800d54c:	20003518 	.word	0x20003518

0800d550 <_malloc_r>:
 800d550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d554:	1ccd      	adds	r5, r1, #3
 800d556:	f025 0503 	bic.w	r5, r5, #3
 800d55a:	3508      	adds	r5, #8
 800d55c:	2d0c      	cmp	r5, #12
 800d55e:	bf38      	it	cc
 800d560:	250c      	movcc	r5, #12
 800d562:	2d00      	cmp	r5, #0
 800d564:	4607      	mov	r7, r0
 800d566:	db01      	blt.n	800d56c <_malloc_r+0x1c>
 800d568:	42a9      	cmp	r1, r5
 800d56a:	d905      	bls.n	800d578 <_malloc_r+0x28>
 800d56c:	230c      	movs	r3, #12
 800d56e:	2600      	movs	r6, #0
 800d570:	603b      	str	r3, [r7, #0]
 800d572:	4630      	mov	r0, r6
 800d574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d578:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d64c <_malloc_r+0xfc>
 800d57c:	f000 f868 	bl	800d650 <__malloc_lock>
 800d580:	f8d8 3000 	ldr.w	r3, [r8]
 800d584:	461c      	mov	r4, r3
 800d586:	bb5c      	cbnz	r4, 800d5e0 <_malloc_r+0x90>
 800d588:	4629      	mov	r1, r5
 800d58a:	4638      	mov	r0, r7
 800d58c:	f7ff ffc0 	bl	800d510 <sbrk_aligned>
 800d590:	1c43      	adds	r3, r0, #1
 800d592:	4604      	mov	r4, r0
 800d594:	d155      	bne.n	800d642 <_malloc_r+0xf2>
 800d596:	f8d8 4000 	ldr.w	r4, [r8]
 800d59a:	4626      	mov	r6, r4
 800d59c:	2e00      	cmp	r6, #0
 800d59e:	d145      	bne.n	800d62c <_malloc_r+0xdc>
 800d5a0:	2c00      	cmp	r4, #0
 800d5a2:	d048      	beq.n	800d636 <_malloc_r+0xe6>
 800d5a4:	6823      	ldr	r3, [r4, #0]
 800d5a6:	4631      	mov	r1, r6
 800d5a8:	4638      	mov	r0, r7
 800d5aa:	eb04 0903 	add.w	r9, r4, r3
 800d5ae:	f000 fb61 	bl	800dc74 <_sbrk_r>
 800d5b2:	4581      	cmp	r9, r0
 800d5b4:	d13f      	bne.n	800d636 <_malloc_r+0xe6>
 800d5b6:	6821      	ldr	r1, [r4, #0]
 800d5b8:	4638      	mov	r0, r7
 800d5ba:	1a6d      	subs	r5, r5, r1
 800d5bc:	4629      	mov	r1, r5
 800d5be:	f7ff ffa7 	bl	800d510 <sbrk_aligned>
 800d5c2:	3001      	adds	r0, #1
 800d5c4:	d037      	beq.n	800d636 <_malloc_r+0xe6>
 800d5c6:	6823      	ldr	r3, [r4, #0]
 800d5c8:	442b      	add	r3, r5
 800d5ca:	6023      	str	r3, [r4, #0]
 800d5cc:	f8d8 3000 	ldr.w	r3, [r8]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d038      	beq.n	800d646 <_malloc_r+0xf6>
 800d5d4:	685a      	ldr	r2, [r3, #4]
 800d5d6:	42a2      	cmp	r2, r4
 800d5d8:	d12b      	bne.n	800d632 <_malloc_r+0xe2>
 800d5da:	2200      	movs	r2, #0
 800d5dc:	605a      	str	r2, [r3, #4]
 800d5de:	e00f      	b.n	800d600 <_malloc_r+0xb0>
 800d5e0:	6822      	ldr	r2, [r4, #0]
 800d5e2:	1b52      	subs	r2, r2, r5
 800d5e4:	d41f      	bmi.n	800d626 <_malloc_r+0xd6>
 800d5e6:	2a0b      	cmp	r2, #11
 800d5e8:	d917      	bls.n	800d61a <_malloc_r+0xca>
 800d5ea:	1961      	adds	r1, r4, r5
 800d5ec:	42a3      	cmp	r3, r4
 800d5ee:	6025      	str	r5, [r4, #0]
 800d5f0:	bf18      	it	ne
 800d5f2:	6059      	strne	r1, [r3, #4]
 800d5f4:	6863      	ldr	r3, [r4, #4]
 800d5f6:	bf08      	it	eq
 800d5f8:	f8c8 1000 	streq.w	r1, [r8]
 800d5fc:	5162      	str	r2, [r4, r5]
 800d5fe:	604b      	str	r3, [r1, #4]
 800d600:	4638      	mov	r0, r7
 800d602:	f104 060b 	add.w	r6, r4, #11
 800d606:	f000 f829 	bl	800d65c <__malloc_unlock>
 800d60a:	f026 0607 	bic.w	r6, r6, #7
 800d60e:	1d23      	adds	r3, r4, #4
 800d610:	1af2      	subs	r2, r6, r3
 800d612:	d0ae      	beq.n	800d572 <_malloc_r+0x22>
 800d614:	1b9b      	subs	r3, r3, r6
 800d616:	50a3      	str	r3, [r4, r2]
 800d618:	e7ab      	b.n	800d572 <_malloc_r+0x22>
 800d61a:	42a3      	cmp	r3, r4
 800d61c:	6862      	ldr	r2, [r4, #4]
 800d61e:	d1dd      	bne.n	800d5dc <_malloc_r+0x8c>
 800d620:	f8c8 2000 	str.w	r2, [r8]
 800d624:	e7ec      	b.n	800d600 <_malloc_r+0xb0>
 800d626:	4623      	mov	r3, r4
 800d628:	6864      	ldr	r4, [r4, #4]
 800d62a:	e7ac      	b.n	800d586 <_malloc_r+0x36>
 800d62c:	4634      	mov	r4, r6
 800d62e:	6876      	ldr	r6, [r6, #4]
 800d630:	e7b4      	b.n	800d59c <_malloc_r+0x4c>
 800d632:	4613      	mov	r3, r2
 800d634:	e7cc      	b.n	800d5d0 <_malloc_r+0x80>
 800d636:	230c      	movs	r3, #12
 800d638:	4638      	mov	r0, r7
 800d63a:	603b      	str	r3, [r7, #0]
 800d63c:	f000 f80e 	bl	800d65c <__malloc_unlock>
 800d640:	e797      	b.n	800d572 <_malloc_r+0x22>
 800d642:	6025      	str	r5, [r4, #0]
 800d644:	e7dc      	b.n	800d600 <_malloc_r+0xb0>
 800d646:	605b      	str	r3, [r3, #4]
 800d648:	deff      	udf	#255	; 0xff
 800d64a:	bf00      	nop
 800d64c:	20003514 	.word	0x20003514

0800d650 <__malloc_lock>:
 800d650:	4801      	ldr	r0, [pc, #4]	; (800d658 <__malloc_lock+0x8>)
 800d652:	f7ff bf05 	b.w	800d460 <__retarget_lock_acquire_recursive>
 800d656:	bf00      	nop
 800d658:	20003510 	.word	0x20003510

0800d65c <__malloc_unlock>:
 800d65c:	4801      	ldr	r0, [pc, #4]	; (800d664 <__malloc_unlock+0x8>)
 800d65e:	f7ff bf00 	b.w	800d462 <__retarget_lock_release_recursive>
 800d662:	bf00      	nop
 800d664:	20003510 	.word	0x20003510

0800d668 <__ssputs_r>:
 800d668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d66c:	461f      	mov	r7, r3
 800d66e:	688e      	ldr	r6, [r1, #8]
 800d670:	4682      	mov	sl, r0
 800d672:	42be      	cmp	r6, r7
 800d674:	460c      	mov	r4, r1
 800d676:	4690      	mov	r8, r2
 800d678:	680b      	ldr	r3, [r1, #0]
 800d67a:	d82c      	bhi.n	800d6d6 <__ssputs_r+0x6e>
 800d67c:	898a      	ldrh	r2, [r1, #12]
 800d67e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d682:	d026      	beq.n	800d6d2 <__ssputs_r+0x6a>
 800d684:	6965      	ldr	r5, [r4, #20]
 800d686:	6909      	ldr	r1, [r1, #16]
 800d688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d68c:	eba3 0901 	sub.w	r9, r3, r1
 800d690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d694:	1c7b      	adds	r3, r7, #1
 800d696:	444b      	add	r3, r9
 800d698:	106d      	asrs	r5, r5, #1
 800d69a:	429d      	cmp	r5, r3
 800d69c:	bf38      	it	cc
 800d69e:	461d      	movcc	r5, r3
 800d6a0:	0553      	lsls	r3, r2, #21
 800d6a2:	d527      	bpl.n	800d6f4 <__ssputs_r+0x8c>
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	f7ff ff53 	bl	800d550 <_malloc_r>
 800d6aa:	4606      	mov	r6, r0
 800d6ac:	b360      	cbz	r0, 800d708 <__ssputs_r+0xa0>
 800d6ae:	464a      	mov	r2, r9
 800d6b0:	6921      	ldr	r1, [r4, #16]
 800d6b2:	f7ff fed7 	bl	800d464 <memcpy>
 800d6b6:	89a3      	ldrh	r3, [r4, #12]
 800d6b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6c0:	81a3      	strh	r3, [r4, #12]
 800d6c2:	6126      	str	r6, [r4, #16]
 800d6c4:	444e      	add	r6, r9
 800d6c6:	6026      	str	r6, [r4, #0]
 800d6c8:	463e      	mov	r6, r7
 800d6ca:	6165      	str	r5, [r4, #20]
 800d6cc:	eba5 0509 	sub.w	r5, r5, r9
 800d6d0:	60a5      	str	r5, [r4, #8]
 800d6d2:	42be      	cmp	r6, r7
 800d6d4:	d900      	bls.n	800d6d8 <__ssputs_r+0x70>
 800d6d6:	463e      	mov	r6, r7
 800d6d8:	4632      	mov	r2, r6
 800d6da:	4641      	mov	r1, r8
 800d6dc:	6820      	ldr	r0, [r4, #0]
 800d6de:	f000 faaf 	bl	800dc40 <memmove>
 800d6e2:	2000      	movs	r0, #0
 800d6e4:	68a3      	ldr	r3, [r4, #8]
 800d6e6:	1b9b      	subs	r3, r3, r6
 800d6e8:	60a3      	str	r3, [r4, #8]
 800d6ea:	6823      	ldr	r3, [r4, #0]
 800d6ec:	4433      	add	r3, r6
 800d6ee:	6023      	str	r3, [r4, #0]
 800d6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6f4:	462a      	mov	r2, r5
 800d6f6:	f000 fadb 	bl	800dcb0 <_realloc_r>
 800d6fa:	4606      	mov	r6, r0
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d1e0      	bne.n	800d6c2 <__ssputs_r+0x5a>
 800d700:	4650      	mov	r0, sl
 800d702:	6921      	ldr	r1, [r4, #16]
 800d704:	f7ff febc 	bl	800d480 <_free_r>
 800d708:	230c      	movs	r3, #12
 800d70a:	f8ca 3000 	str.w	r3, [sl]
 800d70e:	89a3      	ldrh	r3, [r4, #12]
 800d710:	f04f 30ff 	mov.w	r0, #4294967295
 800d714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d718:	81a3      	strh	r3, [r4, #12]
 800d71a:	e7e9      	b.n	800d6f0 <__ssputs_r+0x88>

0800d71c <_svfiprintf_r>:
 800d71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d720:	4698      	mov	r8, r3
 800d722:	898b      	ldrh	r3, [r1, #12]
 800d724:	4607      	mov	r7, r0
 800d726:	061b      	lsls	r3, r3, #24
 800d728:	460d      	mov	r5, r1
 800d72a:	4614      	mov	r4, r2
 800d72c:	b09d      	sub	sp, #116	; 0x74
 800d72e:	d50e      	bpl.n	800d74e <_svfiprintf_r+0x32>
 800d730:	690b      	ldr	r3, [r1, #16]
 800d732:	b963      	cbnz	r3, 800d74e <_svfiprintf_r+0x32>
 800d734:	2140      	movs	r1, #64	; 0x40
 800d736:	f7ff ff0b 	bl	800d550 <_malloc_r>
 800d73a:	6028      	str	r0, [r5, #0]
 800d73c:	6128      	str	r0, [r5, #16]
 800d73e:	b920      	cbnz	r0, 800d74a <_svfiprintf_r+0x2e>
 800d740:	230c      	movs	r3, #12
 800d742:	603b      	str	r3, [r7, #0]
 800d744:	f04f 30ff 	mov.w	r0, #4294967295
 800d748:	e0d0      	b.n	800d8ec <_svfiprintf_r+0x1d0>
 800d74a:	2340      	movs	r3, #64	; 0x40
 800d74c:	616b      	str	r3, [r5, #20]
 800d74e:	2300      	movs	r3, #0
 800d750:	9309      	str	r3, [sp, #36]	; 0x24
 800d752:	2320      	movs	r3, #32
 800d754:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d758:	2330      	movs	r3, #48	; 0x30
 800d75a:	f04f 0901 	mov.w	r9, #1
 800d75e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d762:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d904 <_svfiprintf_r+0x1e8>
 800d766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d76a:	4623      	mov	r3, r4
 800d76c:	469a      	mov	sl, r3
 800d76e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d772:	b10a      	cbz	r2, 800d778 <_svfiprintf_r+0x5c>
 800d774:	2a25      	cmp	r2, #37	; 0x25
 800d776:	d1f9      	bne.n	800d76c <_svfiprintf_r+0x50>
 800d778:	ebba 0b04 	subs.w	fp, sl, r4
 800d77c:	d00b      	beq.n	800d796 <_svfiprintf_r+0x7a>
 800d77e:	465b      	mov	r3, fp
 800d780:	4622      	mov	r2, r4
 800d782:	4629      	mov	r1, r5
 800d784:	4638      	mov	r0, r7
 800d786:	f7ff ff6f 	bl	800d668 <__ssputs_r>
 800d78a:	3001      	adds	r0, #1
 800d78c:	f000 80a9 	beq.w	800d8e2 <_svfiprintf_r+0x1c6>
 800d790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d792:	445a      	add	r2, fp
 800d794:	9209      	str	r2, [sp, #36]	; 0x24
 800d796:	f89a 3000 	ldrb.w	r3, [sl]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	f000 80a1 	beq.w	800d8e2 <_svfiprintf_r+0x1c6>
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7aa:	f10a 0a01 	add.w	sl, sl, #1
 800d7ae:	9304      	str	r3, [sp, #16]
 800d7b0:	9307      	str	r3, [sp, #28]
 800d7b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7b6:	931a      	str	r3, [sp, #104]	; 0x68
 800d7b8:	4654      	mov	r4, sl
 800d7ba:	2205      	movs	r2, #5
 800d7bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c0:	4850      	ldr	r0, [pc, #320]	; (800d904 <_svfiprintf_r+0x1e8>)
 800d7c2:	f000 fa67 	bl	800dc94 <memchr>
 800d7c6:	9a04      	ldr	r2, [sp, #16]
 800d7c8:	b9d8      	cbnz	r0, 800d802 <_svfiprintf_r+0xe6>
 800d7ca:	06d0      	lsls	r0, r2, #27
 800d7cc:	bf44      	itt	mi
 800d7ce:	2320      	movmi	r3, #32
 800d7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7d4:	0711      	lsls	r1, r2, #28
 800d7d6:	bf44      	itt	mi
 800d7d8:	232b      	movmi	r3, #43	; 0x2b
 800d7da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7de:	f89a 3000 	ldrb.w	r3, [sl]
 800d7e2:	2b2a      	cmp	r3, #42	; 0x2a
 800d7e4:	d015      	beq.n	800d812 <_svfiprintf_r+0xf6>
 800d7e6:	4654      	mov	r4, sl
 800d7e8:	2000      	movs	r0, #0
 800d7ea:	f04f 0c0a 	mov.w	ip, #10
 800d7ee:	9a07      	ldr	r2, [sp, #28]
 800d7f0:	4621      	mov	r1, r4
 800d7f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7f6:	3b30      	subs	r3, #48	; 0x30
 800d7f8:	2b09      	cmp	r3, #9
 800d7fa:	d94d      	bls.n	800d898 <_svfiprintf_r+0x17c>
 800d7fc:	b1b0      	cbz	r0, 800d82c <_svfiprintf_r+0x110>
 800d7fe:	9207      	str	r2, [sp, #28]
 800d800:	e014      	b.n	800d82c <_svfiprintf_r+0x110>
 800d802:	eba0 0308 	sub.w	r3, r0, r8
 800d806:	fa09 f303 	lsl.w	r3, r9, r3
 800d80a:	4313      	orrs	r3, r2
 800d80c:	46a2      	mov	sl, r4
 800d80e:	9304      	str	r3, [sp, #16]
 800d810:	e7d2      	b.n	800d7b8 <_svfiprintf_r+0x9c>
 800d812:	9b03      	ldr	r3, [sp, #12]
 800d814:	1d19      	adds	r1, r3, #4
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	9103      	str	r1, [sp, #12]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	bfbb      	ittet	lt
 800d81e:	425b      	neglt	r3, r3
 800d820:	f042 0202 	orrlt.w	r2, r2, #2
 800d824:	9307      	strge	r3, [sp, #28]
 800d826:	9307      	strlt	r3, [sp, #28]
 800d828:	bfb8      	it	lt
 800d82a:	9204      	strlt	r2, [sp, #16]
 800d82c:	7823      	ldrb	r3, [r4, #0]
 800d82e:	2b2e      	cmp	r3, #46	; 0x2e
 800d830:	d10c      	bne.n	800d84c <_svfiprintf_r+0x130>
 800d832:	7863      	ldrb	r3, [r4, #1]
 800d834:	2b2a      	cmp	r3, #42	; 0x2a
 800d836:	d134      	bne.n	800d8a2 <_svfiprintf_r+0x186>
 800d838:	9b03      	ldr	r3, [sp, #12]
 800d83a:	3402      	adds	r4, #2
 800d83c:	1d1a      	adds	r2, r3, #4
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	9203      	str	r2, [sp, #12]
 800d842:	2b00      	cmp	r3, #0
 800d844:	bfb8      	it	lt
 800d846:	f04f 33ff 	movlt.w	r3, #4294967295
 800d84a:	9305      	str	r3, [sp, #20]
 800d84c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d908 <_svfiprintf_r+0x1ec>
 800d850:	2203      	movs	r2, #3
 800d852:	4650      	mov	r0, sl
 800d854:	7821      	ldrb	r1, [r4, #0]
 800d856:	f000 fa1d 	bl	800dc94 <memchr>
 800d85a:	b138      	cbz	r0, 800d86c <_svfiprintf_r+0x150>
 800d85c:	2240      	movs	r2, #64	; 0x40
 800d85e:	9b04      	ldr	r3, [sp, #16]
 800d860:	eba0 000a 	sub.w	r0, r0, sl
 800d864:	4082      	lsls	r2, r0
 800d866:	4313      	orrs	r3, r2
 800d868:	3401      	adds	r4, #1
 800d86a:	9304      	str	r3, [sp, #16]
 800d86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d870:	2206      	movs	r2, #6
 800d872:	4826      	ldr	r0, [pc, #152]	; (800d90c <_svfiprintf_r+0x1f0>)
 800d874:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d878:	f000 fa0c 	bl	800dc94 <memchr>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d038      	beq.n	800d8f2 <_svfiprintf_r+0x1d6>
 800d880:	4b23      	ldr	r3, [pc, #140]	; (800d910 <_svfiprintf_r+0x1f4>)
 800d882:	bb1b      	cbnz	r3, 800d8cc <_svfiprintf_r+0x1b0>
 800d884:	9b03      	ldr	r3, [sp, #12]
 800d886:	3307      	adds	r3, #7
 800d888:	f023 0307 	bic.w	r3, r3, #7
 800d88c:	3308      	adds	r3, #8
 800d88e:	9303      	str	r3, [sp, #12]
 800d890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d892:	4433      	add	r3, r6
 800d894:	9309      	str	r3, [sp, #36]	; 0x24
 800d896:	e768      	b.n	800d76a <_svfiprintf_r+0x4e>
 800d898:	460c      	mov	r4, r1
 800d89a:	2001      	movs	r0, #1
 800d89c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8a0:	e7a6      	b.n	800d7f0 <_svfiprintf_r+0xd4>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	f04f 0c0a 	mov.w	ip, #10
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	3401      	adds	r4, #1
 800d8ac:	9305      	str	r3, [sp, #20]
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8b4:	3a30      	subs	r2, #48	; 0x30
 800d8b6:	2a09      	cmp	r2, #9
 800d8b8:	d903      	bls.n	800d8c2 <_svfiprintf_r+0x1a6>
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d0c6      	beq.n	800d84c <_svfiprintf_r+0x130>
 800d8be:	9105      	str	r1, [sp, #20]
 800d8c0:	e7c4      	b.n	800d84c <_svfiprintf_r+0x130>
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8ca:	e7f0      	b.n	800d8ae <_svfiprintf_r+0x192>
 800d8cc:	ab03      	add	r3, sp, #12
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	462a      	mov	r2, r5
 800d8d2:	4638      	mov	r0, r7
 800d8d4:	4b0f      	ldr	r3, [pc, #60]	; (800d914 <_svfiprintf_r+0x1f8>)
 800d8d6:	a904      	add	r1, sp, #16
 800d8d8:	f3af 8000 	nop.w
 800d8dc:	1c42      	adds	r2, r0, #1
 800d8de:	4606      	mov	r6, r0
 800d8e0:	d1d6      	bne.n	800d890 <_svfiprintf_r+0x174>
 800d8e2:	89ab      	ldrh	r3, [r5, #12]
 800d8e4:	065b      	lsls	r3, r3, #25
 800d8e6:	f53f af2d 	bmi.w	800d744 <_svfiprintf_r+0x28>
 800d8ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8ec:	b01d      	add	sp, #116	; 0x74
 800d8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f2:	ab03      	add	r3, sp, #12
 800d8f4:	9300      	str	r3, [sp, #0]
 800d8f6:	462a      	mov	r2, r5
 800d8f8:	4638      	mov	r0, r7
 800d8fa:	4b06      	ldr	r3, [pc, #24]	; (800d914 <_svfiprintf_r+0x1f8>)
 800d8fc:	a904      	add	r1, sp, #16
 800d8fe:	f000 f87d 	bl	800d9fc <_printf_i>
 800d902:	e7eb      	b.n	800d8dc <_svfiprintf_r+0x1c0>
 800d904:	0800de32 	.word	0x0800de32
 800d908:	0800de38 	.word	0x0800de38
 800d90c:	0800de3c 	.word	0x0800de3c
 800d910:	00000000 	.word	0x00000000
 800d914:	0800d669 	.word	0x0800d669

0800d918 <_printf_common>:
 800d918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d91c:	4616      	mov	r6, r2
 800d91e:	4699      	mov	r9, r3
 800d920:	688a      	ldr	r2, [r1, #8]
 800d922:	690b      	ldr	r3, [r1, #16]
 800d924:	4607      	mov	r7, r0
 800d926:	4293      	cmp	r3, r2
 800d928:	bfb8      	it	lt
 800d92a:	4613      	movlt	r3, r2
 800d92c:	6033      	str	r3, [r6, #0]
 800d92e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d932:	460c      	mov	r4, r1
 800d934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d938:	b10a      	cbz	r2, 800d93e <_printf_common+0x26>
 800d93a:	3301      	adds	r3, #1
 800d93c:	6033      	str	r3, [r6, #0]
 800d93e:	6823      	ldr	r3, [r4, #0]
 800d940:	0699      	lsls	r1, r3, #26
 800d942:	bf42      	ittt	mi
 800d944:	6833      	ldrmi	r3, [r6, #0]
 800d946:	3302      	addmi	r3, #2
 800d948:	6033      	strmi	r3, [r6, #0]
 800d94a:	6825      	ldr	r5, [r4, #0]
 800d94c:	f015 0506 	ands.w	r5, r5, #6
 800d950:	d106      	bne.n	800d960 <_printf_common+0x48>
 800d952:	f104 0a19 	add.w	sl, r4, #25
 800d956:	68e3      	ldr	r3, [r4, #12]
 800d958:	6832      	ldr	r2, [r6, #0]
 800d95a:	1a9b      	subs	r3, r3, r2
 800d95c:	42ab      	cmp	r3, r5
 800d95e:	dc2b      	bgt.n	800d9b8 <_printf_common+0xa0>
 800d960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d964:	1e13      	subs	r3, r2, #0
 800d966:	6822      	ldr	r2, [r4, #0]
 800d968:	bf18      	it	ne
 800d96a:	2301      	movne	r3, #1
 800d96c:	0692      	lsls	r2, r2, #26
 800d96e:	d430      	bmi.n	800d9d2 <_printf_common+0xba>
 800d970:	4649      	mov	r1, r9
 800d972:	4638      	mov	r0, r7
 800d974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d978:	47c0      	blx	r8
 800d97a:	3001      	adds	r0, #1
 800d97c:	d023      	beq.n	800d9c6 <_printf_common+0xae>
 800d97e:	6823      	ldr	r3, [r4, #0]
 800d980:	6922      	ldr	r2, [r4, #16]
 800d982:	f003 0306 	and.w	r3, r3, #6
 800d986:	2b04      	cmp	r3, #4
 800d988:	bf14      	ite	ne
 800d98a:	2500      	movne	r5, #0
 800d98c:	6833      	ldreq	r3, [r6, #0]
 800d98e:	f04f 0600 	mov.w	r6, #0
 800d992:	bf08      	it	eq
 800d994:	68e5      	ldreq	r5, [r4, #12]
 800d996:	f104 041a 	add.w	r4, r4, #26
 800d99a:	bf08      	it	eq
 800d99c:	1aed      	subeq	r5, r5, r3
 800d99e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d9a2:	bf08      	it	eq
 800d9a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	bfc4      	itt	gt
 800d9ac:	1a9b      	subgt	r3, r3, r2
 800d9ae:	18ed      	addgt	r5, r5, r3
 800d9b0:	42b5      	cmp	r5, r6
 800d9b2:	d11a      	bne.n	800d9ea <_printf_common+0xd2>
 800d9b4:	2000      	movs	r0, #0
 800d9b6:	e008      	b.n	800d9ca <_printf_common+0xb2>
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	4652      	mov	r2, sl
 800d9bc:	4649      	mov	r1, r9
 800d9be:	4638      	mov	r0, r7
 800d9c0:	47c0      	blx	r8
 800d9c2:	3001      	adds	r0, #1
 800d9c4:	d103      	bne.n	800d9ce <_printf_common+0xb6>
 800d9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9ce:	3501      	adds	r5, #1
 800d9d0:	e7c1      	b.n	800d956 <_printf_common+0x3e>
 800d9d2:	2030      	movs	r0, #48	; 0x30
 800d9d4:	18e1      	adds	r1, r4, r3
 800d9d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d9da:	1c5a      	adds	r2, r3, #1
 800d9dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d9e0:	4422      	add	r2, r4
 800d9e2:	3302      	adds	r3, #2
 800d9e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d9e8:	e7c2      	b.n	800d970 <_printf_common+0x58>
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	4622      	mov	r2, r4
 800d9ee:	4649      	mov	r1, r9
 800d9f0:	4638      	mov	r0, r7
 800d9f2:	47c0      	blx	r8
 800d9f4:	3001      	adds	r0, #1
 800d9f6:	d0e6      	beq.n	800d9c6 <_printf_common+0xae>
 800d9f8:	3601      	adds	r6, #1
 800d9fa:	e7d9      	b.n	800d9b0 <_printf_common+0x98>

0800d9fc <_printf_i>:
 800d9fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da00:	7e0f      	ldrb	r7, [r1, #24]
 800da02:	4691      	mov	r9, r2
 800da04:	2f78      	cmp	r7, #120	; 0x78
 800da06:	4680      	mov	r8, r0
 800da08:	460c      	mov	r4, r1
 800da0a:	469a      	mov	sl, r3
 800da0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da12:	d807      	bhi.n	800da24 <_printf_i+0x28>
 800da14:	2f62      	cmp	r7, #98	; 0x62
 800da16:	d80a      	bhi.n	800da2e <_printf_i+0x32>
 800da18:	2f00      	cmp	r7, #0
 800da1a:	f000 80d5 	beq.w	800dbc8 <_printf_i+0x1cc>
 800da1e:	2f58      	cmp	r7, #88	; 0x58
 800da20:	f000 80c1 	beq.w	800dba6 <_printf_i+0x1aa>
 800da24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da2c:	e03a      	b.n	800daa4 <_printf_i+0xa8>
 800da2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da32:	2b15      	cmp	r3, #21
 800da34:	d8f6      	bhi.n	800da24 <_printf_i+0x28>
 800da36:	a101      	add	r1, pc, #4	; (adr r1, 800da3c <_printf_i+0x40>)
 800da38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da3c:	0800da95 	.word	0x0800da95
 800da40:	0800daa9 	.word	0x0800daa9
 800da44:	0800da25 	.word	0x0800da25
 800da48:	0800da25 	.word	0x0800da25
 800da4c:	0800da25 	.word	0x0800da25
 800da50:	0800da25 	.word	0x0800da25
 800da54:	0800daa9 	.word	0x0800daa9
 800da58:	0800da25 	.word	0x0800da25
 800da5c:	0800da25 	.word	0x0800da25
 800da60:	0800da25 	.word	0x0800da25
 800da64:	0800da25 	.word	0x0800da25
 800da68:	0800dbaf 	.word	0x0800dbaf
 800da6c:	0800dad5 	.word	0x0800dad5
 800da70:	0800db69 	.word	0x0800db69
 800da74:	0800da25 	.word	0x0800da25
 800da78:	0800da25 	.word	0x0800da25
 800da7c:	0800dbd1 	.word	0x0800dbd1
 800da80:	0800da25 	.word	0x0800da25
 800da84:	0800dad5 	.word	0x0800dad5
 800da88:	0800da25 	.word	0x0800da25
 800da8c:	0800da25 	.word	0x0800da25
 800da90:	0800db71 	.word	0x0800db71
 800da94:	682b      	ldr	r3, [r5, #0]
 800da96:	1d1a      	adds	r2, r3, #4
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	602a      	str	r2, [r5, #0]
 800da9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800daa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800daa4:	2301      	movs	r3, #1
 800daa6:	e0a0      	b.n	800dbea <_printf_i+0x1ee>
 800daa8:	6820      	ldr	r0, [r4, #0]
 800daaa:	682b      	ldr	r3, [r5, #0]
 800daac:	0607      	lsls	r7, r0, #24
 800daae:	f103 0104 	add.w	r1, r3, #4
 800dab2:	6029      	str	r1, [r5, #0]
 800dab4:	d501      	bpl.n	800daba <_printf_i+0xbe>
 800dab6:	681e      	ldr	r6, [r3, #0]
 800dab8:	e003      	b.n	800dac2 <_printf_i+0xc6>
 800daba:	0646      	lsls	r6, r0, #25
 800dabc:	d5fb      	bpl.n	800dab6 <_printf_i+0xba>
 800dabe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dac2:	2e00      	cmp	r6, #0
 800dac4:	da03      	bge.n	800dace <_printf_i+0xd2>
 800dac6:	232d      	movs	r3, #45	; 0x2d
 800dac8:	4276      	negs	r6, r6
 800daca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dace:	230a      	movs	r3, #10
 800dad0:	4859      	ldr	r0, [pc, #356]	; (800dc38 <_printf_i+0x23c>)
 800dad2:	e012      	b.n	800dafa <_printf_i+0xfe>
 800dad4:	682b      	ldr	r3, [r5, #0]
 800dad6:	6820      	ldr	r0, [r4, #0]
 800dad8:	1d19      	adds	r1, r3, #4
 800dada:	6029      	str	r1, [r5, #0]
 800dadc:	0605      	lsls	r5, r0, #24
 800dade:	d501      	bpl.n	800dae4 <_printf_i+0xe8>
 800dae0:	681e      	ldr	r6, [r3, #0]
 800dae2:	e002      	b.n	800daea <_printf_i+0xee>
 800dae4:	0641      	lsls	r1, r0, #25
 800dae6:	d5fb      	bpl.n	800dae0 <_printf_i+0xe4>
 800dae8:	881e      	ldrh	r6, [r3, #0]
 800daea:	2f6f      	cmp	r7, #111	; 0x6f
 800daec:	bf0c      	ite	eq
 800daee:	2308      	moveq	r3, #8
 800daf0:	230a      	movne	r3, #10
 800daf2:	4851      	ldr	r0, [pc, #324]	; (800dc38 <_printf_i+0x23c>)
 800daf4:	2100      	movs	r1, #0
 800daf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dafa:	6865      	ldr	r5, [r4, #4]
 800dafc:	2d00      	cmp	r5, #0
 800dafe:	bfa8      	it	ge
 800db00:	6821      	ldrge	r1, [r4, #0]
 800db02:	60a5      	str	r5, [r4, #8]
 800db04:	bfa4      	itt	ge
 800db06:	f021 0104 	bicge.w	r1, r1, #4
 800db0a:	6021      	strge	r1, [r4, #0]
 800db0c:	b90e      	cbnz	r6, 800db12 <_printf_i+0x116>
 800db0e:	2d00      	cmp	r5, #0
 800db10:	d04b      	beq.n	800dbaa <_printf_i+0x1ae>
 800db12:	4615      	mov	r5, r2
 800db14:	fbb6 f1f3 	udiv	r1, r6, r3
 800db18:	fb03 6711 	mls	r7, r3, r1, r6
 800db1c:	5dc7      	ldrb	r7, [r0, r7]
 800db1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db22:	4637      	mov	r7, r6
 800db24:	42bb      	cmp	r3, r7
 800db26:	460e      	mov	r6, r1
 800db28:	d9f4      	bls.n	800db14 <_printf_i+0x118>
 800db2a:	2b08      	cmp	r3, #8
 800db2c:	d10b      	bne.n	800db46 <_printf_i+0x14a>
 800db2e:	6823      	ldr	r3, [r4, #0]
 800db30:	07de      	lsls	r6, r3, #31
 800db32:	d508      	bpl.n	800db46 <_printf_i+0x14a>
 800db34:	6923      	ldr	r3, [r4, #16]
 800db36:	6861      	ldr	r1, [r4, #4]
 800db38:	4299      	cmp	r1, r3
 800db3a:	bfde      	ittt	le
 800db3c:	2330      	movle	r3, #48	; 0x30
 800db3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800db42:	f105 35ff 	addle.w	r5, r5, #4294967295
 800db46:	1b52      	subs	r2, r2, r5
 800db48:	6122      	str	r2, [r4, #16]
 800db4a:	464b      	mov	r3, r9
 800db4c:	4621      	mov	r1, r4
 800db4e:	4640      	mov	r0, r8
 800db50:	f8cd a000 	str.w	sl, [sp]
 800db54:	aa03      	add	r2, sp, #12
 800db56:	f7ff fedf 	bl	800d918 <_printf_common>
 800db5a:	3001      	adds	r0, #1
 800db5c:	d14a      	bne.n	800dbf4 <_printf_i+0x1f8>
 800db5e:	f04f 30ff 	mov.w	r0, #4294967295
 800db62:	b004      	add	sp, #16
 800db64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db68:	6823      	ldr	r3, [r4, #0]
 800db6a:	f043 0320 	orr.w	r3, r3, #32
 800db6e:	6023      	str	r3, [r4, #0]
 800db70:	2778      	movs	r7, #120	; 0x78
 800db72:	4832      	ldr	r0, [pc, #200]	; (800dc3c <_printf_i+0x240>)
 800db74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800db78:	6823      	ldr	r3, [r4, #0]
 800db7a:	6829      	ldr	r1, [r5, #0]
 800db7c:	061f      	lsls	r7, r3, #24
 800db7e:	f851 6b04 	ldr.w	r6, [r1], #4
 800db82:	d402      	bmi.n	800db8a <_printf_i+0x18e>
 800db84:	065f      	lsls	r7, r3, #25
 800db86:	bf48      	it	mi
 800db88:	b2b6      	uxthmi	r6, r6
 800db8a:	07df      	lsls	r7, r3, #31
 800db8c:	bf48      	it	mi
 800db8e:	f043 0320 	orrmi.w	r3, r3, #32
 800db92:	6029      	str	r1, [r5, #0]
 800db94:	bf48      	it	mi
 800db96:	6023      	strmi	r3, [r4, #0]
 800db98:	b91e      	cbnz	r6, 800dba2 <_printf_i+0x1a6>
 800db9a:	6823      	ldr	r3, [r4, #0]
 800db9c:	f023 0320 	bic.w	r3, r3, #32
 800dba0:	6023      	str	r3, [r4, #0]
 800dba2:	2310      	movs	r3, #16
 800dba4:	e7a6      	b.n	800daf4 <_printf_i+0xf8>
 800dba6:	4824      	ldr	r0, [pc, #144]	; (800dc38 <_printf_i+0x23c>)
 800dba8:	e7e4      	b.n	800db74 <_printf_i+0x178>
 800dbaa:	4615      	mov	r5, r2
 800dbac:	e7bd      	b.n	800db2a <_printf_i+0x12e>
 800dbae:	682b      	ldr	r3, [r5, #0]
 800dbb0:	6826      	ldr	r6, [r4, #0]
 800dbb2:	1d18      	adds	r0, r3, #4
 800dbb4:	6961      	ldr	r1, [r4, #20]
 800dbb6:	6028      	str	r0, [r5, #0]
 800dbb8:	0635      	lsls	r5, r6, #24
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	d501      	bpl.n	800dbc2 <_printf_i+0x1c6>
 800dbbe:	6019      	str	r1, [r3, #0]
 800dbc0:	e002      	b.n	800dbc8 <_printf_i+0x1cc>
 800dbc2:	0670      	lsls	r0, r6, #25
 800dbc4:	d5fb      	bpl.n	800dbbe <_printf_i+0x1c2>
 800dbc6:	8019      	strh	r1, [r3, #0]
 800dbc8:	2300      	movs	r3, #0
 800dbca:	4615      	mov	r5, r2
 800dbcc:	6123      	str	r3, [r4, #16]
 800dbce:	e7bc      	b.n	800db4a <_printf_i+0x14e>
 800dbd0:	682b      	ldr	r3, [r5, #0]
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	1d1a      	adds	r2, r3, #4
 800dbd6:	602a      	str	r2, [r5, #0]
 800dbd8:	681d      	ldr	r5, [r3, #0]
 800dbda:	6862      	ldr	r2, [r4, #4]
 800dbdc:	4628      	mov	r0, r5
 800dbde:	f000 f859 	bl	800dc94 <memchr>
 800dbe2:	b108      	cbz	r0, 800dbe8 <_printf_i+0x1ec>
 800dbe4:	1b40      	subs	r0, r0, r5
 800dbe6:	6060      	str	r0, [r4, #4]
 800dbe8:	6863      	ldr	r3, [r4, #4]
 800dbea:	6123      	str	r3, [r4, #16]
 800dbec:	2300      	movs	r3, #0
 800dbee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbf2:	e7aa      	b.n	800db4a <_printf_i+0x14e>
 800dbf4:	462a      	mov	r2, r5
 800dbf6:	4649      	mov	r1, r9
 800dbf8:	4640      	mov	r0, r8
 800dbfa:	6923      	ldr	r3, [r4, #16]
 800dbfc:	47d0      	blx	sl
 800dbfe:	3001      	adds	r0, #1
 800dc00:	d0ad      	beq.n	800db5e <_printf_i+0x162>
 800dc02:	6823      	ldr	r3, [r4, #0]
 800dc04:	079b      	lsls	r3, r3, #30
 800dc06:	d413      	bmi.n	800dc30 <_printf_i+0x234>
 800dc08:	68e0      	ldr	r0, [r4, #12]
 800dc0a:	9b03      	ldr	r3, [sp, #12]
 800dc0c:	4298      	cmp	r0, r3
 800dc0e:	bfb8      	it	lt
 800dc10:	4618      	movlt	r0, r3
 800dc12:	e7a6      	b.n	800db62 <_printf_i+0x166>
 800dc14:	2301      	movs	r3, #1
 800dc16:	4632      	mov	r2, r6
 800dc18:	4649      	mov	r1, r9
 800dc1a:	4640      	mov	r0, r8
 800dc1c:	47d0      	blx	sl
 800dc1e:	3001      	adds	r0, #1
 800dc20:	d09d      	beq.n	800db5e <_printf_i+0x162>
 800dc22:	3501      	adds	r5, #1
 800dc24:	68e3      	ldr	r3, [r4, #12]
 800dc26:	9903      	ldr	r1, [sp, #12]
 800dc28:	1a5b      	subs	r3, r3, r1
 800dc2a:	42ab      	cmp	r3, r5
 800dc2c:	dcf2      	bgt.n	800dc14 <_printf_i+0x218>
 800dc2e:	e7eb      	b.n	800dc08 <_printf_i+0x20c>
 800dc30:	2500      	movs	r5, #0
 800dc32:	f104 0619 	add.w	r6, r4, #25
 800dc36:	e7f5      	b.n	800dc24 <_printf_i+0x228>
 800dc38:	0800de43 	.word	0x0800de43
 800dc3c:	0800de54 	.word	0x0800de54

0800dc40 <memmove>:
 800dc40:	4288      	cmp	r0, r1
 800dc42:	b510      	push	{r4, lr}
 800dc44:	eb01 0402 	add.w	r4, r1, r2
 800dc48:	d902      	bls.n	800dc50 <memmove+0x10>
 800dc4a:	4284      	cmp	r4, r0
 800dc4c:	4623      	mov	r3, r4
 800dc4e:	d807      	bhi.n	800dc60 <memmove+0x20>
 800dc50:	1e43      	subs	r3, r0, #1
 800dc52:	42a1      	cmp	r1, r4
 800dc54:	d008      	beq.n	800dc68 <memmove+0x28>
 800dc56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc5e:	e7f8      	b.n	800dc52 <memmove+0x12>
 800dc60:	4601      	mov	r1, r0
 800dc62:	4402      	add	r2, r0
 800dc64:	428a      	cmp	r2, r1
 800dc66:	d100      	bne.n	800dc6a <memmove+0x2a>
 800dc68:	bd10      	pop	{r4, pc}
 800dc6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc72:	e7f7      	b.n	800dc64 <memmove+0x24>

0800dc74 <_sbrk_r>:
 800dc74:	b538      	push	{r3, r4, r5, lr}
 800dc76:	2300      	movs	r3, #0
 800dc78:	4d05      	ldr	r5, [pc, #20]	; (800dc90 <_sbrk_r+0x1c>)
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	4608      	mov	r0, r1
 800dc7e:	602b      	str	r3, [r5, #0]
 800dc80:	f7f3 fec2 	bl	8001a08 <_sbrk>
 800dc84:	1c43      	adds	r3, r0, #1
 800dc86:	d102      	bne.n	800dc8e <_sbrk_r+0x1a>
 800dc88:	682b      	ldr	r3, [r5, #0]
 800dc8a:	b103      	cbz	r3, 800dc8e <_sbrk_r+0x1a>
 800dc8c:	6023      	str	r3, [r4, #0]
 800dc8e:	bd38      	pop	{r3, r4, r5, pc}
 800dc90:	2000350c 	.word	0x2000350c

0800dc94 <memchr>:
 800dc94:	4603      	mov	r3, r0
 800dc96:	b510      	push	{r4, lr}
 800dc98:	b2c9      	uxtb	r1, r1
 800dc9a:	4402      	add	r2, r0
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	d101      	bne.n	800dca6 <memchr+0x12>
 800dca2:	2000      	movs	r0, #0
 800dca4:	e003      	b.n	800dcae <memchr+0x1a>
 800dca6:	7804      	ldrb	r4, [r0, #0]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	428c      	cmp	r4, r1
 800dcac:	d1f6      	bne.n	800dc9c <memchr+0x8>
 800dcae:	bd10      	pop	{r4, pc}

0800dcb0 <_realloc_r>:
 800dcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb4:	4680      	mov	r8, r0
 800dcb6:	4614      	mov	r4, r2
 800dcb8:	460e      	mov	r6, r1
 800dcba:	b921      	cbnz	r1, 800dcc6 <_realloc_r+0x16>
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcc2:	f7ff bc45 	b.w	800d550 <_malloc_r>
 800dcc6:	b92a      	cbnz	r2, 800dcd4 <_realloc_r+0x24>
 800dcc8:	f7ff fbda 	bl	800d480 <_free_r>
 800dccc:	4625      	mov	r5, r4
 800dcce:	4628      	mov	r0, r5
 800dcd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd4:	f000 f81b 	bl	800dd0e <_malloc_usable_size_r>
 800dcd8:	4284      	cmp	r4, r0
 800dcda:	4607      	mov	r7, r0
 800dcdc:	d802      	bhi.n	800dce4 <_realloc_r+0x34>
 800dcde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dce2:	d812      	bhi.n	800dd0a <_realloc_r+0x5a>
 800dce4:	4621      	mov	r1, r4
 800dce6:	4640      	mov	r0, r8
 800dce8:	f7ff fc32 	bl	800d550 <_malloc_r>
 800dcec:	4605      	mov	r5, r0
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	d0ed      	beq.n	800dcce <_realloc_r+0x1e>
 800dcf2:	42bc      	cmp	r4, r7
 800dcf4:	4622      	mov	r2, r4
 800dcf6:	4631      	mov	r1, r6
 800dcf8:	bf28      	it	cs
 800dcfa:	463a      	movcs	r2, r7
 800dcfc:	f7ff fbb2 	bl	800d464 <memcpy>
 800dd00:	4631      	mov	r1, r6
 800dd02:	4640      	mov	r0, r8
 800dd04:	f7ff fbbc 	bl	800d480 <_free_r>
 800dd08:	e7e1      	b.n	800dcce <_realloc_r+0x1e>
 800dd0a:	4635      	mov	r5, r6
 800dd0c:	e7df      	b.n	800dcce <_realloc_r+0x1e>

0800dd0e <_malloc_usable_size_r>:
 800dd0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd12:	1f18      	subs	r0, r3, #4
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	bfbc      	itt	lt
 800dd18:	580b      	ldrlt	r3, [r1, r0]
 800dd1a:	18c0      	addlt	r0, r0, r3
 800dd1c:	4770      	bx	lr
	...

0800dd20 <_init>:
 800dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd22:	bf00      	nop
 800dd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd26:	bc08      	pop	{r3}
 800dd28:	469e      	mov	lr, r3
 800dd2a:	4770      	bx	lr

0800dd2c <_fini>:
 800dd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2e:	bf00      	nop
 800dd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd32:	bc08      	pop	{r3}
 800dd34:	469e      	mov	lr, r3
 800dd36:	4770      	bx	lr
