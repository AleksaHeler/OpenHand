
OpenHandFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f70  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005080  08005080  00015080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800512c  0800512c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800512c  0800512c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800512c  0800512c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c20  20000060  08005194  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c80  08005194  00021c80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013514  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d0e  00000000  00000000  000335e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  000362f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d05  00000000  00000000  000373c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000027aa  00000000  00000000  000380cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012628  00000000  00000000  0003a877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000917c9  00000000  00000000  0004ce9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004900  00000000  00000000  000de668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000e2f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005068 	.word	0x08005068

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005068 	.word	0x08005068

08000150 <main_f_Init_v>:
/**
 *  @todo Description
 *  @note Called once during boot
 */
void main_f_Init_v(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* Start all PWM channels */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);  /* Motor 1 */
 8000154:	2108      	movs	r1, #8
 8000156:	4806      	ldr	r0, [pc, #24]	; (8000170 <main_f_Init_v+0x20>)
 8000158:	f001 fc3e 	bl	80019d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  /* Motor 2 */
 800015c:	2100      	movs	r1, #0
 800015e:	4805      	ldr	r0, [pc, #20]	; (8000174 <main_f_Init_v+0x24>)
 8000160:	f001 fc3a 	bl	80019d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  /* Motor 3 */
 8000164:	2108      	movs	r1, #8
 8000166:	4803      	ldr	r0, [pc, #12]	; (8000174 <main_f_Init_v+0x24>)
 8000168:	f001 fc36 	bl	80019d8 <HAL_TIM_PWM_Start>
//  }
//  else
//  {
//    my_mode = 0;
//  }
}
 800016c:	bf00      	nop
 800016e:	bd80      	pop	{r7, pc}
 8000170:	200000c4 	.word	0x200000c4
 8000174:	2000007c 	.word	0x2000007c

08000178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800017c:	f000 fc26 	bl	80009cc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000180:	f000 f82c 	bl	80001dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000184:	f000 f956 	bl	8000434 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000188:	f000 f86e 	bl	8000268 <MX_TIM1_Init>
  MX_TIM3_Init();
 800018c:	f000 f8fa 	bl	8000384 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  main_f_Init_v();
 8000190:	f7ff ffde 	bl	8000150 <main_f_Init_v>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000194:	f002 f980 	bl	8002498 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of hand_control */
  hand_controlHandle = osThreadNew(hand_control_function, NULL, &hand_control_attributes);
 8000198:	4a0a      	ldr	r2, [pc, #40]	; (80001c4 <main+0x4c>)
 800019a:	2100      	movs	r1, #0
 800019c:	480a      	ldr	r0, [pc, #40]	; (80001c8 <main+0x50>)
 800019e:	f002 f9e1 	bl	8002564 <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a09      	ldr	r2, [pc, #36]	; (80001cc <main+0x54>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of system_health */
  system_healthHandle = osThreadNew(system_health_function, NULL, &system_health_attributes);
 80001a8:	4a09      	ldr	r2, [pc, #36]	; (80001d0 <main+0x58>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	4809      	ldr	r0, [pc, #36]	; (80001d4 <main+0x5c>)
 80001ae:	f002 f9d9 	bl	8002564 <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a08      	ldr	r2, [pc, #32]	; (80001d8 <main+0x60>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001b8:	f002 f9a0 	bl	80024fc <osKernelStart>
 80001bc:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80001be:	4618      	mov	r0, r3
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	080050b8 	.word	0x080050b8
 80001c8:	08000559 	.word	0x08000559
 80001cc:	2000010c 	.word	0x2000010c
 80001d0:	080050dc 	.word	0x080050dc
 80001d4:	08000641 	.word	0x08000641
 80001d8:	20000110 	.word	0x20000110

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b090      	sub	sp, #64	; 0x40
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0318 	add.w	r3, r7, #24
 80001e6:	2228      	movs	r2, #40	; 0x28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f004 fe56 	bl	8004e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]
 80001fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001fe:	2301      	movs	r3, #1
 8000200:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000206:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800020c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000212:	2302      	movs	r3, #2
 8000214:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800021c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000220:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000222:	f107 0318 	add.w	r3, r7, #24
 8000226:	4618      	mov	r0, r3
 8000228:	f000 feae 	bl	8000f88 <HAL_RCC_OscConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000232:	f000 fa27 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000236:	230f      	movs	r3, #15
 8000238:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023a:	2302      	movs	r3, #2
 800023c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000246:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2102      	movs	r1, #2
 8000250:	4618      	mov	r0, r3
 8000252:	f001 f91b 	bl	800148c <HAL_RCC_ClockConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800025c:	f000 fa12 	bl	8000684 <Error_Handler>
  }
}
 8000260:	bf00      	nop
 8000262:	3740      	adds	r7, #64	; 0x40
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b092      	sub	sp, #72	; 0x48
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800026e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
 8000288:	615a      	str	r2, [r3, #20]
 800028a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2220      	movs	r2, #32
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f004 fe02 	bl	8004e9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000298:	4b38      	ldr	r3, [pc, #224]	; (800037c <MX_TIM1_Init+0x114>)
 800029a:	4a39      	ldr	r2, [pc, #228]	; (8000380 <MX_TIM1_Init+0x118>)
 800029c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 800029e:	4b37      	ldr	r3, [pc, #220]	; (800037c <MX_TIM1_Init+0x114>)
 80002a0:	2248      	movs	r2, #72	; 0x48
 80002a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002a4:	4b35      	ldr	r3, [pc, #212]	; (800037c <MX_TIM1_Init+0x114>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 80002aa:	4b34      	ldr	r3, [pc, #208]	; (800037c <MX_TIM1_Init+0x114>)
 80002ac:	2213      	movs	r2, #19
 80002ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002b0:	4b32      	ldr	r3, [pc, #200]	; (800037c <MX_TIM1_Init+0x114>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002b6:	4b31      	ldr	r3, [pc, #196]	; (800037c <MX_TIM1_Init+0x114>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002bc:	4b2f      	ldr	r3, [pc, #188]	; (800037c <MX_TIM1_Init+0x114>)
 80002be:	2200      	movs	r2, #0
 80002c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80002c2:	482e      	ldr	r0, [pc, #184]	; (800037c <MX_TIM1_Init+0x114>)
 80002c4:	f001 fb38 	bl	8001938 <HAL_TIM_PWM_Init>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80002ce:	f000 f9d9 	bl	8000684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d2:	2300      	movs	r3, #0
 80002d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002d6:	2300      	movs	r3, #0
 80002d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002de:	4619      	mov	r1, r3
 80002e0:	4826      	ldr	r0, [pc, #152]	; (800037c <MX_TIM1_Init+0x114>)
 80002e2:	f002 f817 	bl	8002314 <HAL_TIMEx_MasterConfigSynchronization>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80002ec:	f000 f9ca 	bl	8000684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002f0:	2360      	movs	r3, #96	; 0x60
 80002f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002f8:	2300      	movs	r3, #0
 80002fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80002fc:	2300      	movs	r3, #0
 80002fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000300:	2300      	movs	r3, #0
 8000302:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000304:	2300      	movs	r3, #0
 8000306:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000308:	2300      	movs	r3, #0
 800030a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800030c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000310:	2200      	movs	r2, #0
 8000312:	4619      	mov	r1, r3
 8000314:	4819      	ldr	r0, [pc, #100]	; (800037c <MX_TIM1_Init+0x114>)
 8000316:	f001 fd09 	bl	8001d2c <HAL_TIM_PWM_ConfigChannel>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000320:	f000 f9b0 	bl	8000684 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000328:	2208      	movs	r2, #8
 800032a:	4619      	mov	r1, r3
 800032c:	4813      	ldr	r0, [pc, #76]	; (800037c <MX_TIM1_Init+0x114>)
 800032e:	f001 fcfd 	bl	8001d2c <HAL_TIM_PWM_ConfigChannel>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000338:	f000 f9a4 	bl	8000684 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800033c:	2300      	movs	r3, #0
 800033e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000354:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000356:	2300      	movs	r3, #0
 8000358:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4619      	mov	r1, r3
 800035e:	4807      	ldr	r0, [pc, #28]	; (800037c <MX_TIM1_Init+0x114>)
 8000360:	f002 f836 	bl	80023d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800036a:	f000 f98b 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800036e:	4803      	ldr	r0, [pc, #12]	; (800037c <MX_TIM1_Init+0x114>)
 8000370:	f000 f9f8 	bl	8000764 <HAL_TIM_MspPostInit>

}
 8000374:	bf00      	nop
 8000376:	3748      	adds	r7, #72	; 0x48
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	2000007c 	.word	0x2000007c
 8000380:	40012c00 	.word	0x40012c00

08000384 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b08a      	sub	sp, #40	; 0x28
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038a:	f107 0320 	add.w	r3, r7, #32
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
 80003a0:	611a      	str	r2, [r3, #16]
 80003a2:	615a      	str	r2, [r3, #20]
 80003a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003a6:	4b21      	ldr	r3, [pc, #132]	; (800042c <MX_TIM3_Init+0xa8>)
 80003a8:	4a21      	ldr	r2, [pc, #132]	; (8000430 <MX_TIM3_Init+0xac>)
 80003aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 80003ac:	4b1f      	ldr	r3, [pc, #124]	; (800042c <MX_TIM3_Init+0xa8>)
 80003ae:	2248      	movs	r2, #72	; 0x48
 80003b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b2:	4b1e      	ldr	r3, [pc, #120]	; (800042c <MX_TIM3_Init+0xa8>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20-1;
 80003b8:	4b1c      	ldr	r3, [pc, #112]	; (800042c <MX_TIM3_Init+0xa8>)
 80003ba:	2213      	movs	r2, #19
 80003bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003be:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_TIM3_Init+0xa8>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c4:	4b19      	ldr	r3, [pc, #100]	; (800042c <MX_TIM3_Init+0xa8>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003ca:	4818      	ldr	r0, [pc, #96]	; (800042c <MX_TIM3_Init+0xa8>)
 80003cc:	f001 fab4 	bl	8001938 <HAL_TIM_PWM_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80003d6:	f000 f955 	bl	8000684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003da:	2300      	movs	r3, #0
 80003dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003de:	2300      	movs	r3, #0
 80003e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003e2:	f107 0320 	add.w	r3, r7, #32
 80003e6:	4619      	mov	r1, r3
 80003e8:	4810      	ldr	r0, [pc, #64]	; (800042c <MX_TIM3_Init+0xa8>)
 80003ea:	f001 ff93 	bl	8002314 <HAL_TIMEx_MasterConfigSynchronization>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80003f4:	f000 f946 	bl	8000684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003f8:	2360      	movs	r3, #96	; 0x60
 80003fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2208      	movs	r2, #8
 800040c:	4619      	mov	r1, r3
 800040e:	4807      	ldr	r0, [pc, #28]	; (800042c <MX_TIM3_Init+0xa8>)
 8000410:	f001 fc8c 	bl	8001d2c <HAL_TIM_PWM_ConfigChannel>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800041a:	f000 f933 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800041e:	4803      	ldr	r0, [pc, #12]	; (800042c <MX_TIM3_Init+0xa8>)
 8000420:	f000 f9a0 	bl	8000764 <HAL_TIM_MspPostInit>

}
 8000424:	bf00      	nop
 8000426:	3728      	adds	r7, #40	; 0x28
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	200000c4 	.word	0x200000c4
 8000430:	40000400 	.word	0x40000400

08000434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	f107 0310 	add.w	r3, r7, #16
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000448:	4b3f      	ldr	r3, [pc, #252]	; (8000548 <MX_GPIO_Init+0x114>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a3e      	ldr	r2, [pc, #248]	; (8000548 <MX_GPIO_Init+0x114>)
 800044e:	f043 0320 	orr.w	r3, r3, #32
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b3c      	ldr	r3, [pc, #240]	; (8000548 <MX_GPIO_Init+0x114>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0320 	and.w	r3, r3, #32
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000460:	4b39      	ldr	r3, [pc, #228]	; (8000548 <MX_GPIO_Init+0x114>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a38      	ldr	r2, [pc, #224]	; (8000548 <MX_GPIO_Init+0x114>)
 8000466:	f043 0310 	orr.w	r3, r3, #16
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b36      	ldr	r3, [pc, #216]	; (8000548 <MX_GPIO_Init+0x114>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0310 	and.w	r3, r3, #16
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	4b33      	ldr	r3, [pc, #204]	; (8000548 <MX_GPIO_Init+0x114>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a32      	ldr	r2, [pc, #200]	; (8000548 <MX_GPIO_Init+0x114>)
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b30      	ldr	r3, [pc, #192]	; (8000548 <MX_GPIO_Init+0x114>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0308 	and.w	r3, r3, #8
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b2d      	ldr	r3, [pc, #180]	; (8000548 <MX_GPIO_Init+0x114>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a2c      	ldr	r2, [pc, #176]	; (8000548 <MX_GPIO_Init+0x114>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <MX_GPIO_Init+0x114>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	603b      	str	r3, [r7, #0]
 80004a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_01_EN_Pin|MOTOR_01_DIR_Pin|MOTOR_02_DIR_Pin, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 80004ae:	4827      	ldr	r0, [pc, #156]	; (800054c <MX_GPIO_Init+0x118>)
 80004b0:	f000 fd39 	bl	8000f26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_02_EN_Pin|MOTOR_03_EN_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f240 4162 	movw	r1, #1122	; 0x462
 80004ba:	4825      	ldr	r0, [pc, #148]	; (8000550 <MX_GPIO_Init+0x11c>)
 80004bc:	f000 fd33 	bl	8000f26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_03_DIR_GPIO_Port, MOTOR_03_DIR_Pin, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c6:	4823      	ldr	r0, [pc, #140]	; (8000554 <MX_GPIO_Init+0x120>)
 80004c8:	f000 fd2d 	bl	8000f26 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_01_EN_Pin MOTOR_01_DIR_Pin MOTOR_02_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_01_EN_Pin|MOTOR_01_DIR_Pin|MOTOR_02_DIR_Pin;
 80004cc:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 80004d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	2301      	movs	r3, #1
 80004d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2302      	movs	r3, #2
 80004dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4619      	mov	r1, r3
 80004e4:	4819      	ldr	r0, [pc, #100]	; (800054c <MX_GPIO_Init+0x118>)
 80004e6:	f000 fb83 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_02_EN_Pin MOTOR_03_EN_Pin LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = MOTOR_02_EN_Pin|MOTOR_03_EN_Pin|LED_01_Pin|LED_02_Pin;
 80004ea:	f240 4362 	movw	r3, #1122	; 0x462
 80004ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f0:	2301      	movs	r3, #1
 80004f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f8:	2302      	movs	r3, #2
 80004fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	4619      	mov	r1, r3
 8000502:	4813      	ldr	r0, [pc, #76]	; (8000550 <MX_GPIO_Init+0x11c>)
 8000504:	f000 fb74 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_03_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_03_DIR_Pin;
 8000508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800050c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050e:	2301      	movs	r3, #1
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000516:	2302      	movs	r3, #2
 8000518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_03_DIR_GPIO_Port, &GPIO_InitStruct);
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	4619      	mov	r1, r3
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <MX_GPIO_Init+0x120>)
 8000522:	f000 fb65 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000526:	2380      	movs	r3, #128	; 0x80
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	4619      	mov	r1, r3
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_GPIO_Init+0x11c>)
 800053a:	f000 fb59 	bl	8000bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800053e:	bf00      	nop
 8000540:	3720      	adds	r7, #32
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000
 800054c:	40011000 	.word	0x40011000
 8000550:	40010c00 	.word	0x40010c00
 8000554:	40010800 	.word	0x40010800

08000558 <hand_control_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_hand_control_function */
void hand_control_function(void *argument)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  // char my_data[24];
  uint32_t last_10ms = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
    // batt_f_Handle_v();
    // motor_f_Handle_v();

    /* All of this should be moved to separate drivers... */
    /* Firstly, ignore everything unless 10ms has passed, and it's our time to work */
    if(HAL_GetTick() - last_10ms > (10-1))
 8000564:	f000 fa5a 	bl	8000a1c <HAL_GetTick>
 8000568:	4602      	mov	r2, r0
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	2b09      	cmp	r3, #9
 8000570:	d958      	bls.n	8000624 <hand_control_function+0xcc>
    {
      last_10ms = HAL_GetTick();
 8000572:	f000 fa53 	bl	8000a1c <HAL_GetTick>
 8000576:	60f8      	str	r0, [r7, #12]
      // Start ADC reading of all channels, to be stored via DMA - check if it should be done continuously
//      HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultsDMA, adcChannelCount);
      // Wait for that to finish - not necessary I think
      // while(adcConversionComplete == 0) {}
      // adcConversionComplete = 0;
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);  // Motor 1 EN
 8000578:	2201      	movs	r2, #1
 800057a:	2120      	movs	r1, #32
 800057c:	482b      	ldr	r0, [pc, #172]	; (800062c <hand_control_function+0xd4>)
 800057e:	f000 fcd2 	bl	8000f26 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);  // Motor 2 EN
 8000582:	2201      	movs	r2, #1
 8000584:	2102      	movs	r1, #2
 8000586:	482a      	ldr	r0, [pc, #168]	; (8000630 <hand_control_function+0xd8>)
 8000588:	f000 fccd 	bl	8000f26 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // Motor 3 EN
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000592:	4827      	ldr	r0, [pc, #156]	; (8000630 <hand_control_function+0xd8>)
 8000594:	f000 fcc7 	bl	8000f26 <HAL_GPIO_WritePin>
      /// Move motors based on button ////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////


      /* If BTN pressed */
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET)
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	4825      	ldr	r0, [pc, #148]	; (8000630 <hand_control_function+0xd8>)
 800059c:	f000 fcac 	bl	8000ef8 <HAL_GPIO_ReadPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d11f      	bne.n	80005e6 <hand_control_function+0x8e>
      {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); /* LED_01 */
 80005a6:	2201      	movs	r2, #1
 80005a8:	2120      	movs	r1, #32
 80005aa:	4821      	ldr	r0, [pc, #132]	; (8000630 <hand_control_function+0xd8>)
 80005ac:	f000 fcbb 	bl	8000f26 <HAL_GPIO_WritePin>

        // Close hand
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);  // Motor 1 DIR
 80005b0:	2201      	movs	r2, #1
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	481d      	ldr	r0, [pc, #116]	; (800062c <hand_control_function+0xd4>)
 80005b6:	f000 fcb6 	bl	8000f26 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);  // Motor 2 DIR
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c0:	481a      	ldr	r0, [pc, #104]	; (800062c <hand_control_function+0xd4>)
 80005c2:	f000 fcb0 	bl	8000f26 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);  // Motor 3 DIR
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005cc:	4819      	ldr	r0, [pc, #100]	; (8000634 <hand_control_function+0xdc>)
 80005ce:	f000 fcaa 	bl	8000f26 <HAL_GPIO_WritePin>
        //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
        //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);

        TIM1->CCR1 = (uint16_t)0;  // Motor 2 PWM
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <hand_control_function+0xe0>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR3 = (uint16_t)0;  // Motor 3 PWM
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <hand_control_function+0xe0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM3->CCR3 = (uint16_t)0;  // Motor 1 PWM
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <hand_control_function+0xe4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80005e4:	e01e      	b.n	8000624 <hand_control_function+0xcc>
        //CDC_Transmit_FS(my_data, strlen(my_data));
      }
      /* BTN released */
      else
      {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); /* LED_01 */
 80005e6:	2200      	movs	r2, #0
 80005e8:	2120      	movs	r1, #32
 80005ea:	4811      	ldr	r0, [pc, #68]	; (8000630 <hand_control_function+0xd8>)
 80005ec:	f000 fc9b 	bl	8000f26 <HAL_GPIO_WritePin>

        // OpenHand™
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);  // Motor 1 DIR
 80005f0:	2200      	movs	r2, #0
 80005f2:	2180      	movs	r1, #128	; 0x80
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <hand_control_function+0xd4>)
 80005f6:	f000 fc96 	bl	8000f26 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);  // Motor 2 DIR
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000600:	480a      	ldr	r0, [pc, #40]	; (800062c <hand_control_function+0xd4>)
 8000602:	f000 fc90 	bl	8000f26 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);  // Motor 3 DIR
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <hand_control_function+0xdc>)
 800060e:	f000 fc8a 	bl	8000f26 <HAL_GPIO_WritePin>
        //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
        //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);

        TIM1->CCR1 = (uint16_t)19;  // Motor 2 PWM
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <hand_control_function+0xe0>)
 8000614:	2213      	movs	r2, #19
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR3 = (uint16_t)19;  // Motor 3 PWM
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <hand_control_function+0xe0>)
 800061a:	2213      	movs	r2, #19
 800061c:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM3->CCR3 = (uint16_t)19;  // Motor 1 PWM
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <hand_control_function+0xe4>)
 8000620:	2213      	movs	r2, #19
 8000622:	63da      	str	r2, [r3, #60]	; 0x3c
      ///  End of main task //////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////
    }

    /* Wait 1ms to let other tasks do their thing! And for time to pass quicker while we wait for our 10ms! */
    osDelay(1);
 8000624:	2001      	movs	r0, #1
 8000626:	f002 f847 	bl	80026b8 <osDelay>
    if(HAL_GetTick() - last_10ms > (10-1))
 800062a:	e79b      	b.n	8000564 <hand_control_function+0xc>
 800062c:	40011000 	.word	0x40011000
 8000630:	40010c00 	.word	0x40010c00
 8000634:	40010800 	.word	0x40010800
 8000638:	40012c00 	.word	0x40012c00
 800063c:	40000400 	.word	0x40000400

08000640 <system_health_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_system_health_function */
void system_health_function(void *argument)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN system_health_function */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); /* LED_02 */
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <system_health_function+0x1c>)
 800064c:	f000 fc83 	bl	8000f56 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000654:	f002 f830 	bl	80026b8 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); /* LED_02 */
 8000658:	e7f6      	b.n	8000648 <system_health_function+0x8>
 800065a:	bf00      	nop
 800065c:	40010c00 	.word	0x40010c00

08000660 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d101      	bne.n	8000676 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000672:	f000 f9c1 	bl	80009f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40000800 	.word	0x40000800

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>
	...

08000690 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <HAL_MspInit+0x68>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <HAL_MspInit+0x68>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <HAL_MspInit+0x68>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_MspInit+0x68>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <HAL_MspInit+0x68>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	61d3      	str	r3, [r2, #28]
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_MspInit+0x68>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	210f      	movs	r1, #15
 80006ca:	f06f 0001 	mvn.w	r0, #1
 80006ce:	f000 fa64 	bl	8000b9a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_MspInit+0x6c>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	4a04      	ldr	r2, [pc, #16]	; (80006fc <HAL_MspInit+0x6c>)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010000 	.word	0x40010000

08000700 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <HAL_TIM_PWM_MspInit+0x58>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d10c      	bne.n	800072c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_TIM_PWM_MspInit+0x5c>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	4a11      	ldr	r2, [pc, #68]	; (800075c <HAL_TIM_PWM_MspInit+0x5c>)
 8000718:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800071c:	6193      	str	r3, [r2, #24]
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <HAL_TIM_PWM_MspInit+0x5c>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800072a:	e010      	b.n	800074e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a0b      	ldr	r2, [pc, #44]	; (8000760 <HAL_TIM_PWM_MspInit+0x60>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d10b      	bne.n	800074e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_TIM_PWM_MspInit+0x5c>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_TIM_PWM_MspInit+0x5c>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_TIM_PWM_MspInit+0x5c>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40012c00 	.word	0x40012c00
 800075c:	40021000 	.word	0x40021000
 8000760:	40000400 	.word	0x40000400

08000764 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a28      	ldr	r2, [pc, #160]	; (8000820 <HAL_TIM_MspPostInit+0xbc>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d119      	bne.n	80007b8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b27      	ldr	r3, [pc, #156]	; (8000824 <HAL_TIM_MspPostInit+0xc0>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a26      	ldr	r2, [pc, #152]	; (8000824 <HAL_TIM_MspPostInit+0xc0>)
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b24      	ldr	r3, [pc, #144]	; (8000824 <HAL_TIM_MspPostInit+0xc0>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_02_PWM_Pin|MOTOR_03_PWM_Pin;
 800079c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80007a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2302      	movs	r3, #2
 80007a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	481d      	ldr	r0, [pc, #116]	; (8000828 <HAL_TIM_MspPostInit+0xc4>)
 80007b2:	f000 fa1d 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007b6:	e02f      	b.n	8000818 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM3)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a1b      	ldr	r2, [pc, #108]	; (800082c <HAL_TIM_MspPostInit+0xc8>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d12a      	bne.n	8000818 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <HAL_TIM_MspPostInit+0xc0>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a17      	ldr	r2, [pc, #92]	; (8000824 <HAL_TIM_MspPostInit+0xc0>)
 80007c8:	f043 0310 	orr.w	r3, r3, #16
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <HAL_TIM_MspPostInit+0xc0>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f003 0310 	and.w	r3, r3, #16
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_01_PWM_Pin;
 80007da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MOTOR_01_PWM_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4810      	ldr	r0, [pc, #64]	; (8000830 <HAL_TIM_MspPostInit+0xcc>)
 80007f0:	f000 f9fe 	bl	8000bf0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <HAL_TIM_MspPostInit+0xd0>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
 8000802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000804:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
 800080a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_TIM_MspPostInit+0xd0>)
 8000814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000816:	6053      	str	r3, [r2, #4]
}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	; 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40012c00 	.word	0x40012c00
 8000824:	40021000 	.word	0x40021000
 8000828:	40010800 	.word	0x40010800
 800082c:	40000400 	.word	0x40000400
 8000830:	40011000 	.word	0x40011000
 8000834:	40010000 	.word	0x40010000

08000838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08e      	sub	sp, #56	; 0x38
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800084e:	4b34      	ldr	r3, [pc, #208]	; (8000920 <HAL_InitTick+0xe8>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a33      	ldr	r2, [pc, #204]	; (8000920 <HAL_InitTick+0xe8>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b31      	ldr	r3, [pc, #196]	; (8000920 <HAL_InitTick+0xe8>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000866:	f107 0210 	add.w	r2, r7, #16
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f000 ff69 	bl	8001748 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000876:	6a3b      	ldr	r3, [r7, #32]
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800087a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087c:	2b00      	cmp	r3, #0
 800087e:	d103      	bne.n	8000888 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000880:	f000 ff4e 	bl	8001720 <HAL_RCC_GetPCLK1Freq>
 8000884:	6378      	str	r0, [r7, #52]	; 0x34
 8000886:	e004      	b.n	8000892 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000888:	f000 ff4a 	bl	8001720 <HAL_RCC_GetPCLK1Freq>
 800088c:	4603      	mov	r3, r0
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000894:	4a23      	ldr	r2, [pc, #140]	; (8000924 <HAL_InitTick+0xec>)
 8000896:	fba2 2303 	umull	r2, r3, r2, r3
 800089a:	0c9b      	lsrs	r3, r3, #18
 800089c:	3b01      	subs	r3, #1
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <HAL_InitTick+0xf0>)
 80008a2:	4a22      	ldr	r2, [pc, #136]	; (800092c <HAL_InitTick+0xf4>)
 80008a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <HAL_InitTick+0xf0>)
 80008a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ac:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008ae:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <HAL_InitTick+0xf0>)
 80008b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <HAL_InitTick+0xf0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <HAL_InitTick+0xf0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <HAL_InitTick+0xf0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80008c6:	4818      	ldr	r0, [pc, #96]	; (8000928 <HAL_InitTick+0xf0>)
 80008c8:	f000 ff8c 	bl	80017e4 <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d11b      	bne.n	8000912 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80008da:	4813      	ldr	r0, [pc, #76]	; (8000928 <HAL_InitTick+0xf0>)
 80008dc:	f000 ffda 	bl	8001894 <HAL_TIM_Base_Start_IT>
 80008e0:	4603      	mov	r3, r0
 80008e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d111      	bne.n	8000912 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008ee:	201e      	movs	r0, #30
 80008f0:	f000 f96f 	bl	8000bd2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b0f      	cmp	r3, #15
 80008f8:	d808      	bhi.n	800090c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80008fa:	2200      	movs	r2, #0
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	201e      	movs	r0, #30
 8000900:	f000 f94b 	bl	8000b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_InitTick+0xf8>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]
 800090a:	e002      	b.n	8000912 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000912:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000916:	4618      	mov	r0, r3
 8000918:	3738      	adds	r7, #56	; 0x38
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000
 8000924:	431bde83 	.word	0x431bde83
 8000928:	20000114 	.word	0x20000114
 800092c:	40000800 	.word	0x40000800
 8000930:	20000004 	.word	0x20000004

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
	...

08000960 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <TIM4_IRQHandler+0x10>)
 8000966:	f001 f8d9 	bl	8001b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000114 	.word	0x20000114

08000974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000980:	f7ff fff8 	bl	8000974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000986:	490c      	ldr	r1, [pc, #48]	; (80009b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000988:	4a0c      	ldr	r2, [pc, #48]	; (80009bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800099c:	4c09      	ldr	r4, [pc, #36]	; (80009c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f004 fad5 	bl	8004f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ae:	f7ff fbe3 	bl	8000178 <main>
  bx lr
 80009b2:	4770      	bx	lr
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009bc:	08005134 	.word	0x08005134
  ldr r2, =_sbss
 80009c0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009c4:	20001c80 	.word	0x20001c80

080009c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC1_2_IRQHandler>
	...

080009cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_Init+0x28>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_Init+0x28>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f8d1 	bl	8000b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	200f      	movs	r0, #15
 80009e4:	f7ff ff28 	bl	8000838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff fe52 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x1c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_IncTick+0x20>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <HAL_IncTick+0x20>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	20000008 	.word	0x20000008
 8000a18:	2000015c 	.word	0x2000015c

08000a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b02      	ldr	r3, [pc, #8]	; (8000a2c <HAL_GetTick+0x10>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	2000015c 	.word	0x2000015c

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4906      	ldr	r1, [pc, #24]	; (8000ac8 <__NVIC_EnableIRQ+0x34>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	; (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	; 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff4f 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bac:	f7ff ff64 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	6978      	ldr	r0, [r7, #20]
 8000bb8:	f7ff ffb2 	bl	8000b20 <NVIC_EncodePriority>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff81 	bl	8000acc <__NVIC_SetPriority>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff57 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b08b      	sub	sp, #44	; 0x2c
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c02:	e169      	b.n	8000ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c04:	2201      	movs	r2, #1
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	4013      	ands	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f040 8158 	bne.w	8000ed2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	4a9a      	ldr	r2, [pc, #616]	; (8000e90 <HAL_GPIO_Init+0x2a0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d05e      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c2c:	4a98      	ldr	r2, [pc, #608]	; (8000e90 <HAL_GPIO_Init+0x2a0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d875      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c32:	4a98      	ldr	r2, [pc, #608]	; (8000e94 <HAL_GPIO_Init+0x2a4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d058      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c38:	4a96      	ldr	r2, [pc, #600]	; (8000e94 <HAL_GPIO_Init+0x2a4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d86f      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c3e:	4a96      	ldr	r2, [pc, #600]	; (8000e98 <HAL_GPIO_Init+0x2a8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d052      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c44:	4a94      	ldr	r2, [pc, #592]	; (8000e98 <HAL_GPIO_Init+0x2a8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d869      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c4a:	4a94      	ldr	r2, [pc, #592]	; (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d04c      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c50:	4a92      	ldr	r2, [pc, #584]	; (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d863      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c56:	4a92      	ldr	r2, [pc, #584]	; (8000ea0 <HAL_GPIO_Init+0x2b0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d046      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c5c:	4a90      	ldr	r2, [pc, #576]	; (8000ea0 <HAL_GPIO_Init+0x2b0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d85d      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c62:	2b12      	cmp	r3, #18
 8000c64:	d82a      	bhi.n	8000cbc <HAL_GPIO_Init+0xcc>
 8000c66:	2b12      	cmp	r3, #18
 8000c68:	d859      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c6a:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <HAL_GPIO_Init+0x80>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000ceb 	.word	0x08000ceb
 8000c74:	08000cc5 	.word	0x08000cc5
 8000c78:	08000cd7 	.word	0x08000cd7
 8000c7c:	08000d19 	.word	0x08000d19
 8000c80:	08000d1f 	.word	0x08000d1f
 8000c84:	08000d1f 	.word	0x08000d1f
 8000c88:	08000d1f 	.word	0x08000d1f
 8000c8c:	08000d1f 	.word	0x08000d1f
 8000c90:	08000d1f 	.word	0x08000d1f
 8000c94:	08000d1f 	.word	0x08000d1f
 8000c98:	08000d1f 	.word	0x08000d1f
 8000c9c:	08000d1f 	.word	0x08000d1f
 8000ca0:	08000d1f 	.word	0x08000d1f
 8000ca4:	08000d1f 	.word	0x08000d1f
 8000ca8:	08000d1f 	.word	0x08000d1f
 8000cac:	08000d1f 	.word	0x08000d1f
 8000cb0:	08000d1f 	.word	0x08000d1f
 8000cb4:	08000ccd 	.word	0x08000ccd
 8000cb8:	08000ce1 	.word	0x08000ce1
 8000cbc:	4a79      	ldr	r2, [pc, #484]	; (8000ea4 <HAL_GPIO_Init+0x2b4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d013      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc2:	e02c      	b.n	8000d1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	623b      	str	r3, [r7, #32]
          break;
 8000cca:	e029      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	623b      	str	r3, [r7, #32]
          break;
 8000cd4:	e024      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	3308      	adds	r3, #8
 8000cdc:	623b      	str	r3, [r7, #32]
          break;
 8000cde:	e01f      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	330c      	adds	r3, #12
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	e01a      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	623b      	str	r3, [r7, #32]
          break;
 8000cf6:	e013      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d105      	bne.n	8000d0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d00:	2308      	movs	r3, #8
 8000d02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	611a      	str	r2, [r3, #16]
          break;
 8000d0a:	e009      	b.n	8000d20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	615a      	str	r2, [r3, #20]
          break;
 8000d16:	e003      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
          break;
 8000d1c:	e000      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          break;
 8000d1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2bff      	cmp	r3, #255	; 0xff
 8000d24:	d801      	bhi.n	8000d2a <HAL_GPIO_Init+0x13a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	e001      	b.n	8000d2e <HAL_GPIO_Init+0x13e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2bff      	cmp	r3, #255	; 0xff
 8000d34:	d802      	bhi.n	8000d3c <HAL_GPIO_Init+0x14c>
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	e002      	b.n	8000d42 <HAL_GPIO_Init+0x152>
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	3b08      	subs	r3, #8
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	210f      	movs	r1, #15
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	401a      	ands	r2, r3
 8000d54:	6a39      	ldr	r1, [r7, #32]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 80b1 	beq.w	8000ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d70:	4b4d      	ldr	r3, [pc, #308]	; (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a4c      	ldr	r2, [pc, #304]	; (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d88:	4a48      	ldr	r2, [pc, #288]	; (8000eac <HAL_GPIO_Init+0x2bc>)
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	220f      	movs	r2, #15
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a40      	ldr	r2, [pc, #256]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d013      	beq.n	8000ddc <HAL_GPIO_Init+0x1ec>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a3f      	ldr	r2, [pc, #252]	; (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d00d      	beq.n	8000dd8 <HAL_GPIO_Init+0x1e8>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a3e      	ldr	r2, [pc, #248]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d007      	beq.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a3d      	ldr	r2, [pc, #244]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d101      	bne.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e006      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	e004      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e002      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de0:	f002 0203 	and.w	r2, r2, #3
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	4093      	lsls	r3, r2
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dee:	492f      	ldr	r1, [pc, #188]	; (8000eac <HAL_GPIO_Init+0x2bc>)
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	3302      	adds	r3, #2
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d006      	beq.n	8000e16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	492c      	ldr	r1, [pc, #176]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4928      	ldr	r1, [pc, #160]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d006      	beq.n	8000e3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	4922      	ldr	r1, [pc, #136]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	60cb      	str	r3, [r1, #12]
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	491e      	ldr	r1, [pc, #120]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d006      	beq.n	8000e66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	4918      	ldr	r1, [pc, #96]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4914      	ldr	r1, [pc, #80]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d021      	beq.n	8000ec4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
 8000e8c:	e021      	b.n	8000ed2 <HAL_GPIO_Init+0x2e2>
 8000e8e:	bf00      	nop
 8000e90:	10320000 	.word	0x10320000
 8000e94:	10310000 	.word	0x10310000
 8000e98:	10220000 	.word	0x10220000
 8000e9c:	10210000 	.word	0x10210000
 8000ea0:	10120000 	.word	0x10120000
 8000ea4:	10110000 	.word	0x10110000
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	40011400 	.word	0x40011400
 8000ec0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_GPIO_Init+0x304>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4909      	ldr	r1, [pc, #36]	; (8000ef4 <HAL_GPIO_Init+0x304>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f47f ae8e 	bne.w	8000c04 <HAL_GPIO_Init+0x14>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	372c      	adds	r7, #44	; 0x2c
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	887b      	ldrh	r3, [r7, #2]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e001      	b.n	8000f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	807b      	strh	r3, [r7, #2]
 8000f32:	4613      	mov	r3, r2
 8000f34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f36:	787b      	ldrb	r3, [r7, #1]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f3c:	887a      	ldrh	r2, [r7, #2]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f42:	e003      	b.n	8000f4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f44:	887b      	ldrh	r3, [r7, #2]
 8000f46:	041a      	lsls	r2, r3, #16
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	611a      	str	r2, [r3, #16]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b085      	sub	sp, #20
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f68:	887a      	ldrh	r2, [r7, #2]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	041a      	lsls	r2, r3, #16
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	400b      	ands	r3, r1
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	611a      	str	r2, [r3, #16]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e272      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 8087 	beq.w	80010b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fa8:	4b92      	ldr	r3, [pc, #584]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 030c 	and.w	r3, r3, #12
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d00c      	beq.n	8000fce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fb4:	4b8f      	ldr	r3, [pc, #572]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 030c 	and.w	r3, r3, #12
 8000fbc:	2b08      	cmp	r3, #8
 8000fbe:	d112      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x5e>
 8000fc0:	4b8c      	ldr	r3, [pc, #560]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fce:	4b89      	ldr	r3, [pc, #548]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d06c      	beq.n	80010b4 <HAL_RCC_OscConfig+0x12c>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d168      	bne.n	80010b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e24c      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fee:	d106      	bne.n	8000ffe <HAL_RCC_OscConfig+0x76>
 8000ff0:	4b80      	ldr	r3, [pc, #512]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a7f      	ldr	r2, [pc, #508]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	e02e      	b.n	800105c <HAL_RCC_OscConfig+0xd4>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10c      	bne.n	8001020 <HAL_RCC_OscConfig+0x98>
 8001006:	4b7b      	ldr	r3, [pc, #492]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a7a      	ldr	r2, [pc, #488]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 800100c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b78      	ldr	r3, [pc, #480]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a77      	ldr	r2, [pc, #476]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e01d      	b.n	800105c <HAL_RCC_OscConfig+0xd4>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001028:	d10c      	bne.n	8001044 <HAL_RCC_OscConfig+0xbc>
 800102a:	4b72      	ldr	r3, [pc, #456]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a71      	ldr	r2, [pc, #452]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a6e      	ldr	r2, [pc, #440]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e00b      	b.n	800105c <HAL_RCC_OscConfig+0xd4>
 8001044:	4b6b      	ldr	r3, [pc, #428]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a6a      	ldr	r2, [pc, #424]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 800104a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b68      	ldr	r3, [pc, #416]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a67      	ldr	r2, [pc, #412]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d013      	beq.n	800108c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fcda 	bl	8000a1c <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800106c:	f7ff fcd6 	bl	8000a1c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b64      	cmp	r3, #100	; 0x64
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e200      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107e:	4b5d      	ldr	r3, [pc, #372]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0xe4>
 800108a:	e014      	b.n	80010b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fcc6 	bl	8000a1c <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fcc2 	bl	8000a1c <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e1ec      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a6:	4b53      	ldr	r3, [pc, #332]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x10c>
 80010b2:	e000      	b.n	80010b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d063      	beq.n	800118a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010c2:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00b      	beq.n	80010e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010ce:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d11c      	bne.n	8001114 <HAL_RCC_OscConfig+0x18c>
 80010da:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d116      	bne.n	8001114 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e6:	4b43      	ldr	r3, [pc, #268]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <HAL_RCC_OscConfig+0x176>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d001      	beq.n	80010fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e1c0      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fe:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4939      	ldr	r1, [pc, #228]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 800110e:	4313      	orrs	r3, r2
 8001110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001112:	e03a      	b.n	800118a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d020      	beq.n	800115e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800111c:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <HAL_RCC_OscConfig+0x270>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff fc7b 	bl	8000a1c <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112a:	f7ff fc77 	bl	8000a1c <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e1a1      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4927      	ldr	r1, [pc, #156]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001158:	4313      	orrs	r3, r2
 800115a:	600b      	str	r3, [r1, #0]
 800115c:	e015      	b.n	800118a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fc5a 	bl	8000a1c <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116c:	f7ff fc56 	bl	8000a1c <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e180      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d03a      	beq.n	800120c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d019      	beq.n	80011d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_RCC_OscConfig+0x274>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a4:	f7ff fc3a 	bl	8000a1c <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ac:	f7ff fc36 	bl	8000a1c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e160      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f000 faec 	bl	80017a8 <RCC_Delay>
 80011d0:	e01c      	b.n	800120c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_RCC_OscConfig+0x274>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d8:	f7ff fc20 	bl	8000a1c <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011de:	e00f      	b.n	8001200 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e0:	f7ff fc1c 	bl	8000a1c <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d908      	bls.n	8001200 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e146      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	42420000 	.word	0x42420000
 80011fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001200:	4b92      	ldr	r3, [pc, #584]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1e9      	bne.n	80011e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80a6 	beq.w	8001366 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800121e:	4b8b      	ldr	r3, [pc, #556]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10d      	bne.n	8001246 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b88      	ldr	r3, [pc, #544]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a87      	ldr	r2, [pc, #540]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	4b85      	ldr	r3, [pc, #532]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001242:	2301      	movs	r3, #1
 8001244:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001246:	4b82      	ldr	r3, [pc, #520]	; (8001450 <HAL_RCC_OscConfig+0x4c8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124e:	2b00      	cmp	r3, #0
 8001250:	d118      	bne.n	8001284 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001252:	4b7f      	ldr	r3, [pc, #508]	; (8001450 <HAL_RCC_OscConfig+0x4c8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a7e      	ldr	r2, [pc, #504]	; (8001450 <HAL_RCC_OscConfig+0x4c8>)
 8001258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800125e:	f7ff fbdd 	bl	8000a1c <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001266:	f7ff fbd9 	bl	8000a1c <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b64      	cmp	r3, #100	; 0x64
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e103      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001278:	4b75      	ldr	r3, [pc, #468]	; (8001450 <HAL_RCC_OscConfig+0x4c8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d106      	bne.n	800129a <HAL_RCC_OscConfig+0x312>
 800128c:	4b6f      	ldr	r3, [pc, #444]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	4a6e      	ldr	r2, [pc, #440]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6213      	str	r3, [r2, #32]
 8001298:	e02d      	b.n	80012f6 <HAL_RCC_OscConfig+0x36e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10c      	bne.n	80012bc <HAL_RCC_OscConfig+0x334>
 80012a2:	4b6a      	ldr	r3, [pc, #424]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	4a69      	ldr	r2, [pc, #420]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	6213      	str	r3, [r2, #32]
 80012ae:	4b67      	ldr	r3, [pc, #412]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	4a66      	ldr	r2, [pc, #408]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	f023 0304 	bic.w	r3, r3, #4
 80012b8:	6213      	str	r3, [r2, #32]
 80012ba:	e01c      	b.n	80012f6 <HAL_RCC_OscConfig+0x36e>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b05      	cmp	r3, #5
 80012c2:	d10c      	bne.n	80012de <HAL_RCC_OscConfig+0x356>
 80012c4:	4b61      	ldr	r3, [pc, #388]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4a60      	ldr	r2, [pc, #384]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6213      	str	r3, [r2, #32]
 80012d0:	4b5e      	ldr	r3, [pc, #376]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	4a5d      	ldr	r2, [pc, #372]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6213      	str	r3, [r2, #32]
 80012dc:	e00b      	b.n	80012f6 <HAL_RCC_OscConfig+0x36e>
 80012de:	4b5b      	ldr	r3, [pc, #364]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	4a5a      	ldr	r2, [pc, #360]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	6213      	str	r3, [r2, #32]
 80012ea:	4b58      	ldr	r3, [pc, #352]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	4a57      	ldr	r2, [pc, #348]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	f023 0304 	bic.w	r3, r3, #4
 80012f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d015      	beq.n	800132a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fb8d 	bl	8000a1c <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001304:	e00a      	b.n	800131c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001306:	f7ff fb89 	bl	8000a1c <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	f241 3288 	movw	r2, #5000	; 0x1388
 8001314:	4293      	cmp	r3, r2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e0b1      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131c:	4b4b      	ldr	r3, [pc, #300]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0ee      	beq.n	8001306 <HAL_RCC_OscConfig+0x37e>
 8001328:	e014      	b.n	8001354 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff fb77 	bl	8000a1c <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001330:	e00a      	b.n	8001348 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f7ff fb73 	bl	8000a1c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001340:	4293      	cmp	r3, r2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e09b      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001348:	4b40      	ldr	r3, [pc, #256]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1ee      	bne.n	8001332 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d105      	bne.n	8001366 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800135a:	4b3c      	ldr	r3, [pc, #240]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a3b      	ldr	r2, [pc, #236]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001364:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8087 	beq.w	800147e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001370:	4b36      	ldr	r3, [pc, #216]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b08      	cmp	r3, #8
 800137a:	d061      	beq.n	8001440 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d146      	bne.n	8001412 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001384:	4b33      	ldr	r3, [pc, #204]	; (8001454 <HAL_RCC_OscConfig+0x4cc>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff fb47 	bl	8000a1c <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001392:	f7ff fb43 	bl	8000a1c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e06d      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f0      	bne.n	8001392 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b8:	d108      	bne.n	80013cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ba:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	4921      	ldr	r1, [pc, #132]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a19      	ldr	r1, [r3, #32]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	430b      	orrs	r3, r1
 80013de:	491b      	ldr	r1, [pc, #108]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_RCC_OscConfig+0x4cc>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fb17 	bl	8000a1c <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f2:	f7ff fb13 	bl	8000a1c <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e03d      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x46a>
 8001410:	e035      	b.n	800147e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_RCC_OscConfig+0x4cc>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fb00 	bl	8000a1c <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff fafc 	bl	8000a1c <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e026      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x498>
 800143e:	e01e      	b.n	800147e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d107      	bne.n	8001458 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e019      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
 800144c:	40021000 	.word	0x40021000
 8001450:	40007000 	.word	0x40007000
 8001454:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_RCC_OscConfig+0x500>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	429a      	cmp	r2, r3
 800146a:	d106      	bne.n	800147a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001476:	429a      	cmp	r2, r3
 8001478:	d001      	beq.n	800147e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40021000 	.word	0x40021000

0800148c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0d0      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014a0:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d910      	bls.n	80014d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b67      	ldr	r3, [pc, #412]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0207 	bic.w	r2, r3, #7
 80014b6:	4965      	ldr	r1, [pc, #404]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b63      	ldr	r3, [pc, #396]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0b8      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d020      	beq.n	800151e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e8:	4b59      	ldr	r3, [pc, #356]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a58      	ldr	r2, [pc, #352]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001500:	4b53      	ldr	r3, [pc, #332]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a52      	ldr	r2, [pc, #328]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800150a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150c:	4b50      	ldr	r3, [pc, #320]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	494d      	ldr	r1, [pc, #308]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d040      	beq.n	80015ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d115      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e07f      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d109      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e073      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155a:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e06b      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f023 0203 	bic.w	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4936      	ldr	r1, [pc, #216]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800157c:	f7ff fa4e 	bl	8000a1c <HAL_GetTick>
 8001580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	e00a      	b.n	800159a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001584:	f7ff fa4a 	bl	8000a1c <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e053      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 020c 	and.w	r2, r3, #12
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d1eb      	bne.n	8001584 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d210      	bcs.n	80015dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 0207 	bic.w	r2, r3, #7
 80015c2:	4922      	ldr	r1, [pc, #136]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e032      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d008      	beq.n	80015fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4916      	ldr	r1, [pc, #88]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d009      	beq.n	800161a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	490e      	ldr	r1, [pc, #56]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800161a:	f000 f821 	bl	8001660 <HAL_RCC_GetSysClockFreq>
 800161e:	4602      	mov	r2, r0
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	490a      	ldr	r1, [pc, #40]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 800162c:	5ccb      	ldrb	r3, [r1, r3]
 800162e:	fa22 f303 	lsr.w	r3, r2, r3
 8001632:	4a09      	ldr	r2, [pc, #36]	; (8001658 <HAL_RCC_ClockConfig+0x1cc>)
 8001634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_RCC_ClockConfig+0x1d0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff f8fc 	bl	8000838 <HAL_InitTick>

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40022000 	.word	0x40022000
 8001650:	40021000 	.word	0x40021000
 8001654:	08005100 	.word	0x08005100
 8001658:	20000000 	.word	0x20000000
 800165c:	20000004 	.word	0x20000004

08001660 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b04      	cmp	r3, #4
 8001688:	d002      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x30>
 800168a:	2b08      	cmp	r3, #8
 800168c:	d003      	beq.n	8001696 <HAL_RCC_GetSysClockFreq+0x36>
 800168e:	e027      	b.n	80016e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001692:	613b      	str	r3, [r7, #16]
      break;
 8001694:	e027      	b.n	80016e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	0c9b      	lsrs	r3, r3, #18
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80016a0:	5cd3      	ldrb	r3, [r2, r3]
 80016a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d010      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	0c5b      	lsrs	r3, r3, #17
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016ba:	5cd3      	ldrb	r3, [r2, r3]
 80016bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80016c2:	fb03 f202 	mul.w	r2, r3, r2
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	e004      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016d4:	fb02 f303 	mul.w	r3, r2, r3
 80016d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	613b      	str	r3, [r7, #16]
      break;
 80016de:	e002      	b.n	80016e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_RCC_GetSysClockFreq+0xa8>)
 80016e2:	613b      	str	r3, [r7, #16]
      break;
 80016e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016e6:	693b      	ldr	r3, [r7, #16]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	371c      	adds	r7, #28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
 80016f8:	00f42400 	.word	0x00f42400
 80016fc:	08005118 	.word	0x08005118
 8001700:	08005128 	.word	0x08005128
 8001704:	003d0900 	.word	0x003d0900
 8001708:	007a1200 	.word	0x007a1200

0800170c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <HAL_RCC_GetHCLKFreq+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000000 	.word	0x20000000

08001720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001724:	f7ff fff2 	bl	800170c <HAL_RCC_GetHCLKFreq>
 8001728:	4602      	mov	r2, r0
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	0a1b      	lsrs	r3, r3, #8
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	4903      	ldr	r1, [pc, #12]	; (8001744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001736:	5ccb      	ldrb	r3, [r1, r3]
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800173c:	4618      	mov	r0, r3
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	08005110 	.word	0x08005110

08001748 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	220f      	movs	r2, #15
 8001756:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_RCC_GetClockConfig+0x58>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0203 	and.w	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_RCC_GetClockConfig+0x58>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_GetClockConfig+0x58>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_RCC_GetClockConfig+0x58>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_RCC_GetClockConfig+0x5c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0207 	and.w	r2, r3, #7
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40022000 	.word	0x40022000

080017a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <RCC_Delay+0x34>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <RCC_Delay+0x38>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	0a5b      	lsrs	r3, r3, #9
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	fb02 f303 	mul.w	r3, r2, r3
 80017c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017c4:	bf00      	nop
  }
  while (Delay --);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1e5a      	subs	r2, r3, #1
 80017ca:	60fa      	str	r2, [r7, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f9      	bne.n	80017c4 <RCC_Delay+0x1c>
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	20000000 	.word	0x20000000
 80017e0:	10624dd3 	.word	0x10624dd3

080017e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e041      	b.n	800187a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f839 	bl	8001882 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2202      	movs	r2, #2
 8001814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3304      	adds	r3, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4610      	mov	r0, r2
 8001824:	f000 fb68 	bl	8001ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d001      	beq.n	80018ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e03a      	b.n	8001922 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0201 	orr.w	r2, r2, #1
 80018c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a18      	ldr	r2, [pc, #96]	; (800192c <HAL_TIM_Base_Start_IT+0x98>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00e      	beq.n	80018ec <HAL_TIM_Base_Start_IT+0x58>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d6:	d009      	beq.n	80018ec <HAL_TIM_Base_Start_IT+0x58>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_TIM_Base_Start_IT+0x9c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d004      	beq.n	80018ec <HAL_TIM_Base_Start_IT+0x58>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a13      	ldr	r2, [pc, #76]	; (8001934 <HAL_TIM_Base_Start_IT+0xa0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d111      	bne.n	8001910 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d010      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0201 	orr.w	r2, r2, #1
 800190c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800190e:	e007      	b.n	8001920 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40000400 	.word	0x40000400
 8001934:	40000800 	.word	0x40000800

08001938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e041      	b.n	80019ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7fe fece 	bl	8000700 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3304      	adds	r3, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f000 fabe 	bl	8001ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_TIM_PWM_Start+0x24>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	e022      	b.n	8001a42 <HAL_TIM_PWM_Start+0x6a>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d109      	bne.n	8001a16 <HAL_TIM_PWM_Start+0x3e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	bf14      	ite	ne
 8001a0e:	2301      	movne	r3, #1
 8001a10:	2300      	moveq	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	e015      	b.n	8001a42 <HAL_TIM_PWM_Start+0x6a>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d109      	bne.n	8001a30 <HAL_TIM_PWM_Start+0x58>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	bf14      	ite	ne
 8001a28:	2301      	movne	r3, #1
 8001a2a:	2300      	moveq	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	e008      	b.n	8001a42 <HAL_TIM_PWM_Start+0x6a>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e05e      	b.n	8001b08 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d104      	bne.n	8001a5a <HAL_TIM_PWM_Start+0x82>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a58:	e013      	b.n	8001a82 <HAL_TIM_PWM_Start+0xaa>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d104      	bne.n	8001a6a <HAL_TIM_PWM_Start+0x92>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a68:	e00b      	b.n	8001a82 <HAL_TIM_PWM_Start+0xaa>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d104      	bne.n	8001a7a <HAL_TIM_PWM_Start+0xa2>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a78:	e003      	b.n	8001a82 <HAL_TIM_PWM_Start+0xaa>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2201      	movs	r2, #1
 8001a88:	6839      	ldr	r1, [r7, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fc1e 	bl	80022cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1e      	ldr	r2, [pc, #120]	; (8001b10 <HAL_TIM_PWM_Start+0x138>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d107      	bne.n	8001aaa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <HAL_TIM_PWM_Start+0x138>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00e      	beq.n	8001ad2 <HAL_TIM_PWM_Start+0xfa>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001abc:	d009      	beq.n	8001ad2 <HAL_TIM_PWM_Start+0xfa>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <HAL_TIM_PWM_Start+0x13c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d004      	beq.n	8001ad2 <HAL_TIM_PWM_Start+0xfa>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <HAL_TIM_PWM_Start+0x140>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d111      	bne.n	8001af6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b06      	cmp	r3, #6
 8001ae2:	d010      	beq.n	8001b06 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001af4:	e007      	b.n	8001b06 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0201 	orr.w	r2, r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40012c00 	.word	0x40012c00
 8001b14:	40000400 	.word	0x40000400
 8001b18:	40000800 	.word	0x40000800

08001b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d122      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d11b      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0202 	mvn.w	r2, #2
 8001b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f9af 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001b64:	e005      	b.n	8001b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f9a2 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f9b1 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d122      	bne.n	8001bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d11b      	bne.n	8001bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0204 	mvn.w	r2, #4
 8001b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f985 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001bb8:	e005      	b.n	8001bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f978 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f987 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d122      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d11b      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0208 	mvn.w	r2, #8
 8001bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f95b 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f94e 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f95d 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d122      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b10      	cmp	r3, #16
 8001c3a:	d11b      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0210 	mvn.w	r2, #16
 8001c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2208      	movs	r2, #8
 8001c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f931 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f924 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f933 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d10e      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d107      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0201 	mvn.w	r2, #1
 8001c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7fe fce0 	bl	8000660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001caa:	2b80      	cmp	r3, #128	; 0x80
 8001cac:	d10e      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b80      	cmp	r3, #128	; 0x80
 8001cba:	d107      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 fbdc 	bl	8002484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd6:	2b40      	cmp	r3, #64	; 0x40
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce4:	2b40      	cmp	r3, #64	; 0x40
 8001ce6:	d107      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8f7 	bl	8001ee6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	2b20      	cmp	r3, #32
 8001d04:	d10e      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	2b20      	cmp	r3, #32
 8001d12:	d107      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0220 	mvn.w	r2, #32
 8001d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fba7 	bl	8002472 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e0ae      	b.n	8001ea8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b0c      	cmp	r3, #12
 8001d56:	f200 809f 	bhi.w	8001e98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001d5a:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001d95 	.word	0x08001d95
 8001d64:	08001e99 	.word	0x08001e99
 8001d68:	08001e99 	.word	0x08001e99
 8001d6c:	08001e99 	.word	0x08001e99
 8001d70:	08001dd5 	.word	0x08001dd5
 8001d74:	08001e99 	.word	0x08001e99
 8001d78:	08001e99 	.word	0x08001e99
 8001d7c:	08001e99 	.word	0x08001e99
 8001d80:	08001e17 	.word	0x08001e17
 8001d84:	08001e99 	.word	0x08001e99
 8001d88:	08001e99 	.word	0x08001e99
 8001d8c:	08001e99 	.word	0x08001e99
 8001d90:	08001e57 	.word	0x08001e57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f90e 	bl	8001fbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0208 	orr.w	r2, r2, #8
 8001dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0204 	bic.w	r2, r2, #4
 8001dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6999      	ldr	r1, [r3, #24]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	619a      	str	r2, [r3, #24]
      break;
 8001dd2:	e064      	b.n	8001e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f954 	bl	8002088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699a      	ldr	r2, [r3, #24]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699a      	ldr	r2, [r3, #24]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6999      	ldr	r1, [r3, #24]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	021a      	lsls	r2, r3, #8
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	619a      	str	r2, [r3, #24]
      break;
 8001e14:	e043      	b.n	8001e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f99d 	bl	800215c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69da      	ldr	r2, [r3, #28]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0208 	orr.w	r2, r2, #8
 8001e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69da      	ldr	r2, [r3, #28]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0204 	bic.w	r2, r2, #4
 8001e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	69d9      	ldr	r1, [r3, #28]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	61da      	str	r2, [r3, #28]
      break;
 8001e54:	e023      	b.n	8001e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 f9e7 	bl	8002230 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	69da      	ldr	r2, [r3, #28]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	69da      	ldr	r2, [r3, #28]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69d9      	ldr	r1, [r3, #28]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	021a      	lsls	r2, r3, #8
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	61da      	str	r2, [r3, #28]
      break;
 8001e96:	e002      	b.n	8001e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8001e9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a29      	ldr	r2, [pc, #164]	; (8001fb0 <TIM_Base_SetConfig+0xb8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00b      	beq.n	8001f28 <TIM_Base_SetConfig+0x30>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f16:	d007      	beq.n	8001f28 <TIM_Base_SetConfig+0x30>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a26      	ldr	r2, [pc, #152]	; (8001fb4 <TIM_Base_SetConfig+0xbc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d003      	beq.n	8001f28 <TIM_Base_SetConfig+0x30>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a25      	ldr	r2, [pc, #148]	; (8001fb8 <TIM_Base_SetConfig+0xc0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d108      	bne.n	8001f3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <TIM_Base_SetConfig+0xb8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00b      	beq.n	8001f5a <TIM_Base_SetConfig+0x62>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f48:	d007      	beq.n	8001f5a <TIM_Base_SetConfig+0x62>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <TIM_Base_SetConfig+0xbc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d003      	beq.n	8001f5a <TIM_Base_SetConfig+0x62>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <TIM_Base_SetConfig+0xc0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d108      	bne.n	8001f6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <TIM_Base_SetConfig+0xb8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d103      	bne.n	8001fa0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	615a      	str	r2, [r3, #20]
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	40012c00 	.word	0x40012c00
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40000800 	.word	0x40000800

08001fbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f023 0201 	bic.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0303 	bic.w	r3, r3, #3
 8001ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f023 0302 	bic.w	r3, r3, #2
 8002004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <TIM_OC1_SetConfig+0xc8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d10c      	bne.n	8002032 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f023 0308 	bic.w	r3, r3, #8
 800201e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	4313      	orrs	r3, r2
 8002028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f023 0304 	bic.w	r3, r3, #4
 8002030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a13      	ldr	r2, [pc, #76]	; (8002084 <TIM_OC1_SetConfig+0xc8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d111      	bne.n	800205e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	621a      	str	r2, [r3, #32]
}
 8002078:	bf00      	nop
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40012c00 	.word	0x40012c00

08002088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f023 0210 	bic.w	r2, r3, #16
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f023 0320 	bic.w	r3, r3, #32
 80020d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <TIM_OC2_SetConfig+0xd0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d10d      	bne.n	8002104 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002102:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a14      	ldr	r2, [pc, #80]	; (8002158 <TIM_OC2_SetConfig+0xd0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d113      	bne.n	8002134 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800211a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	621a      	str	r2, [r3, #32]
}
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40012c00 	.word	0x40012c00

0800215c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0303 	bic.w	r3, r3, #3
 8002192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a1d      	ldr	r2, [pc, #116]	; (800222c <TIM_OC3_SetConfig+0xd0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d10d      	bne.n	80021d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <TIM_OC3_SetConfig+0xd0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d113      	bne.n	8002206 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	621a      	str	r2, [r3, #32]
}
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40012c00 	.word	0x40012c00

08002230 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800225e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800227a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	031b      	lsls	r3, r3, #12
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <TIM_OC4_SetConfig+0x98>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d109      	bne.n	80022a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	019b      	lsls	r3, r3, #6
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	621a      	str	r2, [r3, #32]
}
 80022be:	bf00      	nop
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40012c00 	.word	0x40012c00

080022cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2201      	movs	r2, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a1a      	ldr	r2, [r3, #32]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	401a      	ands	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a1a      	ldr	r2, [r3, #32]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	431a      	orrs	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	621a      	str	r2, [r3, #32]
}
 800230a:	bf00      	nop
 800230c:	371c      	adds	r7, #28
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002328:	2302      	movs	r3, #2
 800232a:	e046      	b.n	80023ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00e      	beq.n	800238e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002378:	d009      	beq.n	800238e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d004      	beq.n	800238e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a10      	ldr	r2, [pc, #64]	; (80023cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d10c      	bne.n	80023a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	4313      	orrs	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	40012c00 	.word	0x40012c00
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40000800 	.word	0x40000800

080023d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e03d      	b.n	8002468 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4313      	orrs	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4313      	orrs	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
	...

08002498 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800249e:	f3ef 8305 	mrs	r3, IPSR
 80024a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80024a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10f      	bne.n	80024ca <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024aa:	f3ef 8310 	mrs	r3, PRIMASK
 80024ae:	607b      	str	r3, [r7, #4]
  return(result);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <osKernelInitialize+0x32>
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <osKernelInitialize+0x60>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d109      	bne.n	80024d2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024be:	f3ef 8311 	mrs	r3, BASEPRI
 80024c2:	603b      	str	r3, [r7, #0]
  return(result);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80024ca:	f06f 0305 	mvn.w	r3, #5
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	e00c      	b.n	80024ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <osKernelInitialize+0x60>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d105      	bne.n	80024e6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80024da:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <osKernelInitialize+0x60>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	e002      	b.n	80024ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80024ec:	68fb      	ldr	r3, [r7, #12]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	20000160 	.word	0x20000160

080024fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002502:	f3ef 8305 	mrs	r3, IPSR
 8002506:	60bb      	str	r3, [r7, #8]
  return(result);
 8002508:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10f      	bne.n	800252e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800250e:	f3ef 8310 	mrs	r3, PRIMASK
 8002512:	607b      	str	r3, [r7, #4]
  return(result);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <osKernelStart+0x32>
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <osKernelStart+0x64>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d109      	bne.n	8002536 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002522:	f3ef 8311 	mrs	r3, BASEPRI
 8002526:	603b      	str	r3, [r7, #0]
  return(result);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <osKernelStart+0x3a>
    stat = osErrorISR;
 800252e:	f06f 0305 	mvn.w	r3, #5
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	e00e      	b.n	8002554 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <osKernelStart+0x64>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d107      	bne.n	800254e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <osKernelStart+0x64>)
 8002540:	2202      	movs	r2, #2
 8002542:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002544:	f001 f890 	bl	8003668 <vTaskStartScheduler>
      stat = osOK;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	e002      	b.n	8002554 <osKernelStart+0x58>
    } else {
      stat = osError;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002554:	68fb      	ldr	r3, [r7, #12]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000160 	.word	0x20000160

08002564 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b092      	sub	sp, #72	; 0x48
 8002568:	af04      	add	r7, sp, #16
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002574:	f3ef 8305 	mrs	r3, IPSR
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800257c:	2b00      	cmp	r3, #0
 800257e:	f040 8094 	bne.w	80026aa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002582:	f3ef 8310 	mrs	r3, PRIMASK
 8002586:	623b      	str	r3, [r7, #32]
  return(result);
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 808d 	bne.w	80026aa <osThreadNew+0x146>
 8002590:	4b48      	ldr	r3, [pc, #288]	; (80026b4 <osThreadNew+0x150>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d106      	bne.n	80025a6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002598:	f3ef 8311 	mrs	r3, BASEPRI
 800259c:	61fb      	str	r3, [r7, #28]
  return(result);
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f040 8082 	bne.w	80026aa <osThreadNew+0x146>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d07e      	beq.n	80026aa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80025b0:	2318      	movs	r3, #24
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80025b4:	2300      	movs	r3, #0
 80025b6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80025b8:	f107 031b 	add.w	r3, r7, #27
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d045      	beq.n	8002656 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <osThreadNew+0x74>
        name = attr->name;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <osThreadNew+0x9a>
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	2b38      	cmp	r3, #56	; 0x38
 80025f0:	d805      	bhi.n	80025fe <osThreadNew+0x9a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <osThreadNew+0x9e>
        return (NULL);
 80025fe:	2300      	movs	r3, #0
 8002600:	e054      	b.n	80026ac <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00e      	beq.n	8002638 <osThreadNew+0xd4>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2ba7      	cmp	r3, #167	; 0xa7
 8002620:	d90a      	bls.n	8002638 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <osThreadNew+0xd4>
        mem = 1;
 8002632:	2301      	movs	r3, #1
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28
 8002636:	e010      	b.n	800265a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10c      	bne.n	800265a <osThreadNew+0xf6>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d108      	bne.n	800265a <osThreadNew+0xf6>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d104      	bne.n	800265a <osThreadNew+0xf6>
          mem = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
 8002654:	e001      	b.n	800265a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	2b01      	cmp	r3, #1
 800265e:	d110      	bne.n	8002682 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002668:	9202      	str	r2, [sp, #8]
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002674:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fe12 	bl	80032a0 <xTaskCreateStatic>
 800267c:	4603      	mov	r3, r0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e013      	b.n	80026aa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	2b00      	cmp	r3, #0
 8002686:	d110      	bne.n	80026aa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268a:	b29a      	uxth	r2, r3
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fe5c 	bl	8003358 <xTaskCreate>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d001      	beq.n	80026aa <osThreadNew+0x146>
          hTask = NULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80026aa:	697b      	ldr	r3, [r7, #20]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3738      	adds	r7, #56	; 0x38
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000160 	.word	0x20000160

080026b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026c0:	f3ef 8305 	mrs	r3, IPSR
 80026c4:	613b      	str	r3, [r7, #16]
  return(result);
 80026c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10f      	bne.n	80026ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026cc:	f3ef 8310 	mrs	r3, PRIMASK
 80026d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <osDelay+0x34>
 80026d8:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <osDelay+0x58>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d109      	bne.n	80026f4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026e0:	f3ef 8311 	mrs	r3, BASEPRI
 80026e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <osDelay+0x3c>
    stat = osErrorISR;
 80026ec:	f06f 0305 	mvn.w	r3, #5
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e007      	b.n	8002704 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <osDelay+0x4c>
      vTaskDelay(ticks);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 ff7e 	bl	8003600 <vTaskDelay>
    }
  }

  return (stat);
 8002704:	697b      	ldr	r3, [r7, #20]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000160 	.word	0x20000160

08002714 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4a06      	ldr	r2, [pc, #24]	; (800273c <vApplicationGetIdleTaskMemory+0x28>)
 8002724:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	4a05      	ldr	r2, [pc, #20]	; (8002740 <vApplicationGetIdleTaskMemory+0x2c>)
 800272a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2280      	movs	r2, #128	; 0x80
 8002730:	601a      	str	r2, [r3, #0]
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	20000164 	.word	0x20000164
 8002740:	2000020c 	.word	0x2000020c

08002744 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4a07      	ldr	r2, [pc, #28]	; (8002770 <vApplicationGetTimerTaskMemory+0x2c>)
 8002754:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	4a06      	ldr	r2, [pc, #24]	; (8002774 <vApplicationGetTimerTaskMemory+0x30>)
 800275a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002762:	601a      	str	r2, [r3, #0]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	2000040c 	.word	0x2000040c
 8002774:	200004b4 	.word	0x200004b4

08002778 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f103 0208 	add.w	r2, r3, #8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f103 0208 	add.w	r2, r3, #8
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f103 0208 	add.w	r2, r3, #8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027ce:	b480      	push	{r7}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	601a      	str	r2, [r3, #0]
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282a:	d103      	bne.n	8002834 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e00c      	b.n	800284e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3308      	adds	r3, #8
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e002      	b.n	8002842 <vListInsert+0x2e>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	429a      	cmp	r2, r3
 800284c:	d2f6      	bcs.n	800283c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	601a      	str	r2, [r3, #0]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6892      	ldr	r2, [r2, #8]
 800289a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6852      	ldr	r2, [r2, #4]
 80028a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d103      	bne.n	80028b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	1e5a      	subs	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
	...

080028d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028fe:	bf00      	nop
 8002900:	e7fe      	b.n	8002900 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002902:	f001 fff3 	bl	80048ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290e:	68f9      	ldr	r1, [r7, #12]
 8002910:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	441a      	add	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	3b01      	subs	r3, #1
 8002934:	68f9      	ldr	r1, [r7, #12]
 8002936:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	441a      	add	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	22ff      	movs	r2, #255	; 0xff
 8002946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	22ff      	movs	r2, #255	; 0xff
 800294e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d114      	bne.n	8002982 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01a      	beq.n	8002996 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3310      	adds	r3, #16
 8002964:	4618      	mov	r0, r3
 8002966:	f001 f91b 	bl	8003ba0 <xTaskRemoveFromEventList>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d012      	beq.n	8002996 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <xQueueGenericReset+0xcc>)
 8002972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	e009      	b.n	8002996 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3310      	adds	r3, #16
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fef6 	bl	8002778 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3324      	adds	r3, #36	; 0x24
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fef1 	bl	8002778 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002996:	f001 ffd9 	bl	800494c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800299a:	2301      	movs	r3, #1
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	e000ed04 	.word	0xe000ed04

080029a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08e      	sub	sp, #56	; 0x38
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029ea:	bf00      	nop
 80029ec:	e7fe      	b.n	80029ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <xQueueGenericCreateStatic+0x52>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <xQueueGenericCreateStatic+0x56>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <xQueueGenericCreateStatic+0x58>
 80029fe:	2300      	movs	r3, #0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10a      	bne.n	8002a1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	623b      	str	r3, [r7, #32]
}
 8002a16:	bf00      	nop
 8002a18:	e7fe      	b.n	8002a18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <xQueueGenericCreateStatic+0x7e>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <xQueueGenericCreateStatic+0x82>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <xQueueGenericCreateStatic+0x84>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	61fb      	str	r3, [r7, #28]
}
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a46:	2350      	movs	r3, #80	; 0x50
 8002a48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2b50      	cmp	r3, #80	; 0x50
 8002a4e:	d00a      	beq.n	8002a66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	61bb      	str	r3, [r7, #24]
}
 8002a62:	bf00      	nop
 8002a64:	e7fe      	b.n	8002a64 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00d      	beq.n	8002a8c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a78:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f805 	bl	8002a96 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3730      	adds	r7, #48	; 0x30
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e002      	b.n	8002ab8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	69b8      	ldr	r0, [r7, #24]
 8002ac8:	f7ff ff06 	bl	80028d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08e      	sub	sp, #56	; 0x38
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002aea:	2300      	movs	r3, #0
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <xQueueGenericSend+0x32>
	__asm volatile
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b0a:	bf00      	nop
 8002b0c:	e7fe      	b.n	8002b0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d103      	bne.n	8002b1c <xQueueGenericSend+0x40>
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <xQueueGenericSend+0x44>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <xQueueGenericSend+0x46>
 8002b20:	2300      	movs	r3, #0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <xQueueGenericSend+0x60>
	__asm volatile
 8002b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b38:	bf00      	nop
 8002b3a:	e7fe      	b.n	8002b3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d103      	bne.n	8002b4a <xQueueGenericSend+0x6e>
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <xQueueGenericSend+0x72>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <xQueueGenericSend+0x74>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <xQueueGenericSend+0x8e>
	__asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	623b      	str	r3, [r7, #32]
}
 8002b66:	bf00      	nop
 8002b68:	e7fe      	b.n	8002b68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b6a:	f001 f9df 	bl	8003f2c <xTaskGetSchedulerState>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <xQueueGenericSend+0x9e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <xQueueGenericSend+0xa2>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <xQueueGenericSend+0xa4>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <xQueueGenericSend+0xbe>
	__asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	61fb      	str	r3, [r7, #28]
}
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b9a:	f001 fea7 	bl	80048ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <xQueueGenericSend+0xd4>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d129      	bne.n	8002c04 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bb6:	f000 fa07 	bl	8002fc8 <prvCopyDataToQueue>
 8002bba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d010      	beq.n	8002be6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	3324      	adds	r3, #36	; 0x24
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 ffe9 	bl	8003ba0 <xTaskRemoveFromEventList>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d013      	beq.n	8002bfc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bd4:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <xQueueGenericSend+0x1f8>)
 8002bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	e00a      	b.n	8002bfc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bec:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <xQueueGenericSend+0x1f8>)
 8002bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bfc:	f001 fea6 	bl	800494c <vPortExitCritical>
				return pdPASS;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e063      	b.n	8002ccc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d103      	bne.n	8002c12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c0a:	f001 fe9f 	bl	800494c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e05c      	b.n	8002ccc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 f823 	bl	8003c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c22:	2301      	movs	r3, #1
 8002c24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c26:	f001 fe91 	bl	800494c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c2a:	f000 fd8d 	bl	8003748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c2e:	f001 fe5d 	bl	80048ec <vPortEnterCritical>
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c38:	b25b      	sxtb	r3, r3
 8002c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3e:	d103      	bne.n	8002c48 <xQueueGenericSend+0x16c>
 8002c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c4e:	b25b      	sxtb	r3, r3
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d103      	bne.n	8002c5e <xQueueGenericSend+0x182>
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c5e:	f001 fe75 	bl	800494c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c62:	1d3a      	adds	r2, r7, #4
 8002c64:	f107 0314 	add.w	r3, r7, #20
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f001 f812 	bl	8003c94 <xTaskCheckForTimeOut>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d124      	bne.n	8002cc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c78:	f000 fa9e 	bl	80031b8 <prvIsQueueFull>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d018      	beq.n	8002cb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c84:	3310      	adds	r3, #16
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 ff38 	bl	8003b00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c92:	f000 fa29 	bl	80030e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c96:	f000 fd65 	bl	8003764 <xTaskResumeAll>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f47f af7c 	bne.w	8002b9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <xQueueGenericSend+0x1f8>)
 8002ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	e772      	b.n	8002b9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cb6:	f000 fa17 	bl	80030e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cba:	f000 fd53 	bl	8003764 <xTaskResumeAll>
 8002cbe:	e76c      	b.n	8002b9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cc2:	f000 fa11 	bl	80030e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cc6:	f000 fd4d 	bl	8003764 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cca:	2300      	movs	r3, #0
		}
	}
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3738      	adds	r7, #56	; 0x38
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	e000ed04 	.word	0xe000ed04

08002cd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08e      	sub	sp, #56	; 0x38
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d02:	bf00      	nop
 8002d04:	e7fe      	b.n	8002d04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d103      	bne.n	8002d14 <xQueueGenericSendFromISR+0x3c>
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <xQueueGenericSendFromISR+0x40>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <xQueueGenericSendFromISR+0x42>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	623b      	str	r3, [r7, #32]
}
 8002d30:	bf00      	nop
 8002d32:	e7fe      	b.n	8002d32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d103      	bne.n	8002d42 <xQueueGenericSendFromISR+0x6a>
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <xQueueGenericSendFromISR+0x6e>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <xQueueGenericSendFromISR+0x70>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	61fb      	str	r3, [r7, #28]
}
 8002d5e:	bf00      	nop
 8002d60:	e7fe      	b.n	8002d60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d62:	f001 fe85 	bl	8004a70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d66:	f3ef 8211 	mrs	r2, BASEPRI
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	61ba      	str	r2, [r7, #24]
 8002d7c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d7e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d302      	bcc.n	8002d94 <xQueueGenericSendFromISR+0xbc>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d12c      	bne.n	8002dee <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002da4:	f000 f910 	bl	8002fc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002da8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d112      	bne.n	8002dd8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	3324      	adds	r3, #36	; 0x24
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 feee 	bl	8003ba0 <xTaskRemoveFromEventList>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00e      	beq.n	8002de8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	e007      	b.n	8002de8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ddc:	3301      	adds	r3, #1
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	b25a      	sxtb	r2, r3
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002de8:	2301      	movs	r3, #1
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002dec:	e001      	b.n	8002df2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	637b      	str	r3, [r7, #52]	; 0x34
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3738      	adds	r7, #56	; 0x38
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	; 0x30
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10a      	bne.n	8002e38 <xQueueReceive+0x30>
	__asm volatile
 8002e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	623b      	str	r3, [r7, #32]
}
 8002e34:	bf00      	nop
 8002e36:	e7fe      	b.n	8002e36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <xQueueReceive+0x3e>
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <xQueueReceive+0x42>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <xQueueReceive+0x44>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <xQueueReceive+0x5e>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	61fb      	str	r3, [r7, #28]
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e66:	f001 f861 	bl	8003f2c <xTaskGetSchedulerState>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d102      	bne.n	8002e76 <xQueueReceive+0x6e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <xQueueReceive+0x72>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <xQueueReceive+0x74>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <xQueueReceive+0x8e>
	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	61bb      	str	r3, [r7, #24]
}
 8002e92:	bf00      	nop
 8002e94:	e7fe      	b.n	8002e94 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e96:	f001 fd29 	bl	80048ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d01f      	beq.n	8002ee6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eaa:	f000 f8f7 	bl	800309c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	1e5a      	subs	r2, r3, #1
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00f      	beq.n	8002ede <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	3310      	adds	r3, #16
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fe6c 	bl	8003ba0 <xTaskRemoveFromEventList>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ece:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <xQueueReceive+0x1bc>)
 8002ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ede:	f001 fd35 	bl	800494c <vPortExitCritical>
				return pdPASS;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e069      	b.n	8002fba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d103      	bne.n	8002ef4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002eec:	f001 fd2e 	bl	800494c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e062      	b.n	8002fba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002efa:	f107 0310 	add.w	r3, r7, #16
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 feb2 	bl	8003c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f08:	f001 fd20 	bl	800494c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f0c:	f000 fc1c 	bl	8003748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f10:	f001 fcec 	bl	80048ec <vPortEnterCritical>
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f1a:	b25b      	sxtb	r3, r3
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d103      	bne.n	8002f2a <xQueueReceive+0x122>
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f30:	b25b      	sxtb	r3, r3
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d103      	bne.n	8002f40 <xQueueReceive+0x138>
 8002f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f40:	f001 fd04 	bl	800494c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f44:	1d3a      	adds	r2, r7, #4
 8002f46:	f107 0310 	add.w	r3, r7, #16
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fea1 	bl	8003c94 <xTaskCheckForTimeOut>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d123      	bne.n	8002fa0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f5a:	f000 f917 	bl	800318c <prvIsQueueEmpty>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d017      	beq.n	8002f94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	3324      	adds	r3, #36	; 0x24
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 fdc7 	bl	8003b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f74:	f000 f8b8 	bl	80030e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f78:	f000 fbf4 	bl	8003764 <xTaskResumeAll>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d189      	bne.n	8002e96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <xQueueReceive+0x1bc>)
 8002f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	e780      	b.n	8002e96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f96:	f000 f8a7 	bl	80030e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f9a:	f000 fbe3 	bl	8003764 <xTaskResumeAll>
 8002f9e:	e77a      	b.n	8002e96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fa2:	f000 f8a1 	bl	80030e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fa6:	f000 fbdd 	bl	8003764 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fac:	f000 f8ee 	bl	800318c <prvIsQueueEmpty>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f43f af6f 	beq.w	8002e96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3730      	adds	r7, #48	; 0x30
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	e000ed04 	.word	0xe000ed04

08002fc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10d      	bne.n	8003002 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d14d      	bne.n	800308a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 ffb8 	bl	8003f68 <xTaskPriorityDisinherit>
 8002ff8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	e043      	b.n	800308a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d119      	bne.n	800303c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6898      	ldr	r0, [r3, #8]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	461a      	mov	r2, r3
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	f001 ffc6 	bl	8004fa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	441a      	add	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	429a      	cmp	r2, r3
 8003030:	d32b      	bcc.n	800308a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	e026      	b.n	800308a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	68d8      	ldr	r0, [r3, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	461a      	mov	r2, r3
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	f001 ffac 	bl	8004fa4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	425b      	negs	r3, r3
 8003056:	441a      	add	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d207      	bcs.n	8003078 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	425b      	negs	r3, r3
 8003072:	441a      	add	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d105      	bne.n	800308a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	3b01      	subs	r3, #1
 8003088:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003092:	697b      	ldr	r3, [r7, #20]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d018      	beq.n	80030e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	441a      	add	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d303      	bcc.n	80030d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68d9      	ldr	r1, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	461a      	mov	r2, r3
 80030da:	6838      	ldr	r0, [r7, #0]
 80030dc:	f001 ff62 	bl	8004fa4 <memcpy>
	}
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030f0:	f001 fbfc 	bl	80048ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030fc:	e011      	b.n	8003122 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d012      	beq.n	800312c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3324      	adds	r3, #36	; 0x24
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fd48 	bl	8003ba0 <xTaskRemoveFromEventList>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003116:	f000 fe1f 	bl	8003d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	3b01      	subs	r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003126:	2b00      	cmp	r3, #0
 8003128:	dce9      	bgt.n	80030fe <prvUnlockQueue+0x16>
 800312a:	e000      	b.n	800312e <prvUnlockQueue+0x46>
					break;
 800312c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	22ff      	movs	r2, #255	; 0xff
 8003132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003136:	f001 fc09 	bl	800494c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800313a:	f001 fbd7 	bl	80048ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003144:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003146:	e011      	b.n	800316c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d012      	beq.n	8003176 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3310      	adds	r3, #16
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fd23 	bl	8003ba0 <xTaskRemoveFromEventList>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003160:	f000 fdfa 	bl	8003d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003164:	7bbb      	ldrb	r3, [r7, #14]
 8003166:	3b01      	subs	r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800316c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003170:	2b00      	cmp	r3, #0
 8003172:	dce9      	bgt.n	8003148 <prvUnlockQueue+0x60>
 8003174:	e000      	b.n	8003178 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003176:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	22ff      	movs	r2, #255	; 0xff
 800317c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003180:	f001 fbe4 	bl	800494c <vPortExitCritical>
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003194:	f001 fbaa 	bl	80048ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e001      	b.n	80031aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031aa:	f001 fbcf 	bl	800494c <vPortExitCritical>

	return xReturn;
 80031ae:	68fb      	ldr	r3, [r7, #12]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031c0:	f001 fb94 	bl	80048ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d102      	bne.n	80031d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031d0:	2301      	movs	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e001      	b.n	80031da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031da:	f001 fbb7 	bl	800494c <vPortExitCritical>

	return xReturn;
 80031de:	68fb      	ldr	r3, [r7, #12]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	e014      	b.n	8003222 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031f8:	4a0e      	ldr	r2, [pc, #56]	; (8003234 <vQueueAddToRegistry+0x4c>)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10b      	bne.n	800321c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003204:	490b      	ldr	r1, [pc, #44]	; (8003234 <vQueueAddToRegistry+0x4c>)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800320e:	4a09      	ldr	r2, [pc, #36]	; (8003234 <vQueueAddToRegistry+0x4c>)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800321a:	e006      	b.n	800322a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3301      	adds	r3, #1
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b07      	cmp	r3, #7
 8003226:	d9e7      	bls.n	80031f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	200008b4 	.word	0x200008b4

08003238 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003248:	f001 fb50 	bl	80048ec <vPortEnterCritical>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003252:	b25b      	sxtb	r3, r3
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d103      	bne.n	8003262 <vQueueWaitForMessageRestricted+0x2a>
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003268:	b25b      	sxtb	r3, r3
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d103      	bne.n	8003278 <vQueueWaitForMessageRestricted+0x40>
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003278:	f001 fb68 	bl	800494c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	2b00      	cmp	r3, #0
 8003282:	d106      	bne.n	8003292 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3324      	adds	r3, #36	; 0x24
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fc5b 	bl	8003b48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003292:	6978      	ldr	r0, [r7, #20]
 8003294:	f7ff ff28 	bl	80030e8 <prvUnlockQueue>
	}
 8003298:	bf00      	nop
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08e      	sub	sp, #56	; 0x38
 80032a4:	af04      	add	r7, sp, #16
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10a      	bne.n	80032ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80032b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	623b      	str	r3, [r7, #32]
}
 80032c6:	bf00      	nop
 80032c8:	e7fe      	b.n	80032c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	61fb      	str	r3, [r7, #28]
}
 80032e2:	bf00      	nop
 80032e4:	e7fe      	b.n	80032e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032e6:	23a8      	movs	r3, #168	; 0xa8
 80032e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2ba8      	cmp	r3, #168	; 0xa8
 80032ee:	d00a      	beq.n	8003306 <xTaskCreateStatic+0x66>
	__asm volatile
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	61bb      	str	r3, [r7, #24]
}
 8003302:	bf00      	nop
 8003304:	e7fe      	b.n	8003304 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01e      	beq.n	800334a <xTaskCreateStatic+0xaa>
 800330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01b      	beq.n	800334a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800331a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	2202      	movs	r2, #2
 8003320:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003324:	2300      	movs	r3, #0
 8003326:	9303      	str	r3, [sp, #12]
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	9302      	str	r3, [sp, #8]
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f851 	bl	80033e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003344:	f000 f8ec 	bl	8003520 <prvAddNewTaskToReadyList>
 8003348:	e001      	b.n	800334e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800334e:	697b      	ldr	r3, [r7, #20]
	}
 8003350:	4618      	mov	r0, r3
 8003352:	3728      	adds	r7, #40	; 0x28
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08c      	sub	sp, #48	; 0x30
 800335c:	af04      	add	r7, sp, #16
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4618      	mov	r0, r3
 800336e:	f001 fbbd 	bl	8004aec <pvPortMalloc>
 8003372:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00e      	beq.n	8003398 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800337a:	20a8      	movs	r0, #168	; 0xa8
 800337c:	f001 fbb6 	bl	8004aec <pvPortMalloc>
 8003380:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
 800338e:	e005      	b.n	800339c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003390:	6978      	ldr	r0, [r7, #20]
 8003392:	f001 fc6f 	bl	8004c74 <vPortFree>
 8003396:	e001      	b.n	800339c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003398:	2300      	movs	r3, #0
 800339a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d017      	beq.n	80033d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033aa:	88fa      	ldrh	r2, [r7, #6]
 80033ac:	2300      	movs	r3, #0
 80033ae:	9303      	str	r3, [sp, #12]
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	9302      	str	r3, [sp, #8]
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68b9      	ldr	r1, [r7, #8]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f80f 	bl	80033e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033c6:	69f8      	ldr	r0, [r7, #28]
 80033c8:	f000 f8aa 	bl	8003520 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033cc:	2301      	movs	r3, #1
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	e002      	b.n	80033d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033d8:	69bb      	ldr	r3, [r7, #24]
	}
 80033da:	4618      	mov	r0, r3
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	461a      	mov	r2, r3
 80033fc:	21a5      	movs	r1, #165	; 0xa5
 80033fe:	f001 fd4d 	bl	8004e9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800340c:	3b01      	subs	r3, #1
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f023 0307 	bic.w	r3, r3, #7
 800341a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	617b      	str	r3, [r7, #20]
}
 8003438:	bf00      	nop
 800343a:	e7fe      	b.n	800343a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	e012      	b.n	8003468 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	4413      	add	r3, r2
 8003448:	7819      	ldrb	r1, [r3, #0]
 800344a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	4413      	add	r3, r2
 8003450:	3334      	adds	r3, #52	; 0x34
 8003452:	460a      	mov	r2, r1
 8003454:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4413      	add	r3, r2
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d006      	beq.n	8003470 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3301      	adds	r3, #1
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2b0f      	cmp	r3, #15
 800346c:	d9e9      	bls.n	8003442 <prvInitialiseNewTask+0x5e>
 800346e:	e000      	b.n	8003472 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003470:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	2b37      	cmp	r3, #55	; 0x37
 800347e:	d901      	bls.n	8003484 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003480:	2337      	movs	r3, #55	; 0x37
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003488:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800348e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	2200      	movs	r2, #0
 8003494:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	3304      	adds	r3, #4
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff f98b 	bl	80027b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	3318      	adds	r3, #24
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff f986 	bl	80027b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	3354      	adds	r3, #84	; 0x54
 80034d4:	224c      	movs	r2, #76	; 0x4c
 80034d6:	2100      	movs	r1, #0
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 fcdf 	bl	8004e9c <memset>
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	4a0c      	ldr	r2, [pc, #48]	; (8003514 <prvInitialiseNewTask+0x130>)
 80034e2:	659a      	str	r2, [r3, #88]	; 0x58
 80034e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e6:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <prvInitialiseNewTask+0x134>)
 80034e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	4a0b      	ldr	r2, [pc, #44]	; (800351c <prvInitialiseNewTask+0x138>)
 80034ee:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	69b8      	ldr	r0, [r7, #24]
 80034f6:	f001 f90b 	bl	8004710 <pxPortInitialiseStack>
 80034fa:	4602      	mov	r2, r0
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800350a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800350c:	bf00      	nop
 800350e:	3720      	adds	r7, #32
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20001b40 	.word	0x20001b40
 8003518:	20001ba8 	.word	0x20001ba8
 800351c:	20001c10 	.word	0x20001c10

08003520 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003528:	f001 f9e0 	bl	80048ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800352c:	4b2d      	ldr	r3, [pc, #180]	; (80035e4 <prvAddNewTaskToReadyList+0xc4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	4a2c      	ldr	r2, [pc, #176]	; (80035e4 <prvAddNewTaskToReadyList+0xc4>)
 8003534:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003536:	4b2c      	ldr	r3, [pc, #176]	; (80035e8 <prvAddNewTaskToReadyList+0xc8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800353e:	4a2a      	ldr	r2, [pc, #168]	; (80035e8 <prvAddNewTaskToReadyList+0xc8>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003544:	4b27      	ldr	r3, [pc, #156]	; (80035e4 <prvAddNewTaskToReadyList+0xc4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d110      	bne.n	800356e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800354c:	f000 fc28 	bl	8003da0 <prvInitialiseTaskLists>
 8003550:	e00d      	b.n	800356e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003552:	4b26      	ldr	r3, [pc, #152]	; (80035ec <prvAddNewTaskToReadyList+0xcc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800355a:	4b23      	ldr	r3, [pc, #140]	; (80035e8 <prvAddNewTaskToReadyList+0xc8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	429a      	cmp	r2, r3
 8003566:	d802      	bhi.n	800356e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003568:	4a1f      	ldr	r2, [pc, #124]	; (80035e8 <prvAddNewTaskToReadyList+0xc8>)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <prvAddNewTaskToReadyList+0xd0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3301      	adds	r3, #1
 8003574:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <prvAddNewTaskToReadyList+0xd0>)
 8003576:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003578:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <prvAddNewTaskToReadyList+0xd0>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <prvAddNewTaskToReadyList+0xd4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d903      	bls.n	8003594 <prvAddNewTaskToReadyList+0x74>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <prvAddNewTaskToReadyList+0xd4>)
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <prvAddNewTaskToReadyList+0xd8>)
 80035a2:	441a      	add	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	4619      	mov	r1, r3
 80035aa:	4610      	mov	r0, r2
 80035ac:	f7ff f90f 	bl	80027ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035b0:	f001 f9cc 	bl	800494c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035b4:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <prvAddNewTaskToReadyList+0xcc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00e      	beq.n	80035da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <prvAddNewTaskToReadyList+0xc8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d207      	bcs.n	80035da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <prvAddNewTaskToReadyList+0xdc>)
 80035cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000dc8 	.word	0x20000dc8
 80035e8:	200008f4 	.word	0x200008f4
 80035ec:	20000dd4 	.word	0x20000dd4
 80035f0:	20000de4 	.word	0x20000de4
 80035f4:	20000dd0 	.word	0x20000dd0
 80035f8:	200008f8 	.word	0x200008f8
 80035fc:	e000ed04 	.word	0xe000ed04

08003600 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d017      	beq.n	8003642 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003612:	4b13      	ldr	r3, [pc, #76]	; (8003660 <vTaskDelay+0x60>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <vTaskDelay+0x30>
	__asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	60bb      	str	r3, [r7, #8]
}
 800362c:	bf00      	nop
 800362e:	e7fe      	b.n	800362e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003630:	f000 f88a 	bl	8003748 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003634:	2100      	movs	r1, #0
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fd04 	bl	8004044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800363c:	f000 f892 	bl	8003764 <xTaskResumeAll>
 8003640:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d107      	bne.n	8003658 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <vTaskDelay+0x64>)
 800364a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003658:	bf00      	nop
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000df0 	.word	0x20000df0
 8003664:	e000ed04 	.word	0xe000ed04

08003668 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08a      	sub	sp, #40	; 0x28
 800366c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003672:	2300      	movs	r3, #0
 8003674:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003676:	463a      	mov	r2, r7
 8003678:	1d39      	adds	r1, r7, #4
 800367a:	f107 0308 	add.w	r3, r7, #8
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff f848 	bl	8002714 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003684:	6839      	ldr	r1, [r7, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	9202      	str	r2, [sp, #8]
 800368c:	9301      	str	r3, [sp, #4]
 800368e:	2300      	movs	r3, #0
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	2300      	movs	r3, #0
 8003694:	460a      	mov	r2, r1
 8003696:	4924      	ldr	r1, [pc, #144]	; (8003728 <vTaskStartScheduler+0xc0>)
 8003698:	4824      	ldr	r0, [pc, #144]	; (800372c <vTaskStartScheduler+0xc4>)
 800369a:	f7ff fe01 	bl	80032a0 <xTaskCreateStatic>
 800369e:	4603      	mov	r3, r0
 80036a0:	4a23      	ldr	r2, [pc, #140]	; (8003730 <vTaskStartScheduler+0xc8>)
 80036a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036a4:	4b22      	ldr	r3, [pc, #136]	; (8003730 <vTaskStartScheduler+0xc8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036ac:	2301      	movs	r3, #1
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e001      	b.n	80036b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d102      	bne.n	80036c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80036bc:	f000 fd16 	bl	80040ec <xTimerCreateTimerTask>
 80036c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d11b      	bne.n	8003700 <vTaskStartScheduler+0x98>
	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	613b      	str	r3, [r7, #16]
}
 80036da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80036dc:	4b15      	ldr	r3, [pc, #84]	; (8003734 <vTaskStartScheduler+0xcc>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3354      	adds	r3, #84	; 0x54
 80036e2:	4a15      	ldr	r2, [pc, #84]	; (8003738 <vTaskStartScheduler+0xd0>)
 80036e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <vTaskStartScheduler+0xd4>)
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036ee:	4b14      	ldr	r3, [pc, #80]	; (8003740 <vTaskStartScheduler+0xd8>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <vTaskStartScheduler+0xdc>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036fa:	f001 f885 	bl	8004808 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036fe:	e00e      	b.n	800371e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d10a      	bne.n	800371e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	60fb      	str	r3, [r7, #12]
}
 800371a:	bf00      	nop
 800371c:	e7fe      	b.n	800371c <vTaskStartScheduler+0xb4>
}
 800371e:	bf00      	nop
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	080050a0 	.word	0x080050a0
 800372c:	08003d71 	.word	0x08003d71
 8003730:	20000dec 	.word	0x20000dec
 8003734:	200008f4 	.word	0x200008f4
 8003738:	2000005c 	.word	0x2000005c
 800373c:	20000de8 	.word	0x20000de8
 8003740:	20000dd4 	.word	0x20000dd4
 8003744:	20000dcc 	.word	0x20000dcc

08003748 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800374c:	4b04      	ldr	r3, [pc, #16]	; (8003760 <vTaskSuspendAll+0x18>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3301      	adds	r3, #1
 8003752:	4a03      	ldr	r2, [pc, #12]	; (8003760 <vTaskSuspendAll+0x18>)
 8003754:	6013      	str	r3, [r2, #0]
}
 8003756:	bf00      	nop
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000df0 	.word	0x20000df0

08003764 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800376e:	2300      	movs	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003772:	4b42      	ldr	r3, [pc, #264]	; (800387c <xTaskResumeAll+0x118>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10a      	bne.n	8003790 <xTaskResumeAll+0x2c>
	__asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	603b      	str	r3, [r7, #0]
}
 800378c:	bf00      	nop
 800378e:	e7fe      	b.n	800378e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003790:	f001 f8ac 	bl	80048ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003794:	4b39      	ldr	r3, [pc, #228]	; (800387c <xTaskResumeAll+0x118>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3b01      	subs	r3, #1
 800379a:	4a38      	ldr	r2, [pc, #224]	; (800387c <xTaskResumeAll+0x118>)
 800379c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800379e:	4b37      	ldr	r3, [pc, #220]	; (800387c <xTaskResumeAll+0x118>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d162      	bne.n	800386c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037a6:	4b36      	ldr	r3, [pc, #216]	; (8003880 <xTaskResumeAll+0x11c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d05e      	beq.n	800386c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037ae:	e02f      	b.n	8003810 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80037b0:	4b34      	ldr	r3, [pc, #208]	; (8003884 <xTaskResumeAll+0x120>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3318      	adds	r3, #24
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff f861 	bl	8002884 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3304      	adds	r3, #4
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff f85c 	bl	8002884 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d0:	4b2d      	ldr	r3, [pc, #180]	; (8003888 <xTaskResumeAll+0x124>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d903      	bls.n	80037e0 <xTaskResumeAll+0x7c>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	4a2a      	ldr	r2, [pc, #168]	; (8003888 <xTaskResumeAll+0x124>)
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4a27      	ldr	r2, [pc, #156]	; (800388c <xTaskResumeAll+0x128>)
 80037ee:	441a      	add	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3304      	adds	r3, #4
 80037f4:	4619      	mov	r1, r3
 80037f6:	4610      	mov	r0, r2
 80037f8:	f7fe ffe9 	bl	80027ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003800:	4b23      	ldr	r3, [pc, #140]	; (8003890 <xTaskResumeAll+0x12c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	429a      	cmp	r2, r3
 8003808:	d302      	bcc.n	8003810 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800380a:	4b22      	ldr	r3, [pc, #136]	; (8003894 <xTaskResumeAll+0x130>)
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003810:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <xTaskResumeAll+0x120>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1cb      	bne.n	80037b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800381e:	f000 fb61 	bl	8003ee4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003822:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <xTaskResumeAll+0x134>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d010      	beq.n	8003850 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800382e:	f000 f845 	bl	80038bc <xTaskIncrementTick>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003838:	4b16      	ldr	r3, [pc, #88]	; (8003894 <xTaskResumeAll+0x130>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3b01      	subs	r3, #1
 8003842:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f1      	bne.n	800382e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800384a:	4b13      	ldr	r3, [pc, #76]	; (8003898 <xTaskResumeAll+0x134>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003850:	4b10      	ldr	r3, [pc, #64]	; (8003894 <xTaskResumeAll+0x130>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d009      	beq.n	800386c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800385c:	4b0f      	ldr	r3, [pc, #60]	; (800389c <xTaskResumeAll+0x138>)
 800385e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800386c:	f001 f86e 	bl	800494c <vPortExitCritical>

	return xAlreadyYielded;
 8003870:	68bb      	ldr	r3, [r7, #8]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000df0 	.word	0x20000df0
 8003880:	20000dc8 	.word	0x20000dc8
 8003884:	20000d88 	.word	0x20000d88
 8003888:	20000dd0 	.word	0x20000dd0
 800388c:	200008f8 	.word	0x200008f8
 8003890:	200008f4 	.word	0x200008f4
 8003894:	20000ddc 	.word	0x20000ddc
 8003898:	20000dd8 	.word	0x20000dd8
 800389c:	e000ed04 	.word	0xe000ed04

080038a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038a6:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <xTaskGetTickCount+0x18>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80038ac:	687b      	ldr	r3, [r7, #4]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr
 80038b8:	20000dcc 	.word	0x20000dcc

080038bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038c6:	4b51      	ldr	r3, [pc, #324]	; (8003a0c <xTaskIncrementTick+0x150>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 808e 	bne.w	80039ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038d0:	4b4f      	ldr	r3, [pc, #316]	; (8003a10 <xTaskIncrementTick+0x154>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3301      	adds	r3, #1
 80038d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038d8:	4a4d      	ldr	r2, [pc, #308]	; (8003a10 <xTaskIncrementTick+0x154>)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d120      	bne.n	8003926 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80038e4:	4b4b      	ldr	r3, [pc, #300]	; (8003a14 <xTaskIncrementTick+0x158>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <xTaskIncrementTick+0x48>
	__asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	603b      	str	r3, [r7, #0]
}
 8003900:	bf00      	nop
 8003902:	e7fe      	b.n	8003902 <xTaskIncrementTick+0x46>
 8003904:	4b43      	ldr	r3, [pc, #268]	; (8003a14 <xTaskIncrementTick+0x158>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	4b43      	ldr	r3, [pc, #268]	; (8003a18 <xTaskIncrementTick+0x15c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a41      	ldr	r2, [pc, #260]	; (8003a14 <xTaskIncrementTick+0x158>)
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	4a41      	ldr	r2, [pc, #260]	; (8003a18 <xTaskIncrementTick+0x15c>)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b40      	ldr	r3, [pc, #256]	; (8003a1c <xTaskIncrementTick+0x160>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	4a3f      	ldr	r2, [pc, #252]	; (8003a1c <xTaskIncrementTick+0x160>)
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	f000 fadf 	bl	8003ee4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003926:	4b3e      	ldr	r3, [pc, #248]	; (8003a20 <xTaskIncrementTick+0x164>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	429a      	cmp	r2, r3
 800392e:	d34e      	bcc.n	80039ce <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003930:	4b38      	ldr	r3, [pc, #224]	; (8003a14 <xTaskIncrementTick+0x158>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <xTaskIncrementTick+0x82>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <xTaskIncrementTick+0x84>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d004      	beq.n	800394e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003944:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <xTaskIncrementTick+0x164>)
 8003946:	f04f 32ff 	mov.w	r2, #4294967295
 800394a:	601a      	str	r2, [r3, #0]
					break;
 800394c:	e03f      	b.n	80039ce <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800394e:	4b31      	ldr	r3, [pc, #196]	; (8003a14 <xTaskIncrementTick+0x158>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	429a      	cmp	r2, r3
 8003964:	d203      	bcs.n	800396e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003966:	4a2e      	ldr	r2, [pc, #184]	; (8003a20 <xTaskIncrementTick+0x164>)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6013      	str	r3, [r2, #0]
						break;
 800396c:	e02f      	b.n	80039ce <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	3304      	adds	r3, #4
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe ff86 	bl	8002884 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d004      	beq.n	800398a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	3318      	adds	r3, #24
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe ff7d 	bl	8002884 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398e:	4b25      	ldr	r3, [pc, #148]	; (8003a24 <xTaskIncrementTick+0x168>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d903      	bls.n	800399e <xTaskIncrementTick+0xe2>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	4a22      	ldr	r2, [pc, #136]	; (8003a24 <xTaskIncrementTick+0x168>)
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4a1f      	ldr	r2, [pc, #124]	; (8003a28 <xTaskIncrementTick+0x16c>)
 80039ac:	441a      	add	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	3304      	adds	r3, #4
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f7fe ff0a 	bl	80027ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039be:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <xTaskIncrementTick+0x170>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d3b3      	bcc.n	8003930 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80039c8:	2301      	movs	r3, #1
 80039ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039cc:	e7b0      	b.n	8003930 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039ce:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <xTaskIncrementTick+0x170>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d4:	4914      	ldr	r1, [pc, #80]	; (8003a28 <xTaskIncrementTick+0x16c>)
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d907      	bls.n	80039f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80039e6:	2301      	movs	r3, #1
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e004      	b.n	80039f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80039ec:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <xTaskIncrementTick+0x174>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3301      	adds	r3, #1
 80039f2:	4a0f      	ldr	r2, [pc, #60]	; (8003a30 <xTaskIncrementTick+0x174>)
 80039f4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80039f6:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <xTaskIncrementTick+0x178>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80039fe:	2301      	movs	r3, #1
 8003a00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003a02:	697b      	ldr	r3, [r7, #20]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000df0 	.word	0x20000df0
 8003a10:	20000dcc 	.word	0x20000dcc
 8003a14:	20000d80 	.word	0x20000d80
 8003a18:	20000d84 	.word	0x20000d84
 8003a1c:	20000de0 	.word	0x20000de0
 8003a20:	20000de8 	.word	0x20000de8
 8003a24:	20000dd0 	.word	0x20000dd0
 8003a28:	200008f8 	.word	0x200008f8
 8003a2c:	200008f4 	.word	0x200008f4
 8003a30:	20000dd8 	.word	0x20000dd8
 8003a34:	20000ddc 	.word	0x20000ddc

08003a38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <vTaskSwitchContext+0xb0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a46:	4b29      	ldr	r3, [pc, #164]	; (8003aec <vTaskSwitchContext+0xb4>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a4c:	e046      	b.n	8003adc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003a4e:	4b27      	ldr	r3, [pc, #156]	; (8003aec <vTaskSwitchContext+0xb4>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003a54:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <vTaskSwitchContext+0xb8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e010      	b.n	8003a7e <vTaskSwitchContext+0x46>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <vTaskSwitchContext+0x40>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	607b      	str	r3, [r7, #4]
}
 8003a74:	bf00      	nop
 8003a76:	e7fe      	b.n	8003a76 <vTaskSwitchContext+0x3e>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	491d      	ldr	r1, [pc, #116]	; (8003af4 <vTaskSwitchContext+0xbc>)
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0e4      	beq.n	8003a5c <vTaskSwitchContext+0x24>
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <vTaskSwitchContext+0xbc>)
 8003a9e:	4413      	add	r3, r2
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d104      	bne.n	8003ac2 <vTaskSwitchContext+0x8a>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <vTaskSwitchContext+0xc0>)
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	4a08      	ldr	r2, [pc, #32]	; (8003af0 <vTaskSwitchContext+0xb8>)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <vTaskSwitchContext+0xc0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3354      	adds	r3, #84	; 0x54
 8003ad8:	4a08      	ldr	r2, [pc, #32]	; (8003afc <vTaskSwitchContext+0xc4>)
 8003ada:	6013      	str	r3, [r2, #0]
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000df0 	.word	0x20000df0
 8003aec:	20000ddc 	.word	0x20000ddc
 8003af0:	20000dd0 	.word	0x20000dd0
 8003af4:	200008f8 	.word	0x200008f8
 8003af8:	200008f4 	.word	0x200008f4
 8003afc:	2000005c 	.word	0x2000005c

08003b00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	60fb      	str	r3, [r7, #12]
}
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b26:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <vTaskPlaceOnEventList+0x44>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3318      	adds	r3, #24
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fe fe70 	bl	8002814 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b34:	2101      	movs	r1, #1
 8003b36:	6838      	ldr	r0, [r7, #0]
 8003b38:	f000 fa84 	bl	8004044 <prvAddCurrentTaskToDelayedList>
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	200008f4 	.word	0x200008f4

08003b48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	617b      	str	r3, [r7, #20]
}
 8003b6c:	bf00      	nop
 8003b6e:	e7fe      	b.n	8003b6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <vTaskPlaceOnEventListRestricted+0x54>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3318      	adds	r3, #24
 8003b76:	4619      	mov	r1, r3
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f7fe fe28 	bl	80027ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
 8003b88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	68b8      	ldr	r0, [r7, #8]
 8003b8e:	f000 fa59 	bl	8004044 <prvAddCurrentTaskToDelayedList>
	}
 8003b92:	bf00      	nop
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200008f4 	.word	0x200008f4

08003ba0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	60fb      	str	r3, [r7, #12]
}
 8003bc8:	bf00      	nop
 8003bca:	e7fe      	b.n	8003bca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	3318      	adds	r3, #24
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe fe57 	bl	8002884 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd6:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <xTaskRemoveFromEventList+0xb0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d11d      	bne.n	8003c1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fe4e 	bl	8002884 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <xTaskRemoveFromEventList+0xb4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d903      	bls.n	8003bfc <xTaskRemoveFromEventList+0x5c>
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <xTaskRemoveFromEventList+0xb4>)
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <xTaskRemoveFromEventList+0xb8>)
 8003c0a:	441a      	add	r2, r3
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f7fe fddb 	bl	80027ce <vListInsertEnd>
 8003c18:	e005      	b.n	8003c26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	3318      	adds	r3, #24
 8003c1e:	4619      	mov	r1, r3
 8003c20:	480e      	ldr	r0, [pc, #56]	; (8003c5c <xTaskRemoveFromEventList+0xbc>)
 8003c22:	f7fe fdd4 	bl	80027ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <xTaskRemoveFromEventList+0xc0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d905      	bls.n	8003c40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c34:	2301      	movs	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c38:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <xTaskRemoveFromEventList+0xc4>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e001      	b.n	8003c44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003c44:	697b      	ldr	r3, [r7, #20]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000df0 	.word	0x20000df0
 8003c54:	20000dd0 	.word	0x20000dd0
 8003c58:	200008f8 	.word	0x200008f8
 8003c5c:	20000d88 	.word	0x20000d88
 8003c60:	200008f4 	.word	0x200008f4
 8003c64:	20000ddc 	.word	0x20000ddc

08003c68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <vTaskInternalSetTimeOutState+0x24>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <vTaskInternalSetTimeOutState+0x28>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	605a      	str	r2, [r3, #4]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000de0 	.word	0x20000de0
 8003c90:	20000dcc 	.word	0x20000dcc

08003c94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10a      	bne.n	8003cba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	613b      	str	r3, [r7, #16]
}
 8003cb6:	bf00      	nop
 8003cb8:	e7fe      	b.n	8003cb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	60fb      	str	r3, [r7, #12]
}
 8003cd2:	bf00      	nop
 8003cd4:	e7fe      	b.n	8003cd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003cd6:	f000 fe09 	bl	80048ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <xTaskCheckForTimeOut+0xbc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	d102      	bne.n	8003cfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	e023      	b.n	8003d42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <xTaskCheckForTimeOut+0xc0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d007      	beq.n	8003d16 <xTaskCheckForTimeOut+0x82>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d302      	bcc.n	8003d16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d10:	2301      	movs	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	e015      	b.n	8003d42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d20b      	bcs.n	8003d38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	1ad2      	subs	r2, r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ff9b 	bl	8003c68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	e004      	b.n	8003d42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d42:	f000 fe03 	bl	800494c <vPortExitCritical>

	return xReturn;
 8003d46:	69fb      	ldr	r3, [r7, #28]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20000dcc 	.word	0x20000dcc
 8003d54:	20000de0 	.word	0x20000de0

08003d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d5c:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <vTaskMissedYield+0x14>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]
}
 8003d62:	bf00      	nop
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000ddc 	.word	0x20000ddc

08003d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d78:	f000 f852 	bl	8003e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <prvIdleTask+0x28>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d9f9      	bls.n	8003d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <prvIdleTask+0x2c>)
 8003d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d94:	e7f0      	b.n	8003d78 <prvIdleTask+0x8>
 8003d96:	bf00      	nop
 8003d98:	200008f8 	.word	0x200008f8
 8003d9c:	e000ed04 	.word	0xe000ed04

08003da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003da6:	2300      	movs	r3, #0
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	e00c      	b.n	8003dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <prvInitialiseTaskLists+0x60>)
 8003db8:	4413      	add	r3, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fe fcdc 	bl	8002778 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b37      	cmp	r3, #55	; 0x37
 8003dca:	d9ef      	bls.n	8003dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003dcc:	480d      	ldr	r0, [pc, #52]	; (8003e04 <prvInitialiseTaskLists+0x64>)
 8003dce:	f7fe fcd3 	bl	8002778 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dd2:	480d      	ldr	r0, [pc, #52]	; (8003e08 <prvInitialiseTaskLists+0x68>)
 8003dd4:	f7fe fcd0 	bl	8002778 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dd8:	480c      	ldr	r0, [pc, #48]	; (8003e0c <prvInitialiseTaskLists+0x6c>)
 8003dda:	f7fe fccd 	bl	8002778 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dde:	480c      	ldr	r0, [pc, #48]	; (8003e10 <prvInitialiseTaskLists+0x70>)
 8003de0:	f7fe fcca 	bl	8002778 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003de4:	480b      	ldr	r0, [pc, #44]	; (8003e14 <prvInitialiseTaskLists+0x74>)
 8003de6:	f7fe fcc7 	bl	8002778 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <prvInitialiseTaskLists+0x78>)
 8003dec:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <prvInitialiseTaskLists+0x64>)
 8003dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <prvInitialiseTaskLists+0x7c>)
 8003df2:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <prvInitialiseTaskLists+0x68>)
 8003df4:	601a      	str	r2, [r3, #0]
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	200008f8 	.word	0x200008f8
 8003e04:	20000d58 	.word	0x20000d58
 8003e08:	20000d6c 	.word	0x20000d6c
 8003e0c:	20000d88 	.word	0x20000d88
 8003e10:	20000d9c 	.word	0x20000d9c
 8003e14:	20000db4 	.word	0x20000db4
 8003e18:	20000d80 	.word	0x20000d80
 8003e1c:	20000d84 	.word	0x20000d84

08003e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e26:	e019      	b.n	8003e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e28:	f000 fd60 	bl	80048ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003e2c:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <prvCheckTasksWaitingTermination+0x50>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe fd23 	bl	8002884 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <prvCheckTasksWaitingTermination+0x54>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	4a0b      	ldr	r2, [pc, #44]	; (8003e74 <prvCheckTasksWaitingTermination+0x54>)
 8003e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <prvCheckTasksWaitingTermination+0x58>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	4a0a      	ldr	r2, [pc, #40]	; (8003e78 <prvCheckTasksWaitingTermination+0x58>)
 8003e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e52:	f000 fd7b 	bl	800494c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f810 	bl	8003e7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <prvCheckTasksWaitingTermination+0x58>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e1      	bne.n	8003e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000d9c 	.word	0x20000d9c
 8003e74:	20000dc8 	.word	0x20000dc8
 8003e78:	20000db0 	.word	0x20000db0

08003e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3354      	adds	r3, #84	; 0x54
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 f80f 	bl	8004eac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d108      	bne.n	8003eaa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fee9 	bl	8004c74 <vPortFree>
				vPortFree( pxTCB );
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fee6 	bl	8004c74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ea8:	e018      	b.n	8003edc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d103      	bne.n	8003ebc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fedd 	bl	8004c74 <vPortFree>
	}
 8003eba:	e00f      	b.n	8003edc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d00a      	beq.n	8003edc <prvDeleteTCB+0x60>
	__asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	60fb      	str	r3, [r7, #12]
}
 8003ed8:	bf00      	nop
 8003eda:	e7fe      	b.n	8003eda <prvDeleteTCB+0x5e>
	}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eea:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <prvResetNextTaskUnblockTime+0x40>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <prvResetNextTaskUnblockTime+0x14>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <prvResetNextTaskUnblockTime+0x16>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d004      	beq.n	8003f08 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003efe:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <prvResetNextTaskUnblockTime+0x44>)
 8003f00:	f04f 32ff 	mov.w	r2, #4294967295
 8003f04:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f06:	e008      	b.n	8003f1a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <prvResetNextTaskUnblockTime+0x40>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <prvResetNextTaskUnblockTime+0x44>)
 8003f18:	6013      	str	r3, [r2, #0]
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	20000d80 	.word	0x20000d80
 8003f28:	20000de8 	.word	0x20000de8

08003f2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f32:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <xTaskGetSchedulerState+0x34>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d102      	bne.n	8003f40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	e008      	b.n	8003f52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f40:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <xTaskGetSchedulerState+0x38>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	607b      	str	r3, [r7, #4]
 8003f4c:	e001      	b.n	8003f52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f52:	687b      	ldr	r3, [r7, #4]
	}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000dd4 	.word	0x20000dd4
 8003f64:	20000df0 	.word	0x20000df0

08003f68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d056      	beq.n	800402c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f7e:	4b2e      	ldr	r3, [pc, #184]	; (8004038 <xTaskPriorityDisinherit+0xd0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d00a      	beq.n	8003f9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	60fb      	str	r3, [r7, #12]
}
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10a      	bne.n	8003fbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	60bb      	str	r3, [r7, #8]
}
 8003fb8:	bf00      	nop
 8003fba:	e7fe      	b.n	8003fba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc0:	1e5a      	subs	r2, r3, #1
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d02c      	beq.n	800402c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d128      	bne.n	800402c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe fc50 	bl	8002884 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	; (800403c <xTaskPriorityDisinherit+0xd4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d903      	bls.n	800400c <xTaskPriorityDisinherit+0xa4>
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	4a0c      	ldr	r2, [pc, #48]	; (800403c <xTaskPriorityDisinherit+0xd4>)
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4a09      	ldr	r2, [pc, #36]	; (8004040 <xTaskPriorityDisinherit+0xd8>)
 800401a:	441a      	add	r2, r3
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f7fe fbd3 	bl	80027ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004028:	2301      	movs	r3, #1
 800402a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800402c:	697b      	ldr	r3, [r7, #20]
	}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	200008f4 	.word	0x200008f4
 800403c:	20000dd0 	.word	0x20000dd0
 8004040:	200008f8 	.word	0x200008f8

08004044 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800404e:	4b21      	ldr	r3, [pc, #132]	; (80040d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004054:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3304      	adds	r3, #4
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe fc12 	bl	8002884 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	d10a      	bne.n	800407e <prvAddCurrentTaskToDelayedList+0x3a>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800406e:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	4819      	ldr	r0, [pc, #100]	; (80040dc <prvAddCurrentTaskToDelayedList+0x98>)
 8004078:	f7fe fba9 	bl	80027ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800407c:	e026      	b.n	80040cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4413      	add	r3, r2
 8004084:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004086:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	429a      	cmp	r2, r3
 8004094:	d209      	bcs.n	80040aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004096:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3304      	adds	r3, #4
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f7fe fbb6 	bl	8002814 <vListInsert>
}
 80040a8:	e010      	b.n	80040cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040aa:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3304      	adds	r3, #4
 80040b4:	4619      	mov	r1, r3
 80040b6:	4610      	mov	r0, r2
 80040b8:	f7fe fbac 	bl	8002814 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040bc:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d202      	bcs.n	80040cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80040c6:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	6013      	str	r3, [r2, #0]
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000dcc 	.word	0x20000dcc
 80040d8:	200008f4 	.word	0x200008f4
 80040dc:	20000db4 	.word	0x20000db4
 80040e0:	20000d84 	.word	0x20000d84
 80040e4:	20000d80 	.word	0x20000d80
 80040e8:	20000de8 	.word	0x20000de8

080040ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80040f6:	f000 facb 	bl	8004690 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80040fa:	4b1c      	ldr	r3, [pc, #112]	; (800416c <xTimerCreateTimerTask+0x80>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d021      	beq.n	8004146 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800410a:	1d3a      	adds	r2, r7, #4
 800410c:	f107 0108 	add.w	r1, r7, #8
 8004110:	f107 030c 	add.w	r3, r7, #12
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe fb15 	bl	8002744 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	9202      	str	r2, [sp, #8]
 8004122:	9301      	str	r3, [sp, #4]
 8004124:	2302      	movs	r3, #2
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	2300      	movs	r3, #0
 800412a:	460a      	mov	r2, r1
 800412c:	4910      	ldr	r1, [pc, #64]	; (8004170 <xTimerCreateTimerTask+0x84>)
 800412e:	4811      	ldr	r0, [pc, #68]	; (8004174 <xTimerCreateTimerTask+0x88>)
 8004130:	f7ff f8b6 	bl	80032a0 <xTaskCreateStatic>
 8004134:	4603      	mov	r3, r0
 8004136:	4a10      	ldr	r2, [pc, #64]	; (8004178 <xTimerCreateTimerTask+0x8c>)
 8004138:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800413a:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <xTimerCreateTimerTask+0x8c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004142:	2301      	movs	r3, #1
 8004144:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	613b      	str	r3, [r7, #16]
}
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004162:	697b      	ldr	r3, [r7, #20]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000e24 	.word	0x20000e24
 8004170:	080050a8 	.word	0x080050a8
 8004174:	08004299 	.word	0x08004299
 8004178:	20000e28 	.word	0x20000e28

0800417c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08a      	sub	sp, #40	; 0x28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800418a:	2300      	movs	r3, #0
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	623b      	str	r3, [r7, #32]
}
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80041aa:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <xTimerGenericCommand+0x98>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d02a      	beq.n	8004208 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b05      	cmp	r3, #5
 80041c2:	dc18      	bgt.n	80041f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041c4:	f7ff feb2 	bl	8003f2c <xTaskGetSchedulerState>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d109      	bne.n	80041e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80041ce:	4b11      	ldr	r3, [pc, #68]	; (8004214 <xTimerGenericCommand+0x98>)
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	f107 0110 	add.w	r1, r7, #16
 80041d6:	2300      	movs	r3, #0
 80041d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041da:	f7fe fc7f 	bl	8002adc <xQueueGenericSend>
 80041de:	6278      	str	r0, [r7, #36]	; 0x24
 80041e0:	e012      	b.n	8004208 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80041e2:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <xTimerGenericCommand+0x98>)
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	f107 0110 	add.w	r1, r7, #16
 80041ea:	2300      	movs	r3, #0
 80041ec:	2200      	movs	r2, #0
 80041ee:	f7fe fc75 	bl	8002adc <xQueueGenericSend>
 80041f2:	6278      	str	r0, [r7, #36]	; 0x24
 80041f4:	e008      	b.n	8004208 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <xTimerGenericCommand+0x98>)
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	f107 0110 	add.w	r1, r7, #16
 80041fe:	2300      	movs	r3, #0
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	f7fe fd69 	bl	8002cd8 <xQueueGenericSendFromISR>
 8004206:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800420a:	4618      	mov	r0, r3
 800420c:	3728      	adds	r7, #40	; 0x28
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000e24 	.word	0x20000e24

08004218 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af02      	add	r7, sp, #8
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004222:	4b1c      	ldr	r3, [pc, #112]	; (8004294 <prvProcessExpiredTimer+0x7c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	3304      	adds	r3, #4
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe fb27 	bl	8002884 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d122      	bne.n	8004284 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	18d1      	adds	r1, r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	6978      	ldr	r0, [r7, #20]
 800424c:	f000 f8c8 	bl	80043e0 <prvInsertTimerInActiveList>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d016      	beq.n	8004284 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004256:	2300      	movs	r3, #0
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	2300      	movs	r3, #0
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	2100      	movs	r1, #0
 8004260:	6978      	ldr	r0, [r7, #20]
 8004262:	f7ff ff8b 	bl	800417c <xTimerGenericCommand>
 8004266:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	60fb      	str	r3, [r7, #12]
}
 8004280:	bf00      	nop
 8004282:	e7fe      	b.n	8004282 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	6978      	ldr	r0, [r7, #20]
 800428a:	4798      	blx	r3
}
 800428c:	bf00      	nop
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000e1c 	.word	0x20000e1c

08004298 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042a0:	f107 0308 	add.w	r3, r7, #8
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f857 	bl	8004358 <prvGetNextExpireTime>
 80042aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4619      	mov	r1, r3
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f803 	bl	80042bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80042b6:	f000 f8d5 	bl	8004464 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042ba:	e7f1      	b.n	80042a0 <prvTimerTask+0x8>

080042bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80042c6:	f7ff fa3f 	bl	8003748 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042ca:	f107 0308 	add.w	r3, r7, #8
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f866 	bl	80043a0 <prvSampleTimeNow>
 80042d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d130      	bne.n	800433e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <prvProcessTimerOrBlockTask+0x3c>
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d806      	bhi.n	80042f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80042ea:	f7ff fa3b 	bl	8003764 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80042ee:	68f9      	ldr	r1, [r7, #12]
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ff91 	bl	8004218 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80042f6:	e024      	b.n	8004342 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042fe:	4b13      	ldr	r3, [pc, #76]	; (800434c <prvProcessTimerOrBlockTask+0x90>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <prvProcessTimerOrBlockTask+0x94>)
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	4619      	mov	r1, r3
 800431e:	f7fe ff8b 	bl	8003238 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004322:	f7ff fa1f 	bl	8003764 <xTaskResumeAll>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800432c:	4b09      	ldr	r3, [pc, #36]	; (8004354 <prvProcessTimerOrBlockTask+0x98>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	f3bf 8f6f 	isb	sy
}
 800433c:	e001      	b.n	8004342 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800433e:	f7ff fa11 	bl	8003764 <xTaskResumeAll>
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000e20 	.word	0x20000e20
 8004350:	20000e24 	.word	0x20000e24
 8004354:	e000ed04 	.word	0xe000ed04

08004358 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <prvGetNextExpireTime+0x44>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	bf0c      	ite	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	2300      	movne	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d105      	bne.n	800438a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800437e:	4b07      	ldr	r3, [pc, #28]	; (800439c <prvGetNextExpireTime+0x44>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e001      	b.n	800438e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800438e:	68fb      	ldr	r3, [r7, #12]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000e1c 	.word	0x20000e1c

080043a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80043a8:	f7ff fa7a 	bl	80038a0 <xTaskGetTickCount>
 80043ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <prvSampleTimeNow+0x3c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d205      	bcs.n	80043c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80043b8:	f000 f908 	bl	80045cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	e002      	b.n	80043ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80043ca:	4a04      	ldr	r2, [pc, #16]	; (80043dc <prvSampleTimeNow+0x3c>)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80043d0:	68fb      	ldr	r3, [r7, #12]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000e2c 	.word	0x20000e2c

080043e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	429a      	cmp	r2, r3
 8004404:	d812      	bhi.n	800442c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	1ad2      	subs	r2, r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	429a      	cmp	r2, r3
 8004412:	d302      	bcc.n	800441a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004414:	2301      	movs	r3, #1
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	e01b      	b.n	8004452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800441a:	4b10      	ldr	r3, [pc, #64]	; (800445c <prvInsertTimerInActiveList+0x7c>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3304      	adds	r3, #4
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f7fe f9f5 	bl	8002814 <vListInsert>
 800442a:	e012      	b.n	8004452 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d206      	bcs.n	8004442 <prvInsertTimerInActiveList+0x62>
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d302      	bcc.n	8004442 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800443c:	2301      	movs	r3, #1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	e007      	b.n	8004452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004442:	4b07      	ldr	r3, [pc, #28]	; (8004460 <prvInsertTimerInActiveList+0x80>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3304      	adds	r3, #4
 800444a:	4619      	mov	r1, r3
 800444c:	4610      	mov	r0, r2
 800444e:	f7fe f9e1 	bl	8002814 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004452:	697b      	ldr	r3, [r7, #20]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000e20 	.word	0x20000e20
 8004460:	20000e1c 	.word	0x20000e1c

08004464 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08e      	sub	sp, #56	; 0x38
 8004468:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800446a:	e09d      	b.n	80045a8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	da18      	bge.n	80044a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004472:	1d3b      	adds	r3, r7, #4
 8004474:	3304      	adds	r3, #4
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	61fb      	str	r3, [r7, #28]
}
 8004490:	bf00      	nop
 8004492:	e7fe      	b.n	8004492 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449a:	6850      	ldr	r0, [r2, #4]
 800449c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449e:	6892      	ldr	r2, [r2, #8]
 80044a0:	4611      	mov	r1, r2
 80044a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	db7e      	blt.n	80045a8 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d004      	beq.n	80044c0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	3304      	adds	r3, #4
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe f9e2 	bl	8002884 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044c0:	463b      	mov	r3, r7
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff ff6c 	bl	80043a0 <prvSampleTimeNow>
 80044c8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b09      	cmp	r3, #9
 80044ce:	d86a      	bhi.n	80045a6 <prvProcessReceivedCommands+0x142>
 80044d0:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <prvProcessReceivedCommands+0x74>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	08004501 	.word	0x08004501
 80044dc:	08004501 	.word	0x08004501
 80044e0:	08004501 	.word	0x08004501
 80044e4:	080045a9 	.word	0x080045a9
 80044e8:	0800455d 	.word	0x0800455d
 80044ec:	08004595 	.word	0x08004595
 80044f0:	08004501 	.word	0x08004501
 80044f4:	08004501 	.word	0x08004501
 80044f8:	080045a9 	.word	0x080045a9
 80044fc:	0800455d 	.word	0x0800455d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	18d1      	adds	r1, r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800450e:	f7ff ff67 	bl	80043e0 <prvInsertTimerInActiveList>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d047      	beq.n	80045a8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800451e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d13f      	bne.n	80045a8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	441a      	add	r2, r3
 8004530:	2300      	movs	r3, #0
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	2300      	movs	r3, #0
 8004536:	2100      	movs	r1, #0
 8004538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800453a:	f7ff fe1f 	bl	800417c <xTimerGenericCommand>
 800453e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d130      	bne.n	80045a8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	61bb      	str	r3, [r7, #24]
}
 8004558:	bf00      	nop
 800455a:	e7fe      	b.n	800455a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	617b      	str	r3, [r7, #20]
}
 800457c:	bf00      	nop
 800457e:	e7fe      	b.n	800457e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	699a      	ldr	r2, [r3, #24]
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	18d1      	adds	r1, r2, r3
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800458e:	f7ff ff27 	bl	80043e0 <prvInsertTimerInActiveList>
					break;
 8004592:	e009      	b.n	80045a8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800459e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045a0:	f000 fb68 	bl	8004c74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80045a4:	e000      	b.n	80045a8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80045a6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045a8:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <prvProcessReceivedCommands+0x164>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	1d39      	adds	r1, r7, #4
 80045ae:	2200      	movs	r2, #0
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fe fc29 	bl	8002e08 <xQueueReceive>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f47f af57 	bne.w	800446c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80045be:	bf00      	nop
 80045c0:	bf00      	nop
 80045c2:	3730      	adds	r7, #48	; 0x30
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000e24 	.word	0x20000e24

080045cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045d2:	e045      	b.n	8004660 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045d4:	4b2c      	ldr	r3, [pc, #176]	; (8004688 <prvSwitchTimerLists+0xbc>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045de:	4b2a      	ldr	r3, [pc, #168]	; (8004688 <prvSwitchTimerLists+0xbc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fe f949 	bl	8002884 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d12e      	bne.n	8004660 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4413      	add	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	429a      	cmp	r2, r3
 8004612:	d90e      	bls.n	8004632 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004620:	4b19      	ldr	r3, [pc, #100]	; (8004688 <prvSwitchTimerLists+0xbc>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3304      	adds	r3, #4
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f7fe f8f2 	bl	8002814 <vListInsert>
 8004630:	e016      	b.n	8004660 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004632:	2300      	movs	r3, #0
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	2300      	movs	r3, #0
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	2100      	movs	r1, #0
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7ff fd9d 	bl	800417c <xTimerGenericCommand>
 8004642:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <prvSwitchTimerLists+0x94>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	603b      	str	r3, [r7, #0]
}
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004660:	4b09      	ldr	r3, [pc, #36]	; (8004688 <prvSwitchTimerLists+0xbc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1b4      	bne.n	80045d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800466a:	4b07      	ldr	r3, [pc, #28]	; (8004688 <prvSwitchTimerLists+0xbc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <prvSwitchTimerLists+0xc0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a04      	ldr	r2, [pc, #16]	; (8004688 <prvSwitchTimerLists+0xbc>)
 8004676:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004678:	4a04      	ldr	r2, [pc, #16]	; (800468c <prvSwitchTimerLists+0xc0>)
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	6013      	str	r3, [r2, #0]
}
 800467e:	bf00      	nop
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20000e1c 	.word	0x20000e1c
 800468c:	20000e20 	.word	0x20000e20

08004690 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004696:	f000 f929 	bl	80048ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800469a:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <prvCheckForValidListAndQueue+0x60>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d120      	bne.n	80046e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80046a2:	4814      	ldr	r0, [pc, #80]	; (80046f4 <prvCheckForValidListAndQueue+0x64>)
 80046a4:	f7fe f868 	bl	8002778 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80046a8:	4813      	ldr	r0, [pc, #76]	; (80046f8 <prvCheckForValidListAndQueue+0x68>)
 80046aa:	f7fe f865 	bl	8002778 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80046ae:	4b13      	ldr	r3, [pc, #76]	; (80046fc <prvCheckForValidListAndQueue+0x6c>)
 80046b0:	4a10      	ldr	r2, [pc, #64]	; (80046f4 <prvCheckForValidListAndQueue+0x64>)
 80046b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80046b4:	4b12      	ldr	r3, [pc, #72]	; (8004700 <prvCheckForValidListAndQueue+0x70>)
 80046b6:	4a10      	ldr	r2, [pc, #64]	; (80046f8 <prvCheckForValidListAndQueue+0x68>)
 80046b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80046ba:	2300      	movs	r3, #0
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	4b11      	ldr	r3, [pc, #68]	; (8004704 <prvCheckForValidListAndQueue+0x74>)
 80046c0:	4a11      	ldr	r2, [pc, #68]	; (8004708 <prvCheckForValidListAndQueue+0x78>)
 80046c2:	2110      	movs	r1, #16
 80046c4:	200a      	movs	r0, #10
 80046c6:	f7fe f96f 	bl	80029a8 <xQueueGenericCreateStatic>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4a08      	ldr	r2, [pc, #32]	; (80046f0 <prvCheckForValidListAndQueue+0x60>)
 80046ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046d0:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <prvCheckForValidListAndQueue+0x60>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <prvCheckForValidListAndQueue+0x60>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	490b      	ldr	r1, [pc, #44]	; (800470c <prvCheckForValidListAndQueue+0x7c>)
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe fd82 	bl	80031e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046e4:	f000 f932 	bl	800494c <vPortExitCritical>
}
 80046e8:	bf00      	nop
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000e24 	.word	0x20000e24
 80046f4:	20000df4 	.word	0x20000df4
 80046f8:	20000e08 	.word	0x20000e08
 80046fc:	20000e1c 	.word	0x20000e1c
 8004700:	20000e20 	.word	0x20000e20
 8004704:	20000ed0 	.word	0x20000ed0
 8004708:	20000e30 	.word	0x20000e30
 800470c:	080050b0 	.word	0x080050b0

08004710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3b04      	subs	r3, #4
 8004720:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3b04      	subs	r3, #4
 800472e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f023 0201 	bic.w	r2, r3, #1
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3b04      	subs	r3, #4
 800473e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004740:	4a08      	ldr	r2, [pc, #32]	; (8004764 <pxPortInitialiseStack+0x54>)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3b14      	subs	r3, #20
 800474a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3b20      	subs	r3, #32
 8004756:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004758:	68fb      	ldr	r3, [r7, #12]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr
 8004764:	08004769 	.word	0x08004769

08004768 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800476e:	2300      	movs	r3, #0
 8004770:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004772:	4b12      	ldr	r3, [pc, #72]	; (80047bc <prvTaskExitError+0x54>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477a:	d00a      	beq.n	8004792 <prvTaskExitError+0x2a>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	60fb      	str	r3, [r7, #12]
}
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <prvTaskExitError+0x28>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	60bb      	str	r3, [r7, #8]
}
 80047a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047a6:	bf00      	nop
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0fc      	beq.n	80047a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	2000000c 	.word	0x2000000c

080047c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047c0:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <pxCurrentTCBConst2>)
 80047c2:	6819      	ldr	r1, [r3, #0]
 80047c4:	6808      	ldr	r0, [r1, #0]
 80047c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80047ca:	f380 8809 	msr	PSP, r0
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f04f 0000 	mov.w	r0, #0
 80047d6:	f380 8811 	msr	BASEPRI, r0
 80047da:	f04e 0e0d 	orr.w	lr, lr, #13
 80047de:	4770      	bx	lr

080047e0 <pxCurrentTCBConst2>:
 80047e0:	200008f4 	.word	0x200008f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop

080047e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80047e8:	4806      	ldr	r0, [pc, #24]	; (8004804 <prvPortStartFirstTask+0x1c>)
 80047ea:	6800      	ldr	r0, [r0, #0]
 80047ec:	6800      	ldr	r0, [r0, #0]
 80047ee:	f380 8808 	msr	MSP, r0
 80047f2:	b662      	cpsie	i
 80047f4:	b661      	cpsie	f
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	df00      	svc	0
 8004800:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004802:	bf00      	nop
 8004804:	e000ed08 	.word	0xe000ed08

08004808 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800480e:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <xPortStartScheduler+0xd0>)
 8004810:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	22ff      	movs	r2, #255	; 0xff
 800481e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004830:	b2da      	uxtb	r2, r3
 8004832:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <xPortStartScheduler+0xd4>)
 8004834:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004836:	4b2a      	ldr	r3, [pc, #168]	; (80048e0 <xPortStartScheduler+0xd8>)
 8004838:	2207      	movs	r2, #7
 800483a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800483c:	e009      	b.n	8004852 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800483e:	4b28      	ldr	r3, [pc, #160]	; (80048e0 <xPortStartScheduler+0xd8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3b01      	subs	r3, #1
 8004844:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <xPortStartScheduler+0xd8>)
 8004846:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	b2db      	uxtb	r3, r3
 8004850:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485a:	2b80      	cmp	r3, #128	; 0x80
 800485c:	d0ef      	beq.n	800483e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800485e:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <xPortStartScheduler+0xd8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f1c3 0307 	rsb	r3, r3, #7
 8004866:	2b04      	cmp	r3, #4
 8004868:	d00a      	beq.n	8004880 <xPortStartScheduler+0x78>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	60bb      	str	r3, [r7, #8]
}
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004880:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <xPortStartScheduler+0xd8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	021b      	lsls	r3, r3, #8
 8004886:	4a16      	ldr	r2, [pc, #88]	; (80048e0 <xPortStartScheduler+0xd8>)
 8004888:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <xPortStartScheduler+0xd8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004892:	4a13      	ldr	r2, [pc, #76]	; (80048e0 <xPortStartScheduler+0xd8>)
 8004894:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800489e:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <xPortStartScheduler+0xdc>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a10      	ldr	r2, [pc, #64]	; (80048e4 <xPortStartScheduler+0xdc>)
 80048a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <xPortStartScheduler+0xdc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a0d      	ldr	r2, [pc, #52]	; (80048e4 <xPortStartScheduler+0xdc>)
 80048b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048b6:	f000 f8b9 	bl	8004a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <xPortStartScheduler+0xe0>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048c0:	f7ff ff92 	bl	80047e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048c4:	f7ff f8b8 	bl	8003a38 <vTaskSwitchContext>
	prvTaskExitError();
 80048c8:	f7ff ff4e 	bl	8004768 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	e000e400 	.word	0xe000e400
 80048dc:	20000f20 	.word	0x20000f20
 80048e0:	20000f24 	.word	0x20000f24
 80048e4:	e000ed20 	.word	0xe000ed20
 80048e8:	2000000c 	.word	0x2000000c

080048ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	607b      	str	r3, [r7, #4]
}
 8004904:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004906:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <vPortEnterCritical+0x58>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3301      	adds	r3, #1
 800490c:	4a0d      	ldr	r2, [pc, #52]	; (8004944 <vPortEnterCritical+0x58>)
 800490e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <vPortEnterCritical+0x58>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d10f      	bne.n	8004938 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <vPortEnterCritical+0x5c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <vPortEnterCritical+0x4c>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	603b      	str	r3, [r7, #0]
}
 8004934:	bf00      	nop
 8004936:	e7fe      	b.n	8004936 <vPortEnterCritical+0x4a>
	}
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	2000000c 	.word	0x2000000c
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004952:	4b11      	ldr	r3, [pc, #68]	; (8004998 <vPortExitCritical+0x4c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <vPortExitCritical+0x24>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	607b      	str	r3, [r7, #4]
}
 800496c:	bf00      	nop
 800496e:	e7fe      	b.n	800496e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004970:	4b09      	ldr	r3, [pc, #36]	; (8004998 <vPortExitCritical+0x4c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3b01      	subs	r3, #1
 8004976:	4a08      	ldr	r2, [pc, #32]	; (8004998 <vPortExitCritical+0x4c>)
 8004978:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800497a:	4b07      	ldr	r3, [pc, #28]	; (8004998 <vPortExitCritical+0x4c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d105      	bne.n	800498e <vPortExitCritical+0x42>
 8004982:	2300      	movs	r3, #0
 8004984:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	f383 8811 	msr	BASEPRI, r3
}
 800498c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	2000000c 	.word	0x2000000c
 800499c:	00000000 	.word	0x00000000

080049a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049a0:	f3ef 8009 	mrs	r0, PSP
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	4b0d      	ldr	r3, [pc, #52]	; (80049e0 <pxCurrentTCBConst>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049b0:	6010      	str	r0, [r2, #0]
 80049b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80049b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049ba:	f380 8811 	msr	BASEPRI, r0
 80049be:	f7ff f83b 	bl	8003a38 <vTaskSwitchContext>
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f380 8811 	msr	BASEPRI, r0
 80049ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	6808      	ldr	r0, [r1, #0]
 80049d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049d6:	f380 8809 	msr	PSP, r0
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	4770      	bx	lr

080049e0 <pxCurrentTCBConst>:
 80049e0:	200008f4 	.word	0x200008f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop

080049e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	607b      	str	r3, [r7, #4]
}
 8004a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a02:	f7fe ff5b 	bl	80038bc <xTaskIncrementTick>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <SysTick_Handler+0x40>)
 8004a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	2300      	movs	r3, #0
 8004a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	f383 8811 	msr	BASEPRI, r3
}
 8004a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	e000ed04 	.word	0xe000ed04

08004a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <vPortSetupTimerInterrupt+0x30>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a36:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <vPortSetupTimerInterrupt+0x34>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a3c:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <vPortSetupTimerInterrupt+0x38>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <vPortSetupTimerInterrupt+0x3c>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	4a08      	ldr	r2, [pc, #32]	; (8004a6c <vPortSetupTimerInterrupt+0x40>)
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a4e:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <vPortSetupTimerInterrupt+0x30>)
 8004a50:	2207      	movs	r2, #7
 8004a52:	601a      	str	r2, [r3, #0]
}
 8004a54:	bf00      	nop
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	e000e010 	.word	0xe000e010
 8004a60:	e000e018 	.word	0xe000e018
 8004a64:	20000000 	.word	0x20000000
 8004a68:	10624dd3 	.word	0x10624dd3
 8004a6c:	e000e014 	.word	0xe000e014

08004a70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a76:	f3ef 8305 	mrs	r3, IPSR
 8004a7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b0f      	cmp	r3, #15
 8004a80:	d914      	bls.n	8004aac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a82:	4a16      	ldr	r2, [pc, #88]	; (8004adc <vPortValidateInterruptPriority+0x6c>)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a8c:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <vPortValidateInterruptPriority+0x70>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	7afa      	ldrb	r2, [r7, #11]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d20a      	bcs.n	8004aac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	607b      	str	r3, [r7, #4]
}
 8004aa8:	bf00      	nop
 8004aaa:	e7fe      	b.n	8004aaa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <vPortValidateInterruptPriority+0x74>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <vPortValidateInterruptPriority+0x78>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d90a      	bls.n	8004ad2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	603b      	str	r3, [r7, #0]
}
 8004ace:	bf00      	nop
 8004ad0:	e7fe      	b.n	8004ad0 <vPortValidateInterruptPriority+0x60>
	}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr
 8004adc:	e000e3f0 	.word	0xe000e3f0
 8004ae0:	20000f20 	.word	0x20000f20
 8004ae4:	e000ed0c 	.word	0xe000ed0c
 8004ae8:	20000f24 	.word	0x20000f24

08004aec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004af8:	f7fe fe26 	bl	8003748 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004afc:	4b58      	ldr	r3, [pc, #352]	; (8004c60 <pvPortMalloc+0x174>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b04:	f000 f910 	bl	8004d28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b08:	4b56      	ldr	r3, [pc, #344]	; (8004c64 <pvPortMalloc+0x178>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f040 808e 	bne.w	8004c32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01d      	beq.n	8004b58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4413      	add	r3, r2
 8004b22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d014      	beq.n	8004b58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f023 0307 	bic.w	r3, r3, #7
 8004b34:	3308      	adds	r3, #8
 8004b36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <pvPortMalloc+0x6c>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	617b      	str	r3, [r7, #20]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d069      	beq.n	8004c32 <pvPortMalloc+0x146>
 8004b5e:	4b42      	ldr	r3, [pc, #264]	; (8004c68 <pvPortMalloc+0x17c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d864      	bhi.n	8004c32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b68:	4b40      	ldr	r3, [pc, #256]	; (8004c6c <pvPortMalloc+0x180>)
 8004b6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b6c:	4b3f      	ldr	r3, [pc, #252]	; (8004c6c <pvPortMalloc+0x180>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b72:	e004      	b.n	8004b7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d903      	bls.n	8004b90 <pvPortMalloc+0xa4>
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f1      	bne.n	8004b74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b90:	4b33      	ldr	r3, [pc, #204]	; (8004c60 <pvPortMalloc+0x174>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d04b      	beq.n	8004c32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2208      	movs	r2, #8
 8004ba0:	4413      	add	r3, r2
 8004ba2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	1ad2      	subs	r2, r2, r3
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d91f      	bls.n	8004bfc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <pvPortMalloc+0xf8>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	613b      	str	r3, [r7, #16]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	1ad2      	subs	r2, r2, r3
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bf6:	69b8      	ldr	r0, [r7, #24]
 8004bf8:	f000 f8f8 	bl	8004dec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <pvPortMalloc+0x17c>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	4a18      	ldr	r2, [pc, #96]	; (8004c68 <pvPortMalloc+0x17c>)
 8004c08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c0a:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <pvPortMalloc+0x17c>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b18      	ldr	r3, [pc, #96]	; (8004c70 <pvPortMalloc+0x184>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d203      	bcs.n	8004c1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c16:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <pvPortMalloc+0x17c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <pvPortMalloc+0x184>)
 8004c1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <pvPortMalloc+0x178>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c32:	f7fe fd97 	bl	8003764 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <pvPortMalloc+0x16a>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	60fb      	str	r3, [r7, #12]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <pvPortMalloc+0x168>
	return pvReturn;
 8004c56:	69fb      	ldr	r3, [r7, #28]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3728      	adds	r7, #40	; 0x28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20001b30 	.word	0x20001b30
 8004c64:	20001b3c 	.word	0x20001b3c
 8004c68:	20001b34 	.word	0x20001b34
 8004c6c:	20001b28 	.word	0x20001b28
 8004c70:	20001b38 	.word	0x20001b38

08004c74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d048      	beq.n	8004d18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c86:	2308      	movs	r3, #8
 8004c88:	425b      	negs	r3, r3
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <vPortFree+0xac>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <vPortFree+0x44>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	60fb      	str	r3, [r7, #12]
}
 8004cb4:	bf00      	nop
 8004cb6:	e7fe      	b.n	8004cb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <vPortFree+0x62>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60bb      	str	r3, [r7, #8]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <vPortFree+0xac>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d019      	beq.n	8004d18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d115      	bne.n	8004d18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <vPortFree+0xac>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	401a      	ands	r2, r3
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004cfc:	f7fe fd24 	bl	8003748 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <vPortFree+0xb0>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4413      	add	r3, r2
 8004d0a:	4a06      	ldr	r2, [pc, #24]	; (8004d24 <vPortFree+0xb0>)
 8004d0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d0e:	6938      	ldr	r0, [r7, #16]
 8004d10:	f000 f86c 	bl	8004dec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004d14:	f7fe fd26 	bl	8003764 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d18:	bf00      	nop
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20001b3c 	.word	0x20001b3c
 8004d24:	20001b34 	.word	0x20001b34

08004d28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d34:	4b27      	ldr	r3, [pc, #156]	; (8004dd4 <prvHeapInit+0xac>)
 8004d36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00c      	beq.n	8004d5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3307      	adds	r3, #7
 8004d46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0307 	bic.w	r3, r3, #7
 8004d4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <prvHeapInit+0xac>)
 8004d58:	4413      	add	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d60:	4a1d      	ldr	r2, [pc, #116]	; (8004dd8 <prvHeapInit+0xb0>)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d66:	4b1c      	ldr	r3, [pc, #112]	; (8004dd8 <prvHeapInit+0xb0>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4413      	add	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d74:	2208      	movs	r2, #8
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0307 	bic.w	r3, r3, #7
 8004d82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4a15      	ldr	r2, [pc, #84]	; (8004ddc <prvHeapInit+0xb4>)
 8004d88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d8a:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <prvHeapInit+0xb4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d92:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <prvHeapInit+0xb4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	1ad2      	subs	r2, r2, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004da8:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <prvHeapInit+0xb4>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4a0a      	ldr	r2, [pc, #40]	; (8004de0 <prvHeapInit+0xb8>)
 8004db6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	4a09      	ldr	r2, [pc, #36]	; (8004de4 <prvHeapInit+0xbc>)
 8004dbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dc0:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <prvHeapInit+0xc0>)
 8004dc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dc6:	601a      	str	r2, [r3, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bc80      	pop	{r7}
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20000f28 	.word	0x20000f28
 8004dd8:	20001b28 	.word	0x20001b28
 8004ddc:	20001b30 	.word	0x20001b30
 8004de0:	20001b38 	.word	0x20001b38
 8004de4:	20001b34 	.word	0x20001b34
 8004de8:	20001b3c 	.word	0x20001b3c

08004dec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004df4:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <prvInsertBlockIntoFreeList+0xa8>)
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	e002      	b.n	8004e00 <prvInsertBlockIntoFreeList+0x14>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d8f7      	bhi.n	8004dfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	4413      	add	r3, r2
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d108      	bne.n	8004e2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	441a      	add	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	441a      	add	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d118      	bne.n	8004e74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <prvInsertBlockIntoFreeList+0xac>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d00d      	beq.n	8004e6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	441a      	add	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	e008      	b.n	8004e7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <prvInsertBlockIntoFreeList+0xac>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	e003      	b.n	8004e7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d002      	beq.n	8004e8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr
 8004e94:	20001b28 	.word	0x20001b28
 8004e98:	20001b30 	.word	0x20001b30

08004e9c <memset>:
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4402      	add	r2, r0
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d100      	bne.n	8004ea6 <memset+0xa>
 8004ea4:	4770      	bx	lr
 8004ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eaa:	e7f9      	b.n	8004ea0 <memset+0x4>

08004eac <_reclaim_reent>:
 8004eac:	4b29      	ldr	r3, [pc, #164]	; (8004f54 <_reclaim_reent+0xa8>)
 8004eae:	b570      	push	{r4, r5, r6, lr}
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	4283      	cmp	r3, r0
 8004eb6:	d04b      	beq.n	8004f50 <_reclaim_reent+0xa4>
 8004eb8:	69c3      	ldr	r3, [r0, #28]
 8004eba:	b143      	cbz	r3, 8004ece <_reclaim_reent+0x22>
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d144      	bne.n	8004f4c <_reclaim_reent+0xa0>
 8004ec2:	69e3      	ldr	r3, [r4, #28]
 8004ec4:	6819      	ldr	r1, [r3, #0]
 8004ec6:	b111      	cbz	r1, 8004ece <_reclaim_reent+0x22>
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f000 f879 	bl	8004fc0 <_free_r>
 8004ece:	6961      	ldr	r1, [r4, #20]
 8004ed0:	b111      	cbz	r1, 8004ed8 <_reclaim_reent+0x2c>
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f000 f874 	bl	8004fc0 <_free_r>
 8004ed8:	69e1      	ldr	r1, [r4, #28]
 8004eda:	b111      	cbz	r1, 8004ee2 <_reclaim_reent+0x36>
 8004edc:	4620      	mov	r0, r4
 8004ede:	f000 f86f 	bl	8004fc0 <_free_r>
 8004ee2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004ee4:	b111      	cbz	r1, 8004eec <_reclaim_reent+0x40>
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 f86a 	bl	8004fc0 <_free_r>
 8004eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eee:	b111      	cbz	r1, 8004ef6 <_reclaim_reent+0x4a>
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f000 f865 	bl	8004fc0 <_free_r>
 8004ef6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ef8:	b111      	cbz	r1, 8004f00 <_reclaim_reent+0x54>
 8004efa:	4620      	mov	r0, r4
 8004efc:	f000 f860 	bl	8004fc0 <_free_r>
 8004f00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004f02:	b111      	cbz	r1, 8004f0a <_reclaim_reent+0x5e>
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 f85b 	bl	8004fc0 <_free_r>
 8004f0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004f0c:	b111      	cbz	r1, 8004f14 <_reclaim_reent+0x68>
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f000 f856 	bl	8004fc0 <_free_r>
 8004f14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004f16:	b111      	cbz	r1, 8004f1e <_reclaim_reent+0x72>
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f000 f851 	bl	8004fc0 <_free_r>
 8004f1e:	6a23      	ldr	r3, [r4, #32]
 8004f20:	b1b3      	cbz	r3, 8004f50 <_reclaim_reent+0xa4>
 8004f22:	4620      	mov	r0, r4
 8004f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f28:	4718      	bx	r3
 8004f2a:	5949      	ldr	r1, [r1, r5]
 8004f2c:	b941      	cbnz	r1, 8004f40 <_reclaim_reent+0x94>
 8004f2e:	3504      	adds	r5, #4
 8004f30:	69e3      	ldr	r3, [r4, #28]
 8004f32:	2d80      	cmp	r5, #128	; 0x80
 8004f34:	68d9      	ldr	r1, [r3, #12]
 8004f36:	d1f8      	bne.n	8004f2a <_reclaim_reent+0x7e>
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f000 f841 	bl	8004fc0 <_free_r>
 8004f3e:	e7c0      	b.n	8004ec2 <_reclaim_reent+0x16>
 8004f40:	680e      	ldr	r6, [r1, #0]
 8004f42:	4620      	mov	r0, r4
 8004f44:	f000 f83c 	bl	8004fc0 <_free_r>
 8004f48:	4631      	mov	r1, r6
 8004f4a:	e7ef      	b.n	8004f2c <_reclaim_reent+0x80>
 8004f4c:	2500      	movs	r5, #0
 8004f4e:	e7ef      	b.n	8004f30 <_reclaim_reent+0x84>
 8004f50:	bd70      	pop	{r4, r5, r6, pc}
 8004f52:	bf00      	nop
 8004f54:	2000005c 	.word	0x2000005c

08004f58 <__libc_init_array>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	2600      	movs	r6, #0
 8004f5c:	4d0c      	ldr	r5, [pc, #48]	; (8004f90 <__libc_init_array+0x38>)
 8004f5e:	4c0d      	ldr	r4, [pc, #52]	; (8004f94 <__libc_init_array+0x3c>)
 8004f60:	1b64      	subs	r4, r4, r5
 8004f62:	10a4      	asrs	r4, r4, #2
 8004f64:	42a6      	cmp	r6, r4
 8004f66:	d109      	bne.n	8004f7c <__libc_init_array+0x24>
 8004f68:	f000 f87e 	bl	8005068 <_init>
 8004f6c:	2600      	movs	r6, #0
 8004f6e:	4d0a      	ldr	r5, [pc, #40]	; (8004f98 <__libc_init_array+0x40>)
 8004f70:	4c0a      	ldr	r4, [pc, #40]	; (8004f9c <__libc_init_array+0x44>)
 8004f72:	1b64      	subs	r4, r4, r5
 8004f74:	10a4      	asrs	r4, r4, #2
 8004f76:	42a6      	cmp	r6, r4
 8004f78:	d105      	bne.n	8004f86 <__libc_init_array+0x2e>
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
 8004f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f80:	4798      	blx	r3
 8004f82:	3601      	adds	r6, #1
 8004f84:	e7ee      	b.n	8004f64 <__libc_init_array+0xc>
 8004f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8a:	4798      	blx	r3
 8004f8c:	3601      	adds	r6, #1
 8004f8e:	e7f2      	b.n	8004f76 <__libc_init_array+0x1e>
 8004f90:	0800512c 	.word	0x0800512c
 8004f94:	0800512c 	.word	0x0800512c
 8004f98:	0800512c 	.word	0x0800512c
 8004f9c:	08005130 	.word	0x08005130

08004fa0 <__retarget_lock_acquire_recursive>:
 8004fa0:	4770      	bx	lr

08004fa2 <__retarget_lock_release_recursive>:
 8004fa2:	4770      	bx	lr

08004fa4 <memcpy>:
 8004fa4:	440a      	add	r2, r1
 8004fa6:	4291      	cmp	r1, r2
 8004fa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fac:	d100      	bne.n	8004fb0 <memcpy+0xc>
 8004fae:	4770      	bx	lr
 8004fb0:	b510      	push	{r4, lr}
 8004fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fb6:	4291      	cmp	r1, r2
 8004fb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fbc:	d1f9      	bne.n	8004fb2 <memcpy+0xe>
 8004fbe:	bd10      	pop	{r4, pc}

08004fc0 <_free_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	d040      	beq.n	800504a <_free_r+0x8a>
 8004fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fcc:	1f0c      	subs	r4, r1, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bfb8      	it	lt
 8004fd2:	18e4      	addlt	r4, r4, r3
 8004fd4:	f000 f83c 	bl	8005050 <__malloc_lock>
 8004fd8:	4a1c      	ldr	r2, [pc, #112]	; (800504c <_free_r+0x8c>)
 8004fda:	6813      	ldr	r3, [r2, #0]
 8004fdc:	b933      	cbnz	r3, 8004fec <_free_r+0x2c>
 8004fde:	6063      	str	r3, [r4, #4]
 8004fe0:	6014      	str	r4, [r2, #0]
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fe8:	f000 b838 	b.w	800505c <__malloc_unlock>
 8004fec:	42a3      	cmp	r3, r4
 8004fee:	d908      	bls.n	8005002 <_free_r+0x42>
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	1821      	adds	r1, r4, r0
 8004ff4:	428b      	cmp	r3, r1
 8004ff6:	bf01      	itttt	eq
 8004ff8:	6819      	ldreq	r1, [r3, #0]
 8004ffa:	685b      	ldreq	r3, [r3, #4]
 8004ffc:	1809      	addeq	r1, r1, r0
 8004ffe:	6021      	streq	r1, [r4, #0]
 8005000:	e7ed      	b.n	8004fde <_free_r+0x1e>
 8005002:	461a      	mov	r2, r3
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	b10b      	cbz	r3, 800500c <_free_r+0x4c>
 8005008:	42a3      	cmp	r3, r4
 800500a:	d9fa      	bls.n	8005002 <_free_r+0x42>
 800500c:	6811      	ldr	r1, [r2, #0]
 800500e:	1850      	adds	r0, r2, r1
 8005010:	42a0      	cmp	r0, r4
 8005012:	d10b      	bne.n	800502c <_free_r+0x6c>
 8005014:	6820      	ldr	r0, [r4, #0]
 8005016:	4401      	add	r1, r0
 8005018:	1850      	adds	r0, r2, r1
 800501a:	4283      	cmp	r3, r0
 800501c:	6011      	str	r1, [r2, #0]
 800501e:	d1e0      	bne.n	8004fe2 <_free_r+0x22>
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	4408      	add	r0, r1
 8005026:	6010      	str	r0, [r2, #0]
 8005028:	6053      	str	r3, [r2, #4]
 800502a:	e7da      	b.n	8004fe2 <_free_r+0x22>
 800502c:	d902      	bls.n	8005034 <_free_r+0x74>
 800502e:	230c      	movs	r3, #12
 8005030:	602b      	str	r3, [r5, #0]
 8005032:	e7d6      	b.n	8004fe2 <_free_r+0x22>
 8005034:	6820      	ldr	r0, [r4, #0]
 8005036:	1821      	adds	r1, r4, r0
 8005038:	428b      	cmp	r3, r1
 800503a:	bf01      	itttt	eq
 800503c:	6819      	ldreq	r1, [r3, #0]
 800503e:	685b      	ldreq	r3, [r3, #4]
 8005040:	1809      	addeq	r1, r1, r0
 8005042:	6021      	streq	r1, [r4, #0]
 8005044:	6063      	str	r3, [r4, #4]
 8005046:	6054      	str	r4, [r2, #4]
 8005048:	e7cb      	b.n	8004fe2 <_free_r+0x22>
 800504a:	bd38      	pop	{r3, r4, r5, pc}
 800504c:	20001c7c 	.word	0x20001c7c

08005050 <__malloc_lock>:
 8005050:	4801      	ldr	r0, [pc, #4]	; (8005058 <__malloc_lock+0x8>)
 8005052:	f7ff bfa5 	b.w	8004fa0 <__retarget_lock_acquire_recursive>
 8005056:	bf00      	nop
 8005058:	20001c78 	.word	0x20001c78

0800505c <__malloc_unlock>:
 800505c:	4801      	ldr	r0, [pc, #4]	; (8005064 <__malloc_unlock+0x8>)
 800505e:	f7ff bfa0 	b.w	8004fa2 <__retarget_lock_release_recursive>
 8005062:	bf00      	nop
 8005064:	20001c78 	.word	0x20001c78

08005068 <_init>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	bf00      	nop
 800506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506e:	bc08      	pop	{r3}
 8005070:	469e      	mov	lr, r3
 8005072:	4770      	bx	lr

08005074 <_fini>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr
