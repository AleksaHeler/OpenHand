
OpenHandFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0ec  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800d1fc  0800d1fc  0001d1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2f0  0800d2f0  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d2f0  0800d2f0  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d2f0  0800d2f0  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2f0  0800d2f0  0001d2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2f4  0800d2f4  0001d2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800d2f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000330c  200001d0  0800d4c8  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034dc  0800d4c8  000234dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY
 13 .debug_info   000242b4  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051bc  00000000  00000000  000444f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001df0  00000000  00000000  000496b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001742  00000000  00000000  0004b4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006558  00000000  00000000  0004cbe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025177  00000000  00000000  0005313a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0e0d  00000000  00000000  000782b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008228  00000000  00000000  001190c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001212e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d1e4 	.word	0x0800d1e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800d1e4 	.word	0x0800d1e4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <main_f_Init_v>:
/**
 *  @todo Description
 *  @note Called once during boot
 */
void main_f_Init_v(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	/* Start all PWM channels */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000930:	2100      	movs	r1, #0
 8000932:	480a      	ldr	r0, [pc, #40]	; (800095c <main_f_Init_v+0x30>)
 8000934:	f004 fcd8 	bl	80052e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000938:	2104      	movs	r1, #4
 800093a:	4808      	ldr	r0, [pc, #32]	; (800095c <main_f_Init_v+0x30>)
 800093c:	f004 fcd4 	bl	80052e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000940:	2108      	movs	r1, #8
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <main_f_Init_v+0x30>)
 8000944:	f004 fcd0 	bl	80052e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000948:	2100      	movs	r1, #0
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <main_f_Init_v+0x34>)
 800094c:	f004 fccc 	bl	80052e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000950:	2108      	movs	r1, #8
 8000952:	4803      	ldr	r0, [pc, #12]	; (8000960 <main_f_Init_v+0x34>)
 8000954:	f004 fcc8 	bl	80052e8 <HAL_TIM_PWM_Start>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200002b4 	.word	0x200002b4
 8000960:	200002fc 	.word	0x200002fc

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000968:	f000 ffa2 	bl	80018b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096c:	f000 f834 	bl	80009d8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000970:	f000 faa6 	bl	8000ec0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000974:	f000 fa86 	bl	8000e84 <MX_DMA_Init>
  MX_I2C1_Init();
 8000978:	f000 f92e 	bl	8000bd8 <MX_I2C1_Init>
  MX_ADC1_Init();
 800097c:	f000 f88a 	bl	8000a94 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000980:	f000 fa56 	bl	8000e30 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000984:	f000 f956 	bl	8000c34 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000988:	f000 f9ee 	bl	8000d68 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  main_f_Init_v();
 800098c:	f7ff ffce 	bl	800092c <main_f_Init_v>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000990:	f009 f9c4 	bl	8009d1c <osKernelInitialize>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of hand_control */
  hand_controlHandle = osThreadNew(hand_control_function, NULL, &hand_control_attributes);
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <main+0x5c>)
 8000996:	2100      	movs	r1, #0
 8000998:	480a      	ldr	r0, [pc, #40]	; (80009c4 <main+0x60>)
 800099a:	f009 fa25 	bl	8009de8 <osThreadNew>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <main+0x64>)
 80009a2:	6013      	str	r3, [r2, #0]

  /* creation of system_health */
  system_healthHandle = osThreadNew(system_health_function, NULL, &system_health_attributes);
 80009a4:	4a09      	ldr	r2, [pc, #36]	; (80009cc <main+0x68>)
 80009a6:	2100      	movs	r1, #0
 80009a8:	4809      	ldr	r0, [pc, #36]	; (80009d0 <main+0x6c>)
 80009aa:	f009 fa1d 	bl	8009de8 <osThreadNew>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <main+0x70>)
 80009b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009b4:	f009 f9e4 	bl	8009d80 <osKernelStart>
 80009b8:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	0800d27c 	.word	0x0800d27c
 80009c4:	08001039 	.word	0x08001039
 80009c8:	2000038c 	.word	0x2000038c
 80009cc:	0800d2a0 	.word	0x0800d2a0
 80009d0:	08001261 	.word	0x08001261
 80009d4:	20000390 	.word	0x20000390

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	; 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e2:	2228      	movs	r2, #40	; 0x28
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f00c fb16 	bl	800d018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000a12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a30:	4618      	mov	r0, r3
 8000a32:	f003 fe67 	bl	8004704 <HAL_RCC_OscConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a3c:	f000 fc32 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	230f      	movs	r3, #15
 8000a42:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a50:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f004 f8d3 	bl	8004c08 <HAL_RCC_ClockConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a68:	f000 fc1c 	bl	80012a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000a6c:	2312      	movs	r3, #18
 8000a6e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a74:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f004 fa83 	bl	8004f88 <HAL_RCCEx_PeriphCLKConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a88:	f000 fc0c 	bl	80012a4 <Error_Handler>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3750      	adds	r7, #80	; 0x50
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aa4:	4b4a      	ldr	r3, [pc, #296]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000aa6:	4a4b      	ldr	r2, [pc, #300]	; (8000bd4 <MX_ADC1_Init+0x140>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000aaa:	4b49      	ldr	r3, [pc, #292]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000aac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ab2:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab8:	4b45      	ldr	r3, [pc, #276]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000abe:	4b44      	ldr	r3, [pc, #272]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000ac0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ac4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac6:	4b42      	ldr	r3, [pc, #264]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000acc:	4b40      	ldr	r3, [pc, #256]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000ace:	2208      	movs	r2, #8
 8000ad0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad2:	483f      	ldr	r0, [pc, #252]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000ad4:	f000 ff1e 	bl	8001914 <HAL_ADC_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000ade:	f000 fbe1 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	4619      	mov	r1, r3
 8000af2:	4837      	ldr	r0, [pc, #220]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000af4:	f001 f8d6 	bl	8001ca4 <HAL_ADC_ConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000afe:	f000 fbd1 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b02:	2302      	movs	r3, #2
 8000b04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4830      	ldr	r0, [pc, #192]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000b10:	f001 f8c8 	bl	8001ca4 <HAL_ADC_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000b1a:	f000 fbc3 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b22:	2303      	movs	r3, #3
 8000b24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4829      	ldr	r0, [pc, #164]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000b2c:	f001 f8ba 	bl	8001ca4 <HAL_ADC_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000b36:	f000 fbb5 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4822      	ldr	r0, [pc, #136]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000b48:	f001 f8ac 	bl	8001ca4 <HAL_ADC_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000b52:	f000 fba7 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b56:	230a      	movs	r3, #10
 8000b58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	481b      	ldr	r0, [pc, #108]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000b64:	f001 f89e 	bl	8001ca4 <HAL_ADC_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b6e:	f000 fb99 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b72:	230b      	movs	r3, #11
 8000b74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b76:	2306      	movs	r3, #6
 8000b78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000b80:	f001 f890 	bl	8001ca4 <HAL_ADC_ConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000b8a:	f000 fb8b 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000b92:	2307      	movs	r3, #7
 8000b94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000b9c:	f001 f882 	bl	8001ca4 <HAL_ADC_ConfigChannel>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000ba6:	f000 fb7d 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000baa:	230d      	movs	r3, #13
 8000bac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000bae:	2308      	movs	r3, #8
 8000bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <MX_ADC1_Init+0x13c>)
 8000bb8:	f001 f874 	bl	8001ca4 <HAL_ADC_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000bc2:	f000 fb6f 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200001ec 	.word	0x200001ec
 8000bd4:	40012400 	.word	0x40012400

08000bd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000bde:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <MX_I2C1_Init+0x54>)
 8000be0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000be4:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <MX_I2C1_Init+0x58>)
 8000be6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000bf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000c16:	f001 fec3 	bl	80029a0 <HAL_I2C_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c20:	f000 fb40 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000260 	.word	0x20000260
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	000186a0 	.word	0x000186a0

08000c34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b092      	sub	sp, #72	; 0x48
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]
 8000c56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2220      	movs	r2, #32
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f00c f9da 	bl	800d018 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c64:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <MX_TIM1_Init+0x12c>)
 8000c66:	4a3f      	ldr	r2, [pc, #252]	; (8000d64 <MX_TIM1_Init+0x130>)
 8000c68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000c6a:	4b3d      	ldr	r3, [pc, #244]	; (8000d60 <MX_TIM1_Init+0x12c>)
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b3b      	ldr	r3, [pc, #236]	; (8000d60 <MX_TIM1_Init+0x12c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000c76:	4b3a      	ldr	r3, [pc, #232]	; (8000d60 <MX_TIM1_Init+0x12c>)
 8000c78:	2263      	movs	r2, #99	; 0x63
 8000c7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b38      	ldr	r3, [pc, #224]	; (8000d60 <MX_TIM1_Init+0x12c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c82:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <MX_TIM1_Init+0x12c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <MX_TIM1_Init+0x12c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c8e:	4834      	ldr	r0, [pc, #208]	; (8000d60 <MX_TIM1_Init+0x12c>)
 8000c90:	f004 fada 	bl	8005248 <HAL_TIM_PWM_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000c9a:	f000 fb03 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ca6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000caa:	4619      	mov	r1, r3
 8000cac:	482c      	ldr	r0, [pc, #176]	; (8000d60 <MX_TIM1_Init+0x12c>)
 8000cae:	f004 ffb9 	bl	8005c24 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000cb8:	f000 faf4 	bl	80012a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cbc:	2360      	movs	r3, #96	; 0x60
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4619      	mov	r1, r3
 8000ce0:	481f      	ldr	r0, [pc, #124]	; (8000d60 <MX_TIM1_Init+0x12c>)
 8000ce2:	f004 fcab 	bl	800563c <HAL_TIM_PWM_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000cec:	f000 fada 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4819      	ldr	r0, [pc, #100]	; (8000d60 <MX_TIM1_Init+0x12c>)
 8000cfa:	f004 fc9f 	bl	800563c <HAL_TIM_PWM_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000d04:	f000 face 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	2208      	movs	r2, #8
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4813      	ldr	r0, [pc, #76]	; (8000d60 <MX_TIM1_Init+0x12c>)
 8000d12:	f004 fc93 	bl	800563c <HAL_TIM_PWM_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000d1c:	f000 fac2 	bl	80012a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <MX_TIM1_Init+0x12c>)
 8000d44:	f004 ffcc 	bl	8005ce0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000d4e:	f000 faa9 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d52:	4803      	ldr	r0, [pc, #12]	; (8000d60 <MX_TIM1_Init+0x12c>)
 8000d54:	f000 fbe8 	bl	8001528 <HAL_TIM_MspPostInit>

}
 8000d58:	bf00      	nop
 8000d5a:	3748      	adds	r7, #72	; 0x48
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200002b4 	.word	0x200002b4
 8000d64:	40012c00 	.word	0x40012c00

08000d68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
 8000d86:	615a      	str	r2, [r3, #20]
 8000d88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d8a:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <MX_TIM3_Init+0xc0>)
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <MX_TIM3_Init+0xc4>)
 8000d8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000d90:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <MX_TIM3_Init+0xc0>)
 8000d92:	220f      	movs	r2, #15
 8000d94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <MX_TIM3_Init+0xc0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <MX_TIM3_Init+0xc0>)
 8000d9e:	2263      	movs	r2, #99	; 0x63
 8000da0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <MX_TIM3_Init+0xc0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <MX_TIM3_Init+0xc0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dae:	481e      	ldr	r0, [pc, #120]	; (8000e28 <MX_TIM3_Init+0xc0>)
 8000db0:	f004 fa4a 	bl	8005248 <HAL_TIM_PWM_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000dba:	f000 fa73 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4816      	ldr	r0, [pc, #88]	; (8000e28 <MX_TIM3_Init+0xc0>)
 8000dce:	f004 ff29 	bl	8005c24 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000dd8:	f000 fa64 	bl	80012a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ddc:	2360      	movs	r3, #96	; 0x60
 8000dde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	4619      	mov	r1, r3
 8000df2:	480d      	ldr	r0, [pc, #52]	; (8000e28 <MX_TIM3_Init+0xc0>)
 8000df4:	f004 fc22 	bl	800563c <HAL_TIM_PWM_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000dfe:	f000 fa51 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2208      	movs	r2, #8
 8000e06:	4619      	mov	r1, r3
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <MX_TIM3_Init+0xc0>)
 8000e0a:	f004 fc17 	bl	800563c <HAL_TIM_PWM_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e14:	f000 fa46 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <MX_TIM3_Init+0xc0>)
 8000e1a:	f000 fb85 	bl	8001528 <HAL_TIM_MspPostInit>

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	; 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200002fc 	.word	0x200002fc
 8000e2c:	40000400 	.word	0x40000400

08000e30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <MX_USART3_UART_Init+0x50>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e68:	f004 ff9d 	bl	8005da6 <HAL_UART_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e72:	f000 fa17 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000344 	.word	0x20000344
 8000e80:	40004800 	.word	0x40004800

08000e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_DMA_Init+0x38>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <MX_DMA_Init+0x38>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_DMA_Init+0x38>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2105      	movs	r1, #5
 8000ea6:	200b      	movs	r0, #11
 8000ea8:	f001 f9ab 	bl	8002202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000eac:	200b      	movs	r0, #11
 8000eae:	f001 f9c4 	bl	800223a <HAL_NVIC_EnableIRQ>

}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	; (800100c <MX_GPIO_Init+0x14c>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a4c      	ldr	r2, [pc, #304]	; (800100c <MX_GPIO_Init+0x14c>)
 8000eda:	f043 0320 	orr.w	r3, r3, #32
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b4a      	ldr	r3, [pc, #296]	; (800100c <MX_GPIO_Init+0x14c>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0320 	and.w	r3, r3, #32
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eec:	4b47      	ldr	r3, [pc, #284]	; (800100c <MX_GPIO_Init+0x14c>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a46      	ldr	r2, [pc, #280]	; (800100c <MX_GPIO_Init+0x14c>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b44      	ldr	r3, [pc, #272]	; (800100c <MX_GPIO_Init+0x14c>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b41      	ldr	r3, [pc, #260]	; (800100c <MX_GPIO_Init+0x14c>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a40      	ldr	r2, [pc, #256]	; (800100c <MX_GPIO_Init+0x14c>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b3e      	ldr	r3, [pc, #248]	; (800100c <MX_GPIO_Init+0x14c>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	4b3b      	ldr	r3, [pc, #236]	; (800100c <MX_GPIO_Init+0x14c>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a3a      	ldr	r2, [pc, #232]	; (800100c <MX_GPIO_Init+0x14c>)
 8000f22:	f043 0308 	orr.w	r3, r3, #8
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b38      	ldr	r3, [pc, #224]	; (800100c <MX_GPIO_Init+0x14c>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HAPTIC_EN_GPIO_Port, HAPTIC_EN_Pin, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	4835      	ldr	r0, [pc, #212]	; (8001010 <MX_GPIO_Init+0x150>)
 8000f3a:	f001 fcff 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_01_EN_GPIO_Port, MOTOR_01_EN_Pin, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2120      	movs	r1, #32
 8000f42:	4834      	ldr	r0, [pc, #208]	; (8001014 <MX_GPIO_Init+0x154>)
 8000f44:	f001 fcfa 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_02_EN_Pin|MOTOR_03_EN_Pin, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f240 4102 	movw	r1, #1026	; 0x402
 8000f4e:	4832      	ldr	r0, [pc, #200]	; (8001018 <MX_GPIO_Init+0x158>)
 8000f50:	f001 fcf4 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HAPTIC_01_DIR_Pin|HAPTIC_02_DIR_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f24a 0160 	movw	r1, #41056	; 0xa060
 8000f5a:	482f      	ldr	r0, [pc, #188]	; (8001018 <MX_GPIO_Init+0x158>)
 8000f5c:	f001 fcee 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_01_DIR_Pin|MOTOR_02_DIR_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000f66:	482b      	ldr	r0, [pc, #172]	; (8001014 <MX_GPIO_Init+0x154>)
 8000f68:	f001 fce8 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_03_DIR_GPIO_Port, MOTOR_03_DIR_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f72:	4827      	ldr	r0, [pc, #156]	; (8001010 <MX_GPIO_Init+0x150>)
 8000f74:	f001 fce2 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HAPTIC_EN_Pin MOTOR_03_DIR_Pin */
  GPIO_InitStruct.Pin = HAPTIC_EN_Pin|MOTOR_03_DIR_Pin;
 8000f78:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4619      	mov	r1, r3
 8000f90:	481f      	ldr	r0, [pc, #124]	; (8001010 <MX_GPIO_Init+0x150>)
 8000f92:	f001 fb4f 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : HAPTIC_FAULT_Pin */
  GPIO_InitStruct.Pin = HAPTIC_FAULT_Pin;
 8000f96:	2310      	movs	r3, #16
 8000f98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HAPTIC_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	481a      	ldr	r0, [pc, #104]	; (8001014 <MX_GPIO_Init+0x154>)
 8000faa:	f001 fb43 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_01_EN_Pin MOTOR_01_DIR_Pin MOTOR_02_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_01_EN_Pin|MOTOR_01_DIR_Pin|MOTOR_02_DIR_Pin;
 8000fae:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4813      	ldr	r0, [pc, #76]	; (8001014 <MX_GPIO_Init+0x154>)
 8000fc8:	f001 fb34 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_01_FAULT_Pin MOTOR_02_FAULT_Pin MOTOR_03_FAULT_Pin BTN_01_Pin */
  GPIO_InitStruct.Pin = MOTOR_01_FAULT_Pin|MOTOR_02_FAULT_Pin|MOTOR_03_FAULT_Pin|BTN_01_Pin;
 8000fcc:	f640 0385 	movw	r3, #2181	; 0x885
 8000fd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <MX_GPIO_Init+0x158>)
 8000fe2:	f001 fb27 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_02_EN_Pin MOTOR_03_EN_Pin HAPTIC_01_DIR_Pin HAPTIC_02_DIR_Pin
                           LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = MOTOR_02_EN_Pin|MOTOR_03_EN_Pin|HAPTIC_01_DIR_Pin|HAPTIC_02_DIR_Pin
 8000fe6:	f24a 4362 	movw	r3, #42082	; 0xa462
 8000fea:	613b      	str	r3, [r7, #16]
                          |LED_01_Pin|LED_02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <MX_GPIO_Init+0x158>)
 8001000:	f001 fb18 	bl	8002634 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	40010800 	.word	0x40010800
 8001014:	40011000 	.word	0x40011000
 8001018:	40010c00 	.word	0x40010c00

0800101c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  adcConversionComplete = 1;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_ADC_ConvCpltCallback+0x18>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	20000794 	.word	0x20000794

08001038 <hand_control_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_hand_control_function */
void hand_control_function(void *argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001040:	f00b fb74 	bl	800c72c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  uint32_t last_10ms = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t my_pot = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  uint32_t my_emg = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  uint32_t emg_max = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  double my_pwm = 0;
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	e9c7 2302 	strd	r2, r3, [r7, #8]
    // batt_f_Handle_v();
    // motor_f_Handle_v();

    /* All of this should be moved to separate drivers... */
    /* Firstly, ignore everything unless 10ms has passed, and it's our time to work */
    if(HAL_GetTick() - last_10ms > (10-1))
 8001064:	f000 fc4c 	bl	8001900 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b09      	cmp	r3, #9
 8001070:	f240 80db 	bls.w	800122a <hand_control_function+0x1f2>
    {
      last_10ms = HAL_GetTick();
 8001074:	f000 fc44 	bl	8001900 <HAL_GetTick>
 8001078:	6278      	str	r0, [r7, #36]	; 0x24
//      HAL_ADC_Start(&hadc2);
//      HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
//      my_pot = HAL_ADC_GetValue(&hadc2);

      // Start reading of all channels
      HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultsDMA, adcChannelCount);
 800107a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800107e:	461a      	mov	r2, r3
 8001080:	496f      	ldr	r1, [pc, #444]	; (8001240 <hand_control_function+0x208>)
 8001082:	4870      	ldr	r0, [pc, #448]	; (8001244 <hand_control_function+0x20c>)
 8001084:	f000 fd1e 	bl	8001ac4 <HAL_ADC_Start_DMA>
      // Wait for that to finish
//      while(adcConversionComplete == 0) {}
//      adcConversionComplete = 0;

      my_pot = adcResultsDMA[0][1];
 8001088:	4b6d      	ldr	r3, [pc, #436]	; (8001240 <hand_control_function+0x208>)
 800108a:	885b      	ldrh	r3, [r3, #2]
 800108c:	b29b      	uxth	r3, r3
 800108e:	61bb      	str	r3, [r7, #24]

      emg_max = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
      for(i = 0; i < 64; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
 8001098:	e015      	b.n	80010c6 <hand_control_function+0x8e>
      {
		  if (adcResultsDMA[i][3] > emg_max)
 800109a:	4a69      	ldr	r2, [pc, #420]	; (8001240 <hand_control_function+0x208>)
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4413      	add	r3, r2
 80010a2:	3306      	adds	r3, #6
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d207      	bcs.n	80010c0 <hand_control_function+0x88>
		  {
			  emg_max = adcResultsDMA[i][3];
 80010b0:	4a63      	ldr	r2, [pc, #396]	; (8001240 <hand_control_function+0x208>)
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	4413      	add	r3, r2
 80010b8:	3306      	adds	r3, #6
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	61fb      	str	r3, [r7, #28]
      for(i = 0; i < 64; i++)
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	3301      	adds	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	2b3f      	cmp	r3, #63	; 0x3f
 80010ca:	d9e6      	bls.n	800109a <hand_control_function+0x62>
		  }
      }
      my_emg = emg_max;
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	617b      	str	r3, [r7, #20]
      // my_emg = adcResultsDMA[3];

      /* Set DIR for all motors to given value (from button) */
      /* And PWM for all motors to given value (from potentiometer) */
      // if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET)
      if (my_emg > 200)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2bc8      	cmp	r3, #200	; 0xc8
 80010d4:	d951      	bls.n	800117a <hand_control_function+0x142>
      {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010dc:	485a      	ldr	r0, [pc, #360]	; (8001248 <hand_control_function+0x210>)
 80010de:	f001 fc2d 	bl	800293c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e8:	4858      	ldr	r0, [pc, #352]	; (800124c <hand_control_function+0x214>)
 80010ea:	f001 fc27 	bl	800293c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f4:	4855      	ldr	r0, [pc, #340]	; (800124c <hand_control_function+0x214>)
 80010f6:	f001 fc21 	bl	800293c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2180      	movs	r1, #128	; 0x80
 80010fe:	4854      	ldr	r0, [pc, #336]	; (8001250 <hand_control_function+0x218>)
 8001100:	f001 fc1c 	bl	800293c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110a:	4851      	ldr	r0, [pc, #324]	; (8001250 <hand_control_function+0x218>)
 800110c:	f001 fc16 	bl	800293c <HAL_GPIO_WritePin>

        my_pwm = (double)my_pot / 40.96;
 8001110:	69b8      	ldr	r0, [r7, #24]
 8001112:	f7ff f95f 	bl	80003d4 <__aeabi_ui2d>
 8001116:	a348      	add	r3, pc, #288	; (adr r3, 8001238 <hand_control_function+0x200>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fafe 	bl	800071c <__aeabi_ddiv>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	e9c7 2302 	strd	r2, r3, [r7, #8]
        TIM1->CCR1 = (uint16_t)my_pwm;
 8001128:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800112c:	f7ff fbde 	bl	80008ec <__aeabi_d2uiz>
 8001130:	4603      	mov	r3, r0
 8001132:	b29a      	uxth	r2, r3
 8001134:	4b47      	ldr	r3, [pc, #284]	; (8001254 <hand_control_function+0x21c>)
 8001136:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR2 = (uint16_t)my_pwm;
 8001138:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800113c:	f7ff fbd6 	bl	80008ec <__aeabi_d2uiz>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b43      	ldr	r3, [pc, #268]	; (8001254 <hand_control_function+0x21c>)
 8001146:	639a      	str	r2, [r3, #56]	; 0x38
        TIM1->CCR3 = (uint16_t)my_pwm;
 8001148:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800114c:	f7ff fbce 	bl	80008ec <__aeabi_d2uiz>
 8001150:	4603      	mov	r3, r0
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <hand_control_function+0x21c>)
 8001156:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM3->CCR1 = (uint16_t)my_pwm;
 8001158:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800115c:	f7ff fbc6 	bl	80008ec <__aeabi_d2uiz>
 8001160:	4603      	mov	r3, r0
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <hand_control_function+0x220>)
 8001166:	635a      	str	r2, [r3, #52]	; 0x34
        TIM3->CCR3 = (uint16_t)my_pwm;
 8001168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800116c:	f7ff fbbe 	bl	80008ec <__aeabi_d2uiz>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b38      	ldr	r3, [pc, #224]	; (8001258 <hand_control_function+0x220>)
 8001176:	63da      	str	r2, [r3, #60]	; 0x3c
 8001178:	e057      	b.n	800122a <hand_control_function+0x1f2>
      }
      else
      {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001180:	4831      	ldr	r0, [pc, #196]	; (8001248 <hand_control_function+0x210>)
 8001182:	f001 fbdb 	bl	800293c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118c:	482f      	ldr	r0, [pc, #188]	; (800124c <hand_control_function+0x214>)
 800118e:	f001 fbd5 	bl	800293c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001198:	482c      	ldr	r0, [pc, #176]	; (800124c <hand_control_function+0x214>)
 800119a:	f001 fbcf 	bl	800293c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	482b      	ldr	r0, [pc, #172]	; (8001250 <hand_control_function+0x218>)
 80011a4:	f001 fbca 	bl	800293c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ae:	4828      	ldr	r0, [pc, #160]	; (8001250 <hand_control_function+0x218>)
 80011b0:	f001 fbc4 	bl	800293c <HAL_GPIO_WritePin>

        my_pwm = 100.0 - (double)my_pot / 40.96;
 80011b4:	69b8      	ldr	r0, [r7, #24]
 80011b6:	f7ff f90d 	bl	80003d4 <__aeabi_ui2d>
 80011ba:	a31f      	add	r3, pc, #124	; (adr r3, 8001238 <hand_control_function+0x200>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff faac 	bl	800071c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	f04f 0000 	mov.w	r0, #0
 80011cc:	4923      	ldr	r1, [pc, #140]	; (800125c <hand_control_function+0x224>)
 80011ce:	f7fe ffc3 	bl	8000158 <__aeabi_dsub>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
        TIM1->CCR1 = (uint16_t)my_pwm;
 80011da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011de:	f7ff fb85 	bl	80008ec <__aeabi_d2uiz>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <hand_control_function+0x21c>)
 80011e8:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR2 = (uint16_t)my_pwm;
 80011ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ee:	f7ff fb7d 	bl	80008ec <__aeabi_d2uiz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <hand_control_function+0x21c>)
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
        TIM1->CCR3 = (uint16_t)my_pwm;
 80011fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011fe:	f7ff fb75 	bl	80008ec <__aeabi_d2uiz>
 8001202:	4603      	mov	r3, r0
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <hand_control_function+0x21c>)
 8001208:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM3->CCR1 = (uint16_t)my_pwm;
 800120a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800120e:	f7ff fb6d 	bl	80008ec <__aeabi_d2uiz>
 8001212:	4603      	mov	r3, r0
 8001214:	b29a      	uxth	r2, r3
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <hand_control_function+0x220>)
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
        TIM3->CCR3 = (uint16_t)my_pwm;
 800121a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800121e:	f7ff fb65 	bl	80008ec <__aeabi_d2uiz>
 8001222:	4603      	mov	r3, r0
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <hand_control_function+0x220>)
 8001228:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Wait 1ms to let other tasks do their thing! */
    osDelay(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f008 fe86 	bl	8009f3c <osDelay>
    if(HAL_GetTick() - last_10ms > (10-1))
 8001230:	e718      	b.n	8001064 <hand_control_function+0x2c>
 8001232:	bf00      	nop
 8001234:	f3af 8000 	nop.w
 8001238:	47ae147b 	.word	0x47ae147b
 800123c:	40447ae1 	.word	0x40447ae1
 8001240:	20000394 	.word	0x20000394
 8001244:	200001ec 	.word	0x200001ec
 8001248:	40010800 	.word	0x40010800
 800124c:	40010c00 	.word	0x40010c00
 8001250:	40011000 	.word	0x40011000
 8001254:	40012c00 	.word	0x40012c00
 8001258:	40000400 	.word	0x40000400
 800125c:	40590000 	.word	0x40590000

08001260 <system_health_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_system_health_function */
void system_health_function(void *argument)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN system_health_function */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001268:	2140      	movs	r1, #64	; 0x40
 800126a:	4804      	ldr	r0, [pc, #16]	; (800127c <system_health_function+0x1c>)
 800126c:	f001 fb7e 	bl	800296c <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001274:	f008 fe62 	bl	8009f3c <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001278:	e7f6      	b.n	8001268 <system_health_function+0x8>
 800127a:	bf00      	nop
 800127c:	40010c00 	.word	0x40010c00

08001280 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001292:	f000 fb23 	bl	80018dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40000800 	.word	0x40000800

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	e7fe      	b.n	80012ac <Error_Handler+0x8>
	...

080012b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_MspInit+0x68>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_MspInit+0x68>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6193      	str	r3, [r2, #24]
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_MspInit+0x68>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_MspInit+0x68>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_MspInit+0x68>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_MspInit+0x68>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	210f      	movs	r1, #15
 80012ea:	f06f 0001 	mvn.w	r0, #1
 80012ee:	f000 ff88 	bl	8002202 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_MspInit+0x6c>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_MspInit+0x6c>)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	40010000 	.word	0x40010000

08001320 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a34      	ldr	r2, [pc, #208]	; (800140c <HAL_ADC_MspInit+0xec>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d160      	bne.n	8001402 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <HAL_ADC_MspInit+0xf0>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a32      	ldr	r2, [pc, #200]	; (8001410 <HAL_ADC_MspInit+0xf0>)
 8001346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_ADC_MspInit+0xf0>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <HAL_ADC_MspInit+0xf0>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a2c      	ldr	r2, [pc, #176]	; (8001410 <HAL_ADC_MspInit+0xf0>)
 800135e:	f043 0310 	orr.w	r3, r3, #16
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <HAL_ADC_MspInit+0xf0>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_ADC_MspInit+0xf0>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4a26      	ldr	r2, [pc, #152]	; (8001410 <HAL_ADC_MspInit+0xf0>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <HAL_ADC_MspInit+0xf0>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATT_SENSE_Pin|HALL_SENSE_01_Pin|HALL_SENSE_02_Pin|HALL_SENSE_03_Pin;
 8001388:	230f      	movs	r3, #15
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138c:	2303      	movs	r3, #3
 800138e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4619      	mov	r1, r3
 8001396:	481f      	ldr	r0, [pc, #124]	; (8001414 <HAL_ADC_MspInit+0xf4>)
 8001398:	f001 f94c 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TRIM_POT_02_Pin|TRIM_POT_01_Pin|EMG_01_Pin|EMG_02_Pin;
 800139c:	231e      	movs	r3, #30
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a0:	2303      	movs	r3, #3
 80013a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0318 	add.w	r3, r7, #24
 80013a8:	4619      	mov	r1, r3
 80013aa:	481b      	ldr	r0, [pc, #108]	; (8001418 <HAL_ADC_MspInit+0xf8>)
 80013ac:	f001 f942 	bl	8002634 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_ADC_MspInit+0xfc>)
 80013b2:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <HAL_ADC_MspInit+0x100>)
 80013b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_ADC_MspInit+0xfc>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_ADC_MspInit+0xfc>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_ADC_MspInit+0xfc>)
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_ADC_MspInit+0xfc>)
 80013ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_ADC_MspInit+0xfc>)
 80013d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_ADC_MspInit+0xfc>)
 80013da:	2220      	movs	r2, #32
 80013dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_ADC_MspInit+0xfc>)
 80013e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013e6:	480d      	ldr	r0, [pc, #52]	; (800141c <HAL_ADC_MspInit+0xfc>)
 80013e8:	f000 ff36 	bl	8002258 <HAL_DMA_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 80013f2:	f7ff ff57 	bl	80012a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_ADC_MspInit+0xfc>)
 80013fa:	621a      	str	r2, [r3, #32]
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_ADC_MspInit+0xfc>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40012400 	.word	0x40012400
 8001410:	40021000 	.word	0x40021000
 8001414:	40011000 	.word	0x40011000
 8001418:	40010800 	.word	0x40010800
 800141c:	2000021c 	.word	0x2000021c
 8001420:	40020008 	.word	0x40020008

08001424 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a1d      	ldr	r2, [pc, #116]	; (80014b4 <HAL_I2C_MspInit+0x90>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d132      	bne.n	80014aa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <HAL_I2C_MspInit+0x94>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <HAL_I2C_MspInit+0x94>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_I2C_MspInit+0x94>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800145c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001462:	2312      	movs	r3, #18
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4812      	ldr	r0, [pc, #72]	; (80014bc <HAL_I2C_MspInit+0x98>)
 8001472:	f001 f8df 	bl	8002634 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_I2C_MspInit+0x9c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	f043 0302 	orr.w	r3, r3, #2
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
 800148c:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <HAL_I2C_MspInit+0x9c>)
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_I2C_MspInit+0x94>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_I2C_MspInit+0x94>)
 8001498:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800149c:	61d3      	str	r3, [r2, #28]
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_I2C_MspInit+0x94>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40005400 	.word	0x40005400
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010c00 	.word	0x40010c00
 80014c0:	40010000 	.word	0x40010000

080014c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a12      	ldr	r2, [pc, #72]	; (800151c <HAL_TIM_PWM_MspInit+0x58>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d10c      	bne.n	80014f0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_TIM_PWM_MspInit+0x5c>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	4a11      	ldr	r2, [pc, #68]	; (8001520 <HAL_TIM_PWM_MspInit+0x5c>)
 80014dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014e0:	6193      	str	r3, [r2, #24]
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_TIM_PWM_MspInit+0x5c>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014ee:	e010      	b.n	8001512 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <HAL_TIM_PWM_MspInit+0x60>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d10b      	bne.n	8001512 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_TIM_PWM_MspInit+0x5c>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_TIM_PWM_MspInit+0x5c>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	61d3      	str	r3, [r2, #28]
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_TIM_PWM_MspInit+0x5c>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	40012c00 	.word	0x40012c00
 8001520:	40021000 	.word	0x40021000
 8001524:	40000400 	.word	0x40000400

08001528 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a35      	ldr	r2, [pc, #212]	; (8001618 <HAL_TIM_MspPostInit+0xf0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d132      	bne.n	80015ae <HAL_TIM_MspPostInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001548:	4b34      	ldr	r3, [pc, #208]	; (800161c <HAL_TIM_MspPostInit+0xf4>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a33      	ldr	r2, [pc, #204]	; (800161c <HAL_TIM_MspPostInit+0xf4>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b31      	ldr	r3, [pc, #196]	; (800161c <HAL_TIM_MspPostInit+0xf4>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b2e      	ldr	r3, [pc, #184]	; (800161c <HAL_TIM_MspPostInit+0xf4>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a2d      	ldr	r2, [pc, #180]	; (800161c <HAL_TIM_MspPostInit+0xf4>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b2b      	ldr	r3, [pc, #172]	; (800161c <HAL_TIM_MspPostInit+0xf4>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HAPTIC_01_PWM_Pin;
 8001578:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2302      	movs	r3, #2
 8001584:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HAPTIC_01_PWM_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4824      	ldr	r0, [pc, #144]	; (8001620 <HAL_TIM_MspPostInit+0xf8>)
 800158e:	f001 f851 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_02_PWM_Pin|MOTOR_03_PWM_Pin;
 8001592:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2302      	movs	r3, #2
 800159e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	481f      	ldr	r0, [pc, #124]	; (8001624 <HAL_TIM_MspPostInit+0xfc>)
 80015a8:	f001 f844 	bl	8002634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015ac:	e02f      	b.n	800160e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_TIM_MspPostInit+0x100>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d12a      	bne.n	800160e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_TIM_MspPostInit+0xf4>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a17      	ldr	r2, [pc, #92]	; (800161c <HAL_TIM_MspPostInit+0xf4>)
 80015be:	f043 0310 	orr.w	r3, r3, #16
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_TIM_MspPostInit+0xf4>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HAPTIC_02_PWM_Pin|MOTOR_01_PWM_Pin;
 80015d0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2302      	movs	r3, #2
 80015dc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4811      	ldr	r0, [pc, #68]	; (800162c <HAL_TIM_MspPostInit+0x104>)
 80015e6:	f001 f825 	bl	8002634 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_TIM_MspPostInit+0x108>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
 8001608:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_TIM_MspPostInit+0x108>)
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	6053      	str	r3, [r2, #4]
}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40012c00 	.word	0x40012c00
 800161c:	40021000 	.word	0x40021000
 8001620:	40010c00 	.word	0x40010c00
 8001624:	40010800 	.word	0x40010800
 8001628:	40000400 	.word	0x40000400
 800162c:	40011000 	.word	0x40011000
 8001630:	40010000 	.word	0x40010000

08001634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <HAL_UART_MspInit+0xb0>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d143      	bne.n	80016dc <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_UART_MspInit+0xb4>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <HAL_UART_MspInit+0xb4>)
 800165a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165e:	61d3      	str	r3, [r2, #28]
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_UART_MspInit+0xb4>)
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <HAL_UART_MspInit+0xb4>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <HAL_UART_MspInit+0xb4>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_UART_MspInit+0xb4>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4814      	ldr	r0, [pc, #80]	; (80016ec <HAL_UART_MspInit+0xb8>)
 800169a:	f000 ffcb 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800169e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	480e      	ldr	r0, [pc, #56]	; (80016ec <HAL_UART_MspInit+0xb8>)
 80016b4:	f000 ffbe 	bl	8002634 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_UART_MspInit+0xbc>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	f043 0310 	orr.w	r3, r3, #16
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
 80016d6:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <HAL_UART_MspInit+0xbc>)
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40004800 	.word	0x40004800
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40011000 	.word	0x40011000
 80016f0:	40010000 	.word	0x40010000

080016f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08e      	sub	sp, #56	; 0x38
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800170a:	4b34      	ldr	r3, [pc, #208]	; (80017dc <HAL_InitTick+0xe8>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a33      	ldr	r2, [pc, #204]	; (80017dc <HAL_InitTick+0xe8>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	61d3      	str	r3, [r2, #28]
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <HAL_InitTick+0xe8>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001722:	f107 0210 	add.w	r2, r7, #16
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f003 fbdd 	bl	8004eec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001738:	2b00      	cmp	r3, #0
 800173a:	d103      	bne.n	8001744 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800173c:	f003 fbae 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 8001740:	6378      	str	r0, [r7, #52]	; 0x34
 8001742:	e004      	b.n	800174e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001744:	f003 fbaa 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 8001748:	4603      	mov	r3, r0
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800174e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001750:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <HAL_InitTick+0xec>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0c9b      	lsrs	r3, r3, #18
 8001758:	3b01      	subs	r3, #1
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800175c:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <HAL_InitTick+0xf0>)
 800175e:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <HAL_InitTick+0xf4>)
 8001760:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_InitTick+0xf0>)
 8001764:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001768:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800176a:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <HAL_InitTick+0xf0>)
 800176c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <HAL_InitTick+0xf0>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_InitTick+0xf0>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_InitTick+0xf0>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001782:	4818      	ldr	r0, [pc, #96]	; (80017e4 <HAL_InitTick+0xf0>)
 8001784:	f003 fcb6 	bl	80050f4 <HAL_TIM_Base_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800178e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001792:	2b00      	cmp	r3, #0
 8001794:	d11b      	bne.n	80017ce <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001796:	4813      	ldr	r0, [pc, #76]	; (80017e4 <HAL_InitTick+0xf0>)
 8001798:	f003 fd04 	bl	80051a4 <HAL_TIM_Base_Start_IT>
 800179c:	4603      	mov	r3, r0
 800179e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80017a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d111      	bne.n	80017ce <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017aa:	201e      	movs	r0, #30
 80017ac:	f000 fd45 	bl	800223a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	d808      	bhi.n	80017c8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80017b6:	2200      	movs	r2, #0
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	201e      	movs	r0, #30
 80017bc:	f000 fd21 	bl	8002202 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c0:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <HAL_InitTick+0xf8>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e002      	b.n	80017ce <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3738      	adds	r7, #56	; 0x38
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	20000798 	.word	0x20000798
 80017e8:	40000800 	.word	0x40000800
 80017ec:	20000004 	.word	0x20000004

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
	...

0800181c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <DMA1_Channel1_IRQHandler+0x10>)
 8001822:	f000 fdd3 	bl	80023cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000021c 	.word	0x2000021c

08001830 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001836:	f001 fb1c 	bl	8002e72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20002e8c 	.word	0x20002e8c

08001844 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <TIM4_IRQHandler+0x10>)
 800184a:	f003 fdef 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000798 	.word	0x20000798

08001858 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001864:	f7ff fff8 	bl	8001858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001868:	480b      	ldr	r0, [pc, #44]	; (8001898 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800186a:	490c      	ldr	r1, [pc, #48]	; (800189c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800186c:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001880:	4c09      	ldr	r4, [pc, #36]	; (80018a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188e:	f00b fc21 	bl	800d0d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001892:	f7ff f867 	bl	8000964 <main>
  bx lr
 8001896:	4770      	bx	lr
  ldr r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800189c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80018a0:	0800d2f8 	.word	0x0800d2f8
  ldr r2, =_sbss
 80018a4:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80018a8:	200034dc 	.word	0x200034dc

080018ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC1_2_IRQHandler>
	...

080018b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_Init+0x28>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_Init+0x28>)
 80018ba:	f043 0310 	orr.w	r3, r3, #16
 80018be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 fc93 	bl	80021ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	200f      	movs	r0, #15
 80018c8:	f7ff ff14 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018cc:	f7ff fcf0 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40022000 	.word	0x40022000

080018dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_IncTick+0x1c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_IncTick+0x20>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a03      	ldr	r2, [pc, #12]	; (80018fc <HAL_IncTick+0x20>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	20000008 	.word	0x20000008
 80018fc:	200007e0 	.word	0x200007e0

08001900 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b02      	ldr	r3, [pc, #8]	; (8001910 <HAL_GetTick+0x10>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	200007e0 	.word	0x200007e0

08001914 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0be      	b.n	8001ab4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fce4 	bl	8001320 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 faf5 	bl	8001f48 <ADC_ConversionStop_Disable>
 800195e:	4603      	mov	r3, r0
 8001960:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 8099 	bne.w	8001aa2 <HAL_ADC_Init+0x18e>
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 8095 	bne.w	8001aa2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001980:	f023 0302 	bic.w	r3, r3, #2
 8001984:	f043 0202 	orr.w	r2, r3, #2
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001994:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7b1b      	ldrb	r3, [r3, #12]
 800199a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800199c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019ac:	d003      	beq.n	80019b6 <HAL_ADC_Init+0xa2>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d102      	bne.n	80019bc <HAL_ADC_Init+0xa8>
 80019b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ba:	e000      	b.n	80019be <HAL_ADC_Init+0xaa>
 80019bc:	2300      	movs	r3, #0
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7d1b      	ldrb	r3, [r3, #20]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d119      	bne.n	8001a00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7b1b      	ldrb	r3, [r3, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d109      	bne.n	80019e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	3b01      	subs	r3, #1
 80019da:	035a      	lsls	r2, r3, #13
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	e00b      	b.n	8001a00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ec:	f043 0220 	orr.w	r2, r3, #32
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	f043 0201 	orr.w	r2, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	4b28      	ldr	r3, [pc, #160]	; (8001abc <HAL_ADC_Init+0x1a8>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	68b9      	ldr	r1, [r7, #8]
 8001a24:	430b      	orrs	r3, r1
 8001a26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a30:	d003      	beq.n	8001a3a <HAL_ADC_Init+0x126>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d104      	bne.n	8001a44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	051b      	lsls	r3, r3, #20
 8001a42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_ADC_Init+0x1ac>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d10b      	bne.n	8001a80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	f023 0303 	bic.w	r3, r3, #3
 8001a76:	f043 0201 	orr.w	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a7e:	e018      	b.n	8001ab2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	f023 0312 	bic.w	r3, r3, #18
 8001a88:	f043 0210 	orr.w	r2, r3, #16
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	f043 0201 	orr.w	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001aa0:	e007      	b.n	8001ab2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	f043 0210 	orr.w	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	ffe1f7fd 	.word	0xffe1f7fd
 8001ac0:	ff1f0efe 	.word	0xff1f0efe

08001ac4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a64      	ldr	r2, [pc, #400]	; (8001c6c <HAL_ADC_Start_DMA+0x1a8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d004      	beq.n	8001ae8 <HAL_ADC_Start_DMA+0x24>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a63      	ldr	r2, [pc, #396]	; (8001c70 <HAL_ADC_Start_DMA+0x1ac>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d106      	bne.n	8001af6 <HAL_ADC_Start_DMA+0x32>
 8001ae8:	4b60      	ldr	r3, [pc, #384]	; (8001c6c <HAL_ADC_Start_DMA+0x1a8>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f040 80b3 	bne.w	8001c5c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_ADC_Start_DMA+0x40>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e0ae      	b.n	8001c62 <HAL_ADC_Start_DMA+0x19e>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f9c1 	bl	8001e94 <ADC_Enable>
 8001b12:	4603      	mov	r3, r0
 8001b14:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f040 809a 	bne.w	8001c52 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a4e      	ldr	r2, [pc, #312]	; (8001c70 <HAL_ADC_Start_DMA+0x1ac>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d105      	bne.n	8001b48 <HAL_ADC_Start_DMA+0x84>
 8001b3c:	4b4b      	ldr	r3, [pc, #300]	; (8001c6c <HAL_ADC_Start_DMA+0x1a8>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d115      	bne.n	8001b74 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d026      	beq.n	8001bb0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b72:	e01d      	b.n	8001bb0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a39      	ldr	r2, [pc, #228]	; (8001c6c <HAL_ADC_Start_DMA+0x1a8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d004      	beq.n	8001b94 <HAL_ADC_Start_DMA+0xd0>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a38      	ldr	r2, [pc, #224]	; (8001c70 <HAL_ADC_Start_DMA+0x1ac>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d10d      	bne.n	8001bb0 <HAL_ADC_Start_DMA+0xec>
 8001b94:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <HAL_ADC_Start_DMA+0x1a8>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ba8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d006      	beq.n	8001bca <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	f023 0206 	bic.w	r2, r3, #6
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bc8:	e002      	b.n	8001bd0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <HAL_ADC_Start_DMA+0x1b0>)
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4a24      	ldr	r2, [pc, #144]	; (8001c78 <HAL_ADC_Start_DMA+0x1b4>)
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4a23      	ldr	r2, [pc, #140]	; (8001c7c <HAL_ADC_Start_DMA+0x1b8>)
 8001bee:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0202 	mvn.w	r2, #2
 8001bf8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c08:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a18      	ldr	r0, [r3, #32]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	334c      	adds	r3, #76	; 0x4c
 8001c14:	4619      	mov	r1, r3
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f000 fb77 	bl	800230c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c28:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c2c:	d108      	bne.n	8001c40 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001c3c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001c3e:	e00f      	b.n	8001c60 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c4e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001c50:	e006      	b.n	8001c60 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001c5a:	e001      	b.n	8001c60 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40012400 	.word	0x40012400
 8001c70:	40012800 	.word	0x40012800
 8001c74:	08001fcb 	.word	0x08001fcb
 8001c78:	08002047 	.word	0x08002047
 8001c7c:	08002063 	.word	0x08002063

08001c80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x20>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e0dc      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1da>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b06      	cmp	r3, #6
 8001cd2:	d81c      	bhi.n	8001d0e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3b05      	subs	r3, #5
 8001ce6:	221f      	movs	r2, #31
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	4019      	ands	r1, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3b05      	subs	r3, #5
 8001d00:	fa00 f203 	lsl.w	r2, r0, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d0c:	e03c      	b.n	8001d88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d81c      	bhi.n	8001d50 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	3b23      	subs	r3, #35	; 0x23
 8001d28:	221f      	movs	r2, #31
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	4019      	ands	r1, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b23      	subs	r3, #35	; 0x23
 8001d42:	fa00 f203 	lsl.w	r2, r0, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d4e:	e01b      	b.n	8001d88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b41      	subs	r3, #65	; 0x41
 8001d62:	221f      	movs	r2, #31
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4019      	ands	r1, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	3b41      	subs	r3, #65	; 0x41
 8001d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b09      	cmp	r3, #9
 8001d8e:	d91c      	bls.n	8001dca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68d9      	ldr	r1, [r3, #12]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	3b1e      	subs	r3, #30
 8001da2:	2207      	movs	r2, #7
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	4019      	ands	r1, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6898      	ldr	r0, [r3, #8]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	3b1e      	subs	r3, #30
 8001dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	e019      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6919      	ldr	r1, [r3, #16]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	2207      	movs	r2, #7
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	4019      	ands	r1, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6898      	ldr	r0, [r3, #8]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	fa00 f203 	lsl.w	r2, r0, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d003      	beq.n	8001e0e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e0a:	2b11      	cmp	r3, #17
 8001e0c:	d132      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a1d      	ldr	r2, [pc, #116]	; (8001e88 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d125      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d126      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e34:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d11a      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_ADC_ConfigChannel+0x1e8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	0c9a      	lsrs	r2, r3, #18
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e54:	e002      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f9      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x1b2>
 8001e62:	e007      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	f043 0220 	orr.w	r2, r3, #32
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	40012400 	.word	0x40012400
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	431bde83 	.word	0x431bde83

08001e94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d040      	beq.n	8001f34 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0201 	orr.w	r2, r2, #1
 8001ec0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ec2:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <ADC_Enable+0xac>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <ADC_Enable+0xb0>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	0c9b      	lsrs	r3, r3, #18
 8001ece:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ed0:	e002      	b.n	8001ed8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f9      	bne.n	8001ed2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ede:	f7ff fd0f 	bl	8001900 <HAL_GetTick>
 8001ee2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ee4:	e01f      	b.n	8001f26 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ee6:	f7ff fd0b 	bl	8001900 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d918      	bls.n	8001f26 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d011      	beq.n	8001f26 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	f043 0210 	orr.w	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e007      	b.n	8001f36 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d1d8      	bne.n	8001ee6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000000 	.word	0x20000000
 8001f44:	431bde83 	.word	0x431bde83

08001f48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d12e      	bne.n	8001fc0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f72:	f7ff fcc5 	bl	8001900 <HAL_GetTick>
 8001f76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f78:	e01b      	b.n	8001fb2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f7a:	f7ff fcc1 	bl	8001900 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d914      	bls.n	8001fb2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d10d      	bne.n	8001fb2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	f043 0210 	orr.w	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	f043 0201 	orr.w	r2, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e007      	b.n	8001fc2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d0dc      	beq.n	8001f7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d127      	bne.n	8002034 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ffa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ffe:	d115      	bne.n	800202c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002004:	2b00      	cmp	r3, #0
 8002006:	d111      	bne.n	800202c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f7fe fff5 	bl	800101c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002032:	e004      	b.n	800203e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	4798      	blx	r3
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f7ff fe13 	bl	8001c80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	f043 0204 	orr.w	r2, r3, #4
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f7ff fe02 	bl	8001c92 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ca:	4a04      	ldr	r2, [pc, #16]	; (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	60d3      	str	r3, [r2, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <__NVIC_GetPriorityGrouping+0x18>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	f003 0307 	and.w	r3, r3, #7
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0b      	blt.n	8002126 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4906      	ldr	r1, [pc, #24]	; (8002130 <__NVIC_EnableIRQ+0x34>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	e000e100 	.word	0xe000e100

08002134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db0a      	blt.n	800215e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	490c      	ldr	r1, [pc, #48]	; (8002180 <__NVIC_SetPriority+0x4c>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	440b      	add	r3, r1
 8002158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800215c:	e00a      	b.n	8002174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4908      	ldr	r1, [pc, #32]	; (8002184 <__NVIC_SetPriority+0x50>)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3b04      	subs	r3, #4
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	440b      	add	r3, r1
 8002172:	761a      	strb	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000e100 	.word	0xe000e100
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f1c3 0307 	rsb	r3, r3, #7
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	bf28      	it	cs
 80021a6:	2304      	movcs	r3, #4
 80021a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d902      	bls.n	80021b8 <NVIC_EncodePriority+0x30>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3b03      	subs	r3, #3
 80021b6:	e000      	b.n	80021ba <NVIC_EncodePriority+0x32>
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	401a      	ands	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43d9      	mvns	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	4313      	orrs	r3, r2
         );
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ff4f 	bl	8002098 <__NVIC_SetPriorityGrouping>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002214:	f7ff ff64 	bl	80020e0 <__NVIC_GetPriorityGrouping>
 8002218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	6978      	ldr	r0, [r7, #20]
 8002220:	f7ff ffb2 	bl	8002188 <NVIC_EncodePriority>
 8002224:	4602      	mov	r2, r0
 8002226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff81 	bl	8002134 <__NVIC_SetPriority>
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff57 	bl	80020fc <__NVIC_EnableIRQ>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e043      	b.n	80022f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_DMA_Init+0xa8>)
 8002276:	4413      	add	r3, r2
 8002278:	4a22      	ldr	r2, [pc, #136]	; (8002304 <HAL_DMA_Init+0xac>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	009a      	lsls	r2, r3, #2
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <HAL_DMA_Init+0xb0>)
 800228a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	bffdfff8 	.word	0xbffdfff8
 8002304:	cccccccd 	.word	0xcccccccd
 8002308:	40020000 	.word	0x40020000

0800230c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_DMA_Start_IT+0x20>
 8002328:	2302      	movs	r3, #2
 800232a:	e04b      	b.n	80023c4 <HAL_DMA_Start_IT+0xb8>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d13a      	bne.n	80023b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0201 	bic.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f937 	bl	80025d8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 020e 	orr.w	r2, r2, #14
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e00f      	b.n	80023a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0204 	bic.w	r2, r2, #4
 8002392:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 020a 	orr.w	r2, r2, #10
 80023a2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	e005      	b.n	80023c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80023be:	2302      	movs	r3, #2
 80023c0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	2204      	movs	r2, #4
 80023ea:	409a      	lsls	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d04f      	beq.n	8002494 <HAL_DMA_IRQHandler+0xc8>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d04a      	beq.n	8002494 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b00      	cmp	r3, #0
 800240a:	d107      	bne.n	800241c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0204 	bic.w	r2, r2, #4
 800241a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a66      	ldr	r2, [pc, #408]	; (80025bc <HAL_DMA_IRQHandler+0x1f0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d029      	beq.n	800247a <HAL_DMA_IRQHandler+0xae>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a65      	ldr	r2, [pc, #404]	; (80025c0 <HAL_DMA_IRQHandler+0x1f4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d022      	beq.n	8002476 <HAL_DMA_IRQHandler+0xaa>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a63      	ldr	r2, [pc, #396]	; (80025c4 <HAL_DMA_IRQHandler+0x1f8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01a      	beq.n	8002470 <HAL_DMA_IRQHandler+0xa4>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a62      	ldr	r2, [pc, #392]	; (80025c8 <HAL_DMA_IRQHandler+0x1fc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d012      	beq.n	800246a <HAL_DMA_IRQHandler+0x9e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a60      	ldr	r2, [pc, #384]	; (80025cc <HAL_DMA_IRQHandler+0x200>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00a      	beq.n	8002464 <HAL_DMA_IRQHandler+0x98>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a5f      	ldr	r2, [pc, #380]	; (80025d0 <HAL_DMA_IRQHandler+0x204>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d102      	bne.n	800245e <HAL_DMA_IRQHandler+0x92>
 8002458:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800245c:	e00e      	b.n	800247c <HAL_DMA_IRQHandler+0xb0>
 800245e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002462:	e00b      	b.n	800247c <HAL_DMA_IRQHandler+0xb0>
 8002464:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002468:	e008      	b.n	800247c <HAL_DMA_IRQHandler+0xb0>
 800246a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800246e:	e005      	b.n	800247c <HAL_DMA_IRQHandler+0xb0>
 8002470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002474:	e002      	b.n	800247c <HAL_DMA_IRQHandler+0xb0>
 8002476:	2340      	movs	r3, #64	; 0x40
 8002478:	e000      	b.n	800247c <HAL_DMA_IRQHandler+0xb0>
 800247a:	2304      	movs	r3, #4
 800247c:	4a55      	ldr	r2, [pc, #340]	; (80025d4 <HAL_DMA_IRQHandler+0x208>)
 800247e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8094 	beq.w	80025b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002492:	e08e      	b.n	80025b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2202      	movs	r2, #2
 800249a:	409a      	lsls	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d056      	beq.n	8002552 <HAL_DMA_IRQHandler+0x186>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d051      	beq.n	8002552 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10b      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 020a 	bic.w	r2, r2, #10
 80024ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a38      	ldr	r2, [pc, #224]	; (80025bc <HAL_DMA_IRQHandler+0x1f0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d029      	beq.n	8002532 <HAL_DMA_IRQHandler+0x166>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a37      	ldr	r2, [pc, #220]	; (80025c0 <HAL_DMA_IRQHandler+0x1f4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d022      	beq.n	800252e <HAL_DMA_IRQHandler+0x162>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a35      	ldr	r2, [pc, #212]	; (80025c4 <HAL_DMA_IRQHandler+0x1f8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d01a      	beq.n	8002528 <HAL_DMA_IRQHandler+0x15c>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a34      	ldr	r2, [pc, #208]	; (80025c8 <HAL_DMA_IRQHandler+0x1fc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d012      	beq.n	8002522 <HAL_DMA_IRQHandler+0x156>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a32      	ldr	r2, [pc, #200]	; (80025cc <HAL_DMA_IRQHandler+0x200>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00a      	beq.n	800251c <HAL_DMA_IRQHandler+0x150>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a31      	ldr	r2, [pc, #196]	; (80025d0 <HAL_DMA_IRQHandler+0x204>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d102      	bne.n	8002516 <HAL_DMA_IRQHandler+0x14a>
 8002510:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002514:	e00e      	b.n	8002534 <HAL_DMA_IRQHandler+0x168>
 8002516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800251a:	e00b      	b.n	8002534 <HAL_DMA_IRQHandler+0x168>
 800251c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002520:	e008      	b.n	8002534 <HAL_DMA_IRQHandler+0x168>
 8002522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002526:	e005      	b.n	8002534 <HAL_DMA_IRQHandler+0x168>
 8002528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800252c:	e002      	b.n	8002534 <HAL_DMA_IRQHandler+0x168>
 800252e:	2320      	movs	r3, #32
 8002530:	e000      	b.n	8002534 <HAL_DMA_IRQHandler+0x168>
 8002532:	2302      	movs	r3, #2
 8002534:	4a27      	ldr	r2, [pc, #156]	; (80025d4 <HAL_DMA_IRQHandler+0x208>)
 8002536:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	d034      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002550:	e02f      	b.n	80025b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	2208      	movs	r2, #8
 8002558:	409a      	lsls	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d028      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x1e8>
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d023      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 020e 	bic.w	r2, r2, #14
 800257a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002584:	2101      	movs	r1, #1
 8002586:	fa01 f202 	lsl.w	r2, r1, r2
 800258a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4798      	blx	r3
    }
  }
  return;
 80025b2:	bf00      	nop
 80025b4:	bf00      	nop
}
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40020008 	.word	0x40020008
 80025c0:	4002001c 	.word	0x4002001c
 80025c4:	40020030 	.word	0x40020030
 80025c8:	40020044 	.word	0x40020044
 80025cc:	40020058 	.word	0x40020058
 80025d0:	4002006c 	.word	0x4002006c
 80025d4:	40020000 	.word	0x40020000

080025d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f202 	lsl.w	r2, r1, r2
 80025f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b10      	cmp	r3, #16
 8002604:	d108      	bne.n	8002618 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002616:	e007      	b.n	8002628 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	60da      	str	r2, [r3, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
	...

08002634 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002634:	b480      	push	{r7}
 8002636:	b08b      	sub	sp, #44	; 0x2c
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002646:	e169      	b.n	800291c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002648:	2201      	movs	r2, #1
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	429a      	cmp	r2, r3
 8002662:	f040 8158 	bne.w	8002916 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a9a      	ldr	r2, [pc, #616]	; (80028d4 <HAL_GPIO_Init+0x2a0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d05e      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 8002670:	4a98      	ldr	r2, [pc, #608]	; (80028d4 <HAL_GPIO_Init+0x2a0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d875      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 8002676:	4a98      	ldr	r2, [pc, #608]	; (80028d8 <HAL_GPIO_Init+0x2a4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d058      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 800267c:	4a96      	ldr	r2, [pc, #600]	; (80028d8 <HAL_GPIO_Init+0x2a4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d86f      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 8002682:	4a96      	ldr	r2, [pc, #600]	; (80028dc <HAL_GPIO_Init+0x2a8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d052      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 8002688:	4a94      	ldr	r2, [pc, #592]	; (80028dc <HAL_GPIO_Init+0x2a8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d869      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 800268e:	4a94      	ldr	r2, [pc, #592]	; (80028e0 <HAL_GPIO_Init+0x2ac>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d04c      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 8002694:	4a92      	ldr	r2, [pc, #584]	; (80028e0 <HAL_GPIO_Init+0x2ac>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d863      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 800269a:	4a92      	ldr	r2, [pc, #584]	; (80028e4 <HAL_GPIO_Init+0x2b0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d046      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 80026a0:	4a90      	ldr	r2, [pc, #576]	; (80028e4 <HAL_GPIO_Init+0x2b0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d85d      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 80026a6:	2b12      	cmp	r3, #18
 80026a8:	d82a      	bhi.n	8002700 <HAL_GPIO_Init+0xcc>
 80026aa:	2b12      	cmp	r3, #18
 80026ac:	d859      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 80026ae:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <HAL_GPIO_Init+0x80>)
 80026b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b4:	0800272f 	.word	0x0800272f
 80026b8:	08002709 	.word	0x08002709
 80026bc:	0800271b 	.word	0x0800271b
 80026c0:	0800275d 	.word	0x0800275d
 80026c4:	08002763 	.word	0x08002763
 80026c8:	08002763 	.word	0x08002763
 80026cc:	08002763 	.word	0x08002763
 80026d0:	08002763 	.word	0x08002763
 80026d4:	08002763 	.word	0x08002763
 80026d8:	08002763 	.word	0x08002763
 80026dc:	08002763 	.word	0x08002763
 80026e0:	08002763 	.word	0x08002763
 80026e4:	08002763 	.word	0x08002763
 80026e8:	08002763 	.word	0x08002763
 80026ec:	08002763 	.word	0x08002763
 80026f0:	08002763 	.word	0x08002763
 80026f4:	08002763 	.word	0x08002763
 80026f8:	08002711 	.word	0x08002711
 80026fc:	08002725 	.word	0x08002725
 8002700:	4a79      	ldr	r2, [pc, #484]	; (80028e8 <HAL_GPIO_Init+0x2b4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002706:	e02c      	b.n	8002762 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	623b      	str	r3, [r7, #32]
          break;
 800270e:	e029      	b.n	8002764 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	3304      	adds	r3, #4
 8002716:	623b      	str	r3, [r7, #32]
          break;
 8002718:	e024      	b.n	8002764 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	3308      	adds	r3, #8
 8002720:	623b      	str	r3, [r7, #32]
          break;
 8002722:	e01f      	b.n	8002764 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	330c      	adds	r3, #12
 800272a:	623b      	str	r3, [r7, #32]
          break;
 800272c:	e01a      	b.n	8002764 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002736:	2304      	movs	r3, #4
 8002738:	623b      	str	r3, [r7, #32]
          break;
 800273a:	e013      	b.n	8002764 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002744:	2308      	movs	r3, #8
 8002746:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	611a      	str	r2, [r3, #16]
          break;
 800274e:	e009      	b.n	8002764 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002750:	2308      	movs	r3, #8
 8002752:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	615a      	str	r2, [r3, #20]
          break;
 800275a:	e003      	b.n	8002764 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800275c:	2300      	movs	r3, #0
 800275e:	623b      	str	r3, [r7, #32]
          break;
 8002760:	e000      	b.n	8002764 <HAL_GPIO_Init+0x130>
          break;
 8002762:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2bff      	cmp	r3, #255	; 0xff
 8002768:	d801      	bhi.n	800276e <HAL_GPIO_Init+0x13a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	e001      	b.n	8002772 <HAL_GPIO_Init+0x13e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3304      	adds	r3, #4
 8002772:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2bff      	cmp	r3, #255	; 0xff
 8002778:	d802      	bhi.n	8002780 <HAL_GPIO_Init+0x14c>
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	e002      	b.n	8002786 <HAL_GPIO_Init+0x152>
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	3b08      	subs	r3, #8
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	210f      	movs	r1, #15
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	401a      	ands	r2, r3
 8002798:	6a39      	ldr	r1, [r7, #32]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	431a      	orrs	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80b1 	beq.w	8002916 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027b4:	4b4d      	ldr	r3, [pc, #308]	; (80028ec <HAL_GPIO_Init+0x2b8>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	4a4c      	ldr	r2, [pc, #304]	; (80028ec <HAL_GPIO_Init+0x2b8>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6193      	str	r3, [r2, #24]
 80027c0:	4b4a      	ldr	r3, [pc, #296]	; (80028ec <HAL_GPIO_Init+0x2b8>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027cc:	4a48      	ldr	r2, [pc, #288]	; (80028f0 <HAL_GPIO_Init+0x2bc>)
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	3302      	adds	r3, #2
 80027d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	220f      	movs	r2, #15
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4013      	ands	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a40      	ldr	r2, [pc, #256]	; (80028f4 <HAL_GPIO_Init+0x2c0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d013      	beq.n	8002820 <HAL_GPIO_Init+0x1ec>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a3f      	ldr	r2, [pc, #252]	; (80028f8 <HAL_GPIO_Init+0x2c4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00d      	beq.n	800281c <HAL_GPIO_Init+0x1e8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a3e      	ldr	r2, [pc, #248]	; (80028fc <HAL_GPIO_Init+0x2c8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d007      	beq.n	8002818 <HAL_GPIO_Init+0x1e4>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a3d      	ldr	r2, [pc, #244]	; (8002900 <HAL_GPIO_Init+0x2cc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d101      	bne.n	8002814 <HAL_GPIO_Init+0x1e0>
 8002810:	2303      	movs	r3, #3
 8002812:	e006      	b.n	8002822 <HAL_GPIO_Init+0x1ee>
 8002814:	2304      	movs	r3, #4
 8002816:	e004      	b.n	8002822 <HAL_GPIO_Init+0x1ee>
 8002818:	2302      	movs	r3, #2
 800281a:	e002      	b.n	8002822 <HAL_GPIO_Init+0x1ee>
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <HAL_GPIO_Init+0x1ee>
 8002820:	2300      	movs	r3, #0
 8002822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002824:	f002 0203 	and.w	r2, r2, #3
 8002828:	0092      	lsls	r2, r2, #2
 800282a:	4093      	lsls	r3, r2
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002832:	492f      	ldr	r1, [pc, #188]	; (80028f0 <HAL_GPIO_Init+0x2bc>)
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d006      	beq.n	800285a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800284c:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	492c      	ldr	r1, [pc, #176]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]
 8002858:	e006      	b.n	8002868 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800285a:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	43db      	mvns	r3, r3
 8002862:	4928      	ldr	r1, [pc, #160]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 8002864:	4013      	ands	r3, r2
 8002866:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002874:	4b23      	ldr	r3, [pc, #140]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	4922      	ldr	r1, [pc, #136]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	60cb      	str	r3, [r1, #12]
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	43db      	mvns	r3, r3
 800288a:	491e      	ldr	r1, [pc, #120]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 800288c:	4013      	ands	r3, r2
 800288e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d006      	beq.n	80028aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4918      	ldr	r1, [pc, #96]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028aa:	4b16      	ldr	r3, [pc, #88]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	4914      	ldr	r1, [pc, #80]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d021      	beq.n	8002908 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	490e      	ldr	r1, [pc, #56]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
 80028d0:	e021      	b.n	8002916 <HAL_GPIO_Init+0x2e2>
 80028d2:	bf00      	nop
 80028d4:	10320000 	.word	0x10320000
 80028d8:	10310000 	.word	0x10310000
 80028dc:	10220000 	.word	0x10220000
 80028e0:	10210000 	.word	0x10210000
 80028e4:	10120000 	.word	0x10120000
 80028e8:	10110000 	.word	0x10110000
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40010800 	.word	0x40010800
 80028f8:	40010c00 	.word	0x40010c00
 80028fc:	40011000 	.word	0x40011000
 8002900:	40011400 	.word	0x40011400
 8002904:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_GPIO_Init+0x304>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	43db      	mvns	r3, r3
 8002910:	4909      	ldr	r1, [pc, #36]	; (8002938 <HAL_GPIO_Init+0x304>)
 8002912:	4013      	ands	r3, r2
 8002914:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	3301      	adds	r3, #1
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	f47f ae8e 	bne.w	8002648 <HAL_GPIO_Init+0x14>
  }
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	372c      	adds	r7, #44	; 0x2c
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	40010400 	.word	0x40010400

0800293c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
 8002948:	4613      	mov	r3, r2
 800294a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800294c:	787b      	ldrb	r3, [r7, #1]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002958:	e003      	b.n	8002962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800295a:	887b      	ldrh	r3, [r7, #2]
 800295c:	041a      	lsls	r2, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	611a      	str	r2, [r3, #16]
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4013      	ands	r3, r2
 8002984:	041a      	lsls	r2, r3, #16
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43d9      	mvns	r1, r3
 800298a:	887b      	ldrh	r3, [r7, #2]
 800298c:	400b      	ands	r3, r1
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	611a      	str	r2, [r3, #16]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e12b      	b.n	8002c0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe fd2c 	bl	8001424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a04:	f002 fa4a 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 8002a08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4a81      	ldr	r2, [pc, #516]	; (8002c14 <HAL_I2C_Init+0x274>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d807      	bhi.n	8002a24 <HAL_I2C_Init+0x84>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a80      	ldr	r2, [pc, #512]	; (8002c18 <HAL_I2C_Init+0x278>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	bf94      	ite	ls
 8002a1c:	2301      	movls	r3, #1
 8002a1e:	2300      	movhi	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	e006      	b.n	8002a32 <HAL_I2C_Init+0x92>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a7d      	ldr	r2, [pc, #500]	; (8002c1c <HAL_I2C_Init+0x27c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	bf94      	ite	ls
 8002a2c:	2301      	movls	r3, #1
 8002a2e:	2300      	movhi	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0e7      	b.n	8002c0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4a78      	ldr	r2, [pc, #480]	; (8002c20 <HAL_I2C_Init+0x280>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	0c9b      	lsrs	r3, r3, #18
 8002a44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a6a      	ldr	r2, [pc, #424]	; (8002c14 <HAL_I2C_Init+0x274>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d802      	bhi.n	8002a74 <HAL_I2C_Init+0xd4>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	3301      	adds	r3, #1
 8002a72:	e009      	b.n	8002a88 <HAL_I2C_Init+0xe8>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	4a69      	ldr	r2, [pc, #420]	; (8002c24 <HAL_I2C_Init+0x284>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	099b      	lsrs	r3, r3, #6
 8002a86:	3301      	adds	r3, #1
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	495c      	ldr	r1, [pc, #368]	; (8002c14 <HAL_I2C_Init+0x274>)
 8002aa4:	428b      	cmp	r3, r1
 8002aa6:	d819      	bhi.n	8002adc <HAL_I2C_Init+0x13c>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1e59      	subs	r1, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab6:	1c59      	adds	r1, r3, #1
 8002ab8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002abc:	400b      	ands	r3, r1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_I2C_Init+0x138>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1e59      	subs	r1, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad6:	e051      	b.n	8002b7c <HAL_I2C_Init+0x1dc>
 8002ad8:	2304      	movs	r3, #4
 8002ada:	e04f      	b.n	8002b7c <HAL_I2C_Init+0x1dc>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d111      	bne.n	8002b08 <HAL_I2C_Init+0x168>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1e58      	subs	r0, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	440b      	add	r3, r1
 8002af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e012      	b.n	8002b2e <HAL_I2C_Init+0x18e>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1e58      	subs	r0, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	0099      	lsls	r1, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Init+0x196>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e022      	b.n	8002b7c <HAL_I2C_Init+0x1dc>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10e      	bne.n	8002b5c <HAL_I2C_Init+0x1bc>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1e58      	subs	r0, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6859      	ldr	r1, [r3, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	440b      	add	r3, r1
 8002b4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b50:	3301      	adds	r3, #1
 8002b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5a:	e00f      	b.n	8002b7c <HAL_I2C_Init+0x1dc>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1e58      	subs	r0, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	0099      	lsls	r1, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	6809      	ldr	r1, [r1, #0]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002baa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6911      	ldr	r1, [r2, #16]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68d2      	ldr	r2, [r2, #12]
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	000186a0 	.word	0x000186a0
 8002c18:	001e847f 	.word	0x001e847f
 8002c1c:	003d08ff 	.word	0x003d08ff
 8002c20:	431bde83 	.word	0x431bde83
 8002c24:	10624dd3 	.word	0x10624dd3

08002c28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2a:	b08b      	sub	sp, #44	; 0x2c
 8002c2c:	af06      	add	r7, sp, #24
 8002c2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0f1      	b.n	8002e1e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f009 ff38 	bl	800cac4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2203      	movs	r2, #3
 8002c58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f003 f9a5 	bl	8005fb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	687e      	ldr	r6, [r7, #4]
 8002c6e:	466d      	mov	r5, sp
 8002c70:	f106 0410 	add.w	r4, r6, #16
 8002c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	602b      	str	r3, [r5, #0]
 8002c7c:	1d33      	adds	r3, r6, #4
 8002c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c80:	6838      	ldr	r0, [r7, #0]
 8002c82:	f003 f96f 	bl	8005f64 <USB_CoreInit>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0c2      	b.n	8002e1e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f003 f9a0 	bl	8005fe4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e040      	b.n	8002d2c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	3301      	adds	r3, #1
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	440b      	add	r3, r1
 8002cd0:	7bfa      	ldrb	r2, [r7, #15]
 8002cd2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3303      	adds	r3, #3
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3338      	adds	r3, #56	; 0x38
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cfe:	7bfa      	ldrb	r2, [r7, #15]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	440b      	add	r3, r1
 8002d0c:	333c      	adds	r3, #60	; 0x3c
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d12:	7bfa      	ldrb	r2, [r7, #15]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	3340      	adds	r3, #64	; 0x40
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d3b9      	bcc.n	8002caa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e044      	b.n	8002dc6 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d52:	7bfa      	ldrb	r2, [r7, #15]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	440b      	add	r3, r1
 8002d60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d3b5      	bcc.n	8002d3c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	687e      	ldr	r6, [r7, #4]
 8002dd8:	466d      	mov	r5, sp
 8002dda:	f106 0410 	add.w	r4, r6, #16
 8002dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	602b      	str	r3, [r5, #0]
 8002de6:	1d33      	adds	r3, r6, #4
 8002de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dea:	6838      	ldr	r0, [r7, #0]
 8002dec:	f003 f906 	bl	8005ffc <USB_DevInit>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00d      	b.n	8002e1e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f005 fb87 	bl	800852a <USB_DevDisconnect>

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_PCD_Start+0x16>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e016      	b.n	8002e6a <HAL_PCD_Start+0x44>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f003 f89b 	bl	8005f84 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e4e:	2101      	movs	r1, #1
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f00a f8aa 	bl	800cfaa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f005 fb5b 	bl	8008516 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b088      	sub	sp, #32
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f005 fb5d 	bl	800853e <USB_ReadInterrupts>
 8002e84:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fb1b 	bl	80034cc <PCD_EP_ISR_Handler>

    return;
 8002e96:	e119      	b.n	80030cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d013      	beq.n	8002eca <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb4:	b292      	uxth	r2, r2
 8002eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f009 fe7d 	bl	800cbba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f905 	bl	80030d2 <HAL_PCD_SetAddress>

    return;
 8002ec8:	e100      	b.n	80030cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00c      	beq.n	8002eee <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ee6:	b292      	uxth	r2, r2
 8002ee8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002eec:	e0ee      	b.n	80030cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00c      	beq.n	8002f12 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f10:	e0dc      	b.n	80030cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d027      	beq.n	8002f6c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0204 	bic.w	r2, r2, #4
 8002f2e:	b292      	uxth	r2, r2
 8002f30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0208 	bic.w	r2, r2, #8
 8002f46:	b292      	uxth	r2, r2
 8002f48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f009 fe6d 	bl	800cc2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f64:	b292      	uxth	r2, r2
 8002f66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f6a:	e0af      	b.n	80030cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8083 	beq.w	800307e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	77fb      	strb	r3, [r7, #31]
 8002f7c:	e010      	b.n	8002fa0 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	7ffb      	ldrb	r3, [r7, #31]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	441a      	add	r2, r3
 8002f8a:	7ffb      	ldrb	r3, [r7, #31]
 8002f8c:	8812      	ldrh	r2, [r2, #0]
 8002f8e:	b292      	uxth	r2, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	3320      	adds	r3, #32
 8002f94:	443b      	add	r3, r7
 8002f96:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002f9a:	7ffb      	ldrb	r3, [r7, #31]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	7ffb      	ldrb	r3, [r7, #31]
 8002fa2:	2b07      	cmp	r3, #7
 8002fa4:	d9eb      	bls.n	8002f7e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	b292      	uxth	r2, r2
 8002fba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	b292      	uxth	r2, r2
 8002fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002fd6:	bf00      	nop
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f6      	beq.n	8002fd8 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffc:	b292      	uxth	r2, r2
 8002ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003002:	2300      	movs	r3, #0
 8003004:	77fb      	strb	r3, [r7, #31]
 8003006:	e00f      	b.n	8003028 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003008:	7ffb      	ldrb	r3, [r7, #31]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	4611      	mov	r1, r2
 8003010:	7ffa      	ldrb	r2, [r7, #31]
 8003012:	0092      	lsls	r2, r2, #2
 8003014:	440a      	add	r2, r1
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	3320      	adds	r3, #32
 800301a:	443b      	add	r3, r7
 800301c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003020:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003022:	7ffb      	ldrb	r3, [r7, #31]
 8003024:	3301      	adds	r3, #1
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	7ffb      	ldrb	r3, [r7, #31]
 800302a:	2b07      	cmp	r3, #7
 800302c:	d9ec      	bls.n	8003008 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003036:	b29a      	uxth	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0208 	orr.w	r2, r2, #8
 8003040:	b292      	uxth	r2, r2
 8003042:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800304e:	b29a      	uxth	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003058:	b292      	uxth	r2, r2
 800305a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003066:	b29a      	uxth	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f042 0204 	orr.w	r2, r2, #4
 8003070:	b292      	uxth	r2, r2
 8003072:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f009 fdbe 	bl	800cbf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800307c:	e026      	b.n	80030cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00f      	beq.n	80030a8 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003090:	b29a      	uxth	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800309a:	b292      	uxth	r2, r2
 800309c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f009 fd7c 	bl	800cb9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80030a6:	e011      	b.n	80030cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00c      	beq.n	80030cc <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c4:	b292      	uxth	r2, r2
 80030c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80030ca:	bf00      	nop
  }
}
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_PCD_SetAddress+0x1a>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e013      	b.n	8003114 <HAL_PCD_SetAddress+0x42>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f005 f9f3 	bl	80084f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	4608      	mov	r0, r1
 8003126:	4611      	mov	r1, r2
 8003128:	461a      	mov	r2, r3
 800312a:	4603      	mov	r3, r0
 800312c:	70fb      	strb	r3, [r7, #3]
 800312e:	460b      	mov	r3, r1
 8003130:	803b      	strh	r3, [r7, #0]
 8003132:	4613      	mov	r3, r2
 8003134:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800313a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800313e:	2b00      	cmp	r3, #0
 8003140:	da0e      	bge.n	8003160 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	705a      	strb	r2, [r3, #1]
 800315e:	e00e      	b.n	800317e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 0207 	and.w	r2, r3, #7
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800318a:	883a      	ldrh	r2, [r7, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	78ba      	ldrb	r2, [r7, #2]
 8003194:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003196:	78bb      	ldrb	r3, [r7, #2]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d102      	bne.n	80031a2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_PCD_EP_Open+0x94>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e00e      	b.n	80031ce <HAL_PCD_EP_Open+0xb2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68f9      	ldr	r1, [r7, #12]
 80031be:	4618      	mov	r0, r3
 80031c0:	f002 ff3c 	bl	800603c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80031cc:	7afb      	ldrb	r3, [r7, #11]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	da0e      	bge.n	8003208 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	705a      	strb	r2, [r3, #1]
 8003206:	e00e      	b.n	8003226 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 0207 	and.w	r2, r3, #7
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4413      	add	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	b2da      	uxtb	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_PCD_EP_Close+0x6a>
 800323c:	2302      	movs	r3, #2
 800323e:	e00e      	b.n	800325e <HAL_PCD_EP_Close+0x88>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68f9      	ldr	r1, [r7, #12]
 800324e:	4618      	mov	r0, r3
 8003250:	f003 fab4 	bl	80067bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	460b      	mov	r3, r1
 8003274:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	f003 0207 	and.w	r2, r3, #7
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2200      	movs	r2, #0
 800329e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2200      	movs	r2, #0
 80032a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032a6:	7afb      	ldrb	r3, [r7, #11]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6979      	ldr	r1, [r7, #20]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 fc6b 	bl	8006b94 <USB_EPStartXfer>

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	f003 0207 	and.w	r2, r3, #7
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	440b      	add	r3, r1
 80032e6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b086      	sub	sp, #24
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	460b      	mov	r3, r1
 8003304:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003306:	7afb      	ldrb	r3, [r7, #11]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4413      	add	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2200      	movs	r2, #0
 800333a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2201      	movs	r2, #1
 8003340:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003342:	7afb      	ldrb	r3, [r7, #11]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	b2da      	uxtb	r2, r3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6979      	ldr	r1, [r7, #20]
 8003354:	4618      	mov	r0, r3
 8003356:	f003 fc1d 	bl	8006b94 <USB_EPStartXfer>

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	f003 0207 	and.w	r2, r3, #7
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	429a      	cmp	r2, r3
 800337c:	d901      	bls.n	8003382 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e04c      	b.n	800341c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003386:	2b00      	cmp	r3, #0
 8003388:	da0e      	bge.n	80033a8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	705a      	strb	r2, [r3, #1]
 80033a6:	e00c      	b.n	80033c2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_PCD_EP_SetStall+0x7e>
 80033de:	2302      	movs	r3, #2
 80033e0:	e01c      	b.n	800341c <HAL_PCD_EP_SetStall+0xb8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68f9      	ldr	r1, [r7, #12]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 ff80 	bl	80082f6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d108      	bne.n	8003412 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f005 f8a5 	bl	800855c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	429a      	cmp	r2, r3
 800343c:	d901      	bls.n	8003442 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e040      	b.n	80034c4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003442:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003446:	2b00      	cmp	r3, #0
 8003448:	da0e      	bge.n	8003468 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	705a      	strb	r2, [r3, #1]
 8003466:	e00e      	b.n	8003486 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	f003 0207 	and.w	r2, r3, #7
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	b2da      	uxtb	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_PCD_EP_ClrStall+0x82>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e00e      	b.n	80034c4 <HAL_PCD_EP_ClrStall+0xa0>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68f9      	ldr	r1, [r7, #12]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f004 ff6e 	bl	8008396 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b096      	sub	sp, #88	; 0x58
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034d4:	e3bf      	b.n	8003c56 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80034e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80034f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f040 8179 	bne.w	80037ec <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80034fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	d152      	bne.n	80035ac <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003516:	81fb      	strh	r3, [r7, #14]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	89fb      	ldrh	r3, [r7, #14]
 800351e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003526:	b29b      	uxth	r3, r3
 8003528:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3328      	adds	r3, #40	; 0x28
 800352e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003538:	b29b      	uxth	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	3302      	adds	r3, #2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800355c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355e:	695a      	ldr	r2, [r3, #20]
 8003560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	441a      	add	r2, r3
 8003566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003568:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800356a:	2100      	movs	r1, #0
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f009 fafc 	bl	800cb6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 836b 	beq.w	8003c56 <PCD_EP_ISR_Handler+0x78a>
 8003580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	f040 8366 	bne.w	8003c56 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003596:	b2da      	uxtb	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	b292      	uxth	r2, r2
 800359e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035aa:	e354      	b.n	8003c56 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035b2:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80035be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d034      	beq.n	8003634 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	3306      	adds	r3, #6
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003602:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003606:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003608:	b29b      	uxth	r3, r3
 800360a:	f004 fff7 	bl	80085fc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	b29a      	uxth	r2, r3
 8003616:	f640 738f 	movw	r3, #3983	; 0xf8f
 800361a:	4013      	ands	r3, r2
 800361c:	823b      	strh	r3, [r7, #16]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	8a3a      	ldrh	r2, [r7, #16]
 8003624:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003628:	b292      	uxth	r2, r2
 800362a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f009 fa6f 	bl	800cb10 <HAL_PCD_SetupStageCallback>
 8003632:	e310      	b.n	8003c56 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003634:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003638:	2b00      	cmp	r3, #0
 800363a:	f280 830c 	bge.w	8003c56 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	b29a      	uxth	r2, r3
 8003646:	f640 738f 	movw	r3, #3983	; 0xf8f
 800364a:	4013      	ands	r3, r2
 800364c:	83fb      	strh	r3, [r7, #30]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	8bfa      	ldrh	r2, [r7, #30]
 8003654:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003658:	b292      	uxth	r2, r2
 800365a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003664:	b29b      	uxth	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	3306      	adds	r3, #6
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	4413      	add	r3, r2
 800367a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003686:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d019      	beq.n	80036c4 <PCD_EP_ISR_Handler+0x1f8>
 8003690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d015      	beq.n	80036c4 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369e:	6959      	ldr	r1, [r3, #20]
 80036a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80036a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f004 ffa7 	bl	80085fc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80036ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	441a      	add	r2, r3
 80036b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80036bc:	2100      	movs	r1, #0
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f009 fa38 	bl	800cb34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80036ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80036d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f040 82bd 	bne.w	8003c56 <PCD_EP_ISR_Handler+0x78a>
 80036dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80036e0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80036e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036e8:	f000 82b5 	beq.w	8003c56 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	4413      	add	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29b      	uxth	r3, r3
 8003712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003716:	b29a      	uxth	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	801a      	strh	r2, [r3, #0]
 800371c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	2b3e      	cmp	r3, #62	; 0x3e
 8003722:	d91d      	bls.n	8003760 <PCD_EP_ISR_Handler+0x294>
 8003724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	647b      	str	r3, [r7, #68]	; 0x44
 800372c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <PCD_EP_ISR_Handler+0x272>
 8003738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373a:	3b01      	subs	r3, #1
 800373c:	647b      	str	r3, [r7, #68]	; 0x44
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b29a      	uxth	r2, r3
 8003744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003746:	b29b      	uxth	r3, r3
 8003748:	029b      	lsls	r3, r3, #10
 800374a:	b29b      	uxth	r3, r3
 800374c:	4313      	orrs	r3, r2
 800374e:	b29b      	uxth	r3, r3
 8003750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003758:	b29a      	uxth	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	801a      	strh	r2, [r3, #0]
 800375e:	e026      	b.n	80037ae <PCD_EP_ISR_Handler+0x2e2>
 8003760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <PCD_EP_ISR_Handler+0x2b2>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	b29b      	uxth	r3, r3
 800376e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003776:	b29a      	uxth	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	801a      	strh	r2, [r3, #0]
 800377c:	e017      	b.n	80037ae <PCD_EP_ISR_Handler+0x2e2>
 800377e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	647b      	str	r3, [r7, #68]	; 0x44
 8003786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <PCD_EP_ISR_Handler+0x2cc>
 8003792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003794:	3301      	adds	r3, #1
 8003796:	647b      	str	r3, [r7, #68]	; 0x44
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	b29a      	uxth	r2, r3
 800379e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	029b      	lsls	r3, r3, #10
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	4313      	orrs	r3, r2
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	827b      	strh	r3, [r7, #18]
 80037c0:	8a7b      	ldrh	r3, [r7, #18]
 80037c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80037c6:	827b      	strh	r3, [r7, #18]
 80037c8:	8a7b      	ldrh	r3, [r7, #18]
 80037ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80037ce:	827b      	strh	r3, [r7, #18]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	8a7b      	ldrh	r3, [r7, #18]
 80037d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	8013      	strh	r3, [r2, #0]
 80037ea:	e234      	b.n	8003c56 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003800:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003804:	2b00      	cmp	r3, #0
 8003806:	f280 80fc 	bge.w	8003a02 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	b29a      	uxth	r2, r3
 800381c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003820:	4013      	ands	r3, r2
 8003822:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003838:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800383c:	b292      	uxth	r2, r2
 800383e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003840:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	4413      	add	r3, r2
 8003854:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003858:	7b1b      	ldrb	r3, [r3, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d125      	bne.n	80038aa <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003866:	b29b      	uxth	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	3306      	adds	r3, #6
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003886:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800388a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8092 	beq.w	80039b8 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800389a:	6959      	ldr	r1, [r3, #20]
 800389c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800389e:	88da      	ldrh	r2, [r3, #6]
 80038a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038a4:	f004 feaa 	bl	80085fc <USB_ReadPMA>
 80038a8:	e086      	b.n	80039b8 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80038aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ac:	78db      	ldrb	r3, [r3, #3]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d10a      	bne.n	80038c8 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80038b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038b6:	461a      	mov	r2, r3
 80038b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f9d9 	bl	8003c72 <HAL_PCD_EP_DB_Receive>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80038c6:	e077      	b.n	80039b8 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	441a      	add	r2, r3
 80038f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80038f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003904:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003908:	b29b      	uxth	r3, r3
 800390a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b29b      	uxth	r3, r3
 800391e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d024      	beq.n	8003970 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800392e:	b29b      	uxth	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	3302      	adds	r3, #2
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800394e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003952:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003956:	2b00      	cmp	r3, #0
 8003958:	d02e      	beq.n	80039b8 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003960:	6959      	ldr	r1, [r3, #20]
 8003962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003964:	891a      	ldrh	r2, [r3, #8]
 8003966:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800396a:	f004 fe47 	bl	80085fc <USB_ReadPMA>
 800396e:	e023      	b.n	80039b8 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003978:	b29b      	uxth	r3, r3
 800397a:	461a      	mov	r2, r3
 800397c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	3306      	adds	r3, #6
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003998:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800399c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d009      	beq.n	80039b8 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039aa:	6959      	ldr	r1, [r3, #20]
 80039ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ae:	895a      	ldrh	r2, [r3, #10]
 80039b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80039b4:	f004 fe22 	bl	80085fc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80039b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80039c0:	441a      	add	r2, r3
 80039c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80039c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80039ce:	441a      	add	r2, r3
 80039d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80039d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <PCD_EP_ISR_Handler+0x51c>
 80039dc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80039e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d206      	bcs.n	80039f6 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80039e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	4619      	mov	r1, r3
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f009 f8a0 	bl	800cb34 <HAL_PCD_DataOutStageCallback>
 80039f4:	e005      	b.n	8003a02 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039fc:	4618      	mov	r0, r3
 80039fe:	f003 f8c9 	bl	8006b94 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003a02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8123 	beq.w	8003c56 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003a10:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	441a      	add	r2, r3
 8003a50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a62:	78db      	ldrb	r3, [r3, #3]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	f040 80a2 	bne.w	8003bae <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a72:	7b1b      	ldrb	r3, [r3, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8093 	beq.w	8003ba0 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d046      	beq.n	8003b14 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a88:	785b      	ldrb	r3, [r3, #1]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d126      	bne.n	8003adc <PCD_EP_ISR_Handler+0x610>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	4413      	add	r3, r2
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	011a      	lsls	r2, r3, #4
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	4413      	add	r3, r2
 8003ab0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ab4:	623b      	str	r3, [r7, #32]
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	801a      	strh	r2, [r3, #0]
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	801a      	strh	r2, [r3, #0]
 8003ada:	e061      	b.n	8003ba0 <PCD_EP_ISR_Handler+0x6d4>
 8003adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ade:	785b      	ldrb	r3, [r3, #1]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d15d      	bne.n	8003ba0 <PCD_EP_ISR_Handler+0x6d4>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	461a      	mov	r2, r3
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	4413      	add	r3, r2
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	011a      	lsls	r2, r3, #4
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	4413      	add	r3, r2
 8003b06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	2200      	movs	r2, #0
 8003b10:	801a      	strh	r2, [r3, #0]
 8003b12:	e045      	b.n	8003ba0 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1c:	785b      	ldrb	r3, [r3, #1]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d126      	bne.n	8003b70 <PCD_EP_ISR_Handler+0x6a4>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	637b      	str	r3, [r7, #52]	; 0x34
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b36:	4413      	add	r3, r2
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
 8003b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	011a      	lsls	r2, r3, #4
 8003b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b42:	4413      	add	r3, r2
 8003b44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b48:	633b      	str	r3, [r7, #48]	; 0x30
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	801a      	strh	r2, [r3, #0]
 8003b6e:	e017      	b.n	8003ba0 <PCD_EP_ISR_Handler+0x6d4>
 8003b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b72:	785b      	ldrb	r3, [r3, #1]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d113      	bne.n	8003ba0 <PCD_EP_ISR_Handler+0x6d4>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b86:	4413      	add	r3, r2
 8003b88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	011a      	lsls	r2, r3, #4
 8003b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b92:	4413      	add	r3, r2
 8003b94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b98:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f008 ffdf 	bl	800cb6a <HAL_PCD_DataInStageCallback>
 8003bac:	e053      	b.n	8003c56 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003bae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d146      	bne.n	8003c48 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	3302      	adds	r3, #2
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d907      	bls.n	8003c02 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bfa:	1ad2      	subs	r2, r2, r3
 8003bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bfe:	619a      	str	r2, [r3, #24]
 8003c00:	e002      	b.n	8003c08 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c04:	2200      	movs	r2, #0
 8003c06:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4619      	mov	r1, r3
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f008 ffa7 	bl	800cb6a <HAL_PCD_DataInStageCallback>
 8003c1c:	e01b      	b.n	8003c56 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c26:	441a      	add	r2, r3
 8003c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c2a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c2e:	69da      	ldr	r2, [r3, #28]
 8003c30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c34:	441a      	add	r2, r3
 8003c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c38:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c40:	4618      	mov	r0, r3
 8003c42:	f002 ffa7 	bl	8006b94 <USB_EPStartXfer>
 8003c46:	e006      	b.n	8003c56 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003c48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f91b 	bl	8003e8c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	b21b      	sxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f6ff ac37 	blt.w	80034d6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3758      	adds	r7, #88	; 0x58
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b088      	sub	sp, #32
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d07e      	beq.n	8003d88 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3302      	adds	r3, #2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cb2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	8b7b      	ldrh	r3, [r7, #26]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d306      	bcc.n	8003ccc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	8b7b      	ldrh	r3, [r7, #26]
 8003cc4:	1ad2      	subs	r2, r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	619a      	str	r2, [r3, #24]
 8003cca:	e002      	b.n	8003cd2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d123      	bne.n	8003d22 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf4:	833b      	strh	r3, [r7, #24]
 8003cf6:	8b3b      	ldrh	r3, [r7, #24]
 8003cf8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003cfc:	833b      	strh	r3, [r7, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	441a      	add	r2, r3
 8003d0c:	8b3b      	ldrh	r3, [r7, #24]
 8003d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01f      	beq.n	8003d6c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d46:	82fb      	strh	r3, [r7, #22]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	441a      	add	r2, r3
 8003d56:	8afb      	ldrh	r3, [r7, #22]
 8003d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d6c:	8b7b      	ldrh	r3, [r7, #26]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8087 	beq.w	8003e82 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	6959      	ldr	r1, [r3, #20]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	891a      	ldrh	r2, [r3, #8]
 8003d80:	8b7b      	ldrh	r3, [r7, #26]
 8003d82:	f004 fc3b 	bl	80085fc <USB_ReadPMA>
 8003d86:	e07c      	b.n	8003e82 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3306      	adds	r3, #6
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	8b7b      	ldrh	r3, [r7, #26]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d306      	bcc.n	8003dca <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	8b7b      	ldrh	r3, [r7, #26]
 8003dc2:	1ad2      	subs	r2, r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	619a      	str	r2, [r3, #24]
 8003dc8:	e002      	b.n	8003dd0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d123      	bne.n	8003e20 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df2:	83fb      	strh	r3, [r7, #30]
 8003df4:	8bfb      	ldrh	r3, [r7, #30]
 8003df6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003dfa:	83fb      	strh	r3, [r7, #30]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	441a      	add	r2, r3
 8003e0a:	8bfb      	ldrh	r3, [r7, #30]
 8003e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d11f      	bne.n	8003e6a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e44:	83bb      	strh	r3, [r7, #28]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	441a      	add	r2, r3
 8003e54:	8bbb      	ldrh	r3, [r7, #28]
 8003e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e6a:	8b7b      	ldrh	r3, [r7, #26]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	6959      	ldr	r1, [r3, #20]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	895a      	ldrh	r2, [r3, #10]
 8003e7c:	8b7b      	ldrh	r3, [r7, #26]
 8003e7e:	f004 fbbd 	bl	80085fc <USB_ReadPMA>
    }
  }

  return count;
 8003e82:	8b7b      	ldrh	r3, [r7, #26]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b0a4      	sub	sp, #144	; 0x90
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	4613      	mov	r3, r2
 8003e98:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 81dd 	beq.w	8004260 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	3302      	adds	r3, #2
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ece:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d907      	bls.n	8003eee <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ee6:	1ad2      	subs	r2, r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	619a      	str	r2, [r3, #24]
 8003eec:	e002      	b.n	8003ef4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f040 80b9 	bne.w	8004070 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	785b      	ldrb	r3, [r3, #1]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d126      	bne.n	8003f54 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1a:	4413      	add	r3, r2
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	011a      	lsls	r2, r3, #4
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	4413      	add	r3, r2
 8003f28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	801a      	strh	r2, [r3, #0]
 8003f52:	e01a      	b.n	8003f8a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	785b      	ldrb	r3, [r3, #1]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d116      	bne.n	8003f8a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	637b      	str	r3, [r7, #52]	; 0x34
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f70:	4413      	add	r3, r2
 8003f72:	637b      	str	r3, [r7, #52]	; 0x34
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	011a      	lsls	r2, r3, #4
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f82:	633b      	str	r3, [r7, #48]	; 0x30
 8003f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f86:	2200      	movs	r2, #0
 8003f88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	785b      	ldrb	r3, [r3, #1]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d126      	bne.n	8003fe6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	461a      	mov	r2, r3
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	011a      	lsls	r2, r3, #4
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	801a      	strh	r2, [r3, #0]
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	801a      	strh	r2, [r3, #0]
 8003fe4:	e017      	b.n	8004016 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	785b      	ldrb	r3, [r3, #1]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d113      	bne.n	8004016 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	4413      	add	r3, r2
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	011a      	lsls	r2, r3, #4
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	4413      	add	r3, r2
 800400a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800400e:	623b      	str	r3, [r7, #32]
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	2200      	movs	r2, #0
 8004014:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	4619      	mov	r1, r3
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f008 fda4 	bl	800cb6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 82fc 	beq.w	8004626 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004048:	82fb      	strh	r3, [r7, #22]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	441a      	add	r2, r3
 8004058:	8afb      	ldrh	r3, [r7, #22]
 800405a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800405e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004062:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406a:	b29b      	uxth	r3, r3
 800406c:	8013      	strh	r3, [r2, #0]
 800406e:	e2da      	b.n	8004626 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d021      	beq.n	80040be <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	b29b      	uxth	r3, r3
 800408c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004094:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	f040 82ae 	bne.w	8004626 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040d2:	441a      	add	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040e0:	441a      	add	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	6a1a      	ldr	r2, [r3, #32]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d30b      	bcc.n	800410a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6a1a      	ldr	r2, [r3, #32]
 80040fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004102:	1ad2      	subs	r2, r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	621a      	str	r2, [r3, #32]
 8004108:	e017      	b.n	800413a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d108      	bne.n	8004124 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004112:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004122:	e00a      	b.n	800413a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2200      	movs	r2, #0
 8004138:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d165      	bne.n	800420e <HAL_PCD_EP_DB_Transmit+0x382>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004150:	b29b      	uxth	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004156:	4413      	add	r3, r2
 8004158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	011a      	lsls	r2, r3, #4
 8004160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004162:	4413      	add	r3, r2
 8004164:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004168:	63bb      	str	r3, [r7, #56]	; 0x38
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004174:	b29a      	uxth	r2, r3
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	801a      	strh	r2, [r3, #0]
 800417a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800417e:	2b3e      	cmp	r3, #62	; 0x3e
 8004180:	d91d      	bls.n	80041be <HAL_PCD_EP_DB_Transmit+0x332>
 8004182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	64bb      	str	r3, [r7, #72]	; 0x48
 800418a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2b00      	cmp	r3, #0
 8004194:	d102      	bne.n	800419c <HAL_PCD_EP_DB_Transmit+0x310>
 8004196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004198:	3b01      	subs	r3, #1
 800419a:	64bb      	str	r3, [r7, #72]	; 0x48
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	029b      	lsls	r3, r3, #10
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	4313      	orrs	r3, r2
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ba:	801a      	strh	r2, [r3, #0]
 80041bc:	e044      	b.n	8004248 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80041be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <HAL_PCD_EP_DB_Transmit+0x350>
 80041c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	801a      	strh	r2, [r3, #0]
 80041da:	e035      	b.n	8004248 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80041dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_PCD_EP_DB_Transmit+0x36a>
 80041f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f2:	3301      	adds	r3, #1
 80041f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fe:	b29b      	uxth	r3, r3
 8004200:	029b      	lsls	r3, r3, #10
 8004202:	b29b      	uxth	r3, r3
 8004204:	4313      	orrs	r3, r2
 8004206:	b29a      	uxth	r2, r3
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	801a      	strh	r2, [r3, #0]
 800420c:	e01c      	b.n	8004248 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	785b      	ldrb	r3, [r3, #1]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d118      	bne.n	8004248 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	647b      	str	r3, [r7, #68]	; 0x44
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004224:	b29b      	uxth	r3, r3
 8004226:	461a      	mov	r2, r3
 8004228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422a:	4413      	add	r3, r2
 800422c:	647b      	str	r3, [r7, #68]	; 0x44
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	011a      	lsls	r2, r3, #4
 8004234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004236:	4413      	add	r3, r2
 8004238:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800423c:	643b      	str	r3, [r7, #64]	; 0x40
 800423e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004242:	b29a      	uxth	r2, r3
 8004244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004246:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	6959      	ldr	r1, [r3, #20]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	891a      	ldrh	r2, [r3, #8]
 8004254:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004258:	b29b      	uxth	r3, r3
 800425a:	f004 f98a 	bl	8008572 <USB_WritePMA>
 800425e:	e1e2      	b.n	8004626 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004268:	b29b      	uxth	r3, r3
 800426a:	461a      	mov	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4413      	add	r3, r2
 8004274:	3306      	adds	r3, #6
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004288:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	699a      	ldr	r2, [r3, #24]
 8004290:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004294:	429a      	cmp	r2, r3
 8004296:	d307      	bcc.n	80042a8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	699a      	ldr	r2, [r3, #24]
 800429c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80042a0:	1ad2      	subs	r2, r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	619a      	str	r2, [r3, #24]
 80042a6:	e002      	b.n	80042ae <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2200      	movs	r2, #0
 80042ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 80c0 	bne.w	8004438 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d126      	bne.n	800430e <HAL_PCD_EP_DB_Transmit+0x482>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042d4:	4413      	add	r3, r2
 80042d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	011a      	lsls	r2, r3, #4
 80042de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042e0:	4413      	add	r3, r2
 80042e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80042e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042f6:	801a      	strh	r2, [r3, #0]
 80042f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004306:	b29a      	uxth	r2, r3
 8004308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	e01a      	b.n	8004344 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	785b      	ldrb	r3, [r3, #1]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d116      	bne.n	8004344 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	667b      	str	r3, [r7, #100]	; 0x64
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004324:	b29b      	uxth	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800432a:	4413      	add	r3, r2
 800432c:	667b      	str	r3, [r7, #100]	; 0x64
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	011a      	lsls	r2, r3, #4
 8004334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004336:	4413      	add	r3, r2
 8004338:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800433c:	663b      	str	r3, [r7, #96]	; 0x60
 800433e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004340:	2200      	movs	r2, #0
 8004342:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	677b      	str	r3, [r7, #116]	; 0x74
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	785b      	ldrb	r3, [r3, #1]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d12b      	bne.n	80043aa <HAL_PCD_EP_DB_Transmit+0x51e>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004360:	b29b      	uxth	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004366:	4413      	add	r3, r2
 8004368:	66fb      	str	r3, [r7, #108]	; 0x6c
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	011a      	lsls	r2, r3, #4
 8004370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004372:	4413      	add	r3, r2
 8004374:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800437c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004388:	b29a      	uxth	r2, r3
 800438a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29b      	uxth	r3, r3
 8004398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800439c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043a6:	801a      	strh	r2, [r3, #0]
 80043a8:	e017      	b.n	80043da <HAL_PCD_EP_DB_Transmit+0x54e>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d113      	bne.n	80043da <HAL_PCD_EP_DB_Transmit+0x54e>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c0:	4413      	add	r3, r2
 80043c2:	677b      	str	r3, [r7, #116]	; 0x74
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	011a      	lsls	r2, r3, #4
 80043ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043cc:	4413      	add	r3, r2
 80043ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043d2:	673b      	str	r3, [r7, #112]	; 0x70
 80043d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043d6:	2200      	movs	r2, #0
 80043d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	4619      	mov	r1, r3
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f008 fbc2 	bl	800cb6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f040 811a 	bne.w	8004626 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	441a      	add	r2, r3
 800441e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800442a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800442e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004432:	b29b      	uxth	r3, r3
 8004434:	8013      	strh	r3, [r2, #0]
 8004436:	e0f6      	b.n	8004626 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d121      	bne.n	8004486 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	441a      	add	r2, r3
 800446e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800447e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004482:	b29b      	uxth	r3, r3
 8004484:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800448c:	2b01      	cmp	r3, #1
 800448e:	f040 80ca 	bne.w	8004626 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800449a:	441a      	add	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80044a8:	441a      	add	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	6a1a      	ldr	r2, [r3, #32]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d30b      	bcc.n	80044d2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6a1a      	ldr	r2, [r3, #32]
 80044c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044ca:	1ad2      	subs	r2, r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	621a      	str	r2, [r3, #32]
 80044d0:	e017      	b.n	8004502 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d108      	bne.n	80044ec <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80044da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80044de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80044ea:	e00a      	b.n	8004502 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2200      	movs	r2, #0
 80044f8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	657b      	str	r3, [r7, #84]	; 0x54
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	785b      	ldrb	r3, [r3, #1]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d165      	bne.n	80045dc <HAL_PCD_EP_DB_Transmit+0x750>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004524:	4413      	add	r3, r2
 8004526:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	011a      	lsls	r2, r3, #4
 800452e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004530:	4413      	add	r3, r2
 8004532:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004536:	65bb      	str	r3, [r7, #88]	; 0x58
 8004538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004542:	b29a      	uxth	r2, r3
 8004544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004546:	801a      	strh	r2, [r3, #0]
 8004548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800454c:	2b3e      	cmp	r3, #62	; 0x3e
 800454e:	d91d      	bls.n	800458c <HAL_PCD_EP_DB_Transmit+0x700>
 8004550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	66bb      	str	r3, [r7, #104]	; 0x68
 8004558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <HAL_PCD_EP_DB_Transmit+0x6de>
 8004564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004566:	3b01      	subs	r3, #1
 8004568:	66bb      	str	r3, [r7, #104]	; 0x68
 800456a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29a      	uxth	r2, r3
 8004570:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004572:	b29b      	uxth	r3, r3
 8004574:	029b      	lsls	r3, r3, #10
 8004576:	b29b      	uxth	r3, r3
 8004578:	4313      	orrs	r3, r2
 800457a:	b29b      	uxth	r3, r3
 800457c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004584:	b29a      	uxth	r2, r3
 8004586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004588:	801a      	strh	r2, [r3, #0]
 800458a:	e041      	b.n	8004610 <HAL_PCD_EP_DB_Transmit+0x784>
 800458c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <HAL_PCD_EP_DB_Transmit+0x71e>
 8004594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800459e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045a6:	801a      	strh	r2, [r3, #0]
 80045a8:	e032      	b.n	8004610 <HAL_PCD_EP_DB_Transmit+0x784>
 80045aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ae:	085b      	lsrs	r3, r3, #1
 80045b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_PCD_EP_DB_Transmit+0x738>
 80045be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045c0:	3301      	adds	r3, #1
 80045c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80045c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	029b      	lsls	r3, r3, #10
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	4313      	orrs	r3, r2
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045d8:	801a      	strh	r2, [r3, #0]
 80045da:	e019      	b.n	8004610 <HAL_PCD_EP_DB_Transmit+0x784>
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d115      	bne.n	8004610 <HAL_PCD_EP_DB_Transmit+0x784>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f2:	4413      	add	r3, r2
 80045f4:	657b      	str	r3, [r7, #84]	; 0x54
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	011a      	lsls	r2, r3, #4
 80045fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045fe:	4413      	add	r3, r2
 8004600:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004604:	653b      	str	r3, [r7, #80]	; 0x50
 8004606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800460a:	b29a      	uxth	r2, r3
 800460c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800460e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	6959      	ldr	r1, [r3, #20]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	895a      	ldrh	r2, [r3, #10]
 800461c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004620:	b29b      	uxth	r3, r3
 8004622:	f003 ffa6 	bl	8008572 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	b29b      	uxth	r3, r3
 8004638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004640:	82bb      	strh	r3, [r7, #20]
 8004642:	8abb      	ldrh	r3, [r7, #20]
 8004644:	f083 0310 	eor.w	r3, r3, #16
 8004648:	82bb      	strh	r3, [r7, #20]
 800464a:	8abb      	ldrh	r3, [r7, #20]
 800464c:	f083 0320 	eor.w	r3, r3, #32
 8004650:	82bb      	strh	r3, [r7, #20]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	441a      	add	r2, r3
 8004660:	8abb      	ldrh	r3, [r7, #20]
 8004662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800466a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004672:	b29b      	uxth	r3, r3
 8004674:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3790      	adds	r7, #144	; 0x90
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	607b      	str	r3, [r7, #4]
 800468a:	460b      	mov	r3, r1
 800468c:	817b      	strh	r3, [r7, #10]
 800468e:	4613      	mov	r3, r2
 8004690:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004692:	897b      	ldrh	r3, [r7, #10]
 8004694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800469e:	897b      	ldrh	r3, [r7, #10]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e009      	b.n	80046ca <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046b6:	897a      	ldrh	r2, [r7, #10]
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80046ca:	893b      	ldrh	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d107      	bne.n	80046e0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2200      	movs	r2, #0
 80046d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	b29a      	uxth	r2, r3
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	80da      	strh	r2, [r3, #6]
 80046de:	e00b      	b.n	80046f8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2201      	movs	r2, #1
 80046e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e272      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 8087 	beq.w	8004832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004724:	4b92      	ldr	r3, [pc, #584]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 030c 	and.w	r3, r3, #12
 800472c:	2b04      	cmp	r3, #4
 800472e:	d00c      	beq.n	800474a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004730:	4b8f      	ldr	r3, [pc, #572]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 030c 	and.w	r3, r3, #12
 8004738:	2b08      	cmp	r3, #8
 800473a:	d112      	bne.n	8004762 <HAL_RCC_OscConfig+0x5e>
 800473c:	4b8c      	ldr	r3, [pc, #560]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004748:	d10b      	bne.n	8004762 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474a:	4b89      	ldr	r3, [pc, #548]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d06c      	beq.n	8004830 <HAL_RCC_OscConfig+0x12c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d168      	bne.n	8004830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e24c      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x76>
 800476c:	4b80      	ldr	r3, [pc, #512]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a7f      	ldr	r2, [pc, #508]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	e02e      	b.n	80047d8 <HAL_RCC_OscConfig+0xd4>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x98>
 8004782:	4b7b      	ldr	r3, [pc, #492]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a7a      	ldr	r2, [pc, #488]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4b78      	ldr	r3, [pc, #480]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a77      	ldr	r2, [pc, #476]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e01d      	b.n	80047d8 <HAL_RCC_OscConfig+0xd4>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0xbc>
 80047a6:	4b72      	ldr	r3, [pc, #456]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a71      	ldr	r2, [pc, #452]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b6f      	ldr	r3, [pc, #444]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a6e      	ldr	r2, [pc, #440]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e00b      	b.n	80047d8 <HAL_RCC_OscConfig+0xd4>
 80047c0:	4b6b      	ldr	r3, [pc, #428]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a6a      	ldr	r2, [pc, #424]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	4b68      	ldr	r3, [pc, #416]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a67      	ldr	r2, [pc, #412]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d013      	beq.n	8004808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7fd f88e 	bl	8001900 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e8:	f7fd f88a 	bl	8001900 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	; 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e200      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fa:	4b5d      	ldr	r3, [pc, #372]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0xe4>
 8004806:	e014      	b.n	8004832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fd f87a 	bl	8001900 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004810:	f7fd f876 	bl	8001900 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	; 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e1ec      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004822:	4b53      	ldr	r3, [pc, #332]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x10c>
 800482e:	e000      	b.n	8004832 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d063      	beq.n	8004906 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800483e:	4b4c      	ldr	r3, [pc, #304]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00b      	beq.n	8004862 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800484a:	4b49      	ldr	r3, [pc, #292]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b08      	cmp	r3, #8
 8004854:	d11c      	bne.n	8004890 <HAL_RCC_OscConfig+0x18c>
 8004856:	4b46      	ldr	r3, [pc, #280]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d116      	bne.n	8004890 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004862:	4b43      	ldr	r3, [pc, #268]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_RCC_OscConfig+0x176>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d001      	beq.n	800487a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e1c0      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487a:	4b3d      	ldr	r3, [pc, #244]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4939      	ldr	r1, [pc, #228]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488e:	e03a      	b.n	8004906 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004898:	4b36      	ldr	r3, [pc, #216]	; (8004974 <HAL_RCC_OscConfig+0x270>)
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489e:	f7fd f82f 	bl	8001900 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a6:	f7fd f82b 	bl	8001900 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e1a1      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b8:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c4:	4b2a      	ldr	r3, [pc, #168]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4927      	ldr	r1, [pc, #156]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	600b      	str	r3, [r1, #0]
 80048d8:	e015      	b.n	8004906 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048da:	4b26      	ldr	r3, [pc, #152]	; (8004974 <HAL_RCC_OscConfig+0x270>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fd f80e 	bl	8001900 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e8:	f7fd f80a 	bl	8001900 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e180      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048fa:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d03a      	beq.n	8004988 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d019      	beq.n	800494e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800491a:	4b17      	ldr	r3, [pc, #92]	; (8004978 <HAL_RCC_OscConfig+0x274>)
 800491c:	2201      	movs	r2, #1
 800491e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004920:	f7fc ffee 	bl	8001900 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004928:	f7fc ffea 	bl	8001900 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e160      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493a:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004946:	2001      	movs	r0, #1
 8004948:	f000 fb00 	bl	8004f4c <RCC_Delay>
 800494c:	e01c      	b.n	8004988 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800494e:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <HAL_RCC_OscConfig+0x274>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004954:	f7fc ffd4 	bl	8001900 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800495a:	e00f      	b.n	800497c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800495c:	f7fc ffd0 	bl	8001900 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d908      	bls.n	800497c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e146      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000
 8004974:	42420000 	.word	0x42420000
 8004978:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497c:	4b92      	ldr	r3, [pc, #584]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e9      	bne.n	800495c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80a6 	beq.w	8004ae2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004996:	2300      	movs	r3, #0
 8004998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800499a:	4b8b      	ldr	r3, [pc, #556]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10d      	bne.n	80049c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a6:	4b88      	ldr	r3, [pc, #544]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	4a87      	ldr	r2, [pc, #540]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 80049ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b0:	61d3      	str	r3, [r2, #28]
 80049b2:	4b85      	ldr	r3, [pc, #532]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049be:	2301      	movs	r3, #1
 80049c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c2:	4b82      	ldr	r3, [pc, #520]	; (8004bcc <HAL_RCC_OscConfig+0x4c8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d118      	bne.n	8004a00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ce:	4b7f      	ldr	r3, [pc, #508]	; (8004bcc <HAL_RCC_OscConfig+0x4c8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a7e      	ldr	r2, [pc, #504]	; (8004bcc <HAL_RCC_OscConfig+0x4c8>)
 80049d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049da:	f7fc ff91 	bl	8001900 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e2:	f7fc ff8d 	bl	8001900 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b64      	cmp	r3, #100	; 0x64
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e103      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f4:	4b75      	ldr	r3, [pc, #468]	; (8004bcc <HAL_RCC_OscConfig+0x4c8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d106      	bne.n	8004a16 <HAL_RCC_OscConfig+0x312>
 8004a08:	4b6f      	ldr	r3, [pc, #444]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	4a6e      	ldr	r2, [pc, #440]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	6213      	str	r3, [r2, #32]
 8004a14:	e02d      	b.n	8004a72 <HAL_RCC_OscConfig+0x36e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x334>
 8004a1e:	4b6a      	ldr	r3, [pc, #424]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	4a69      	ldr	r2, [pc, #420]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	6213      	str	r3, [r2, #32]
 8004a2a:	4b67      	ldr	r3, [pc, #412]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	4a66      	ldr	r2, [pc, #408]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a30:	f023 0304 	bic.w	r3, r3, #4
 8004a34:	6213      	str	r3, [r2, #32]
 8004a36:	e01c      	b.n	8004a72 <HAL_RCC_OscConfig+0x36e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	2b05      	cmp	r3, #5
 8004a3e:	d10c      	bne.n	8004a5a <HAL_RCC_OscConfig+0x356>
 8004a40:	4b61      	ldr	r3, [pc, #388]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	4a60      	ldr	r2, [pc, #384]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a46:	f043 0304 	orr.w	r3, r3, #4
 8004a4a:	6213      	str	r3, [r2, #32]
 8004a4c:	4b5e      	ldr	r3, [pc, #376]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	4a5d      	ldr	r2, [pc, #372]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	6213      	str	r3, [r2, #32]
 8004a58:	e00b      	b.n	8004a72 <HAL_RCC_OscConfig+0x36e>
 8004a5a:	4b5b      	ldr	r3, [pc, #364]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	4a5a      	ldr	r2, [pc, #360]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a60:	f023 0301 	bic.w	r3, r3, #1
 8004a64:	6213      	str	r3, [r2, #32]
 8004a66:	4b58      	ldr	r3, [pc, #352]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	4a57      	ldr	r2, [pc, #348]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a6c:	f023 0304 	bic.w	r3, r3, #4
 8004a70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d015      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7a:	f7fc ff41 	bl	8001900 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a80:	e00a      	b.n	8004a98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fc ff3d 	bl	8001900 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e0b1      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a98:	4b4b      	ldr	r3, [pc, #300]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0ee      	beq.n	8004a82 <HAL_RCC_OscConfig+0x37e>
 8004aa4:	e014      	b.n	8004ad0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa6:	f7fc ff2b 	bl	8001900 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aac:	e00a      	b.n	8004ac4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aae:	f7fc ff27 	bl	8001900 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e09b      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac4:	4b40      	ldr	r3, [pc, #256]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1ee      	bne.n	8004aae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d105      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ad6:	4b3c      	ldr	r3, [pc, #240]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	4a3b      	ldr	r2, [pc, #236]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 8087 	beq.w	8004bfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aec:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d061      	beq.n	8004bbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d146      	bne.n	8004b8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b00:	4b33      	ldr	r3, [pc, #204]	; (8004bd0 <HAL_RCC_OscConfig+0x4cc>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b06:	f7fc fefb 	bl	8001900 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0e:	f7fc fef7 	bl	8001900 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e06d      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b20:	4b29      	ldr	r3, [pc, #164]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1f0      	bne.n	8004b0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b34:	d108      	bne.n	8004b48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b36:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	4921      	ldr	r1, [pc, #132]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b48:	4b1f      	ldr	r3, [pc, #124]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a19      	ldr	r1, [r3, #32]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	491b      	ldr	r1, [pc, #108]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b60:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <HAL_RCC_OscConfig+0x4cc>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b66:	f7fc fecb 	bl	8001900 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6e:	f7fc fec7 	bl	8001900 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e03d      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b80:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCC_OscConfig+0x46a>
 8004b8c:	e035      	b.n	8004bfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8e:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <HAL_RCC_OscConfig+0x4cc>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7fc feb4 	bl	8001900 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fc feb0 	bl	8001900 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e026      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <HAL_RCC_OscConfig+0x4c4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x498>
 8004bba:	e01e      	b.n	8004bfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d107      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e019      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40007000 	.word	0x40007000
 8004bd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <HAL_RCC_OscConfig+0x500>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d106      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d001      	beq.n	8004bfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40021000 	.word	0x40021000

08004c08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0d0      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c1c:	4b6a      	ldr	r3, [pc, #424]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d910      	bls.n	8004c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2a:	4b67      	ldr	r3, [pc, #412]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f023 0207 	bic.w	r2, r3, #7
 8004c32:	4965      	ldr	r1, [pc, #404]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3a:	4b63      	ldr	r3, [pc, #396]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d001      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0b8      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d020      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c64:	4b59      	ldr	r3, [pc, #356]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4a58      	ldr	r2, [pc, #352]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004c6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c7c:	4b53      	ldr	r3, [pc, #332]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	4a52      	ldr	r2, [pc, #328]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004c82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c88:	4b50      	ldr	r3, [pc, #320]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	494d      	ldr	r1, [pc, #308]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d040      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cae:	4b47      	ldr	r3, [pc, #284]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d115      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e07f      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d107      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc6:	4b41      	ldr	r3, [pc, #260]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e073      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd6:	4b3d      	ldr	r3, [pc, #244]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e06b      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ce6:	4b39      	ldr	r3, [pc, #228]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f023 0203 	bic.w	r2, r3, #3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	4936      	ldr	r1, [pc, #216]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cf8:	f7fc fe02 	bl	8001900 <HAL_GetTick>
 8004cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfe:	e00a      	b.n	8004d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d00:	f7fc fdfe 	bl	8001900 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e053      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d16:	4b2d      	ldr	r3, [pc, #180]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f003 020c 	and.w	r2, r3, #12
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d1eb      	bne.n	8004d00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d28:	4b27      	ldr	r3, [pc, #156]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d210      	bcs.n	8004d58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 0207 	bic.w	r2, r3, #7
 8004d3e:	4922      	ldr	r1, [pc, #136]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d46:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d001      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e032      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d008      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d64:	4b19      	ldr	r3, [pc, #100]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4916      	ldr	r1, [pc, #88]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d82:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	490e      	ldr	r1, [pc, #56]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d96:	f000 f821 	bl	8004ddc <HAL_RCC_GetSysClockFreq>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	091b      	lsrs	r3, r3, #4
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	490a      	ldr	r1, [pc, #40]	; (8004dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004da8:	5ccb      	ldrb	r3, [r1, r3]
 8004daa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dae:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <HAL_RCC_ClockConfig+0x1cc>)
 8004db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <HAL_RCC_ClockConfig+0x1d0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fc fc9c 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40022000 	.word	0x40022000
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	0800d2c4 	.word	0x0800d2c4
 8004dd4:	20000000 	.word	0x20000000
 8004dd8:	20000004 	.word	0x20000004

08004ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	2300      	movs	r3, #0
 8004de8:	60bb      	str	r3, [r7, #8]
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	2300      	movs	r3, #0
 8004df0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004df6:	4b1e      	ldr	r3, [pc, #120]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f003 030c 	and.w	r3, r3, #12
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d002      	beq.n	8004e0c <HAL_RCC_GetSysClockFreq+0x30>
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d003      	beq.n	8004e12 <HAL_RCC_GetSysClockFreq+0x36>
 8004e0a:	e027      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e0c:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e0e:	613b      	str	r3, [r7, #16]
      break;
 8004e10:	e027      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	0c9b      	lsrs	r3, r3, #18
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e1c:	5cd3      	ldrb	r3, [r2, r3]
 8004e1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d010      	beq.n	8004e4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e2a:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	0c5b      	lsrs	r3, r3, #17
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	4a11      	ldr	r2, [pc, #68]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e36:	5cd3      	ldrb	r3, [r2, r3]
 8004e38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a0d      	ldr	r2, [pc, #52]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e3e:	fb03 f202 	mul.w	r2, r3, r2
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	e004      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a0c      	ldr	r2, [pc, #48]	; (8004e80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e50:	fb02 f303 	mul.w	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	613b      	str	r3, [r7, #16]
      break;
 8004e5a:	e002      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e5c:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004e5e:	613b      	str	r3, [r7, #16]
      break;
 8004e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e62:	693b      	ldr	r3, [r7, #16]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40021000 	.word	0x40021000
 8004e74:	00f42400 	.word	0x00f42400
 8004e78:	0800d2dc 	.word	0x0800d2dc
 8004e7c:	0800d2ec 	.word	0x0800d2ec
 8004e80:	003d0900 	.word	0x003d0900
 8004e84:	007a1200 	.word	0x007a1200

08004e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e8c:	4b02      	ldr	r3, [pc, #8]	; (8004e98 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr
 8004e98:	20000000 	.word	0x20000000

08004e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ea0:	f7ff fff2 	bl	8004e88 <HAL_RCC_GetHCLKFreq>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	4903      	ldr	r1, [pc, #12]	; (8004ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eb2:	5ccb      	ldrb	r3, [r1, r3]
 8004eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	0800d2d4 	.word	0x0800d2d4

08004ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ec8:	f7ff ffde 	bl	8004e88 <HAL_RCC_GetHCLKFreq>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	0adb      	lsrs	r3, r3, #11
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	4903      	ldr	r1, [pc, #12]	; (8004ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eda:	5ccb      	ldrb	r3, [r1, r3]
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	0800d2d4 	.word	0x0800d2d4

08004eec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	220f      	movs	r2, #15
 8004efa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004efc:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <HAL_RCC_GetClockConfig+0x58>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f003 0203 	and.w	r2, r3, #3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f08:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <HAL_RCC_GetClockConfig+0x58>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f14:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <HAL_RCC_GetClockConfig+0x58>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004f20:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <HAL_RCC_GetClockConfig+0x58>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	08db      	lsrs	r3, r3, #3
 8004f26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f2e:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <HAL_RCC_GetClockConfig+0x5c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0207 	and.w	r2, r3, #7
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	40021000 	.word	0x40021000
 8004f48:	40022000 	.word	0x40022000

08004f4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f54:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <RCC_Delay+0x34>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a0a      	ldr	r2, [pc, #40]	; (8004f84 <RCC_Delay+0x38>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	0a5b      	lsrs	r3, r3, #9
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f68:	bf00      	nop
  }
  while (Delay --);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1e5a      	subs	r2, r3, #1
 8004f6e:	60fa      	str	r2, [r7, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f9      	bne.n	8004f68 <RCC_Delay+0x1c>
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr
 8004f80:	20000000 	.word	0x20000000
 8004f84:	10624dd3 	.word	0x10624dd3

08004f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d07d      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa8:	4b4f      	ldr	r3, [pc, #316]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10d      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb4:	4b4c      	ldr	r3, [pc, #304]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	4a4b      	ldr	r2, [pc, #300]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	61d3      	str	r3, [r2, #28]
 8004fc0:	4b49      	ldr	r3, [pc, #292]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd0:	4b46      	ldr	r3, [pc, #280]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d118      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fdc:	4b43      	ldr	r3, [pc, #268]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a42      	ldr	r2, [pc, #264]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe8:	f7fc fc8a 	bl	8001900 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fee:	e008      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff0:	f7fc fc86 	bl	8001900 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b64      	cmp	r3, #100	; 0x64
 8004ffc:	d901      	bls.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e06d      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005002:	4b3a      	ldr	r3, [pc, #232]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800500e:	4b36      	ldr	r3, [pc, #216]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005016:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d02e      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	429a      	cmp	r2, r3
 800502a:	d027      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800502c:	4b2e      	ldr	r3, [pc, #184]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005034:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005036:	4b2e      	ldr	r3, [pc, #184]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005038:	2201      	movs	r2, #1
 800503a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800503c:	4b2c      	ldr	r3, [pc, #176]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005042:	4a29      	ldr	r2, [pc, #164]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d014      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005052:	f7fc fc55 	bl	8001900 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005058:	e00a      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505a:	f7fc fc51 	bl	8001900 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f241 3288 	movw	r2, #5000	; 0x1388
 8005068:	4293      	cmp	r3, r2
 800506a:	d901      	bls.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e036      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005070:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0ee      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800507c:	4b1a      	ldr	r3, [pc, #104]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	4917      	ldr	r1, [pc, #92]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800508a:	4313      	orrs	r3, r2
 800508c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800508e:	7dfb      	ldrb	r3, [r7, #23]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d105      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005094:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	4a13      	ldr	r2, [pc, #76]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800509a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800509e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050ac:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	490b      	ldr	r1, [pc, #44]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d008      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ca:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	4904      	ldr	r1, [pc, #16]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40021000 	.word	0x40021000
 80050ec:	40007000 	.word	0x40007000
 80050f0:	42420440 	.word	0x42420440

080050f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e041      	b.n	800518a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d106      	bne.n	8005120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f839 	bl	8005192 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f000 fb68 	bl	8005808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d001      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e03a      	b.n	8005232 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a18      	ldr	r2, [pc, #96]	; (800523c <HAL_TIM_Base_Start_IT+0x98>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00e      	beq.n	80051fc <HAL_TIM_Base_Start_IT+0x58>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e6:	d009      	beq.n	80051fc <HAL_TIM_Base_Start_IT+0x58>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a14      	ldr	r2, [pc, #80]	; (8005240 <HAL_TIM_Base_Start_IT+0x9c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d004      	beq.n	80051fc <HAL_TIM_Base_Start_IT+0x58>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a13      	ldr	r2, [pc, #76]	; (8005244 <HAL_TIM_Base_Start_IT+0xa0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d111      	bne.n	8005220 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b06      	cmp	r3, #6
 800520c:	d010      	beq.n	8005230 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0201 	orr.w	r2, r2, #1
 800521c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521e:	e007      	b.n	8005230 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr
 800523c:	40012c00 	.word	0x40012c00
 8005240:	40000400 	.word	0x40000400
 8005244:	40000800 	.word	0x40000800

08005248 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e041      	b.n	80052de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fc f928 	bl	80014c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f000 fabe 	bl	8005808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d109      	bne.n	800530c <HAL_TIM_PWM_Start+0x24>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	bf14      	ite	ne
 8005304:	2301      	movne	r3, #1
 8005306:	2300      	moveq	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	e022      	b.n	8005352 <HAL_TIM_PWM_Start+0x6a>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b04      	cmp	r3, #4
 8005310:	d109      	bne.n	8005326 <HAL_TIM_PWM_Start+0x3e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b01      	cmp	r3, #1
 800531c:	bf14      	ite	ne
 800531e:	2301      	movne	r3, #1
 8005320:	2300      	moveq	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	e015      	b.n	8005352 <HAL_TIM_PWM_Start+0x6a>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b08      	cmp	r3, #8
 800532a:	d109      	bne.n	8005340 <HAL_TIM_PWM_Start+0x58>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	bf14      	ite	ne
 8005338:	2301      	movne	r3, #1
 800533a:	2300      	moveq	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	e008      	b.n	8005352 <HAL_TIM_PWM_Start+0x6a>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	bf14      	ite	ne
 800534c:	2301      	movne	r3, #1
 800534e:	2300      	moveq	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e05e      	b.n	8005418 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d104      	bne.n	800536a <HAL_TIM_PWM_Start+0x82>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005368:	e013      	b.n	8005392 <HAL_TIM_PWM_Start+0xaa>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b04      	cmp	r3, #4
 800536e:	d104      	bne.n	800537a <HAL_TIM_PWM_Start+0x92>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005378:	e00b      	b.n	8005392 <HAL_TIM_PWM_Start+0xaa>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b08      	cmp	r3, #8
 800537e:	d104      	bne.n	800538a <HAL_TIM_PWM_Start+0xa2>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005388:	e003      	b.n	8005392 <HAL_TIM_PWM_Start+0xaa>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2201      	movs	r2, #1
 8005398:	6839      	ldr	r1, [r7, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fc1e 	bl	8005bdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <HAL_TIM_PWM_Start+0x138>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d107      	bne.n	80053ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a18      	ldr	r2, [pc, #96]	; (8005420 <HAL_TIM_PWM_Start+0x138>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00e      	beq.n	80053e2 <HAL_TIM_PWM_Start+0xfa>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d009      	beq.n	80053e2 <HAL_TIM_PWM_Start+0xfa>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a14      	ldr	r2, [pc, #80]	; (8005424 <HAL_TIM_PWM_Start+0x13c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d004      	beq.n	80053e2 <HAL_TIM_PWM_Start+0xfa>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a12      	ldr	r2, [pc, #72]	; (8005428 <HAL_TIM_PWM_Start+0x140>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d111      	bne.n	8005406 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b06      	cmp	r3, #6
 80053f2:	d010      	beq.n	8005416 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005404:	e007      	b.n	8005416 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0201 	orr.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800

0800542c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b02      	cmp	r3, #2
 8005440:	d122      	bne.n	8005488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b02      	cmp	r3, #2
 800544e:	d11b      	bne.n	8005488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0202 	mvn.w	r2, #2
 8005458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f9af 	bl	80057d2 <HAL_TIM_IC_CaptureCallback>
 8005474:	e005      	b.n	8005482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f9a2 	bl	80057c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f9b1 	bl	80057e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b04      	cmp	r3, #4
 8005494:	d122      	bne.n	80054dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d11b      	bne.n	80054dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0204 	mvn.w	r2, #4
 80054ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f985 	bl	80057d2 <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f978 	bl	80057c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f987 	bl	80057e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d122      	bne.n	8005530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d11b      	bne.n	8005530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0208 	mvn.w	r2, #8
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2204      	movs	r2, #4
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f95b 	bl	80057d2 <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f94e 	bl	80057c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f95d 	bl	80057e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	2b10      	cmp	r3, #16
 800553c:	d122      	bne.n	8005584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b10      	cmp	r3, #16
 800554a:	d11b      	bne.n	8005584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0210 	mvn.w	r2, #16
 8005554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2208      	movs	r2, #8
 800555a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f931 	bl	80057d2 <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f924 	bl	80057c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f933 	bl	80057e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b01      	cmp	r3, #1
 8005590:	d10e      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d107      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0201 	mvn.w	r2, #1
 80055a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fb fe68 	bl	8001280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ba:	2b80      	cmp	r3, #128	; 0x80
 80055bc:	d10e      	bne.n	80055dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c8:	2b80      	cmp	r3, #128	; 0x80
 80055ca:	d107      	bne.n	80055dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fbdc 	bl	8005d94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b40      	cmp	r3, #64	; 0x40
 80055e8:	d10e      	bne.n	8005608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f4:	2b40      	cmp	r3, #64	; 0x40
 80055f6:	d107      	bne.n	8005608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f8f7 	bl	80057f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b20      	cmp	r3, #32
 8005614:	d10e      	bne.n	8005634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b20      	cmp	r3, #32
 8005622:	d107      	bne.n	8005634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0220 	mvn.w	r2, #32
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fba7 	bl	8005d82 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005634:	bf00      	nop
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005656:	2302      	movs	r3, #2
 8005658:	e0ae      	b.n	80057b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b0c      	cmp	r3, #12
 8005666:	f200 809f 	bhi.w	80057a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800566a:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	080056a5 	.word	0x080056a5
 8005674:	080057a9 	.word	0x080057a9
 8005678:	080057a9 	.word	0x080057a9
 800567c:	080057a9 	.word	0x080057a9
 8005680:	080056e5 	.word	0x080056e5
 8005684:	080057a9 	.word	0x080057a9
 8005688:	080057a9 	.word	0x080057a9
 800568c:	080057a9 	.word	0x080057a9
 8005690:	08005727 	.word	0x08005727
 8005694:	080057a9 	.word	0x080057a9
 8005698:	080057a9 	.word	0x080057a9
 800569c:	080057a9 	.word	0x080057a9
 80056a0:	08005767 	.word	0x08005767
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 f90e 	bl	80058cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0208 	orr.w	r2, r2, #8
 80056be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0204 	bic.w	r2, r2, #4
 80056ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6999      	ldr	r1, [r3, #24]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	619a      	str	r2, [r3, #24]
      break;
 80056e2:	e064      	b.n	80057ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 f954 	bl	8005998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699a      	ldr	r2, [r3, #24]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800570e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6999      	ldr	r1, [r3, #24]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	021a      	lsls	r2, r3, #8
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	619a      	str	r2, [r3, #24]
      break;
 8005724:	e043      	b.n	80057ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	4618      	mov	r0, r3
 800572e:	f000 f99d 	bl	8005a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0208 	orr.w	r2, r2, #8
 8005740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0204 	bic.w	r2, r2, #4
 8005750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69d9      	ldr	r1, [r3, #28]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	61da      	str	r2, [r3, #28]
      break;
 8005764:	e023      	b.n	80057ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	4618      	mov	r0, r3
 800576e:	f000 f9e7 	bl	8005b40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69da      	ldr	r2, [r3, #28]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69d9      	ldr	r1, [r3, #28]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	021a      	lsls	r2, r3, #8
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	61da      	str	r2, [r3, #28]
      break;
 80057a6:	e002      	b.n	80057ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	75fb      	strb	r3, [r7, #23]
      break;
 80057ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr

080057f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr

08005808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a29      	ldr	r2, [pc, #164]	; (80058c0 <TIM_Base_SetConfig+0xb8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00b      	beq.n	8005838 <TIM_Base_SetConfig+0x30>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005826:	d007      	beq.n	8005838 <TIM_Base_SetConfig+0x30>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a26      	ldr	r2, [pc, #152]	; (80058c4 <TIM_Base_SetConfig+0xbc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_Base_SetConfig+0x30>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a25      	ldr	r2, [pc, #148]	; (80058c8 <TIM_Base_SetConfig+0xc0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d108      	bne.n	800584a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a1c      	ldr	r2, [pc, #112]	; (80058c0 <TIM_Base_SetConfig+0xb8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00b      	beq.n	800586a <TIM_Base_SetConfig+0x62>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005858:	d007      	beq.n	800586a <TIM_Base_SetConfig+0x62>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a19      	ldr	r2, [pc, #100]	; (80058c4 <TIM_Base_SetConfig+0xbc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d003      	beq.n	800586a <TIM_Base_SetConfig+0x62>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a18      	ldr	r2, [pc, #96]	; (80058c8 <TIM_Base_SetConfig+0xc0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d108      	bne.n	800587c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a07      	ldr	r2, [pc, #28]	; (80058c0 <TIM_Base_SetConfig+0xb8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d103      	bne.n	80058b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	615a      	str	r2, [r3, #20]
}
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bc80      	pop	{r7}
 80058be:	4770      	bx	lr
 80058c0:	40012c00 	.word	0x40012c00
 80058c4:	40000400 	.word	0x40000400
 80058c8:	40000800 	.word	0x40000800

080058cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	f023 0201 	bic.w	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0303 	bic.w	r3, r3, #3
 8005902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f023 0302 	bic.w	r3, r3, #2
 8005914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a1c      	ldr	r2, [pc, #112]	; (8005994 <TIM_OC1_SetConfig+0xc8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d10c      	bne.n	8005942 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f023 0308 	bic.w	r3, r3, #8
 800592e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f023 0304 	bic.w	r3, r3, #4
 8005940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a13      	ldr	r2, [pc, #76]	; (8005994 <TIM_OC1_SetConfig+0xc8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d111      	bne.n	800596e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	621a      	str	r2, [r3, #32]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40012c00 	.word	0x40012c00

08005998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	f023 0210 	bic.w	r2, r3, #16
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	021b      	lsls	r3, r3, #8
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f023 0320 	bic.w	r3, r3, #32
 80059e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a1d      	ldr	r2, [pc, #116]	; (8005a68 <TIM_OC2_SetConfig+0xd0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d10d      	bne.n	8005a14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	011b      	lsls	r3, r3, #4
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a14      	ldr	r2, [pc, #80]	; (8005a68 <TIM_OC2_SetConfig+0xd0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d113      	bne.n	8005a44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr
 8005a68:	40012c00 	.word	0x40012c00

08005a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	021b      	lsls	r3, r3, #8
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a1d      	ldr	r2, [pc, #116]	; (8005b3c <TIM_OC3_SetConfig+0xd0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d10d      	bne.n	8005ae6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a14      	ldr	r2, [pc, #80]	; (8005b3c <TIM_OC3_SetConfig+0xd0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d113      	bne.n	8005b16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	621a      	str	r2, [r3, #32]
}
 8005b30:	bf00      	nop
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40012c00 	.word	0x40012c00

08005b40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	031b      	lsls	r3, r3, #12
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a0f      	ldr	r2, [pc, #60]	; (8005bd8 <TIM_OC4_SetConfig+0x98>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d109      	bne.n	8005bb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	019b      	lsls	r3, r3, #6
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr
 8005bd8:	40012c00 	.word	0x40012c00

08005bdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	2201      	movs	r2, #1
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a1a      	ldr	r2, [r3, #32]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	401a      	ands	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a1a      	ldr	r2, [r3, #32]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f003 031f 	and.w	r3, r3, #31
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	fa01 f303 	lsl.w	r3, r1, r3
 8005c14:	431a      	orrs	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr

08005c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d101      	bne.n	8005c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e046      	b.n	8005cca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a16      	ldr	r2, [pc, #88]	; (8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00e      	beq.n	8005c9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c88:	d009      	beq.n	8005c9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a12      	ldr	r2, [pc, #72]	; (8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a10      	ldr	r2, [pc, #64]	; (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d10c      	bne.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800

08005ce0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e03d      	b.n	8005d78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr

08005d82 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr

08005d94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr

08005da6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b082      	sub	sp, #8
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e042      	b.n	8005e3e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fb fc31 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2224      	movs	r2, #36	; 0x24
 8005dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005de8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f82c 	bl	8005e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dfe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e0e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e1e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005e82:	f023 030c 	bic.w	r3, r3, #12
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2c      	ldr	r2, [pc, #176]	; (8005f5c <UART_SetConfig+0x114>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d103      	bne.n	8005eb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005eb0:	f7ff f808 	bl	8004ec4 <HAL_RCC_GetPCLK2Freq>
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	e002      	b.n	8005ebe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005eb8:	f7fe fff0 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 8005ebc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009a      	lsls	r2, r3, #2
 8005ec8:	441a      	add	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed4:	4a22      	ldr	r2, [pc, #136]	; (8005f60 <UART_SetConfig+0x118>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	0119      	lsls	r1, r3, #4
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009a      	lsls	r2, r3, #2
 8005ee8:	441a      	add	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef4:	4b1a      	ldr	r3, [pc, #104]	; (8005f60 <UART_SetConfig+0x118>)
 8005ef6:	fba3 0302 	umull	r0, r3, r3, r2
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	2064      	movs	r0, #100	; 0x64
 8005efe:	fb00 f303 	mul.w	r3, r0, r3
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	3332      	adds	r3, #50	; 0x32
 8005f08:	4a15      	ldr	r2, [pc, #84]	; (8005f60 <UART_SetConfig+0x118>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f14:	4419      	add	r1, r3
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009a      	lsls	r2, r3, #2
 8005f20:	441a      	add	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f2c:	4b0c      	ldr	r3, [pc, #48]	; (8005f60 <UART_SetConfig+0x118>)
 8005f2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	2064      	movs	r0, #100	; 0x64
 8005f36:	fb00 f303 	mul.w	r3, r0, r3
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	3332      	adds	r3, #50	; 0x32
 8005f40:	4a07      	ldr	r2, [pc, #28]	; (8005f60 <UART_SetConfig+0x118>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	f003 020f 	and.w	r2, r3, #15
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	440a      	add	r2, r1
 8005f52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f54:	bf00      	nop
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40013800 	.word	0x40013800
 8005f60:	51eb851f 	.word	0x51eb851f

08005f64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f64:	b084      	sub	sp, #16
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	f107 0014 	add.w	r0, r7, #20
 8005f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	b004      	add	sp, #16
 8005f82:	4770      	bx	lr

08005f84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f94:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005f98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr

08005fb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fb8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005fbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	4013      	ands	r3, r2
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr

08005fe4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bc80      	pop	{r7}
 8005ffa:	4770      	bx	lr

08005ffc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	f107 0014 	add.w	r0, r7, #20
 800600a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	b004      	add	sp, #16
 800603a:	4770      	bx	lr

0800603c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800603c:	b480      	push	{r7}
 800603e:	b09d      	sub	sp, #116	; 0x74
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006062:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	78db      	ldrb	r3, [r3, #3]
 800606a:	2b03      	cmp	r3, #3
 800606c:	d81f      	bhi.n	80060ae <USB_ActivateEndpoint+0x72>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <USB_ActivateEndpoint+0x38>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	08006085 	.word	0x08006085
 8006078:	080060a1 	.word	0x080060a1
 800607c:	080060b7 	.word	0x080060b7
 8006080:	08006093 	.word	0x08006093
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006084:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006088:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800608c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006090:	e012      	b.n	80060b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006092:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006096:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800609a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800609e:	e00b      	b.n	80060b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80060a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80060a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80060ac:	e004      	b.n	80060b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80060b4:	e000      	b.n	80060b8 <USB_ActivateEndpoint+0x7c>
      break;
 80060b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	441a      	add	r2, r3
 80060c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80060c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	441a      	add	r2, r3
 8006108:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800610c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611c:	b29b      	uxth	r3, r3
 800611e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	7b1b      	ldrb	r3, [r3, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f040 8178 	bne.w	800641a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	785b      	ldrb	r3, [r3, #1]
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 8084 	beq.w	800623c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	61bb      	str	r3, [r7, #24]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800613e:	b29b      	uxth	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	4413      	add	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	011a      	lsls	r2, r3, #4
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	88db      	ldrh	r3, [r3, #6]
 800615c:	085b      	lsrs	r3, r3, #1
 800615e:	b29b      	uxth	r3, r3
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	827b      	strh	r3, [r7, #18]
 8006176:	8a7b      	ldrh	r3, [r7, #18]
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01b      	beq.n	80061b8 <USB_ActivateEndpoint+0x17c>
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	823b      	strh	r3, [r7, #16]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	441a      	add	r2, r3
 80061a2:	8a3b      	ldrh	r3, [r7, #16]
 80061a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	78db      	ldrb	r3, [r3, #3]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d020      	beq.n	8006202 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d6:	81bb      	strh	r3, [r7, #12]
 80061d8:	89bb      	ldrh	r3, [r7, #12]
 80061da:	f083 0320 	eor.w	r3, r3, #32
 80061de:	81bb      	strh	r3, [r7, #12]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	441a      	add	r2, r3
 80061ea:	89bb      	ldrh	r3, [r7, #12]
 80061ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	8013      	strh	r3, [r2, #0]
 8006200:	e2d5      	b.n	80067ae <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006218:	81fb      	strh	r3, [r7, #14]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	441a      	add	r2, r3
 8006224:	89fb      	ldrh	r3, [r7, #14]
 8006226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006236:	b29b      	uxth	r3, r3
 8006238:	8013      	strh	r3, [r2, #0]
 800623a:	e2b8      	b.n	80067ae <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	633b      	str	r3, [r7, #48]	; 0x30
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006246:	b29b      	uxth	r3, r3
 8006248:	461a      	mov	r2, r3
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	4413      	add	r3, r2
 800624e:	633b      	str	r3, [r7, #48]	; 0x30
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	011a      	lsls	r2, r3, #4
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	4413      	add	r3, r2
 800625a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800625e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	88db      	ldrh	r3, [r3, #6]
 8006264:	085b      	lsrs	r3, r3, #1
 8006266:	b29b      	uxth	r3, r3
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	62bb      	str	r3, [r7, #40]	; 0x28
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800627a:	b29b      	uxth	r3, r3
 800627c:	461a      	mov	r2, r3
 800627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006280:	4413      	add	r3, r2
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	011a      	lsls	r2, r3, #4
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	4413      	add	r3, r2
 800628e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800629e:	b29a      	uxth	r2, r3
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	2b3e      	cmp	r3, #62	; 0x3e
 80062aa:	d91d      	bls.n	80062e8 <USB_ActivateEndpoint+0x2ac>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d102      	bne.n	80062c6 <USB_ActivateEndpoint+0x28a>
 80062c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062c2:	3b01      	subs	r3, #1
 80062c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	029b      	lsls	r3, r3, #10
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	4313      	orrs	r3, r2
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	801a      	strh	r2, [r3, #0]
 80062e6:	e026      	b.n	8006336 <USB_ActivateEndpoint+0x2fa>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <USB_ActivateEndpoint+0x2ca>
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062fe:	b29a      	uxth	r2, r3
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	801a      	strh	r2, [r3, #0]
 8006304:	e017      	b.n	8006336 <USB_ActivateEndpoint+0x2fa>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	66bb      	str	r3, [r7, #104]	; 0x68
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <USB_ActivateEndpoint+0x2e4>
 800631a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800631c:	3301      	adds	r3, #1
 800631e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	b29a      	uxth	r2, r3
 8006326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006328:	b29b      	uxth	r3, r3
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	b29b      	uxth	r3, r3
 800632e:	4313      	orrs	r3, r2
 8006330:	b29a      	uxth	r2, r3
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	847b      	strh	r3, [r7, #34]	; 0x22
 8006344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d01b      	beq.n	8006386 <USB_ActivateEndpoint+0x34a>
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006364:	843b      	strh	r3, [r7, #32]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	441a      	add	r2, r3
 8006370:	8c3b      	ldrh	r3, [r7, #32]
 8006372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800637e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006382:	b29b      	uxth	r3, r3
 8006384:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d124      	bne.n	80063d8 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a4:	83bb      	strh	r3, [r7, #28]
 80063a6:	8bbb      	ldrh	r3, [r7, #28]
 80063a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063ac:	83bb      	strh	r3, [r7, #28]
 80063ae:	8bbb      	ldrh	r3, [r7, #28]
 80063b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063b4:	83bb      	strh	r3, [r7, #28]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	441a      	add	r2, r3
 80063c0:	8bbb      	ldrh	r3, [r7, #28]
 80063c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	8013      	strh	r3, [r2, #0]
 80063d6:	e1ea      	b.n	80067ae <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ee:	83fb      	strh	r3, [r7, #30]
 80063f0:	8bfb      	ldrh	r3, [r7, #30]
 80063f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063f6:	83fb      	strh	r3, [r7, #30]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	441a      	add	r2, r3
 8006402:	8bfb      	ldrh	r3, [r7, #30]
 8006404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800640c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006414:	b29b      	uxth	r3, r3
 8006416:	8013      	strh	r3, [r2, #0]
 8006418:	e1c9      	b.n	80067ae <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	78db      	ldrb	r3, [r3, #3]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d11e      	bne.n	8006460 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006438:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	441a      	add	r2, r3
 8006446:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800644a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006452:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645a:	b29b      	uxth	r3, r3
 800645c:	8013      	strh	r3, [r2, #0]
 800645e:	e01d      	b.n	800649c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	b29b      	uxth	r3, r3
 800646e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006476:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	441a      	add	r2, r3
 8006484:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800648c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006498:	b29b      	uxth	r3, r3
 800649a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	461a      	mov	r2, r3
 80064aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ac:	4413      	add	r3, r2
 80064ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	011a      	lsls	r2, r3, #4
 80064b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064be:	65bb      	str	r3, [r7, #88]	; 0x58
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	891b      	ldrh	r3, [r3, #8]
 80064c4:	085b      	lsrs	r3, r3, #1
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064ce:	801a      	strh	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	657b      	str	r3, [r7, #84]	; 0x54
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064da:	b29b      	uxth	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064e0:	4413      	add	r3, r2
 80064e2:	657b      	str	r3, [r7, #84]	; 0x54
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	011a      	lsls	r2, r3, #4
 80064ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80064f2:	653b      	str	r3, [r7, #80]	; 0x50
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	895b      	ldrh	r3, [r3, #10]
 80064f8:	085b      	lsrs	r3, r3, #1
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006502:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	785b      	ldrb	r3, [r3, #1]
 8006508:	2b00      	cmp	r3, #0
 800650a:	f040 8093 	bne.w	8006634 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800651e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d01b      	beq.n	8006562 <USB_ActivateEndpoint+0x526>
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006540:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	441a      	add	r2, r3
 800654c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800654e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800655a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655e:	b29b      	uxth	r3, r3
 8006560:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006570:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d01b      	beq.n	80065b2 <USB_ActivateEndpoint+0x576>
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006590:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	441a      	add	r2, r3
 800659c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800659e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80065ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80065cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80065d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80065d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	441a      	add	r2, r3
 80065e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80065e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	b29b      	uxth	r3, r3
 8006608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800660c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006610:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	441a      	add	r2, r3
 800661c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800661e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800662a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800662e:	b29b      	uxth	r3, r3
 8006630:	8013      	strh	r3, [r2, #0]
 8006632:	e0bc      	b.n	80067ae <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006644:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01d      	beq.n	800668c <USB_ActivateEndpoint+0x650>
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006666:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	441a      	add	r2, r3
 8006674:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006680:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006688:	b29b      	uxth	r3, r3
 800668a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800669c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80066a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01d      	beq.n	80066e4 <USB_ActivateEndpoint+0x6a8>
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	441a      	add	r2, r3
 80066cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	78db      	ldrb	r3, [r3, #3]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d024      	beq.n	8006736 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006702:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006706:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800670a:	f083 0320 	eor.w	r3, r3, #32
 800670e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	441a      	add	r2, r3
 800671c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006730:	b29b      	uxth	r3, r3
 8006732:	8013      	strh	r3, [r2, #0]
 8006734:	e01d      	b.n	8006772 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800674c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	441a      	add	r2, r3
 800675a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800675e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800676a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676e:	b29b      	uxth	r3, r3
 8006770:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	b29b      	uxth	r3, r3
 8006780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006788:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	441a      	add	r2, r3
 8006796:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800679a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80067ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3774      	adds	r7, #116	; 0x74
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr

080067bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067bc:	b480      	push	{r7}
 80067be:	b08d      	sub	sp, #52	; 0x34
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	7b1b      	ldrb	r3, [r3, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f040 808e 	bne.w	80068ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d044      	beq.n	8006862 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	81bb      	strh	r3, [r7, #12]
 80067e6:	89bb      	ldrh	r3, [r7, #12]
 80067e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01b      	beq.n	8006828 <USB_DeactivateEndpoint+0x6c>
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006806:	817b      	strh	r3, [r7, #10]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	441a      	add	r2, r3
 8006812:	897b      	ldrh	r3, [r7, #10]
 8006814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006820:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006824:	b29b      	uxth	r3, r3
 8006826:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	b29b      	uxth	r3, r3
 8006836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800683e:	813b      	strh	r3, [r7, #8]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	441a      	add	r2, r3
 800684a:	893b      	ldrh	r3, [r7, #8]
 800684c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685c:	b29b      	uxth	r3, r3
 800685e:	8013      	strh	r3, [r2, #0]
 8006860:	e192      	b.n	8006b88 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	827b      	strh	r3, [r7, #18]
 8006870:	8a7b      	ldrh	r3, [r7, #18]
 8006872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01b      	beq.n	80068b2 <USB_DeactivateEndpoint+0xf6>
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	b29b      	uxth	r3, r3
 8006888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006890:	823b      	strh	r3, [r7, #16]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	441a      	add	r2, r3
 800689c:	8a3b      	ldrh	r3, [r7, #16]
 800689e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c8:	81fb      	strh	r3, [r7, #14]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	441a      	add	r2, r3
 80068d4:	89fb      	ldrh	r3, [r7, #14]
 80068d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8013      	strh	r3, [r2, #0]
 80068ea:	e14d      	b.n	8006b88 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f040 80a5 	bne.w	8006a40 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	843b      	strh	r3, [r7, #32]
 8006904:	8c3b      	ldrh	r3, [r7, #32]
 8006906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01b      	beq.n	8006946 <USB_DeactivateEndpoint+0x18a>
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006924:	83fb      	strh	r3, [r7, #30]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	441a      	add	r2, r3
 8006930:	8bfb      	ldrh	r3, [r7, #30]
 8006932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800693a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800693e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006942:	b29b      	uxth	r3, r3
 8006944:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	83bb      	strh	r3, [r7, #28]
 8006954:	8bbb      	ldrh	r3, [r7, #28]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01b      	beq.n	8006996 <USB_DeactivateEndpoint+0x1da>
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006974:	837b      	strh	r3, [r7, #26]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	441a      	add	r2, r3
 8006980:	8b7b      	ldrh	r3, [r7, #26]
 8006982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006992:	b29b      	uxth	r3, r3
 8006994:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ac:	833b      	strh	r3, [r7, #24]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	441a      	add	r2, r3
 80069b8:	8b3b      	ldrh	r3, [r7, #24]
 80069ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e4:	82fb      	strh	r3, [r7, #22]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	441a      	add	r2, r3
 80069f0:	8afb      	ldrh	r3, [r7, #22]
 80069f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1c:	82bb      	strh	r3, [r7, #20]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	441a      	add	r2, r3
 8006a28:	8abb      	ldrh	r3, [r7, #20]
 8006a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	8013      	strh	r3, [r2, #0]
 8006a3e:	e0a3      	b.n	8006b88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006a4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01b      	beq.n	8006a90 <USB_DeactivateEndpoint+0x2d4>
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	441a      	add	r2, r3
 8006a7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006a9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01b      	beq.n	8006ae0 <USB_DeactivateEndpoint+0x324>
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abe:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	441a      	add	r2, r3
 8006aca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	441a      	add	r2, r3
 8006b02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	441a      	add	r2, r3
 8006b3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b66:	847b      	strh	r3, [r7, #34]	; 0x22
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	441a      	add	r2, r3
 8006b72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3734      	adds	r7, #52	; 0x34
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b0c2      	sub	sp, #264	; 0x108
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba2:	6018      	str	r0, [r3, #0]
 8006ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bac:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	f040 86b7 	bne.w	800792e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d908      	bls.n	8006bee <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006bec:	e007      	b.n	8006bfe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	7b1b      	ldrb	r3, [r3, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d13a      	bne.n	8006c84 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6959      	ldr	r1, [r3, #20]
 8006c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	88da      	ldrh	r2, [r3, #6]
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c30:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c34:	6800      	ldr	r0, [r0, #0]
 8006c36:	f001 fc9c 	bl	8008572 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	613b      	str	r3, [r7, #16]
 8006c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	461a      	mov	r2, r3
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]
 8006c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	011a      	lsls	r2, r3, #4
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	801a      	strh	r2, [r3, #0]
 8006c80:	f000 be1f 	b.w	80078c2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	78db      	ldrb	r3, [r3, #3]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	f040 8462 	bne.w	800755a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6a1a      	ldr	r2, [r3, #32]
 8006ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	f240 83df 	bls.w	8007472 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cda:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	441a      	add	r2, r3
 8006cf8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d04:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6a1a      	ldr	r2, [r3, #32]
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d20:	1ad2      	subs	r2, r2, r3
 8006d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 81c7 	beq.w	80070e4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	633b      	str	r3, [r7, #48]	; 0x30
 8006d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	785b      	ldrb	r3, [r3, #1]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d177      	bne.n	8006e62 <USB_EPStartXfer+0x2ce>
 8006d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	4413      	add	r3, r2
 8006d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	011a      	lsls	r2, r3, #4
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	4413      	add	r3, r2
 8006da8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	801a      	strh	r2, [r3, #0]
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc2:	2b3e      	cmp	r3, #62	; 0x3e
 8006dc4:	d921      	bls.n	8006e0a <USB_EPStartXfer+0x276>
 8006dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd4:	f003 031f 	and.w	r3, r3, #31
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d104      	bne.n	8006de6 <USB_EPStartXfer+0x252>
 8006ddc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006de0:	3b01      	subs	r3, #1
 8006de2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	029b      	lsls	r3, r3, #10
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	4313      	orrs	r3, r2
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	801a      	strh	r2, [r3, #0]
 8006e08:	e050      	b.n	8006eac <USB_EPStartXfer+0x318>
 8006e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10a      	bne.n	8006e28 <USB_EPStartXfer+0x294>
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	801a      	strh	r2, [r3, #0]
 8006e26:	e041      	b.n	8006eac <USB_EPStartXfer+0x318>
 8006e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2c:	085b      	lsrs	r3, r3, #1
 8006e2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d004      	beq.n	8006e48 <USB_EPStartXfer+0x2b4>
 8006e3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e42:	3301      	adds	r3, #1
 8006e44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	029b      	lsls	r3, r3, #10
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	801a      	strh	r2, [r3, #0]
 8006e60:	e024      	b.n	8006eac <USB_EPStartXfer+0x318>
 8006e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d11c      	bne.n	8006eac <USB_EPStartXfer+0x318>
 8006e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	461a      	mov	r2, r3
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	4413      	add	r3, r2
 8006e88:	633b      	str	r3, [r7, #48]	; 0x30
 8006e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	011a      	lsls	r2, r3, #4
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	895b      	ldrh	r3, [r3, #10]
 8006eb8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6959      	ldr	r1, [r3, #20]
 8006ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ed2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ed6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006eda:	6800      	ldr	r0, [r0, #0]
 8006edc:	f001 fb49 	bl	8008572 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	695a      	ldr	r2, [r3, #20]
 8006eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef0:	441a      	add	r2, r3
 8006ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6a1a      	ldr	r2, [r3, #32]
 8006f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d90f      	bls.n	8006f3a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6a1a      	ldr	r2, [r3, #32]
 8006f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f2a:	1ad2      	subs	r2, r2, r3
 8006f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	621a      	str	r2, [r3, #32]
 8006f38:	e00e      	b.n	8006f58 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2200      	movs	r2, #0
 8006f56:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	785b      	ldrb	r3, [r3, #1]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d177      	bne.n	8007058 <USB_EPStartXfer+0x4c4>
 8006f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	461a      	mov	r2, r3
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	4413      	add	r3, r2
 8006f8a:	61bb      	str	r3, [r7, #24]
 8006f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	011a      	lsls	r2, r3, #4
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb8:	2b3e      	cmp	r3, #62	; 0x3e
 8006fba:	d921      	bls.n	8007000 <USB_EPStartXfer+0x46c>
 8006fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d104      	bne.n	8006fdc <USB_EPStartXfer+0x448>
 8006fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	029b      	lsls	r3, r3, #10
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	4313      	orrs	r3, r2
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	801a      	strh	r2, [r3, #0]
 8006ffe:	e056      	b.n	80070ae <USB_EPStartXfer+0x51a>
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10a      	bne.n	800701e <USB_EPStartXfer+0x48a>
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b29b      	uxth	r3, r3
 800700e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007016:	b29a      	uxth	r2, r3
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	801a      	strh	r2, [r3, #0]
 800701c:	e047      	b.n	80070ae <USB_EPStartXfer+0x51a>
 800701e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d004      	beq.n	800703e <USB_EPStartXfer+0x4aa>
 8007034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007038:	3301      	adds	r3, #1
 800703a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29a      	uxth	r2, r3
 8007044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007048:	b29b      	uxth	r3, r3
 800704a:	029b      	lsls	r3, r3, #10
 800704c:	b29b      	uxth	r3, r3
 800704e:	4313      	orrs	r3, r2
 8007050:	b29a      	uxth	r2, r3
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	801a      	strh	r2, [r3, #0]
 8007056:	e02a      	b.n	80070ae <USB_EPStartXfer+0x51a>
 8007058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	785b      	ldrb	r3, [r3, #1]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d122      	bne.n	80070ae <USB_EPStartXfer+0x51a>
 8007068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	623b      	str	r3, [r7, #32]
 8007074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007078:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007082:	b29b      	uxth	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	4413      	add	r3, r2
 800708a:	623b      	str	r3, [r7, #32]
 800708c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	011a      	lsls	r2, r3, #4
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	4413      	add	r3, r2
 800709e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070a2:	61fb      	str	r3, [r7, #28]
 80070a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80070ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	891b      	ldrh	r3, [r3, #8]
 80070ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6959      	ldr	r1, [r3, #20]
 80070ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070dc:	6800      	ldr	r0, [r0, #0]
 80070de:	f001 fa48 	bl	8008572 <USB_WritePMA>
 80070e2:	e3ee      	b.n	80078c2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	785b      	ldrb	r3, [r3, #1]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d177      	bne.n	80071e4 <USB_EPStartXfer+0x650>
 80070f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007104:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800710e:	b29b      	uxth	r3, r3
 8007110:	461a      	mov	r2, r3
 8007112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007114:	4413      	add	r3, r2
 8007116:	64bb      	str	r3, [r7, #72]	; 0x48
 8007118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	011a      	lsls	r2, r3, #4
 8007126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007128:	4413      	add	r3, r2
 800712a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800712e:	647b      	str	r3, [r7, #68]	; 0x44
 8007130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800713a:	b29a      	uxth	r2, r3
 800713c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800713e:	801a      	strh	r2, [r3, #0]
 8007140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007144:	2b3e      	cmp	r3, #62	; 0x3e
 8007146:	d921      	bls.n	800718c <USB_EPStartXfer+0x5f8>
 8007148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007156:	f003 031f 	and.w	r3, r3, #31
 800715a:	2b00      	cmp	r3, #0
 800715c:	d104      	bne.n	8007168 <USB_EPStartXfer+0x5d4>
 800715e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007162:	3b01      	subs	r3, #1
 8007164:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	b29a      	uxth	r2, r3
 800716e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007172:	b29b      	uxth	r3, r3
 8007174:	029b      	lsls	r3, r3, #10
 8007176:	b29b      	uxth	r3, r3
 8007178:	4313      	orrs	r3, r2
 800717a:	b29b      	uxth	r3, r3
 800717c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007184:	b29a      	uxth	r2, r3
 8007186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007188:	801a      	strh	r2, [r3, #0]
 800718a:	e056      	b.n	800723a <USB_EPStartXfer+0x6a6>
 800718c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <USB_EPStartXfer+0x616>
 8007194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	b29b      	uxth	r3, r3
 800719a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800719e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a6:	801a      	strh	r2, [r3, #0]
 80071a8:	e047      	b.n	800723a <USB_EPStartXfer+0x6a6>
 80071aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ae:	085b      	lsrs	r3, r3, #1
 80071b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <USB_EPStartXfer+0x636>
 80071c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071c4:	3301      	adds	r3, #1
 80071c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	029b      	lsls	r3, r3, #10
 80071d8:	b29b      	uxth	r3, r3
 80071da:	4313      	orrs	r3, r2
 80071dc:	b29a      	uxth	r2, r3
 80071de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e0:	801a      	strh	r2, [r3, #0]
 80071e2:	e02a      	b.n	800723a <USB_EPStartXfer+0x6a6>
 80071e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d122      	bne.n	800723a <USB_EPStartXfer+0x6a6>
 80071f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	653b      	str	r3, [r7, #80]	; 0x50
 8007200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800720e:	b29b      	uxth	r3, r3
 8007210:	461a      	mov	r2, r3
 8007212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007214:	4413      	add	r3, r2
 8007216:	653b      	str	r3, [r7, #80]	; 0x50
 8007218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	011a      	lsls	r2, r3, #4
 8007226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007228:	4413      	add	r3, r2
 800722a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800722e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007234:	b29a      	uxth	r2, r3
 8007236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007238:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800723a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	891b      	ldrh	r3, [r3, #8]
 8007246:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800724a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800724e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6959      	ldr	r1, [r3, #20]
 8007256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800725a:	b29b      	uxth	r3, r3
 800725c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007260:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007264:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007268:	6800      	ldr	r0, [r0, #0]
 800726a:	f001 f982 	bl	8008572 <USB_WritePMA>
            ep->xfer_buff += len;
 800726e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695a      	ldr	r2, [r3, #20]
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727e:	441a      	add	r2, r3
 8007280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800728c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6a1a      	ldr	r2, [r3, #32]
 8007298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d90f      	bls.n	80072c8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80072a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6a1a      	ldr	r2, [r3, #32]
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b8:	1ad2      	subs	r2, r2, r3
 80072ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	621a      	str	r2, [r3, #32]
 80072c6:	e00e      	b.n	80072e6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80072c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80072d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2200      	movs	r2, #0
 80072e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	643b      	str	r3, [r7, #64]	; 0x40
 80072f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d177      	bne.n	80073f2 <USB_EPStartXfer+0x85e>
 8007302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007306:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	63bb      	str	r3, [r7, #56]	; 0x38
 800730e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007312:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800731c:	b29b      	uxth	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007322:	4413      	add	r3, r2
 8007324:	63bb      	str	r3, [r7, #56]	; 0x38
 8007326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	011a      	lsls	r2, r3, #4
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	4413      	add	r3, r2
 8007338:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800733c:	637b      	str	r3, [r7, #52]	; 0x34
 800733e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	b29b      	uxth	r3, r3
 8007344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007348:	b29a      	uxth	r2, r3
 800734a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734c:	801a      	strh	r2, [r3, #0]
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007352:	2b3e      	cmp	r3, #62	; 0x3e
 8007354:	d921      	bls.n	800739a <USB_EPStartXfer+0x806>
 8007356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800735a:	095b      	lsrs	r3, r3, #5
 800735c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007364:	f003 031f 	and.w	r3, r3, #31
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <USB_EPStartXfer+0x7e2>
 800736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007370:	3b01      	subs	r3, #1
 8007372:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	b29a      	uxth	r2, r3
 800737c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007380:	b29b      	uxth	r3, r3
 8007382:	029b      	lsls	r3, r3, #10
 8007384:	b29b      	uxth	r3, r3
 8007386:	4313      	orrs	r3, r2
 8007388:	b29b      	uxth	r3, r3
 800738a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800738e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007392:	b29a      	uxth	r2, r3
 8007394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007396:	801a      	strh	r2, [r3, #0]
 8007398:	e050      	b.n	800743c <USB_EPStartXfer+0x8a8>
 800739a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10a      	bne.n	80073b8 <USB_EPStartXfer+0x824>
 80073a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	e041      	b.n	800743c <USB_EPStartXfer+0x8a8>
 80073b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073bc:	085b      	lsrs	r3, r3, #1
 80073be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80073c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d004      	beq.n	80073d8 <USB_EPStartXfer+0x844>
 80073ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d2:	3301      	adds	r3, #1
 80073d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80073d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	b29a      	uxth	r2, r3
 80073de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	029b      	lsls	r3, r3, #10
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	4313      	orrs	r3, r2
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e024      	b.n	800743c <USB_EPStartXfer+0x8a8>
 80073f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	785b      	ldrb	r3, [r3, #1]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d11c      	bne.n	800743c <USB_EPStartXfer+0x8a8>
 8007402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007410:	b29b      	uxth	r3, r3
 8007412:	461a      	mov	r2, r3
 8007414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007416:	4413      	add	r3, r2
 8007418:	643b      	str	r3, [r7, #64]	; 0x40
 800741a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	011a      	lsls	r2, r3, #4
 8007428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800742a:	4413      	add	r3, r2
 800742c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007430:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007436:	b29a      	uxth	r2, r3
 8007438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800743c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	895b      	ldrh	r3, [r3, #10]
 8007448:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800744c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6959      	ldr	r1, [r3, #20]
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745c:	b29b      	uxth	r3, r3
 800745e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007462:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007466:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800746a:	6800      	ldr	r0, [r0, #0]
 800746c:	f001 f881 	bl	8008572 <USB_WritePMA>
 8007470:	e227      	b.n	80078c2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80074a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80074ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	441a      	add	r2, r3
 80074c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80074ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074da:	b29b      	uxth	r3, r3
 80074dc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80074de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	461a      	mov	r2, r3
 80074fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074fe:	4413      	add	r3, r2
 8007500:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	011a      	lsls	r2, r3, #4
 8007510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007512:	4413      	add	r3, r2
 8007514:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007518:	65bb      	str	r3, [r7, #88]	; 0x58
 800751a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800751e:	b29a      	uxth	r2, r3
 8007520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007522:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	891b      	ldrh	r3, [r3, #8]
 8007530:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6959      	ldr	r1, [r3, #20]
 8007540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007544:	b29b      	uxth	r3, r3
 8007546:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800754a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800754e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007552:	6800      	ldr	r0, [r0, #0]
 8007554:	f001 f80d 	bl	8008572 <USB_WritePMA>
 8007558:	e1b3      	b.n	80078c2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800755a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6a1a      	ldr	r2, [r3, #32]
 8007566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800756a:	1ad2      	subs	r2, r2, r3
 800756c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29b      	uxth	r3, r3
 8007596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 80c6 	beq.w	800772c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	673b      	str	r3, [r7, #112]	; 0x70
 80075ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	785b      	ldrb	r3, [r3, #1]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d177      	bne.n	80076ac <USB_EPStartXfer+0xb18>
 80075bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80075c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075dc:	4413      	add	r3, r2
 80075de:	66bb      	str	r3, [r7, #104]	; 0x68
 80075e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	011a      	lsls	r2, r3, #4
 80075ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075f0:	4413      	add	r3, r2
 80075f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075f6:	667b      	str	r3, [r7, #100]	; 0x64
 80075f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007602:	b29a      	uxth	r2, r3
 8007604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007606:	801a      	strh	r2, [r3, #0]
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760c:	2b3e      	cmp	r3, #62	; 0x3e
 800760e:	d921      	bls.n	8007654 <USB_EPStartXfer+0xac0>
 8007610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007614:	095b      	lsrs	r3, r3, #5
 8007616:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800761a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800761e:	f003 031f 	and.w	r3, r3, #31
 8007622:	2b00      	cmp	r3, #0
 8007624:	d104      	bne.n	8007630 <USB_EPStartXfer+0xa9c>
 8007626:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800762a:	3b01      	subs	r3, #1
 800762c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29a      	uxth	r2, r3
 8007636:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800763a:	b29b      	uxth	r3, r3
 800763c:	029b      	lsls	r3, r3, #10
 800763e:	b29b      	uxth	r3, r3
 8007640:	4313      	orrs	r3, r2
 8007642:	b29b      	uxth	r3, r3
 8007644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800764c:	b29a      	uxth	r2, r3
 800764e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007650:	801a      	strh	r2, [r3, #0]
 8007652:	e050      	b.n	80076f6 <USB_EPStartXfer+0xb62>
 8007654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <USB_EPStartXfer+0xade>
 800765c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800766a:	b29a      	uxth	r2, r3
 800766c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800766e:	801a      	strh	r2, [r3, #0]
 8007670:	e041      	b.n	80076f6 <USB_EPStartXfer+0xb62>
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007676:	085b      	lsrs	r3, r3, #1
 8007678:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800767c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <USB_EPStartXfer+0xafe>
 8007688:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800768c:	3301      	adds	r3, #1
 800768e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	b29a      	uxth	r2, r3
 8007698:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800769c:	b29b      	uxth	r3, r3
 800769e:	029b      	lsls	r3, r3, #10
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	4313      	orrs	r3, r2
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076a8:	801a      	strh	r2, [r3, #0]
 80076aa:	e024      	b.n	80076f6 <USB_EPStartXfer+0xb62>
 80076ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d11c      	bne.n	80076f6 <USB_EPStartXfer+0xb62>
 80076bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076d0:	4413      	add	r3, r2
 80076d2:	673b      	str	r3, [r7, #112]	; 0x70
 80076d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	011a      	lsls	r2, r3, #4
 80076e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076e4:	4413      	add	r3, r2
 80076e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80076f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	895b      	ldrh	r3, [r3, #10]
 8007702:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6959      	ldr	r1, [r3, #20]
 8007712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007716:	b29b      	uxth	r3, r3
 8007718:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800771c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007720:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007724:	6800      	ldr	r0, [r0, #0]
 8007726:	f000 ff24 	bl	8008572 <USB_WritePMA>
 800772a:	e0ca      	b.n	80078c2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800772c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	785b      	ldrb	r3, [r3, #1]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d177      	bne.n	800782c <USB_EPStartXfer+0xc98>
 800773c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007756:	b29b      	uxth	r3, r3
 8007758:	461a      	mov	r2, r3
 800775a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800775c:	4413      	add	r3, r2
 800775e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	011a      	lsls	r2, r3, #4
 800776e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007770:	4413      	add	r3, r2
 8007772:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007776:	67bb      	str	r3, [r7, #120]	; 0x78
 8007778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	b29b      	uxth	r3, r3
 800777e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007782:	b29a      	uxth	r2, r3
 8007784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007786:	801a      	strh	r2, [r3, #0]
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800778c:	2b3e      	cmp	r3, #62	; 0x3e
 800778e:	d921      	bls.n	80077d4 <USB_EPStartXfer+0xc40>
 8007790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007794:	095b      	lsrs	r3, r3, #5
 8007796:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800779a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800779e:	f003 031f 	and.w	r3, r3, #31
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d104      	bne.n	80077b0 <USB_EPStartXfer+0xc1c>
 80077a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077aa:	3b01      	subs	r3, #1
 80077ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	029b      	lsls	r3, r3, #10
 80077be:	b29b      	uxth	r3, r3
 80077c0:	4313      	orrs	r3, r2
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077d0:	801a      	strh	r2, [r3, #0]
 80077d2:	e05c      	b.n	800788e <USB_EPStartXfer+0xcfa>
 80077d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <USB_EPStartXfer+0xc5e>
 80077dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ee:	801a      	strh	r2, [r3, #0]
 80077f0:	e04d      	b.n	800788e <USB_EPStartXfer+0xcfa>
 80077f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f6:	085b      	lsrs	r3, r3, #1
 80077f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <USB_EPStartXfer+0xc7e>
 8007808:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800780c:	3301      	adds	r3, #1
 800780e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	b29a      	uxth	r2, r3
 8007818:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800781c:	b29b      	uxth	r3, r3
 800781e:	029b      	lsls	r3, r3, #10
 8007820:	b29b      	uxth	r3, r3
 8007822:	4313      	orrs	r3, r2
 8007824:	b29a      	uxth	r2, r3
 8007826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007828:	801a      	strh	r2, [r3, #0]
 800782a:	e030      	b.n	800788e <USB_EPStartXfer+0xcfa>
 800782c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d128      	bne.n	800788e <USB_EPStartXfer+0xcfa>
 800783c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800784a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007858:	b29b      	uxth	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007860:	4413      	add	r3, r2
 8007862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	011a      	lsls	r2, r3, #4
 8007874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007878:	4413      	add	r3, r2
 800787a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800787e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007886:	b29a      	uxth	r2, r3
 8007888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800788c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800788e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	891b      	ldrh	r3, [r3, #8]
 800789a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800789e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6959      	ldr	r1, [r3, #20]
 80078aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80078b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80078b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80078bc:	6800      	ldr	r0, [r0, #0]
 80078be:	f000 fe58 	bl	8008572 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80078c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	b29b      	uxth	r3, r3
 80078e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e8:	817b      	strh	r3, [r7, #10]
 80078ea:	897b      	ldrh	r3, [r7, #10]
 80078ec:	f083 0310 	eor.w	r3, r3, #16
 80078f0:	817b      	strh	r3, [r7, #10]
 80078f2:	897b      	ldrh	r3, [r7, #10]
 80078f4:	f083 0320 	eor.w	r3, r3, #32
 80078f8:	817b      	strh	r3, [r7, #10]
 80078fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	441a      	add	r2, r3
 8007914:	897b      	ldrh	r3, [r7, #10]
 8007916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800791a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800791e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007926:	b29b      	uxth	r3, r3
 8007928:	8013      	strh	r3, [r2, #0]
 800792a:	f000 bcde 	b.w	80082ea <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800792e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	7b1b      	ldrb	r3, [r3, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f040 80bb 	bne.w	8007ab6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	699a      	ldr	r2, [r3, #24]
 800794c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	429a      	cmp	r2, r3
 800795a:	d917      	bls.n	800798c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800795c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800796c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	699a      	ldr	r2, [r3, #24]
 8007978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800797c:	1ad2      	subs	r2, r2, r3
 800797e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	619a      	str	r2, [r3, #24]
 800798a:	e00e      	b.n	80079aa <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800798c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800799c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2200      	movs	r2, #0
 80079a8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80079aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079ce:	4413      	add	r3, r2
 80079d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	011a      	lsls	r2, r3, #4
 80079e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079e6:	4413      	add	r3, r2
 80079e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80079f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a02:	801a      	strh	r2, [r3, #0]
 8007a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a08:	2b3e      	cmp	r3, #62	; 0x3e
 8007a0a:	d924      	bls.n	8007a56 <USB_EPStartXfer+0xec2>
 8007a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a10:	095b      	lsrs	r3, r3, #5
 8007a12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a1a:	f003 031f 	and.w	r3, r3, #31
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d104      	bne.n	8007a2c <USB_EPStartXfer+0xe98>
 8007a22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a26:	3b01      	subs	r3, #1
 8007a28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	029b      	lsls	r3, r3, #10
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a50:	801a      	strh	r2, [r3, #0]
 8007a52:	f000 bc10 	b.w	8008276 <USB_EPStartXfer+0x16e2>
 8007a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10c      	bne.n	8007a78 <USB_EPStartXfer+0xee4>
 8007a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a74:	801a      	strh	r2, [r3, #0]
 8007a76:	e3fe      	b.n	8008276 <USB_EPStartXfer+0x16e2>
 8007a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a7c:	085b      	lsrs	r3, r3, #1
 8007a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d004      	beq.n	8007a98 <USB_EPStartXfer+0xf04>
 8007a8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a92:	3301      	adds	r3, #1
 8007a94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	029b      	lsls	r3, r3, #10
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ab2:	801a      	strh	r2, [r3, #0]
 8007ab4:	e3df      	b.n	8008276 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	78db      	ldrb	r3, [r3, #3]
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	f040 8218 	bne.w	8007ef8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f040 809d 	bne.w	8007c14 <USB_EPStartXfer+0x1080>
 8007ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	461a      	mov	r2, r3
 8007afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007afe:	4413      	add	r3, r2
 8007b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	011a      	lsls	r2, r3, #4
 8007b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b16:	4413      	add	r3, r2
 8007b18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b32:	801a      	strh	r2, [r3, #0]
 8007b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	2b3e      	cmp	r3, #62	; 0x3e
 8007b42:	d92b      	bls.n	8007b9c <USB_EPStartXfer+0x1008>
 8007b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	095b      	lsrs	r3, r3, #5
 8007b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 031f 	and.w	r3, r3, #31
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d104      	bne.n	8007b74 <USB_EPStartXfer+0xfe0>
 8007b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	029b      	lsls	r3, r3, #10
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	4313      	orrs	r3, r2
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b98:	801a      	strh	r2, [r3, #0]
 8007b9a:	e070      	b.n	8007c7e <USB_EPStartXfer+0x10ea>
 8007b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10c      	bne.n	8007bc6 <USB_EPStartXfer+0x1032>
 8007bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bc2:	801a      	strh	r2, [r3, #0]
 8007bc4:	e05b      	b.n	8007c7e <USB_EPStartXfer+0x10ea>
 8007bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	085b      	lsrs	r3, r3, #1
 8007bd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d004      	beq.n	8007bf6 <USB_EPStartXfer+0x1062>
 8007bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	029b      	lsls	r3, r3, #10
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c10:	801a      	strh	r2, [r3, #0]
 8007c12:	e034      	b.n	8007c7e <USB_EPStartXfer+0x10ea>
 8007c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	785b      	ldrb	r3, [r3, #1]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d12c      	bne.n	8007c7e <USB_EPStartXfer+0x10ea>
 8007c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	461a      	mov	r2, r3
 8007c44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c48:	4413      	add	r3, r2
 8007c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	011a      	lsls	r2, r3, #4
 8007c5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c60:	4413      	add	r3, r2
 8007c62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c7c:	801a      	strh	r2, [r3, #0]
 8007c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	785b      	ldrb	r3, [r3, #1]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f040 809d 	bne.w	8007dd8 <USB_EPStartXfer+0x1244>
 8007c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	011a      	lsls	r2, r3, #4
 8007cd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cda:	4413      	add	r3, r2
 8007cdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cf6:	801a      	strh	r2, [r3, #0]
 8007cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	2b3e      	cmp	r3, #62	; 0x3e
 8007d06:	d92b      	bls.n	8007d60 <USB_EPStartXfer+0x11cc>
 8007d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	095b      	lsrs	r3, r3, #5
 8007d16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	f003 031f 	and.w	r3, r3, #31
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d104      	bne.n	8007d38 <USB_EPStartXfer+0x11a4>
 8007d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d32:	3b01      	subs	r3, #1
 8007d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	029b      	lsls	r3, r3, #10
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d5c:	801a      	strh	r2, [r3, #0]
 8007d5e:	e069      	b.n	8007e34 <USB_EPStartXfer+0x12a0>
 8007d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10c      	bne.n	8007d8a <USB_EPStartXfer+0x11f6>
 8007d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d86:	801a      	strh	r2, [r3, #0]
 8007d88:	e054      	b.n	8007e34 <USB_EPStartXfer+0x12a0>
 8007d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	085b      	lsrs	r3, r3, #1
 8007d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d004      	beq.n	8007dba <USB_EPStartXfer+0x1226>
 8007db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007db4:	3301      	adds	r3, #1
 8007db6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	029b      	lsls	r3, r3, #10
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dd4:	801a      	strh	r2, [r3, #0]
 8007dd6:	e02d      	b.n	8007e34 <USB_EPStartXfer+0x12a0>
 8007dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	785b      	ldrb	r3, [r3, #1]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d125      	bne.n	8007e34 <USB_EPStartXfer+0x12a0>
 8007de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	461a      	mov	r2, r3
 8007dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007dfe:	4413      	add	r3, r2
 8007e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	011a      	lsls	r2, r3, #4
 8007e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e16:	4413      	add	r3, r2
 8007e18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e32:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 8218 	beq.w	8008276 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d005      	beq.n	8007e7e <USB_EPStartXfer+0x12ea>
 8007e72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10d      	bne.n	8007e9a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f040 81f5 	bne.w	8008276 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f040 81ee 	bne.w	8008276 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	881b      	ldrh	r3, [r3, #0]
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	441a      	add	r2, r3
 8007ede:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	8013      	strh	r3, [r2, #0]
 8007ef6:	e1be      	b.n	8008276 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	78db      	ldrb	r3, [r3, #3]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	f040 81b4 	bne.w	8008272 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	699a      	ldr	r2, [r3, #24]
 8007f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d917      	bls.n	8007f56 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	699a      	ldr	r2, [r3, #24]
 8007f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f46:	1ad2      	subs	r2, r2, r3
 8007f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	619a      	str	r2, [r3, #24]
 8007f54:	e00e      	b.n	8007f74 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2200      	movs	r2, #0
 8007f72:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	785b      	ldrb	r3, [r3, #1]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f040 8085 	bne.w	8008090 <USB_EPStartXfer+0x14fc>
 8007f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007faa:	4413      	add	r3, r2
 8007fac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	011a      	lsls	r2, r3, #4
 8007fbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fde:	801a      	strh	r2, [r3, #0]
 8007fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe4:	2b3e      	cmp	r3, #62	; 0x3e
 8007fe6:	d923      	bls.n	8008030 <USB_EPStartXfer+0x149c>
 8007fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fec:	095b      	lsrs	r3, r3, #5
 8007fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff6:	f003 031f 	and.w	r3, r3, #31
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d104      	bne.n	8008008 <USB_EPStartXfer+0x1474>
 8007ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008002:	3b01      	subs	r3, #1
 8008004:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008008:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	b29a      	uxth	r2, r3
 8008010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008014:	b29b      	uxth	r3, r3
 8008016:	029b      	lsls	r3, r3, #10
 8008018:	b29b      	uxth	r3, r3
 800801a:	4313      	orrs	r3, r2
 800801c:	b29b      	uxth	r3, r3
 800801e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008026:	b29a      	uxth	r2, r3
 8008028:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800802c:	801a      	strh	r2, [r3, #0]
 800802e:	e060      	b.n	80080f2 <USB_EPStartXfer+0x155e>
 8008030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10c      	bne.n	8008052 <USB_EPStartXfer+0x14be>
 8008038:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	b29b      	uxth	r3, r3
 8008040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008048:	b29a      	uxth	r2, r3
 800804a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800804e:	801a      	strh	r2, [r3, #0]
 8008050:	e04f      	b.n	80080f2 <USB_EPStartXfer+0x155e>
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008056:	085b      	lsrs	r3, r3, #1
 8008058:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800805c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	d004      	beq.n	8008072 <USB_EPStartXfer+0x14de>
 8008068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800806c:	3301      	adds	r3, #1
 800806e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	b29a      	uxth	r2, r3
 800807a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800807e:	b29b      	uxth	r3, r3
 8008080:	029b      	lsls	r3, r3, #10
 8008082:	b29b      	uxth	r3, r3
 8008084:	4313      	orrs	r3, r2
 8008086:	b29a      	uxth	r2, r3
 8008088:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800808c:	801a      	strh	r2, [r3, #0]
 800808e:	e030      	b.n	80080f2 <USB_EPStartXfer+0x155e>
 8008090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	785b      	ldrb	r3, [r3, #1]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d128      	bne.n	80080f2 <USB_EPStartXfer+0x155e>
 80080a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80080ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080bc:	b29b      	uxth	r3, r3
 80080be:	461a      	mov	r2, r3
 80080c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080c4:	4413      	add	r3, r2
 80080c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80080ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	011a      	lsls	r2, r3, #4
 80080d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080dc:	4413      	add	r3, r2
 80080de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80080f0:	801a      	strh	r2, [r3, #0]
 80080f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	785b      	ldrb	r3, [r3, #1]
 800810c:	2b00      	cmp	r3, #0
 800810e:	f040 8085 	bne.w	800821c <USB_EPStartXfer+0x1688>
 8008112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800812e:	b29b      	uxth	r3, r3
 8008130:	461a      	mov	r2, r3
 8008132:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008136:	4413      	add	r3, r2
 8008138:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800813c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	011a      	lsls	r2, r3, #4
 800814a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800814e:	4413      	add	r3, r2
 8008150:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008154:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008158:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008164:	b29a      	uxth	r2, r3
 8008166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008170:	2b3e      	cmp	r3, #62	; 0x3e
 8008172:	d923      	bls.n	80081bc <USB_EPStartXfer+0x1628>
 8008174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008178:	095b      	lsrs	r3, r3, #5
 800817a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800817e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008182:	f003 031f 	and.w	r3, r3, #31
 8008186:	2b00      	cmp	r3, #0
 8008188:	d104      	bne.n	8008194 <USB_EPStartXfer+0x1600>
 800818a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800818e:	3b01      	subs	r3, #1
 8008190:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008194:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	b29a      	uxth	r2, r3
 800819c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	029b      	lsls	r3, r3, #10
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	4313      	orrs	r3, r2
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081b8:	801a      	strh	r2, [r3, #0]
 80081ba:	e05c      	b.n	8008276 <USB_EPStartXfer+0x16e2>
 80081bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10c      	bne.n	80081de <USB_EPStartXfer+0x164a>
 80081c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081da:	801a      	strh	r2, [r3, #0]
 80081dc:	e04b      	b.n	8008276 <USB_EPStartXfer+0x16e2>
 80081de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e2:	085b      	lsrs	r3, r3, #1
 80081e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d004      	beq.n	80081fe <USB_EPStartXfer+0x166a>
 80081f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081f8:	3301      	adds	r3, #1
 80081fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	b29a      	uxth	r2, r3
 8008206:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800820a:	b29b      	uxth	r3, r3
 800820c:	029b      	lsls	r3, r3, #10
 800820e:	b29b      	uxth	r3, r3
 8008210:	4313      	orrs	r3, r2
 8008212:	b29a      	uxth	r2, r3
 8008214:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008218:	801a      	strh	r2, [r3, #0]
 800821a:	e02c      	b.n	8008276 <USB_EPStartXfer+0x16e2>
 800821c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	785b      	ldrb	r3, [r3, #1]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d124      	bne.n	8008276 <USB_EPStartXfer+0x16e2>
 800822c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800823a:	b29b      	uxth	r3, r3
 800823c:	461a      	mov	r2, r3
 800823e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008242:	4413      	add	r3, r2
 8008244:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	011a      	lsls	r2, r3, #4
 8008256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800825a:	4413      	add	r3, r2
 800825c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008260:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008268:	b29a      	uxth	r2, r3
 800826a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800826e:	801a      	strh	r2, [r3, #0]
 8008270:	e001      	b.n	8008276 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e03a      	b.n	80082ec <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80082a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80082a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80082ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80082b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80082b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	441a      	add	r2, r3
 80082d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80082d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b085      	sub	sp, #20
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	785b      	ldrb	r3, [r3, #1]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d020      	beq.n	800834a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800831a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800831e:	81bb      	strh	r3, [r7, #12]
 8008320:	89bb      	ldrh	r3, [r7, #12]
 8008322:	f083 0310 	eor.w	r3, r3, #16
 8008326:	81bb      	strh	r3, [r7, #12]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	441a      	add	r2, r3
 8008332:	89bb      	ldrh	r3, [r7, #12]
 8008334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800833c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008344:	b29b      	uxth	r3, r3
 8008346:	8013      	strh	r3, [r2, #0]
 8008348:	e01f      	b.n	800838a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800835c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008360:	81fb      	strh	r3, [r7, #14]
 8008362:	89fb      	ldrh	r3, [r7, #14]
 8008364:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008368:	81fb      	strh	r3, [r7, #14]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	441a      	add	r2, r3
 8008374:	89fb      	ldrh	r3, [r7, #14]
 8008376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800837a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800837e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008386:	b29b      	uxth	r3, r3
 8008388:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr

08008396 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008396:	b480      	push	{r7}
 8008398:	b087      	sub	sp, #28
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	7b1b      	ldrb	r3, [r3, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f040 809d 	bne.w	80084e4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	785b      	ldrb	r3, [r3, #1]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d04c      	beq.n	800844c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	823b      	strh	r3, [r7, #16]
 80083c0:	8a3b      	ldrh	r3, [r7, #16]
 80083c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d01b      	beq.n	8008402 <USB_EPClearStall+0x6c>
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e0:	81fb      	strh	r3, [r7, #14]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	441a      	add	r2, r3
 80083ec:	89fb      	ldrh	r3, [r7, #14]
 80083ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083fe:	b29b      	uxth	r3, r3
 8008400:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	78db      	ldrb	r3, [r3, #3]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d06c      	beq.n	80084e4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	b29b      	uxth	r3, r3
 8008418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800841c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008420:	81bb      	strh	r3, [r7, #12]
 8008422:	89bb      	ldrh	r3, [r7, #12]
 8008424:	f083 0320 	eor.w	r3, r3, #32
 8008428:	81bb      	strh	r3, [r7, #12]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	441a      	add	r2, r3
 8008434:	89bb      	ldrh	r3, [r7, #12]
 8008436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800843a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800843e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008446:	b29b      	uxth	r3, r3
 8008448:	8013      	strh	r3, [r2, #0]
 800844a:	e04b      	b.n	80084e4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	82fb      	strh	r3, [r7, #22]
 800845a:	8afb      	ldrh	r3, [r7, #22]
 800845c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d01b      	beq.n	800849c <USB_EPClearStall+0x106>
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	881b      	ldrh	r3, [r3, #0]
 8008470:	b29b      	uxth	r3, r3
 8008472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800847a:	82bb      	strh	r3, [r7, #20]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	441a      	add	r2, r3
 8008486:	8abb      	ldrh	r3, [r7, #20]
 8008488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800848c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008498:	b29b      	uxth	r3, r3
 800849a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b2:	827b      	strh	r3, [r7, #18]
 80084b4:	8a7b      	ldrh	r3, [r7, #18]
 80084b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084ba:	827b      	strh	r3, [r7, #18]
 80084bc:	8a7b      	ldrh	r3, [r7, #18]
 80084be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084c2:	827b      	strh	r3, [r7, #18]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	441a      	add	r2, r3
 80084ce:	8a7b      	ldrh	r3, [r7, #18]
 80084d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	371c      	adds	r7, #28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bc80      	pop	{r7}
 80084ee:	4770      	bx	lr

080084f0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80084fc:	78fb      	ldrb	r3, [r7, #3]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d103      	bne.n	800850a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2280      	movs	r2, #128	; 0x80
 8008506:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	bc80      	pop	{r7}
 8008514:	4770      	bx	lr

08008516 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	bc80      	pop	{r7}
 8008528:	4770      	bx	lr

0800852a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	bc80      	pop	{r7}
 800853c:	4770      	bx	lr

0800853e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800854c:	b29b      	uxth	r3, r3
 800854e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008550:	68fb      	ldr	r3, [r7, #12]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	bc80      	pop	{r7}
 800855a:	4770      	bx	lr

0800855c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr

08008572 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008572:	b480      	push	{r7}
 8008574:	b08b      	sub	sp, #44	; 0x2c
 8008576:	af00      	add	r7, sp, #0
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	4611      	mov	r1, r2
 800857e:	461a      	mov	r2, r3
 8008580:	460b      	mov	r3, r1
 8008582:	80fb      	strh	r3, [r7, #6]
 8008584:	4613      	mov	r3, r2
 8008586:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008588:	88bb      	ldrh	r3, [r7, #4]
 800858a:	3301      	adds	r3, #1
 800858c:	085b      	lsrs	r3, r3, #1
 800858e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008598:	88fb      	ldrh	r3, [r7, #6]
 800859a:	005a      	lsls	r2, r3, #1
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085a4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	627b      	str	r3, [r7, #36]	; 0x24
 80085aa:	e01e      	b.n	80085ea <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	3301      	adds	r3, #1
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	021b      	lsls	r3, r3, #8
 80085ba:	b21a      	sxth	r2, r3
 80085bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	b21b      	sxth	r3, r3
 80085c4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	8a7a      	ldrh	r2, [r7, #18]
 80085ca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	3302      	adds	r3, #2
 80085d0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	3302      	adds	r3, #2
 80085d6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	3301      	adds	r3, #1
 80085dc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	3301      	adds	r3, #1
 80085e2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	3b01      	subs	r3, #1
 80085e8:	627b      	str	r3, [r7, #36]	; 0x24
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1dd      	bne.n	80085ac <USB_WritePMA+0x3a>
  }
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	372c      	adds	r7, #44	; 0x2c
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bc80      	pop	{r7}
 80085fa:	4770      	bx	lr

080085fc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b08b      	sub	sp, #44	; 0x2c
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	4611      	mov	r1, r2
 8008608:	461a      	mov	r2, r3
 800860a:	460b      	mov	r3, r1
 800860c:	80fb      	strh	r3, [r7, #6]
 800860e:	4613      	mov	r3, r2
 8008610:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008612:	88bb      	ldrh	r3, [r7, #4]
 8008614:	085b      	lsrs	r3, r3, #1
 8008616:	b29b      	uxth	r3, r3
 8008618:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008622:	88fb      	ldrh	r3, [r7, #6]
 8008624:	005a      	lsls	r2, r3, #1
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800862e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
 8008634:	e01b      	b.n	800866e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	b29b      	uxth	r3, r3
 800863c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	3302      	adds	r3, #2
 8008642:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	b2da      	uxtb	r2, r3
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	3301      	adds	r3, #1
 8008650:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	0a1b      	lsrs	r3, r3, #8
 8008656:	b2da      	uxtb	r2, r3
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	3301      	adds	r3, #1
 8008660:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	3302      	adds	r3, #2
 8008666:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	3b01      	subs	r3, #1
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e0      	bne.n	8008636 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008674:	88bb      	ldrh	r3, [r7, #4]
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	b29b      	uxth	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	d007      	beq.n	8008690 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	b29b      	uxth	r3, r3
 8008686:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	b2da      	uxtb	r2, r3
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	701a      	strb	r2, [r3, #0]
  }
}
 8008690:	bf00      	nop
 8008692:	372c      	adds	r7, #44	; 0x2c
 8008694:	46bd      	mov	sp, r7
 8008696:	bc80      	pop	{r7}
 8008698:	4770      	bx	lr

0800869a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b084      	sub	sp, #16
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	460b      	mov	r3, r1
 80086a4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	7c1b      	ldrb	r3, [r3, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d115      	bne.n	80086de <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80086b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086b6:	2202      	movs	r2, #2
 80086b8:	2181      	movs	r1, #129	; 0x81
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f004 fb39 	bl	800cd32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086ca:	2202      	movs	r2, #2
 80086cc:	2101      	movs	r1, #1
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f004 fb2f 	bl	800cd32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80086dc:	e012      	b.n	8008704 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80086de:	2340      	movs	r3, #64	; 0x40
 80086e0:	2202      	movs	r2, #2
 80086e2:	2181      	movs	r1, #129	; 0x81
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f004 fb24 	bl	800cd32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086f0:	2340      	movs	r3, #64	; 0x40
 80086f2:	2202      	movs	r2, #2
 80086f4:	2101      	movs	r1, #1
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f004 fb1b 	bl	800cd32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008704:	2308      	movs	r3, #8
 8008706:	2203      	movs	r2, #3
 8008708:	2182      	movs	r1, #130	; 0x82
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f004 fb11 	bl	800cd32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008716:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800871a:	f004 fc31 	bl	800cf80 <USBD_static_malloc>
 800871e:	4602      	mov	r2, r0
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800872c:	2b00      	cmp	r3, #0
 800872e:	d102      	bne.n	8008736 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008730:	2301      	movs	r3, #1
 8008732:	73fb      	strb	r3, [r7, #15]
 8008734:	e026      	b.n	8008784 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2200      	movs	r2, #0
 800874c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2200      	movs	r2, #0
 8008754:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	7c1b      	ldrb	r3, [r3, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d109      	bne.n	8008774 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800876a:	2101      	movs	r1, #1
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f004 fbd1 	bl	800cf14 <USBD_LL_PrepareReceive>
 8008772:	e007      	b.n	8008784 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800877a:	2340      	movs	r3, #64	; 0x40
 800877c:	2101      	movs	r1, #1
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f004 fbc8 	bl	800cf14 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008784:	7bfb      	ldrb	r3, [r7, #15]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	460b      	mov	r3, r1
 8008798:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800879e:	2181      	movs	r1, #129	; 0x81
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f004 faec 	bl	800cd7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80087ac:	2101      	movs	r1, #1
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f004 fae5 	bl	800cd7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80087bc:	2182      	movs	r1, #130	; 0x82
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f004 fadd 	bl	800cd7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00e      	beq.n	80087f2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e4:	4618      	mov	r0, r3
 80087e6:	f004 fbd7 	bl	800cf98 <USBD_static_free>
    pdev->pClassData = NULL;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800880c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800880e:	2300      	movs	r3, #0
 8008810:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008812:	2300      	movs	r3, #0
 8008814:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008816:	2300      	movs	r3, #0
 8008818:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008822:	2b00      	cmp	r3, #0
 8008824:	d039      	beq.n	800889a <USBD_CDC_Setup+0x9e>
 8008826:	2b20      	cmp	r3, #32
 8008828:	d17f      	bne.n	800892a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	88db      	ldrh	r3, [r3, #6]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d029      	beq.n	8008886 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	b25b      	sxtb	r3, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	da11      	bge.n	8008860 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008848:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	88d2      	ldrh	r2, [r2, #6]
 800884e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008850:	6939      	ldr	r1, [r7, #16]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	88db      	ldrh	r3, [r3, #6]
 8008856:	461a      	mov	r2, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 f9da 	bl	8009c12 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800885e:	e06b      	b.n	8008938 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	785a      	ldrb	r2, [r3, #1]
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	88db      	ldrh	r3, [r3, #6]
 800886e:	b2da      	uxtb	r2, r3
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008876:	6939      	ldr	r1, [r7, #16]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	88db      	ldrh	r3, [r3, #6]
 800887c:	461a      	mov	r2, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 f9f5 	bl	8009c6e <USBD_CtlPrepareRx>
      break;
 8008884:	e058      	b.n	8008938 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	7850      	ldrb	r0, [r2, #1]
 8008892:	2200      	movs	r2, #0
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	4798      	blx	r3
      break;
 8008898:	e04e      	b.n	8008938 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	785b      	ldrb	r3, [r3, #1]
 800889e:	2b0b      	cmp	r3, #11
 80088a0:	d02e      	beq.n	8008900 <USBD_CDC_Setup+0x104>
 80088a2:	2b0b      	cmp	r3, #11
 80088a4:	dc38      	bgt.n	8008918 <USBD_CDC_Setup+0x11c>
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <USBD_CDC_Setup+0xb4>
 80088aa:	2b0a      	cmp	r3, #10
 80088ac:	d014      	beq.n	80088d8 <USBD_CDC_Setup+0xdc>
 80088ae:	e033      	b.n	8008918 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d107      	bne.n	80088ca <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80088ba:	f107 030c 	add.w	r3, r7, #12
 80088be:	2202      	movs	r2, #2
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f001 f9a5 	bl	8009c12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088c8:	e02e      	b.n	8008928 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f001 f936 	bl	8009b3e <USBD_CtlError>
            ret = USBD_FAIL;
 80088d2:	2302      	movs	r3, #2
 80088d4:	75fb      	strb	r3, [r7, #23]
          break;
 80088d6:	e027      	b.n	8008928 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d107      	bne.n	80088f2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80088e2:	f107 030f 	add.w	r3, r7, #15
 80088e6:	2201      	movs	r2, #1
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f001 f991 	bl	8009c12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088f0:	e01a      	b.n	8008928 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f001 f922 	bl	8009b3e <USBD_CtlError>
            ret = USBD_FAIL;
 80088fa:	2302      	movs	r3, #2
 80088fc:	75fb      	strb	r3, [r7, #23]
          break;
 80088fe:	e013      	b.n	8008928 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008906:	2b03      	cmp	r3, #3
 8008908:	d00d      	beq.n	8008926 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f001 f916 	bl	8009b3e <USBD_CtlError>
            ret = USBD_FAIL;
 8008912:	2302      	movs	r3, #2
 8008914:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008916:	e006      	b.n	8008926 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f001 f90f 	bl	8009b3e <USBD_CtlError>
          ret = USBD_FAIL;
 8008920:	2302      	movs	r3, #2
 8008922:	75fb      	strb	r3, [r7, #23]
          break;
 8008924:	e000      	b.n	8008928 <USBD_CDC_Setup+0x12c>
          break;
 8008926:	bf00      	nop
      }
      break;
 8008928:	e006      	b.n	8008938 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 f906 	bl	8009b3e <USBD_CtlError>
      ret = USBD_FAIL;
 8008932:	2302      	movs	r3, #2
 8008934:	75fb      	strb	r3, [r7, #23]
      break;
 8008936:	bf00      	nop
  }

  return ret;
 8008938:	7dfb      	ldrb	r3, [r7, #23]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	460b      	mov	r3, r1
 800894c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008954:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800895c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008964:	2b00      	cmp	r3, #0
 8008966:	d03a      	beq.n	80089de <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008968:	78fa      	ldrb	r2, [r7, #3]
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	4613      	mov	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	440b      	add	r3, r1
 8008976:	331c      	adds	r3, #28
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d029      	beq.n	80089d2 <USBD_CDC_DataIn+0x90>
 800897e:	78fa      	ldrb	r2, [r7, #3]
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	4613      	mov	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	440b      	add	r3, r1
 800898c:	331c      	adds	r3, #28
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	78f9      	ldrb	r1, [r7, #3]
 8008992:	68b8      	ldr	r0, [r7, #8]
 8008994:	460b      	mov	r3, r1
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	440b      	add	r3, r1
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	4403      	add	r3, r0
 800899e:	3338      	adds	r3, #56	; 0x38
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	fbb2 f1f3 	udiv	r1, r2, r3
 80089a6:	fb01 f303 	mul.w	r3, r1, r3
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d110      	bne.n	80089d2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80089b0:	78fa      	ldrb	r2, [r7, #3]
 80089b2:	6879      	ldr	r1, [r7, #4]
 80089b4:	4613      	mov	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	440b      	add	r3, r1
 80089be:	331c      	adds	r3, #28
 80089c0:	2200      	movs	r2, #0
 80089c2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80089c4:	78f9      	ldrb	r1, [r7, #3]
 80089c6:	2300      	movs	r3, #0
 80089c8:	2200      	movs	r2, #0
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f004 fa7f 	bl	800cece <USBD_LL_Transmit>
 80089d0:	e003      	b.n	80089da <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	e000      	b.n	80089e0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80089de:	2302      	movs	r3, #2
  }
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80089fc:	78fb      	ldrb	r3, [r7, #3]
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f004 faaa 	bl	800cf5a <USBD_LL_GetRxDataSize>
 8008a06:	4602      	mov	r2, r0
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00d      	beq.n	8008a34 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4798      	blx	r3

    return USBD_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	e000      	b.n	8008a36 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008a34:	2302      	movs	r3, #2
  }
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a4c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d015      	beq.n	8008a84 <USBD_CDC_EP0_RxReady+0x46>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008a5e:	2bff      	cmp	r3, #255	; 0xff
 8008a60:	d010      	beq.n	8008a84 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008a70:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a78:	b292      	uxth	r2, r2
 8008a7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	22ff      	movs	r2, #255	; 0xff
 8008a80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2243      	movs	r2, #67	; 0x43
 8008a9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008a9e:	4b03      	ldr	r3, [pc, #12]	; (8008aac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	20000094 	.word	0x20000094

08008ab0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2243      	movs	r2, #67	; 0x43
 8008abc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008abe:	4b03      	ldr	r3, [pc, #12]	; (8008acc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bc80      	pop	{r7}
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	20000050 	.word	0x20000050

08008ad0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2243      	movs	r2, #67	; 0x43
 8008adc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008ade:	4b03      	ldr	r3, [pc, #12]	; (8008aec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bc80      	pop	{r7}
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	200000d8 	.word	0x200000d8

08008af0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	220a      	movs	r2, #10
 8008afc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008afe:	4b03      	ldr	r3, [pc, #12]	; (8008b0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bc80      	pop	{r7}
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	2000000c 	.word	0x2000000c

08008b10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d005      	beq.n	8008b30 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bc80      	pop	{r7}
 8008b3a:	4770      	bx	lr

08008b3c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b087      	sub	sp, #28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	4613      	mov	r3, r2
 8008b48:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b50:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b5a:	88fa      	ldrh	r2, [r7, #6]
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	371c      	adds	r7, #28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bc80      	pop	{r7}
 8008b6c:	4770      	bx	lr

08008b6e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b085      	sub	sp, #20
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr

08008b94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d017      	beq.n	8008bde <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	7c1b      	ldrb	r3, [r3, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d109      	bne.n	8008bca <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f004 f9a6 	bl	800cf14 <USBD_LL_PrepareReceive>
 8008bc8:	e007      	b.n	8008bda <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bd0:	2340      	movs	r3, #64	; 0x40
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f004 f99d 	bl	800cf14 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e000      	b.n	8008be0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008bde:	2302      	movs	r3, #2
  }
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e01a      	b.n	8008c36 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	79fa      	ldrb	r2, [r7, #7]
 8008c2c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f004 f80a 	bl	800cc48 <USBD_LL_Init>

  return USBD_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b085      	sub	sp, #20
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d006      	beq.n	8008c60 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	683a      	ldr	r2, [r7, #0]
 8008c56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	73fb      	strb	r3, [r7, #15]
 8008c5e:	e001      	b.n	8008c64 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008c60:	2302      	movs	r3, #2
 8008c62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bc80      	pop	{r7}
 8008c6e:	4770      	bx	lr

08008c70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f004 f83f 	bl	800ccfc <USBD_LL_Start>

  return USBD_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bc80      	pop	{r7}
 8008c9a:	4770      	bx	lr

08008c9c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ca8:	2302      	movs	r3, #2
 8008caa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00c      	beq.n	8008cd0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	78fa      	ldrb	r2, [r7, #3]
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	4798      	blx	r3
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d101      	bne.n	8008cd0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	78fa      	ldrb	r2, [r7, #3]
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	4798      	blx	r3

  return USBD_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 fed7 	bl	8009ac6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008d26:	461a      	mov	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008d34:	f003 031f 	and.w	r3, r3, #31
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d016      	beq.n	8008d6a <USBD_LL_SetupStage+0x6a>
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d81c      	bhi.n	8008d7a <USBD_LL_SetupStage+0x7a>
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d002      	beq.n	8008d4a <USBD_LL_SetupStage+0x4a>
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d008      	beq.n	8008d5a <USBD_LL_SetupStage+0x5a>
 8008d48:	e017      	b.n	8008d7a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f9ca 	bl	80090ec <USBD_StdDevReq>
      break;
 8008d58:	e01a      	b.n	8008d90 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fa2c 	bl	80091c0 <USBD_StdItfReq>
      break;
 8008d68:	e012      	b.n	8008d90 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fa6c 	bl	8009250 <USBD_StdEPReq>
      break;
 8008d78:	e00a      	b.n	8008d90 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008d80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f004 f817 	bl	800cdbc <USBD_LL_StallEP>
      break;
 8008d8e:	bf00      	nop
  }

  return USBD_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b086      	sub	sp, #24
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	460b      	mov	r3, r1
 8008da4:	607a      	str	r2, [r7, #4]
 8008da6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008da8:	7afb      	ldrb	r3, [r7, #11]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d14b      	bne.n	8008e46 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008db4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dbc:	2b03      	cmp	r3, #3
 8008dbe:	d134      	bne.n	8008e2a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d919      	bls.n	8008e00 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	68da      	ldr	r2, [r3, #12]
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	1ad2      	subs	r2, r2, r3
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d203      	bcs.n	8008dee <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	e002      	b.n	8008df4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	461a      	mov	r2, r3
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 ff56 	bl	8009caa <USBD_CtlContinueRx>
 8008dfe:	e038      	b.n	8008e72 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00a      	beq.n	8008e22 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d105      	bne.n	8008e22 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 ff53 	bl	8009cce <USBD_CtlSendStatus>
 8008e28:	e023      	b.n	8008e72 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e30:	2b05      	cmp	r3, #5
 8008e32:	d11e      	bne.n	8008e72 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f003 ffbc 	bl	800cdbc <USBD_LL_StallEP>
 8008e44:	e015      	b.n	8008e72 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00d      	beq.n	8008e6e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d108      	bne.n	8008e6e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	7afa      	ldrb	r2, [r7, #11]
 8008e66:	4611      	mov	r1, r2
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	4798      	blx	r3
 8008e6c:	e001      	b.n	8008e72 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e000      	b.n	8008e74 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3718      	adds	r7, #24
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	460b      	mov	r3, r1
 8008e86:	607a      	str	r2, [r7, #4]
 8008e88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008e8a:	7afb      	ldrb	r3, [r7, #11]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d17f      	bne.n	8008f90 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3314      	adds	r3, #20
 8008e94:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d15c      	bne.n	8008f5a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	68da      	ldr	r2, [r3, #12]
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d915      	bls.n	8008ed8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	1ad2      	subs	r2, r2, r3
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6879      	ldr	r1, [r7, #4]
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 fec0 	bl	8009c4a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eca:	2300      	movs	r3, #0
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2100      	movs	r1, #0
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f004 f81f 	bl	800cf14 <USBD_LL_PrepareReceive>
 8008ed6:	e04e      	b.n	8008f76 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	6912      	ldr	r2, [r2, #16]
 8008ee0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ee4:	fb01 f202 	mul.w	r2, r1, r2
 8008ee8:	1a9b      	subs	r3, r3, r2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d11c      	bne.n	8008f28 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	689a      	ldr	r2, [r3, #8]
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d316      	bcc.n	8008f28 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d20f      	bcs.n	8008f28 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 fe9c 	bl	8009c4a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	2100      	movs	r1, #0
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f003 fff7 	bl	800cf14 <USBD_LL_PrepareReceive>
 8008f26:	e026      	b.n	8008f76 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00a      	beq.n	8008f4a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d105      	bne.n	8008f4a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008f4a:	2180      	movs	r1, #128	; 0x80
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f003 ff35 	bl	800cdbc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 fece 	bl	8009cf4 <USBD_CtlReceiveStatus>
 8008f58:	e00d      	b.n	8008f76 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	d004      	beq.n	8008f6e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d103      	bne.n	8008f76 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008f6e:	2180      	movs	r1, #128	; 0x80
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f003 ff23 	bl	800cdbc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d11d      	bne.n	8008fbc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f7ff fe81 	bl	8008c88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008f8e:	e015      	b.n	8008fbc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00d      	beq.n	8008fb8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	d108      	bne.n	8008fb8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	7afa      	ldrb	r2, [r7, #11]
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	4798      	blx	r3
 8008fb6:	e001      	b.n	8008fbc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e000      	b.n	8008fbe <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3718      	adds	r7, #24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fce:	2340      	movs	r3, #64	; 0x40
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f003 feac 	bl	800cd32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2240      	movs	r2, #64	; 0x40
 8008fe6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fea:	2340      	movs	r3, #64	; 0x40
 8008fec:	2200      	movs	r2, #0
 8008fee:	2180      	movs	r1, #128	; 0x80
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f003 fe9e 	bl	800cd32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2240      	movs	r2, #64	; 0x40
 8009000:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009026:	2b00      	cmp	r3, #0
 8009028:	d009      	beq.n	800903e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	6852      	ldr	r2, [r2, #4]
 8009036:	b2d2      	uxtb	r2, r2
 8009038:	4611      	mov	r1, r2
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	4798      	blx	r3
  }

  return USBD_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	78fa      	ldrb	r2, [r7, #3]
 8009058:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	bc80      	pop	{r7}
 8009064:	4770      	bx	lr

08009066 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009066:	b480      	push	{r7}
 8009068:	b083      	sub	sp, #12
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2204      	movs	r2, #4
 800907e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	bc80      	pop	{r7}
 800908c:	4770      	bx	lr

0800908e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800908e:	b480      	push	{r7}
 8009090:	b083      	sub	sp, #12
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800909c:	2b04      	cmp	r3, #4
 800909e:	d105      	bne.n	80090ac <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bc80      	pop	{r7}
 80090b6:	4770      	bx	lr

080090b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d10b      	bne.n	80090e2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d005      	beq.n	80090e2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009102:	2b40      	cmp	r3, #64	; 0x40
 8009104:	d005      	beq.n	8009112 <USBD_StdDevReq+0x26>
 8009106:	2b40      	cmp	r3, #64	; 0x40
 8009108:	d84f      	bhi.n	80091aa <USBD_StdDevReq+0xbe>
 800910a:	2b00      	cmp	r3, #0
 800910c:	d009      	beq.n	8009122 <USBD_StdDevReq+0x36>
 800910e:	2b20      	cmp	r3, #32
 8009110:	d14b      	bne.n	80091aa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	4798      	blx	r3
      break;
 8009120:	e048      	b.n	80091b4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	785b      	ldrb	r3, [r3, #1]
 8009126:	2b09      	cmp	r3, #9
 8009128:	d839      	bhi.n	800919e <USBD_StdDevReq+0xb2>
 800912a:	a201      	add	r2, pc, #4	; (adr r2, 8009130 <USBD_StdDevReq+0x44>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	08009181 	.word	0x08009181
 8009134:	08009195 	.word	0x08009195
 8009138:	0800919f 	.word	0x0800919f
 800913c:	0800918b 	.word	0x0800918b
 8009140:	0800919f 	.word	0x0800919f
 8009144:	08009163 	.word	0x08009163
 8009148:	08009159 	.word	0x08009159
 800914c:	0800919f 	.word	0x0800919f
 8009150:	08009177 	.word	0x08009177
 8009154:	0800916d 	.word	0x0800916d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f9dc 	bl	8009518 <USBD_GetDescriptor>
          break;
 8009160:	e022      	b.n	80091a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fb3f 	bl	80097e8 <USBD_SetAddress>
          break;
 800916a:	e01d      	b.n	80091a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fb7e 	bl	8009870 <USBD_SetConfig>
          break;
 8009174:	e018      	b.n	80091a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fc07 	bl	800998c <USBD_GetConfig>
          break;
 800917e:	e013      	b.n	80091a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fc37 	bl	80099f6 <USBD_GetStatus>
          break;
 8009188:	e00e      	b.n	80091a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fc65 	bl	8009a5c <USBD_SetFeature>
          break;
 8009192:	e009      	b.n	80091a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fc74 	bl	8009a84 <USBD_ClrFeature>
          break;
 800919c:	e004      	b.n	80091a8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fccc 	bl	8009b3e <USBD_CtlError>
          break;
 80091a6:	bf00      	nop
      }
      break;
 80091a8:	e004      	b.n	80091b4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fcc6 	bl	8009b3e <USBD_CtlError>
      break;
 80091b2:	bf00      	nop
  }

  return ret;
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop

080091c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091d6:	2b40      	cmp	r3, #64	; 0x40
 80091d8:	d005      	beq.n	80091e6 <USBD_StdItfReq+0x26>
 80091da:	2b40      	cmp	r3, #64	; 0x40
 80091dc:	d82e      	bhi.n	800923c <USBD_StdItfReq+0x7c>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <USBD_StdItfReq+0x26>
 80091e2:	2b20      	cmp	r3, #32
 80091e4:	d12a      	bne.n	800923c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ec:	3b01      	subs	r3, #1
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d81d      	bhi.n	800922e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	889b      	ldrh	r3, [r3, #4]
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d813      	bhi.n	8009224 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	4798      	blx	r3
 800920a:	4603      	mov	r3, r0
 800920c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	88db      	ldrh	r3, [r3, #6]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d110      	bne.n	8009238 <USBD_StdItfReq+0x78>
 8009216:	7bfb      	ldrb	r3, [r7, #15]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10d      	bne.n	8009238 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fd56 	bl	8009cce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009222:	e009      	b.n	8009238 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fc89 	bl	8009b3e <USBD_CtlError>
          break;
 800922c:	e004      	b.n	8009238 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fc84 	bl	8009b3e <USBD_CtlError>
          break;
 8009236:	e000      	b.n	800923a <USBD_StdItfReq+0x7a>
          break;
 8009238:	bf00      	nop
      }
      break;
 800923a:	e004      	b.n	8009246 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fc7d 	bl	8009b3e <USBD_CtlError>
      break;
 8009244:	bf00      	nop
  }

  return USBD_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	889b      	ldrh	r3, [r3, #4]
 8009262:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800926c:	2b40      	cmp	r3, #64	; 0x40
 800926e:	d007      	beq.n	8009280 <USBD_StdEPReq+0x30>
 8009270:	2b40      	cmp	r3, #64	; 0x40
 8009272:	f200 8146 	bhi.w	8009502 <USBD_StdEPReq+0x2b2>
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <USBD_StdEPReq+0x40>
 800927a:	2b20      	cmp	r3, #32
 800927c:	f040 8141 	bne.w	8009502 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
      break;
 800928e:	e13d      	b.n	800950c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009298:	2b20      	cmp	r3, #32
 800929a:	d10a      	bne.n	80092b2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	4798      	blx	r3
 80092aa:	4603      	mov	r3, r0
 80092ac:	73fb      	strb	r3, [r7, #15]

        return ret;
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	e12d      	b.n	800950e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	785b      	ldrb	r3, [r3, #1]
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d007      	beq.n	80092ca <USBD_StdEPReq+0x7a>
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	f300 811b 	bgt.w	80094f6 <USBD_StdEPReq+0x2a6>
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d072      	beq.n	80093aa <USBD_StdEPReq+0x15a>
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d03a      	beq.n	800933e <USBD_StdEPReq+0xee>
 80092c8:	e115      	b.n	80094f6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d002      	beq.n	80092da <USBD_StdEPReq+0x8a>
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d015      	beq.n	8009304 <USBD_StdEPReq+0xb4>
 80092d8:	e02b      	b.n	8009332 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00c      	beq.n	80092fa <USBD_StdEPReq+0xaa>
 80092e0:	7bbb      	ldrb	r3, [r7, #14]
 80092e2:	2b80      	cmp	r3, #128	; 0x80
 80092e4:	d009      	beq.n	80092fa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80092e6:	7bbb      	ldrb	r3, [r7, #14]
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f003 fd66 	bl	800cdbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80092f0:	2180      	movs	r1, #128	; 0x80
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f003 fd62 	bl	800cdbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092f8:	e020      	b.n	800933c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fc1e 	bl	8009b3e <USBD_CtlError>
              break;
 8009302:	e01b      	b.n	800933c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	885b      	ldrh	r3, [r3, #2]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10e      	bne.n	800932a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00b      	beq.n	800932a <USBD_StdEPReq+0xda>
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	2b80      	cmp	r3, #128	; 0x80
 8009316:	d008      	beq.n	800932a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	88db      	ldrh	r3, [r3, #6]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d104      	bne.n	800932a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f003 fd49 	bl	800cdbc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fccf 	bl	8009cce <USBD_CtlSendStatus>

              break;
 8009330:	e004      	b.n	800933c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fc02 	bl	8009b3e <USBD_CtlError>
              break;
 800933a:	bf00      	nop
          }
          break;
 800933c:	e0e0      	b.n	8009500 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009344:	2b02      	cmp	r3, #2
 8009346:	d002      	beq.n	800934e <USBD_StdEPReq+0xfe>
 8009348:	2b03      	cmp	r3, #3
 800934a:	d015      	beq.n	8009378 <USBD_StdEPReq+0x128>
 800934c:	e026      	b.n	800939c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800934e:	7bbb      	ldrb	r3, [r7, #14]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00c      	beq.n	800936e <USBD_StdEPReq+0x11e>
 8009354:	7bbb      	ldrb	r3, [r7, #14]
 8009356:	2b80      	cmp	r3, #128	; 0x80
 8009358:	d009      	beq.n	800936e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	4619      	mov	r1, r3
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f003 fd2c 	bl	800cdbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009364:	2180      	movs	r1, #128	; 0x80
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f003 fd28 	bl	800cdbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800936c:	e01c      	b.n	80093a8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fbe4 	bl	8009b3e <USBD_CtlError>
              break;
 8009376:	e017      	b.n	80093a8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	885b      	ldrh	r3, [r3, #2]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d112      	bne.n	80093a6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009386:	2b00      	cmp	r3, #0
 8009388:	d004      	beq.n	8009394 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800938a:	7bbb      	ldrb	r3, [r7, #14]
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f003 fd33 	bl	800cdfa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fc9a 	bl	8009cce <USBD_CtlSendStatus>
              }
              break;
 800939a:	e004      	b.n	80093a6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fbcd 	bl	8009b3e <USBD_CtlError>
              break;
 80093a4:	e000      	b.n	80093a8 <USBD_StdEPReq+0x158>
              break;
 80093a6:	bf00      	nop
          }
          break;
 80093a8:	e0aa      	b.n	8009500 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d002      	beq.n	80093ba <USBD_StdEPReq+0x16a>
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	d032      	beq.n	800941e <USBD_StdEPReq+0x1ce>
 80093b8:	e097      	b.n	80094ea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093ba:	7bbb      	ldrb	r3, [r7, #14]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d007      	beq.n	80093d0 <USBD_StdEPReq+0x180>
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	2b80      	cmp	r3, #128	; 0x80
 80093c4:	d004      	beq.n	80093d0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fbb8 	bl	8009b3e <USBD_CtlError>
                break;
 80093ce:	e091      	b.n	80094f4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	da0b      	bge.n	80093f0 <USBD_StdEPReq+0x1a0>
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093de:	4613      	mov	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	3310      	adds	r3, #16
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	4413      	add	r3, r2
 80093ec:	3304      	adds	r3, #4
 80093ee:	e00b      	b.n	8009408 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093f6:	4613      	mov	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	4413      	add	r3, r2
 8009406:	3304      	adds	r3, #4
 8009408:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2202      	movs	r2, #2
 8009414:	4619      	mov	r1, r3
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fbfb 	bl	8009c12 <USBD_CtlSendData>
              break;
 800941c:	e06a      	b.n	80094f4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800941e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009422:	2b00      	cmp	r3, #0
 8009424:	da11      	bge.n	800944a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009426:	7bbb      	ldrb	r3, [r7, #14]
 8009428:	f003 020f 	and.w	r2, r3, #15
 800942c:	6879      	ldr	r1, [r7, #4]
 800942e:	4613      	mov	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	440b      	add	r3, r1
 8009438:	3318      	adds	r3, #24
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d117      	bne.n	8009470 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fb7b 	bl	8009b3e <USBD_CtlError>
                  break;
 8009448:	e054      	b.n	80094f4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	f003 020f 	and.w	r2, r3, #15
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d104      	bne.n	8009470 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fb68 	bl	8009b3e <USBD_CtlError>
                  break;
 800946e:	e041      	b.n	80094f4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009474:	2b00      	cmp	r3, #0
 8009476:	da0b      	bge.n	8009490 <USBD_StdEPReq+0x240>
 8009478:	7bbb      	ldrb	r3, [r7, #14]
 800947a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800947e:	4613      	mov	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	3310      	adds	r3, #16
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	4413      	add	r3, r2
 800948c:	3304      	adds	r3, #4
 800948e:	e00b      	b.n	80094a8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009490:	7bbb      	ldrb	r3, [r7, #14]
 8009492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	4413      	add	r3, r2
 80094a6:	3304      	adds	r3, #4
 80094a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d002      	beq.n	80094b6 <USBD_StdEPReq+0x266>
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	2b80      	cmp	r3, #128	; 0x80
 80094b4:	d103      	bne.n	80094be <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2200      	movs	r2, #0
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	e00e      	b.n	80094dc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	4619      	mov	r1, r3
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f003 fcb8 	bl	800ce38 <USBD_LL_IsStallEP>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2201      	movs	r2, #1
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	e002      	b.n	80094dc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2202      	movs	r2, #2
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fb95 	bl	8009c12 <USBD_CtlSendData>
              break;
 80094e8:	e004      	b.n	80094f4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80094ea:	6839      	ldr	r1, [r7, #0]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fb26 	bl	8009b3e <USBD_CtlError>
              break;
 80094f2:	bf00      	nop
          }
          break;
 80094f4:	e004      	b.n	8009500 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fb20 	bl	8009b3e <USBD_CtlError>
          break;
 80094fe:	bf00      	nop
      }
      break;
 8009500:	e004      	b.n	800950c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fb1a 	bl	8009b3e <USBD_CtlError>
      break;
 800950a:	bf00      	nop
  }

  return ret;
 800950c:	7bfb      	ldrb	r3, [r7, #15]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	885b      	ldrh	r3, [r3, #2]
 8009532:	0a1b      	lsrs	r3, r3, #8
 8009534:	b29b      	uxth	r3, r3
 8009536:	3b01      	subs	r3, #1
 8009538:	2b06      	cmp	r3, #6
 800953a:	f200 8128 	bhi.w	800978e <USBD_GetDescriptor+0x276>
 800953e:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <USBD_GetDescriptor+0x2c>)
 8009540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009544:	08009561 	.word	0x08009561
 8009548:	08009579 	.word	0x08009579
 800954c:	080095b9 	.word	0x080095b9
 8009550:	0800978f 	.word	0x0800978f
 8009554:	0800978f 	.word	0x0800978f
 8009558:	0800972f 	.word	0x0800972f
 800955c:	0800975b 	.word	0x0800975b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	7c12      	ldrb	r2, [r2, #16]
 800956c:	f107 0108 	add.w	r1, r7, #8
 8009570:	4610      	mov	r0, r2
 8009572:	4798      	blx	r3
 8009574:	60f8      	str	r0, [r7, #12]
      break;
 8009576:	e112      	b.n	800979e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7c1b      	ldrb	r3, [r3, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10d      	bne.n	800959c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	f107 0208 	add.w	r2, r7, #8
 800958c:	4610      	mov	r0, r2
 800958e:	4798      	blx	r3
 8009590:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3301      	adds	r3, #1
 8009596:	2202      	movs	r2, #2
 8009598:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800959a:	e100      	b.n	800979e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a4:	f107 0208 	add.w	r2, r7, #8
 80095a8:	4610      	mov	r0, r2
 80095aa:	4798      	blx	r3
 80095ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3301      	adds	r3, #1
 80095b2:	2202      	movs	r2, #2
 80095b4:	701a      	strb	r2, [r3, #0]
      break;
 80095b6:	e0f2      	b.n	800979e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	885b      	ldrh	r3, [r3, #2]
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	2b05      	cmp	r3, #5
 80095c0:	f200 80ac 	bhi.w	800971c <USBD_GetDescriptor+0x204>
 80095c4:	a201      	add	r2, pc, #4	; (adr r2, 80095cc <USBD_GetDescriptor+0xb4>)
 80095c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ca:	bf00      	nop
 80095cc:	080095e5 	.word	0x080095e5
 80095d0:	08009619 	.word	0x08009619
 80095d4:	0800964d 	.word	0x0800964d
 80095d8:	08009681 	.word	0x08009681
 80095dc:	080096b5 	.word	0x080096b5
 80095e0:	080096e9 	.word	0x080096e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00b      	beq.n	8009608 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	7c12      	ldrb	r2, [r2, #16]
 80095fc:	f107 0108 	add.w	r1, r7, #8
 8009600:	4610      	mov	r0, r2
 8009602:	4798      	blx	r3
 8009604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009606:	e091      	b.n	800972c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fa97 	bl	8009b3e <USBD_CtlError>
            err++;
 8009610:	7afb      	ldrb	r3, [r7, #11]
 8009612:	3301      	adds	r3, #1
 8009614:	72fb      	strb	r3, [r7, #11]
          break;
 8009616:	e089      	b.n	800972c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00b      	beq.n	800963c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	7c12      	ldrb	r2, [r2, #16]
 8009630:	f107 0108 	add.w	r1, r7, #8
 8009634:	4610      	mov	r0, r2
 8009636:	4798      	blx	r3
 8009638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800963a:	e077      	b.n	800972c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fa7d 	bl	8009b3e <USBD_CtlError>
            err++;
 8009644:	7afb      	ldrb	r3, [r7, #11]
 8009646:	3301      	adds	r3, #1
 8009648:	72fb      	strb	r3, [r7, #11]
          break;
 800964a:	e06f      	b.n	800972c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00b      	beq.n	8009670 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	7c12      	ldrb	r2, [r2, #16]
 8009664:	f107 0108 	add.w	r1, r7, #8
 8009668:	4610      	mov	r0, r2
 800966a:	4798      	blx	r3
 800966c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800966e:	e05d      	b.n	800972c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 fa63 	bl	8009b3e <USBD_CtlError>
            err++;
 8009678:	7afb      	ldrb	r3, [r7, #11]
 800967a:	3301      	adds	r3, #1
 800967c:	72fb      	strb	r3, [r7, #11]
          break;
 800967e:	e055      	b.n	800972c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00b      	beq.n	80096a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	7c12      	ldrb	r2, [r2, #16]
 8009698:	f107 0108 	add.w	r1, r7, #8
 800969c:	4610      	mov	r0, r2
 800969e:	4798      	blx	r3
 80096a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096a2:	e043      	b.n	800972c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fa49 	bl	8009b3e <USBD_CtlError>
            err++;
 80096ac:	7afb      	ldrb	r3, [r7, #11]
 80096ae:	3301      	adds	r3, #1
 80096b0:	72fb      	strb	r3, [r7, #11]
          break;
 80096b2:	e03b      	b.n	800972c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00b      	beq.n	80096d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	7c12      	ldrb	r2, [r2, #16]
 80096cc:	f107 0108 	add.w	r1, r7, #8
 80096d0:	4610      	mov	r0, r2
 80096d2:	4798      	blx	r3
 80096d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096d6:	e029      	b.n	800972c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fa2f 	bl	8009b3e <USBD_CtlError>
            err++;
 80096e0:	7afb      	ldrb	r3, [r7, #11]
 80096e2:	3301      	adds	r3, #1
 80096e4:	72fb      	strb	r3, [r7, #11]
          break;
 80096e6:	e021      	b.n	800972c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00b      	beq.n	800970c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	7c12      	ldrb	r2, [r2, #16]
 8009700:	f107 0108 	add.w	r1, r7, #8
 8009704:	4610      	mov	r0, r2
 8009706:	4798      	blx	r3
 8009708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800970a:	e00f      	b.n	800972c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fa15 	bl	8009b3e <USBD_CtlError>
            err++;
 8009714:	7afb      	ldrb	r3, [r7, #11]
 8009716:	3301      	adds	r3, #1
 8009718:	72fb      	strb	r3, [r7, #11]
          break;
 800971a:	e007      	b.n	800972c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fa0d 	bl	8009b3e <USBD_CtlError>
          err++;
 8009724:	7afb      	ldrb	r3, [r7, #11]
 8009726:	3301      	adds	r3, #1
 8009728:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800972a:	e038      	b.n	800979e <USBD_GetDescriptor+0x286>
 800972c:	e037      	b.n	800979e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	7c1b      	ldrb	r3, [r3, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d109      	bne.n	800974a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800973c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973e:	f107 0208 	add.w	r2, r7, #8
 8009742:	4610      	mov	r0, r2
 8009744:	4798      	blx	r3
 8009746:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009748:	e029      	b.n	800979e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f9f6 	bl	8009b3e <USBD_CtlError>
        err++;
 8009752:	7afb      	ldrb	r3, [r7, #11]
 8009754:	3301      	adds	r3, #1
 8009756:	72fb      	strb	r3, [r7, #11]
      break;
 8009758:	e021      	b.n	800979e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	7c1b      	ldrb	r3, [r3, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10d      	bne.n	800977e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800976a:	f107 0208 	add.w	r2, r7, #8
 800976e:	4610      	mov	r0, r2
 8009770:	4798      	blx	r3
 8009772:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	3301      	adds	r3, #1
 8009778:	2207      	movs	r2, #7
 800977a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800977c:	e00f      	b.n	800979e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f9dc 	bl	8009b3e <USBD_CtlError>
        err++;
 8009786:	7afb      	ldrb	r3, [r7, #11]
 8009788:	3301      	adds	r3, #1
 800978a:	72fb      	strb	r3, [r7, #11]
      break;
 800978c:	e007      	b.n	800979e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f9d4 	bl	8009b3e <USBD_CtlError>
      err++;
 8009796:	7afb      	ldrb	r3, [r7, #11]
 8009798:	3301      	adds	r3, #1
 800979a:	72fb      	strb	r3, [r7, #11]
      break;
 800979c:	bf00      	nop
  }

  if (err != 0U)
 800979e:	7afb      	ldrb	r3, [r7, #11]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d11c      	bne.n	80097de <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80097a4:	893b      	ldrh	r3, [r7, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d011      	beq.n	80097ce <USBD_GetDescriptor+0x2b6>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	88db      	ldrh	r3, [r3, #6]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00d      	beq.n	80097ce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	88da      	ldrh	r2, [r3, #6]
 80097b6:	893b      	ldrh	r3, [r7, #8]
 80097b8:	4293      	cmp	r3, r2
 80097ba:	bf28      	it	cs
 80097bc:	4613      	movcs	r3, r2
 80097be:	b29b      	uxth	r3, r3
 80097c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097c2:	893b      	ldrh	r3, [r7, #8]
 80097c4:	461a      	mov	r2, r3
 80097c6:	68f9      	ldr	r1, [r7, #12]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fa22 	bl	8009c12 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	88db      	ldrh	r3, [r3, #6]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d104      	bne.n	80097e0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fa79 	bl	8009cce <USBD_CtlSendStatus>
 80097dc:	e000      	b.n	80097e0 <USBD_GetDescriptor+0x2c8>
    return;
 80097de:	bf00      	nop
    }
  }
}
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop

080097e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	889b      	ldrh	r3, [r3, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d130      	bne.n	800985c <USBD_SetAddress+0x74>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	88db      	ldrh	r3, [r3, #6]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d12c      	bne.n	800985c <USBD_SetAddress+0x74>
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	885b      	ldrh	r3, [r3, #2]
 8009806:	2b7f      	cmp	r3, #127	; 0x7f
 8009808:	d828      	bhi.n	800985c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	885b      	ldrh	r3, [r3, #2]
 800980e:	b2db      	uxtb	r3, r3
 8009810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009814:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800981c:	2b03      	cmp	r3, #3
 800981e:	d104      	bne.n	800982a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f98b 	bl	8009b3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009828:	e01d      	b.n	8009866 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	7bfa      	ldrb	r2, [r7, #15]
 800982e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f003 fb2a 	bl	800ce90 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fa46 	bl	8009cce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d004      	beq.n	8009852 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2202      	movs	r2, #2
 800984c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009850:	e009      	b.n	8009866 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800985a:	e004      	b.n	8009866 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f96d 	bl	8009b3e <USBD_CtlError>
  }
}
 8009864:	bf00      	nop
 8009866:	bf00      	nop
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	885b      	ldrh	r3, [r3, #2]
 800987e:	b2da      	uxtb	r2, r3
 8009880:	4b41      	ldr	r3, [pc, #260]	; (8009988 <USBD_SetConfig+0x118>)
 8009882:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009884:	4b40      	ldr	r3, [pc, #256]	; (8009988 <USBD_SetConfig+0x118>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d904      	bls.n	8009896 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f955 	bl	8009b3e <USBD_CtlError>
 8009894:	e075      	b.n	8009982 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800989c:	2b02      	cmp	r3, #2
 800989e:	d002      	beq.n	80098a6 <USBD_SetConfig+0x36>
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d023      	beq.n	80098ec <USBD_SetConfig+0x7c>
 80098a4:	e062      	b.n	800996c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80098a6:	4b38      	ldr	r3, [pc, #224]	; (8009988 <USBD_SetConfig+0x118>)
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d01a      	beq.n	80098e4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80098ae:	4b36      	ldr	r3, [pc, #216]	; (8009988 <USBD_SetConfig+0x118>)
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2203      	movs	r2, #3
 80098bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80098c0:	4b31      	ldr	r3, [pc, #196]	; (8009988 <USBD_SetConfig+0x118>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff f9e8 	bl	8008c9c <USBD_SetClassConfig>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d104      	bne.n	80098dc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f932 	bl	8009b3e <USBD_CtlError>
            return;
 80098da:	e052      	b.n	8009982 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f9f6 	bl	8009cce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80098e2:	e04e      	b.n	8009982 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f9f2 	bl	8009cce <USBD_CtlSendStatus>
        break;
 80098ea:	e04a      	b.n	8009982 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80098ec:	4b26      	ldr	r3, [pc, #152]	; (8009988 <USBD_SetConfig+0x118>)
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d112      	bne.n	800991a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2202      	movs	r2, #2
 80098f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80098fc:	4b22      	ldr	r3, [pc, #136]	; (8009988 <USBD_SetConfig+0x118>)
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	461a      	mov	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009906:	4b20      	ldr	r3, [pc, #128]	; (8009988 <USBD_SetConfig+0x118>)
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7ff f9e4 	bl	8008cda <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f9db 	bl	8009cce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009918:	e033      	b.n	8009982 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800991a:	4b1b      	ldr	r3, [pc, #108]	; (8009988 <USBD_SetConfig+0x118>)
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	461a      	mov	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	429a      	cmp	r2, r3
 8009926:	d01d      	beq.n	8009964 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff f9d2 	bl	8008cda <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009936:	4b14      	ldr	r3, [pc, #80]	; (8009988 <USBD_SetConfig+0x118>)
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	461a      	mov	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009940:	4b11      	ldr	r3, [pc, #68]	; (8009988 <USBD_SetConfig+0x118>)
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	4619      	mov	r1, r3
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7ff f9a8 	bl	8008c9c <USBD_SetClassConfig>
 800994c:	4603      	mov	r3, r0
 800994e:	2b02      	cmp	r3, #2
 8009950:	d104      	bne.n	800995c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f8f2 	bl	8009b3e <USBD_CtlError>
            return;
 800995a:	e012      	b.n	8009982 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f9b6 	bl	8009cce <USBD_CtlSendStatus>
        break;
 8009962:	e00e      	b.n	8009982 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f9b2 	bl	8009cce <USBD_CtlSendStatus>
        break;
 800996a:	e00a      	b.n	8009982 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f8e5 	bl	8009b3e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009974:	4b04      	ldr	r3, [pc, #16]	; (8009988 <USBD_SetConfig+0x118>)
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff f9ad 	bl	8008cda <USBD_ClrClassConfig>
        break;
 8009980:	bf00      	nop
    }
  }
}
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	200007e4 	.word	0x200007e4

0800998c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	88db      	ldrh	r3, [r3, #6]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d004      	beq.n	80099a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 f8cc 	bl	8009b3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099a6:	e022      	b.n	80099ee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ae:	2b02      	cmp	r3, #2
 80099b0:	dc02      	bgt.n	80099b8 <USBD_GetConfig+0x2c>
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	dc03      	bgt.n	80099be <USBD_GetConfig+0x32>
 80099b6:	e015      	b.n	80099e4 <USBD_GetConfig+0x58>
 80099b8:	2b03      	cmp	r3, #3
 80099ba:	d00b      	beq.n	80099d4 <USBD_GetConfig+0x48>
 80099bc:	e012      	b.n	80099e4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3308      	adds	r3, #8
 80099c8:	2201      	movs	r2, #1
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f920 	bl	8009c12 <USBD_CtlSendData>
        break;
 80099d2:	e00c      	b.n	80099ee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	3304      	adds	r3, #4
 80099d8:	2201      	movs	r2, #1
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f918 	bl	8009c12 <USBD_CtlSendData>
        break;
 80099e2:	e004      	b.n	80099ee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f8a9 	bl	8009b3e <USBD_CtlError>
        break;
 80099ec:	bf00      	nop
}
 80099ee:	bf00      	nop
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b082      	sub	sp, #8
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a06:	3b01      	subs	r3, #1
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d81e      	bhi.n	8009a4a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	88db      	ldrh	r3, [r3, #6]
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d004      	beq.n	8009a1e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f891 	bl	8009b3e <USBD_CtlError>
        break;
 8009a1c:	e01a      	b.n	8009a54 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2201      	movs	r2, #1
 8009a22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d005      	beq.n	8009a3a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	f043 0202 	orr.w	r2, r3, #2
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	330c      	adds	r3, #12
 8009a3e:	2202      	movs	r2, #2
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f8e5 	bl	8009c12 <USBD_CtlSendData>
      break;
 8009a48:	e004      	b.n	8009a54 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009a4a:	6839      	ldr	r1, [r7, #0]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f876 	bl	8009b3e <USBD_CtlError>
      break;
 8009a52:	bf00      	nop
  }
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	885b      	ldrh	r3, [r3, #2]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d106      	bne.n	8009a7c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f929 	bl	8009cce <USBD_CtlSendStatus>
  }
}
 8009a7c:	bf00      	nop
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a94:	3b01      	subs	r3, #1
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d80b      	bhi.n	8009ab2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	885b      	ldrh	r3, [r3, #2]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d10c      	bne.n	8009abc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f90f 	bl	8009cce <USBD_CtlSendStatus>
      }
      break;
 8009ab0:	e004      	b.n	8009abc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f842 	bl	8009b3e <USBD_CtlError>
      break;
 8009aba:	e000      	b.n	8009abe <USBD_ClrFeature+0x3a>
      break;
 8009abc:	bf00      	nop
  }
}
 8009abe:	bf00      	nop
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	781a      	ldrb	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	785a      	ldrb	r2, [r3, #1]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	3302      	adds	r3, #2
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	3303      	adds	r3, #3
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	021b      	lsls	r3, r3, #8
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	4413      	add	r3, r2
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	3304      	adds	r3, #4
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	3305      	adds	r3, #5
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	021b      	lsls	r3, r3, #8
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	4413      	add	r3, r2
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	3306      	adds	r3, #6
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	3307      	adds	r3, #7
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	021b      	lsls	r3, r3, #8
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	4413      	add	r3, r2
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	80da      	strh	r2, [r3, #6]

}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bc80      	pop	{r7}
 8009b3c:	4770      	bx	lr

08009b3e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b082      	sub	sp, #8
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009b48:	2180      	movs	r1, #128	; 0x80
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f003 f936 	bl	800cdbc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009b50:	2100      	movs	r1, #0
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f003 f932 	bl	800cdbc <USBD_LL_StallEP>
}
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d032      	beq.n	8009bdc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f000 f834 	bl	8009be4 <USBD_GetLen>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	3301      	adds	r3, #1
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	75fa      	strb	r2, [r7, #23]
 8009b90:	461a      	mov	r2, r3
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	4413      	add	r3, r2
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	7812      	ldrb	r2, [r2, #0]
 8009b9a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	75fa      	strb	r2, [r7, #23]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	2203      	movs	r2, #3
 8009baa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009bac:	e012      	b.n	8009bd4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	60fa      	str	r2, [r7, #12]
 8009bb4:	7dfa      	ldrb	r2, [r7, #23]
 8009bb6:	1c51      	adds	r1, r2, #1
 8009bb8:	75f9      	strb	r1, [r7, #23]
 8009bba:	4611      	mov	r1, r2
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	440a      	add	r2, r1
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
 8009bc6:	1c5a      	adds	r2, r3, #1
 8009bc8:	75fa      	strb	r2, [r7, #23]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	4413      	add	r3, r2
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1e8      	bne.n	8009bae <USBD_GetString+0x4e>
    }
  }
}
 8009bdc:	bf00      	nop
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009bf0:	e005      	b.n	8009bfe <USBD_GetLen+0x1a>
  {
    len++;
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1f5      	bne.n	8009bf2 <USBD_GetLen+0xe>
  }

  return len;
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bc80      	pop	{r7}
 8009c10:	4770      	bx	lr

08009c12 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b084      	sub	sp, #16
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	60f8      	str	r0, [r7, #12]
 8009c1a:	60b9      	str	r1, [r7, #8]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2202      	movs	r2, #2
 8009c24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c28:	88fa      	ldrh	r2, [r7, #6]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009c2e:	88fa      	ldrh	r2, [r7, #6]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c34:	88fb      	ldrh	r3, [r7, #6]
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	2100      	movs	r1, #0
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f003 f947 	bl	800cece <USBD_LL_Transmit>

  return USBD_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b084      	sub	sp, #16
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	60f8      	str	r0, [r7, #12]
 8009c52:	60b9      	str	r1, [r7, #8]
 8009c54:	4613      	mov	r3, r2
 8009c56:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c58:	88fb      	ldrh	r3, [r7, #6]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f003 f935 	bl	800cece <USBD_LL_Transmit>

  return USBD_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b084      	sub	sp, #16
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	60f8      	str	r0, [r7, #12]
 8009c76:	60b9      	str	r1, [r7, #8]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2203      	movs	r2, #3
 8009c80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009c84:	88fa      	ldrh	r2, [r7, #6]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009c8c:	88fa      	ldrh	r2, [r7, #6]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c94:	88fb      	ldrh	r3, [r7, #6]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	2100      	movs	r1, #0
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f003 f93a 	bl	800cf14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b084      	sub	sp, #16
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	60f8      	str	r0, [r7, #12]
 8009cb2:	60b9      	str	r1, [r7, #8]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cb8:	88fb      	ldrh	r3, [r7, #6]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f003 f928 	bl	800cf14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2204      	movs	r2, #4
 8009cda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cde:	2300      	movs	r3, #0
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f003 f8f2 	bl	800cece <USBD_LL_Transmit>

  return USBD_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2205      	movs	r2, #5
 8009d00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d04:	2300      	movs	r3, #0
 8009d06:	2200      	movs	r2, #0
 8009d08:	2100      	movs	r1, #0
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f003 f902 	bl	800cf14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
	...

08009d1c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d22:	f3ef 8305 	mrs	r3, IPSR
 8009d26:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10f      	bne.n	8009d4e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8009d32:	607b      	str	r3, [r7, #4]
  return(result);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d109      	bne.n	8009d4e <osKernelInitialize+0x32>
 8009d3a:	4b10      	ldr	r3, [pc, #64]	; (8009d7c <osKernelInitialize+0x60>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d109      	bne.n	8009d56 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d42:	f3ef 8311 	mrs	r3, BASEPRI
 8009d46:	603b      	str	r3, [r7, #0]
  return(result);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009d4e:	f06f 0305 	mvn.w	r3, #5
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	e00c      	b.n	8009d70 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d56:	4b09      	ldr	r3, [pc, #36]	; (8009d7c <osKernelInitialize+0x60>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d105      	bne.n	8009d6a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009d5e:	4b07      	ldr	r3, [pc, #28]	; (8009d7c <osKernelInitialize+0x60>)
 8009d60:	2201      	movs	r2, #1
 8009d62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	e002      	b.n	8009d70 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009d70:	68fb      	ldr	r3, [r7, #12]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bc80      	pop	{r7}
 8009d7a:	4770      	bx	lr
 8009d7c:	200007e8 	.word	0x200007e8

08009d80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d86:	f3ef 8305 	mrs	r3, IPSR
 8009d8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d10f      	bne.n	8009db2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d92:	f3ef 8310 	mrs	r3, PRIMASK
 8009d96:	607b      	str	r3, [r7, #4]
  return(result);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d109      	bne.n	8009db2 <osKernelStart+0x32>
 8009d9e:	4b11      	ldr	r3, [pc, #68]	; (8009de4 <osKernelStart+0x64>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d109      	bne.n	8009dba <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009da6:	f3ef 8311 	mrs	r3, BASEPRI
 8009daa:	603b      	str	r3, [r7, #0]
  return(result);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d003      	beq.n	8009dba <osKernelStart+0x3a>
    stat = osErrorISR;
 8009db2:	f06f 0305 	mvn.w	r3, #5
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	e00e      	b.n	8009dd8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8009dba:	4b0a      	ldr	r3, [pc, #40]	; (8009de4 <osKernelStart+0x64>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d107      	bne.n	8009dd2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8009dc2:	4b08      	ldr	r3, [pc, #32]	; (8009de4 <osKernelStart+0x64>)
 8009dc4:	2202      	movs	r2, #2
 8009dc6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009dc8:	f001 f890 	bl	800aeec <vTaskStartScheduler>
      stat = osOK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	e002      	b.n	8009dd8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8009dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	200007e8 	.word	0x200007e8

08009de8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b092      	sub	sp, #72	; 0x48
 8009dec:	af04      	add	r7, sp, #16
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009df4:	2300      	movs	r3, #0
 8009df6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009df8:	f3ef 8305 	mrs	r3, IPSR
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f040 8094 	bne.w	8009f2e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e06:	f3ef 8310 	mrs	r3, PRIMASK
 8009e0a:	623b      	str	r3, [r7, #32]
  return(result);
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f040 808d 	bne.w	8009f2e <osThreadNew+0x146>
 8009e14:	4b48      	ldr	r3, [pc, #288]	; (8009f38 <osThreadNew+0x150>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d106      	bne.n	8009e2a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8009e20:	61fb      	str	r3, [r7, #28]
  return(result);
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f040 8082 	bne.w	8009f2e <osThreadNew+0x146>
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d07e      	beq.n	8009f2e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8009e30:	2380      	movs	r3, #128	; 0x80
 8009e32:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8009e34:	2318      	movs	r3, #24
 8009e36:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8009e38:	2300      	movs	r3, #0
 8009e3a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8009e3c:	f107 031b 	add.w	r3, r7, #27
 8009e40:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8009e42:	f04f 33ff 	mov.w	r3, #4294967295
 8009e46:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d045      	beq.n	8009eda <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d002      	beq.n	8009e5c <osThreadNew+0x74>
        name = attr->name;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d008      	beq.n	8009e82 <osThreadNew+0x9a>
 8009e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e72:	2b38      	cmp	r3, #56	; 0x38
 8009e74:	d805      	bhi.n	8009e82 <osThreadNew+0x9a>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <osThreadNew+0x9e>
        return (NULL);
 8009e82:	2300      	movs	r3, #0
 8009e84:	e054      	b.n	8009f30 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	089b      	lsrs	r3, r3, #2
 8009e94:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00e      	beq.n	8009ebc <osThreadNew+0xd4>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	2ba7      	cmp	r3, #167	; 0xa7
 8009ea4:	d90a      	bls.n	8009ebc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d006      	beq.n	8009ebc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	695b      	ldr	r3, [r3, #20]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <osThreadNew+0xd4>
        mem = 1;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009eba:	e010      	b.n	8009ede <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10c      	bne.n	8009ede <osThreadNew+0xf6>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d108      	bne.n	8009ede <osThreadNew+0xf6>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d104      	bne.n	8009ede <osThreadNew+0xf6>
          mem = 0;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ed8:	e001      	b.n	8009ede <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009eda:	2300      	movs	r3, #0
 8009edc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d110      	bne.n	8009f06 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009eec:	9202      	str	r2, [sp, #8]
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ef8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 fe12 	bl	800ab24 <xTaskCreateStatic>
 8009f00:	4603      	mov	r3, r0
 8009f02:	617b      	str	r3, [r7, #20]
 8009f04:	e013      	b.n	8009f2e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8009f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d110      	bne.n	8009f2e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	f107 0314 	add.w	r3, r7, #20
 8009f14:	9301      	str	r3, [sp, #4]
 8009f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f000 fe5c 	bl	800abdc <xTaskCreate>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d001      	beq.n	8009f2e <osThreadNew+0x146>
          hTask = NULL;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009f2e:	697b      	ldr	r3, [r7, #20]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3738      	adds	r7, #56	; 0x38
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	200007e8 	.word	0x200007e8

08009f3c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f44:	f3ef 8305 	mrs	r3, IPSR
 8009f48:	613b      	str	r3, [r7, #16]
  return(result);
 8009f4a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10f      	bne.n	8009f70 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f50:	f3ef 8310 	mrs	r3, PRIMASK
 8009f54:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d109      	bne.n	8009f70 <osDelay+0x34>
 8009f5c:	4b0d      	ldr	r3, [pc, #52]	; (8009f94 <osDelay+0x58>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d109      	bne.n	8009f78 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f64:	f3ef 8311 	mrs	r3, BASEPRI
 8009f68:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <osDelay+0x3c>
    stat = osErrorISR;
 8009f70:	f06f 0305 	mvn.w	r3, #5
 8009f74:	617b      	str	r3, [r7, #20]
 8009f76:	e007      	b.n	8009f88 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d002      	beq.n	8009f88 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 ff7e 	bl	800ae84 <vTaskDelay>
    }
  }

  return (stat);
 8009f88:	697b      	ldr	r3, [r7, #20]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3718      	adds	r7, #24
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	200007e8 	.word	0x200007e8

08009f98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	4a06      	ldr	r2, [pc, #24]	; (8009fc0 <vApplicationGetIdleTaskMemory+0x28>)
 8009fa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	4a05      	ldr	r2, [pc, #20]	; (8009fc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009fae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2280      	movs	r2, #128	; 0x80
 8009fb4:	601a      	str	r2, [r3, #0]
}
 8009fb6:	bf00      	nop
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bc80      	pop	{r7}
 8009fbe:	4770      	bx	lr
 8009fc0:	200007ec 	.word	0x200007ec
 8009fc4:	20000894 	.word	0x20000894

08009fc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4a07      	ldr	r2, [pc, #28]	; (8009ff4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009fd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	4a06      	ldr	r2, [pc, #24]	; (8009ff8 <vApplicationGetTimerTaskMemory+0x30>)
 8009fde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fe6:	601a      	str	r2, [r3, #0]
}
 8009fe8:	bf00      	nop
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bc80      	pop	{r7}
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20000a94 	.word	0x20000a94
 8009ff8:	20000b3c 	.word	0x20000b3c

08009ffc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f103 0208 	add.w	r2, r3, #8
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f04f 32ff 	mov.w	r2, #4294967295
 800a014:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f103 0208 	add.w	r2, r3, #8
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f103 0208 	add.w	r2, r3, #8
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	bc80      	pop	{r7}
 800a038:	4770      	bx	lr

0800a03a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a03a:	b480      	push	{r7}
 800a03c:	b083      	sub	sp, #12
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bc80      	pop	{r7}
 800a050:	4770      	bx	lr

0800a052 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a052:	b480      	push	{r7}
 800a054:	b085      	sub	sp, #20
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	689a      	ldr	r2, [r3, #8]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	1c5a      	adds	r2, r3, #1
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	601a      	str	r2, [r3, #0]
}
 800a08e:	bf00      	nop
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	bc80      	pop	{r7}
 800a096:	4770      	bx	lr

0800a098 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ae:	d103      	bne.n	800a0b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	e00c      	b.n	800a0d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	60fb      	str	r3, [r7, #12]
 800a0be:	e002      	b.n	800a0c6 <vListInsert+0x2e>
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	60fb      	str	r3, [r7, #12]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d2f6      	bcs.n	800a0c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	683a      	ldr	r2, [r7, #0]
 800a0e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	601a      	str	r2, [r3, #0]
}
 800a0fe:	bf00      	nop
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	bc80      	pop	{r7}
 800a106:	4770      	bx	lr

0800a108 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	6892      	ldr	r2, [r2, #8]
 800a11e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	6852      	ldr	r2, [r2, #4]
 800a128:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	429a      	cmp	r2, r3
 800a132:	d103      	bne.n	800a13c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	689a      	ldr	r2, [r3, #8]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	1e5a      	subs	r2, r3, #1
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	bc80      	pop	{r7}
 800a158:	4770      	bx	lr
	...

0800a15c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10a      	bne.n	800a186 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a182:	bf00      	nop
 800a184:	e7fe      	b.n	800a184 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a186:	f001 fff9 	bl	800c17c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a192:	68f9      	ldr	r1, [r7, #12]
 800a194:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a196:	fb01 f303 	mul.w	r3, r1, r3
 800a19a:	441a      	add	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	68f9      	ldr	r1, [r7, #12]
 800a1ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a1bc:	fb01 f303 	mul.w	r3, r1, r3
 800a1c0:	441a      	add	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	22ff      	movs	r2, #255	; 0xff
 800a1ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	22ff      	movs	r2, #255	; 0xff
 800a1d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d114      	bne.n	800a206 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d01a      	beq.n	800a21a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	3310      	adds	r3, #16
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f001 f91b 	bl	800b424 <xTaskRemoveFromEventList>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d012      	beq.n	800a21a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a1f4:	4b0c      	ldr	r3, [pc, #48]	; (800a228 <xQueueGenericReset+0xcc>)
 800a1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	e009      	b.n	800a21a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3310      	adds	r3, #16
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7ff fef6 	bl	8009ffc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	3324      	adds	r3, #36	; 0x24
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff fef1 	bl	8009ffc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a21a:	f001 ffdf 	bl	800c1dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a21e:	2301      	movs	r3, #1
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	e000ed04 	.word	0xe000ed04

0800a22c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b08e      	sub	sp, #56	; 0x38
 800a230:	af02      	add	r7, sp, #8
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
 800a238:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10a      	bne.n	800a256 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a252:	bf00      	nop
 800a254:	e7fe      	b.n	800a254 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10a      	bne.n	800a272 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a26e:	bf00      	nop
 800a270:	e7fe      	b.n	800a270 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <xQueueGenericCreateStatic+0x52>
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <xQueueGenericCreateStatic+0x56>
 800a27e:	2301      	movs	r3, #1
 800a280:	e000      	b.n	800a284 <xQueueGenericCreateStatic+0x58>
 800a282:	2300      	movs	r3, #0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10a      	bne.n	800a29e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28c:	f383 8811 	msr	BASEPRI, r3
 800a290:	f3bf 8f6f 	isb	sy
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	623b      	str	r3, [r7, #32]
}
 800a29a:	bf00      	nop
 800a29c:	e7fe      	b.n	800a29c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d102      	bne.n	800a2aa <xQueueGenericCreateStatic+0x7e>
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d101      	bne.n	800a2ae <xQueueGenericCreateStatic+0x82>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e000      	b.n	800a2b0 <xQueueGenericCreateStatic+0x84>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10a      	bne.n	800a2ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	61fb      	str	r3, [r7, #28]
}
 800a2c6:	bf00      	nop
 800a2c8:	e7fe      	b.n	800a2c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a2ca:	2350      	movs	r3, #80	; 0x50
 800a2cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	2b50      	cmp	r3, #80	; 0x50
 800a2d2:	d00a      	beq.n	800a2ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	61bb      	str	r3, [r7, #24]
}
 800a2e6:	bf00      	nop
 800a2e8:	e7fe      	b.n	800a2e8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00d      	beq.n	800a310 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2fc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	4613      	mov	r3, r2
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	68b9      	ldr	r1, [r7, #8]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 f805 	bl	800a31a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a312:	4618      	mov	r0, r3
 800a314:	3730      	adds	r7, #48	; 0x30
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b084      	sub	sp, #16
 800a31e:	af00      	add	r7, sp, #0
 800a320:	60f8      	str	r0, [r7, #12]
 800a322:	60b9      	str	r1, [r7, #8]
 800a324:	607a      	str	r2, [r7, #4]
 800a326:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d103      	bne.n	800a336 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	69ba      	ldr	r2, [r7, #24]
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	e002      	b.n	800a33c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a348:	2101      	movs	r1, #1
 800a34a:	69b8      	ldr	r0, [r7, #24]
 800a34c:	f7ff ff06 	bl	800a15c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	78fa      	ldrb	r2, [r7, #3]
 800a354:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a358:	bf00      	nop
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b08e      	sub	sp, #56	; 0x38
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a36e:	2300      	movs	r3, #0
 800a370:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10a      	bne.n	800a392 <xQueueGenericSend+0x32>
	__asm volatile
 800a37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a380:	f383 8811 	msr	BASEPRI, r3
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a38e:	bf00      	nop
 800a390:	e7fe      	b.n	800a390 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d103      	bne.n	800a3a0 <xQueueGenericSend+0x40>
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <xQueueGenericSend+0x44>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e000      	b.n	800a3a6 <xQueueGenericSend+0x46>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10a      	bne.n	800a3c0 <xQueueGenericSend+0x60>
	__asm volatile
 800a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ae:	f383 8811 	msr	BASEPRI, r3
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3bc:	bf00      	nop
 800a3be:	e7fe      	b.n	800a3be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d103      	bne.n	800a3ce <xQueueGenericSend+0x6e>
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d101      	bne.n	800a3d2 <xQueueGenericSend+0x72>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e000      	b.n	800a3d4 <xQueueGenericSend+0x74>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d10a      	bne.n	800a3ee <xQueueGenericSend+0x8e>
	__asm volatile
 800a3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3dc:	f383 8811 	msr	BASEPRI, r3
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	623b      	str	r3, [r7, #32]
}
 800a3ea:	bf00      	nop
 800a3ec:	e7fe      	b.n	800a3ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3ee:	f001 f9df 	bl	800b7b0 <xTaskGetSchedulerState>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d102      	bne.n	800a3fe <xQueueGenericSend+0x9e>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <xQueueGenericSend+0xa2>
 800a3fe:	2301      	movs	r3, #1
 800a400:	e000      	b.n	800a404 <xQueueGenericSend+0xa4>
 800a402:	2300      	movs	r3, #0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10a      	bne.n	800a41e <xQueueGenericSend+0xbe>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	61fb      	str	r3, [r7, #28]
}
 800a41a:	bf00      	nop
 800a41c:	e7fe      	b.n	800a41c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a41e:	f001 fead 	bl	800c17c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d302      	bcc.n	800a434 <xQueueGenericSend+0xd4>
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b02      	cmp	r3, #2
 800a432:	d129      	bne.n	800a488 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	68b9      	ldr	r1, [r7, #8]
 800a438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a43a:	f000 fa07 	bl	800a84c <prvCopyDataToQueue>
 800a43e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	2b00      	cmp	r3, #0
 800a446:	d010      	beq.n	800a46a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44a:	3324      	adds	r3, #36	; 0x24
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 ffe9 	bl	800b424 <xTaskRemoveFromEventList>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d013      	beq.n	800a480 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a458:	4b3f      	ldr	r3, [pc, #252]	; (800a558 <xQueueGenericSend+0x1f8>)
 800a45a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a45e:	601a      	str	r2, [r3, #0]
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	e00a      	b.n	800a480 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d007      	beq.n	800a480 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a470:	4b39      	ldr	r3, [pc, #228]	; (800a558 <xQueueGenericSend+0x1f8>)
 800a472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a476:	601a      	str	r2, [r3, #0]
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a480:	f001 feac 	bl	800c1dc <vPortExitCritical>
				return pdPASS;
 800a484:	2301      	movs	r3, #1
 800a486:	e063      	b.n	800a550 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d103      	bne.n	800a496 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a48e:	f001 fea5 	bl	800c1dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a492:	2300      	movs	r3, #0
 800a494:	e05c      	b.n	800a550 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d106      	bne.n	800a4aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a49c:	f107 0314 	add.w	r3, r7, #20
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f001 f823 	bl	800b4ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4aa:	f001 fe97 	bl	800c1dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4ae:	f000 fd8d 	bl	800afcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4b2:	f001 fe63 	bl	800c17c <vPortEnterCritical>
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4bc:	b25b      	sxtb	r3, r3
 800a4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c2:	d103      	bne.n	800a4cc <xQueueGenericSend+0x16c>
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4d2:	b25b      	sxtb	r3, r3
 800a4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d8:	d103      	bne.n	800a4e2 <xQueueGenericSend+0x182>
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4e2:	f001 fe7b 	bl	800c1dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4e6:	1d3a      	adds	r2, r7, #4
 800a4e8:	f107 0314 	add.w	r3, r7, #20
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f001 f812 	bl	800b518 <xTaskCheckForTimeOut>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d124      	bne.n	800a544 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4fc:	f000 fa9e 	bl	800aa3c <prvIsQueueFull>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d018      	beq.n	800a538 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a508:	3310      	adds	r3, #16
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	4611      	mov	r1, r2
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 ff38 	bl	800b384 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a516:	f000 fa29 	bl	800a96c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a51a:	f000 fd65 	bl	800afe8 <xTaskResumeAll>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	f47f af7c 	bne.w	800a41e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a526:	4b0c      	ldr	r3, [pc, #48]	; (800a558 <xQueueGenericSend+0x1f8>)
 800a528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a52c:	601a      	str	r2, [r3, #0]
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	e772      	b.n	800a41e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a53a:	f000 fa17 	bl	800a96c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a53e:	f000 fd53 	bl	800afe8 <xTaskResumeAll>
 800a542:	e76c      	b.n	800a41e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a546:	f000 fa11 	bl	800a96c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a54a:	f000 fd4d 	bl	800afe8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a54e:	2300      	movs	r3, #0
		}
	}
}
 800a550:	4618      	mov	r0, r3
 800a552:	3738      	adds	r7, #56	; 0x38
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	e000ed04 	.word	0xe000ed04

0800a55c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b08e      	sub	sp, #56	; 0x38
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10a      	bne.n	800a58a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a586:	bf00      	nop
 800a588:	e7fe      	b.n	800a588 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d103      	bne.n	800a598 <xQueueGenericSendFromISR+0x3c>
 800a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a594:	2b00      	cmp	r3, #0
 800a596:	d101      	bne.n	800a59c <xQueueGenericSendFromISR+0x40>
 800a598:	2301      	movs	r3, #1
 800a59a:	e000      	b.n	800a59e <xQueueGenericSendFromISR+0x42>
 800a59c:	2300      	movs	r3, #0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d10a      	bne.n	800a5b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a6:	f383 8811 	msr	BASEPRI, r3
 800a5aa:	f3bf 8f6f 	isb	sy
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	623b      	str	r3, [r7, #32]
}
 800a5b4:	bf00      	nop
 800a5b6:	e7fe      	b.n	800a5b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d103      	bne.n	800a5c6 <xQueueGenericSendFromISR+0x6a>
 800a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d101      	bne.n	800a5ca <xQueueGenericSendFromISR+0x6e>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e000      	b.n	800a5cc <xQueueGenericSendFromISR+0x70>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10a      	bne.n	800a5e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	61fb      	str	r3, [r7, #28]
}
 800a5e2:	bf00      	nop
 800a5e4:	e7fe      	b.n	800a5e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5e6:	f001 fe8b 	bl	800c300 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5ea:	f3ef 8211 	mrs	r2, BASEPRI
 800a5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	61ba      	str	r2, [r7, #24]
 800a600:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a602:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a604:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a60e:	429a      	cmp	r2, r3
 800a610:	d302      	bcc.n	800a618 <xQueueGenericSendFromISR+0xbc>
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	2b02      	cmp	r3, #2
 800a616:	d12c      	bne.n	800a672 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a61e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	68b9      	ldr	r1, [r7, #8]
 800a626:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a628:	f000 f910 	bl	800a84c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a62c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a634:	d112      	bne.n	800a65c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d016      	beq.n	800a66c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	3324      	adds	r3, #36	; 0x24
 800a642:	4618      	mov	r0, r3
 800a644:	f000 feee 	bl	800b424 <xTaskRemoveFromEventList>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00e      	beq.n	800a66c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00b      	beq.n	800a66c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	e007      	b.n	800a66c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a65c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a660:	3301      	adds	r3, #1
 800a662:	b2db      	uxtb	r3, r3
 800a664:	b25a      	sxtb	r2, r3
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a66c:	2301      	movs	r3, #1
 800a66e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a670:	e001      	b.n	800a676 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a672:	2300      	movs	r3, #0
 800a674:	637b      	str	r3, [r7, #52]	; 0x34
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a680:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a684:	4618      	mov	r0, r3
 800a686:	3738      	adds	r7, #56	; 0x38
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08c      	sub	sp, #48	; 0x30
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a698:	2300      	movs	r3, #0
 800a69a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10a      	bne.n	800a6bc <xQueueReceive+0x30>
	__asm volatile
 800a6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	623b      	str	r3, [r7, #32]
}
 800a6b8:	bf00      	nop
 800a6ba:	e7fe      	b.n	800a6ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d103      	bne.n	800a6ca <xQueueReceive+0x3e>
 800a6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d101      	bne.n	800a6ce <xQueueReceive+0x42>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e000      	b.n	800a6d0 <xQueueReceive+0x44>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10a      	bne.n	800a6ea <xQueueReceive+0x5e>
	__asm volatile
 800a6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d8:	f383 8811 	msr	BASEPRI, r3
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	61fb      	str	r3, [r7, #28]
}
 800a6e6:	bf00      	nop
 800a6e8:	e7fe      	b.n	800a6e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6ea:	f001 f861 	bl	800b7b0 <xTaskGetSchedulerState>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d102      	bne.n	800a6fa <xQueueReceive+0x6e>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d101      	bne.n	800a6fe <xQueueReceive+0x72>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e000      	b.n	800a700 <xQueueReceive+0x74>
 800a6fe:	2300      	movs	r3, #0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10a      	bne.n	800a71a <xQueueReceive+0x8e>
	__asm volatile
 800a704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a708:	f383 8811 	msr	BASEPRI, r3
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	61bb      	str	r3, [r7, #24]
}
 800a716:	bf00      	nop
 800a718:	e7fe      	b.n	800a718 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a71a:	f001 fd2f 	bl	800c17c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a722:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a726:	2b00      	cmp	r3, #0
 800a728:	d01f      	beq.n	800a76a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a72a:	68b9      	ldr	r1, [r7, #8]
 800a72c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a72e:	f000 f8f7 	bl	800a920 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a734:	1e5a      	subs	r2, r3, #1
 800a736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a738:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00f      	beq.n	800a762 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a744:	3310      	adds	r3, #16
 800a746:	4618      	mov	r0, r3
 800a748:	f000 fe6c 	bl	800b424 <xTaskRemoveFromEventList>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d007      	beq.n	800a762 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a752:	4b3d      	ldr	r3, [pc, #244]	; (800a848 <xQueueReceive+0x1bc>)
 800a754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a762:	f001 fd3b 	bl	800c1dc <vPortExitCritical>
				return pdPASS;
 800a766:	2301      	movs	r3, #1
 800a768:	e069      	b.n	800a83e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d103      	bne.n	800a778 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a770:	f001 fd34 	bl	800c1dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a774:	2300      	movs	r3, #0
 800a776:	e062      	b.n	800a83e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d106      	bne.n	800a78c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a77e:	f107 0310 	add.w	r3, r7, #16
 800a782:	4618      	mov	r0, r3
 800a784:	f000 feb2 	bl	800b4ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a788:	2301      	movs	r3, #1
 800a78a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a78c:	f001 fd26 	bl	800c1dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a790:	f000 fc1c 	bl	800afcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a794:	f001 fcf2 	bl	800c17c <vPortEnterCritical>
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a79e:	b25b      	sxtb	r3, r3
 800a7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a4:	d103      	bne.n	800a7ae <xQueueReceive+0x122>
 800a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7b4:	b25b      	sxtb	r3, r3
 800a7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ba:	d103      	bne.n	800a7c4 <xQueueReceive+0x138>
 800a7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7c4:	f001 fd0a 	bl	800c1dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7c8:	1d3a      	adds	r2, r7, #4
 800a7ca:	f107 0310 	add.w	r3, r7, #16
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 fea1 	bl	800b518 <xTaskCheckForTimeOut>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d123      	bne.n	800a824 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7de:	f000 f917 	bl	800aa10 <prvIsQueueEmpty>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d017      	beq.n	800a818 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ea:	3324      	adds	r3, #36	; 0x24
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 fdc7 	bl	800b384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7f8:	f000 f8b8 	bl	800a96c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7fc:	f000 fbf4 	bl	800afe8 <xTaskResumeAll>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d189      	bne.n	800a71a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a806:	4b10      	ldr	r3, [pc, #64]	; (800a848 <xQueueReceive+0x1bc>)
 800a808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a80c:	601a      	str	r2, [r3, #0]
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	e780      	b.n	800a71a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a81a:	f000 f8a7 	bl	800a96c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a81e:	f000 fbe3 	bl	800afe8 <xTaskResumeAll>
 800a822:	e77a      	b.n	800a71a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a826:	f000 f8a1 	bl	800a96c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a82a:	f000 fbdd 	bl	800afe8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a82e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a830:	f000 f8ee 	bl	800aa10 <prvIsQueueEmpty>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	f43f af6f 	beq.w	800a71a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a83c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3730      	adds	r7, #48	; 0x30
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	e000ed04 	.word	0xe000ed04

0800a84c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a858:	2300      	movs	r3, #0
 800a85a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a860:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10d      	bne.n	800a886 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d14d      	bne.n	800a90e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	4618      	mov	r0, r3
 800a878:	f000 ffb8 	bl	800b7ec <xTaskPriorityDisinherit>
 800a87c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	605a      	str	r2, [r3, #4]
 800a884:	e043      	b.n	800a90e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d119      	bne.n	800a8c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6898      	ldr	r0, [r3, #8]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a894:	461a      	mov	r2, r3
 800a896:	68b9      	ldr	r1, [r7, #8]
 800a898:	f002 fc42 	bl	800d120 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	689a      	ldr	r2, [r3, #8]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a4:	441a      	add	r2, r3
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	689a      	ldr	r2, [r3, #8]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d32b      	bcc.n	800a90e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	609a      	str	r2, [r3, #8]
 800a8be:	e026      	b.n	800a90e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	68d8      	ldr	r0, [r3, #12]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	68b9      	ldr	r1, [r7, #8]
 800a8cc:	f002 fc28 	bl	800d120 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	68da      	ldr	r2, [r3, #12]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d8:	425b      	negs	r3, r3
 800a8da:	441a      	add	r2, r3
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	68da      	ldr	r2, [r3, #12]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d207      	bcs.n	800a8fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f4:	425b      	negs	r3, r3
 800a8f6:	441a      	add	r2, r3
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d105      	bne.n	800a90e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	3b01      	subs	r3, #1
 800a90c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	1c5a      	adds	r2, r3, #1
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a916:	697b      	ldr	r3, [r7, #20]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d018      	beq.n	800a964 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	68da      	ldr	r2, [r3, #12]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a93a:	441a      	add	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	68da      	ldr	r2, [r3, #12]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d303      	bcc.n	800a954 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68d9      	ldr	r1, [r3, #12]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95c:	461a      	mov	r2, r3
 800a95e:	6838      	ldr	r0, [r7, #0]
 800a960:	f002 fbde 	bl	800d120 <memcpy>
	}
}
 800a964:	bf00      	nop
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a974:	f001 fc02 	bl	800c17c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a97e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a980:	e011      	b.n	800a9a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a986:	2b00      	cmp	r3, #0
 800a988:	d012      	beq.n	800a9b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	3324      	adds	r3, #36	; 0x24
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 fd48 	bl	800b424 <xTaskRemoveFromEventList>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d001      	beq.n	800a99e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a99a:	f000 fe1f 	bl	800b5dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	dce9      	bgt.n	800a982 <prvUnlockQueue+0x16>
 800a9ae:	e000      	b.n	800a9b2 <prvUnlockQueue+0x46>
					break;
 800a9b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	22ff      	movs	r2, #255	; 0xff
 800a9b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a9ba:	f001 fc0f 	bl	800c1dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9be:	f001 fbdd 	bl	800c17c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9ca:	e011      	b.n	800a9f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d012      	beq.n	800a9fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	3310      	adds	r3, #16
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 fd23 	bl	800b424 <xTaskRemoveFromEventList>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9e4:	f000 fdfa 	bl	800b5dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	dce9      	bgt.n	800a9cc <prvUnlockQueue+0x60>
 800a9f8:	e000      	b.n	800a9fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a9fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	22ff      	movs	r2, #255	; 0xff
 800aa00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa04:	f001 fbea 	bl	800c1dc <vPortExitCritical>
}
 800aa08:	bf00      	nop
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa18:	f001 fbb0 	bl	800c17c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d102      	bne.n	800aa2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa24:	2301      	movs	r3, #1
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	e001      	b.n	800aa2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa2e:	f001 fbd5 	bl	800c1dc <vPortExitCritical>

	return xReturn;
 800aa32:	68fb      	ldr	r3, [r7, #12]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa44:	f001 fb9a 	bl	800c17c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d102      	bne.n	800aa5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa54:	2301      	movs	r3, #1
 800aa56:	60fb      	str	r3, [r7, #12]
 800aa58:	e001      	b.n	800aa5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa5e:	f001 fbbd 	bl	800c1dc <vPortExitCritical>

	return xReturn;
 800aa62:	68fb      	ldr	r3, [r7, #12]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa76:	2300      	movs	r3, #0
 800aa78:	60fb      	str	r3, [r7, #12]
 800aa7a:	e014      	b.n	800aaa6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa7c:	4a0e      	ldr	r2, [pc, #56]	; (800aab8 <vQueueAddToRegistry+0x4c>)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10b      	bne.n	800aaa0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa88:	490b      	ldr	r1, [pc, #44]	; (800aab8 <vQueueAddToRegistry+0x4c>)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	683a      	ldr	r2, [r7, #0]
 800aa8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa92:	4a09      	ldr	r2, [pc, #36]	; (800aab8 <vQueueAddToRegistry+0x4c>)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	4413      	add	r3, r2
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa9e:	e006      	b.n	800aaae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	60fb      	str	r3, [r7, #12]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2b07      	cmp	r3, #7
 800aaaa:	d9e7      	bls.n	800aa7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aaac:	bf00      	nop
 800aaae:	bf00      	nop
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bc80      	pop	{r7}
 800aab6:	4770      	bx	lr
 800aab8:	20000f3c 	.word	0x20000f3c

0800aabc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b086      	sub	sp, #24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aacc:	f001 fb56 	bl	800c17c <vPortEnterCritical>
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aad6:	b25b      	sxtb	r3, r3
 800aad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aadc:	d103      	bne.n	800aae6 <vQueueWaitForMessageRestricted+0x2a>
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaec:	b25b      	sxtb	r3, r3
 800aaee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf2:	d103      	bne.n	800aafc <vQueueWaitForMessageRestricted+0x40>
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aafc:	f001 fb6e 	bl	800c1dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d106      	bne.n	800ab16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	3324      	adds	r3, #36	; 0x24
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f000 fc5b 	bl	800b3cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab16:	6978      	ldr	r0, [r7, #20]
 800ab18:	f7ff ff28 	bl	800a96c <prvUnlockQueue>
	}
 800ab1c:	bf00      	nop
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b08e      	sub	sp, #56	; 0x38
 800ab28:	af04      	add	r7, sp, #16
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
 800ab30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10a      	bne.n	800ab4e <xTaskCreateStatic+0x2a>
	__asm volatile
 800ab38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	623b      	str	r3, [r7, #32]
}
 800ab4a:	bf00      	nop
 800ab4c:	e7fe      	b.n	800ab4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10a      	bne.n	800ab6a <xTaskCreateStatic+0x46>
	__asm volatile
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	61fb      	str	r3, [r7, #28]
}
 800ab66:	bf00      	nop
 800ab68:	e7fe      	b.n	800ab68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab6a:	23a8      	movs	r3, #168	; 0xa8
 800ab6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	2ba8      	cmp	r3, #168	; 0xa8
 800ab72:	d00a      	beq.n	800ab8a <xTaskCreateStatic+0x66>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	61bb      	str	r3, [r7, #24]
}
 800ab86:	bf00      	nop
 800ab88:	e7fe      	b.n	800ab88 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d01e      	beq.n	800abce <xTaskCreateStatic+0xaa>
 800ab90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d01b      	beq.n	800abce <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab98:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab9e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba2:	2202      	movs	r2, #2
 800aba4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aba8:	2300      	movs	r3, #0
 800abaa:	9303      	str	r3, [sp, #12]
 800abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abae:	9302      	str	r3, [sp, #8]
 800abb0:	f107 0314 	add.w	r3, r7, #20
 800abb4:	9301      	str	r3, [sp, #4]
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	9300      	str	r3, [sp, #0]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	68b9      	ldr	r1, [r7, #8]
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f000 f851 	bl	800ac68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abc8:	f000 f8ec 	bl	800ada4 <prvAddNewTaskToReadyList>
 800abcc:	e001      	b.n	800abd2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800abce:	2300      	movs	r3, #0
 800abd0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800abd2:	697b      	ldr	r3, [r7, #20]
	}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3728      	adds	r7, #40	; 0x28
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b08c      	sub	sp, #48	; 0x30
 800abe0:	af04      	add	r7, sp, #16
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	603b      	str	r3, [r7, #0]
 800abe8:	4613      	mov	r3, r2
 800abea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abec:	88fb      	ldrh	r3, [r7, #6]
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4618      	mov	r0, r3
 800abf2:	f001 fbc3 	bl	800c37c <pvPortMalloc>
 800abf6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00e      	beq.n	800ac1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800abfe:	20a8      	movs	r0, #168	; 0xa8
 800ac00:	f001 fbbc 	bl	800c37c <pvPortMalloc>
 800ac04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d003      	beq.n	800ac14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	631a      	str	r2, [r3, #48]	; 0x30
 800ac12:	e005      	b.n	800ac20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac14:	6978      	ldr	r0, [r7, #20]
 800ac16:	f001 fc75 	bl	800c504 <vPortFree>
 800ac1a:	e001      	b.n	800ac20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d017      	beq.n	800ac56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac2e:	88fa      	ldrh	r2, [r7, #6]
 800ac30:	2300      	movs	r3, #0
 800ac32:	9303      	str	r3, [sp, #12]
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	9302      	str	r3, [sp, #8]
 800ac38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3a:	9301      	str	r3, [sp, #4]
 800ac3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	68b9      	ldr	r1, [r7, #8]
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f000 f80f 	bl	800ac68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac4a:	69f8      	ldr	r0, [r7, #28]
 800ac4c:	f000 f8aa 	bl	800ada4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac50:	2301      	movs	r3, #1
 800ac52:	61bb      	str	r3, [r7, #24]
 800ac54:	e002      	b.n	800ac5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac56:	f04f 33ff 	mov.w	r3, #4294967295
 800ac5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac5c:	69bb      	ldr	r3, [r7, #24]
	}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3720      	adds	r7, #32
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
	...

0800ac68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b088      	sub	sp, #32
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
 800ac74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	461a      	mov	r2, r3
 800ac80:	21a5      	movs	r1, #165	; 0xa5
 800ac82:	f002 f9c9 	bl	800d018 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac90:	3b01      	subs	r3, #1
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	f023 0307 	bic.w	r3, r3, #7
 800ac9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	f003 0307 	and.w	r3, r3, #7
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00a      	beq.n	800acc0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	617b      	str	r3, [r7, #20]
}
 800acbc:	bf00      	nop
 800acbe:	e7fe      	b.n	800acbe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acc0:	2300      	movs	r3, #0
 800acc2:	61fb      	str	r3, [r7, #28]
 800acc4:	e012      	b.n	800acec <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	4413      	add	r3, r2
 800accc:	7819      	ldrb	r1, [r3, #0]
 800acce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	4413      	add	r3, r2
 800acd4:	3334      	adds	r3, #52	; 0x34
 800acd6:	460a      	mov	r2, r1
 800acd8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	4413      	add	r3, r2
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d006      	beq.n	800acf4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	3301      	adds	r3, #1
 800acea:	61fb      	str	r3, [r7, #28]
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	2b0f      	cmp	r3, #15
 800acf0:	d9e9      	bls.n	800acc6 <prvInitialiseNewTask+0x5e>
 800acf2:	e000      	b.n	800acf6 <prvInitialiseNewTask+0x8e>
		{
			break;
 800acf4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	2b37      	cmp	r3, #55	; 0x37
 800ad02:	d901      	bls.n	800ad08 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad04:	2337      	movs	r3, #55	; 0x37
 800ad06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad16:	2200      	movs	r2, #0
 800ad18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7ff f98b 	bl	800a03a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad26:	3318      	adds	r3, #24
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7ff f986 	bl	800a03a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	2200      	movs	r2, #0
 800ad48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ad54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad56:	3354      	adds	r3, #84	; 0x54
 800ad58:	224c      	movs	r2, #76	; 0x4c
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f002 f95b 	bl	800d018 <memset>
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	4a0c      	ldr	r2, [pc, #48]	; (800ad98 <prvInitialiseNewTask+0x130>)
 800ad66:	659a      	str	r2, [r3, #88]	; 0x58
 800ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6a:	4a0c      	ldr	r2, [pc, #48]	; (800ad9c <prvInitialiseNewTask+0x134>)
 800ad6c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad70:	4a0b      	ldr	r2, [pc, #44]	; (800ada0 <prvInitialiseNewTask+0x138>)
 800ad72:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad74:	683a      	ldr	r2, [r7, #0]
 800ad76:	68f9      	ldr	r1, [r7, #12]
 800ad78:	69b8      	ldr	r0, [r7, #24]
 800ad7a:	f001 f90b 	bl	800bf94 <pxPortInitialiseStack>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad82:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d002      	beq.n	800ad90 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad90:	bf00      	nop
 800ad92:	3720      	adds	r7, #32
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	2000339c 	.word	0x2000339c
 800ad9c:	20003404 	.word	0x20003404
 800ada0:	2000346c 	.word	0x2000346c

0800ada4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800adac:	f001 f9e6 	bl	800c17c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800adb0:	4b2d      	ldr	r3, [pc, #180]	; (800ae68 <prvAddNewTaskToReadyList+0xc4>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	3301      	adds	r3, #1
 800adb6:	4a2c      	ldr	r2, [pc, #176]	; (800ae68 <prvAddNewTaskToReadyList+0xc4>)
 800adb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800adba:	4b2c      	ldr	r3, [pc, #176]	; (800ae6c <prvAddNewTaskToReadyList+0xc8>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d109      	bne.n	800add6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800adc2:	4a2a      	ldr	r2, [pc, #168]	; (800ae6c <prvAddNewTaskToReadyList+0xc8>)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800adc8:	4b27      	ldr	r3, [pc, #156]	; (800ae68 <prvAddNewTaskToReadyList+0xc4>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d110      	bne.n	800adf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800add0:	f000 fc28 	bl	800b624 <prvInitialiseTaskLists>
 800add4:	e00d      	b.n	800adf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800add6:	4b26      	ldr	r3, [pc, #152]	; (800ae70 <prvAddNewTaskToReadyList+0xcc>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d109      	bne.n	800adf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800adde:	4b23      	ldr	r3, [pc, #140]	; (800ae6c <prvAddNewTaskToReadyList+0xc8>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade8:	429a      	cmp	r2, r3
 800adea:	d802      	bhi.n	800adf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800adec:	4a1f      	ldr	r2, [pc, #124]	; (800ae6c <prvAddNewTaskToReadyList+0xc8>)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800adf2:	4b20      	ldr	r3, [pc, #128]	; (800ae74 <prvAddNewTaskToReadyList+0xd0>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	3301      	adds	r3, #1
 800adf8:	4a1e      	ldr	r2, [pc, #120]	; (800ae74 <prvAddNewTaskToReadyList+0xd0>)
 800adfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800adfc:	4b1d      	ldr	r3, [pc, #116]	; (800ae74 <prvAddNewTaskToReadyList+0xd0>)
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae08:	4b1b      	ldr	r3, [pc, #108]	; (800ae78 <prvAddNewTaskToReadyList+0xd4>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d903      	bls.n	800ae18 <prvAddNewTaskToReadyList+0x74>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae14:	4a18      	ldr	r2, [pc, #96]	; (800ae78 <prvAddNewTaskToReadyList+0xd4>)
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4a15      	ldr	r2, [pc, #84]	; (800ae7c <prvAddNewTaskToReadyList+0xd8>)
 800ae26:	441a      	add	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	4610      	mov	r0, r2
 800ae30:	f7ff f90f 	bl	800a052 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae34:	f001 f9d2 	bl	800c1dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae38:	4b0d      	ldr	r3, [pc, #52]	; (800ae70 <prvAddNewTaskToReadyList+0xcc>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00e      	beq.n	800ae5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae40:	4b0a      	ldr	r3, [pc, #40]	; (800ae6c <prvAddNewTaskToReadyList+0xc8>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d207      	bcs.n	800ae5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae4e:	4b0c      	ldr	r3, [pc, #48]	; (800ae80 <prvAddNewTaskToReadyList+0xdc>)
 800ae50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae5e:	bf00      	nop
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	20001450 	.word	0x20001450
 800ae6c:	20000f7c 	.word	0x20000f7c
 800ae70:	2000145c 	.word	0x2000145c
 800ae74:	2000146c 	.word	0x2000146c
 800ae78:	20001458 	.word	0x20001458
 800ae7c:	20000f80 	.word	0x20000f80
 800ae80:	e000ed04 	.word	0xe000ed04

0800ae84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d017      	beq.n	800aec6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae96:	4b13      	ldr	r3, [pc, #76]	; (800aee4 <vTaskDelay+0x60>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00a      	beq.n	800aeb4 <vTaskDelay+0x30>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	60bb      	str	r3, [r7, #8]
}
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aeb4:	f000 f88a 	bl	800afcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aeb8:	2100      	movs	r1, #0
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fd04 	bl	800b8c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aec0:	f000 f892 	bl	800afe8 <xTaskResumeAll>
 800aec4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d107      	bne.n	800aedc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aecc:	4b06      	ldr	r3, [pc, #24]	; (800aee8 <vTaskDelay+0x64>)
 800aece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aed2:	601a      	str	r2, [r3, #0]
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aedc:	bf00      	nop
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	20001478 	.word	0x20001478
 800aee8:	e000ed04 	.word	0xe000ed04

0800aeec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08a      	sub	sp, #40	; 0x28
 800aef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aef2:	2300      	movs	r3, #0
 800aef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aef6:	2300      	movs	r3, #0
 800aef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aefa:	463a      	mov	r2, r7
 800aefc:	1d39      	adds	r1, r7, #4
 800aefe:	f107 0308 	add.w	r3, r7, #8
 800af02:	4618      	mov	r0, r3
 800af04:	f7ff f848 	bl	8009f98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	9202      	str	r2, [sp, #8]
 800af10:	9301      	str	r3, [sp, #4]
 800af12:	2300      	movs	r3, #0
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	2300      	movs	r3, #0
 800af18:	460a      	mov	r2, r1
 800af1a:	4924      	ldr	r1, [pc, #144]	; (800afac <vTaskStartScheduler+0xc0>)
 800af1c:	4824      	ldr	r0, [pc, #144]	; (800afb0 <vTaskStartScheduler+0xc4>)
 800af1e:	f7ff fe01 	bl	800ab24 <xTaskCreateStatic>
 800af22:	4603      	mov	r3, r0
 800af24:	4a23      	ldr	r2, [pc, #140]	; (800afb4 <vTaskStartScheduler+0xc8>)
 800af26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af28:	4b22      	ldr	r3, [pc, #136]	; (800afb4 <vTaskStartScheduler+0xc8>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af30:	2301      	movs	r3, #1
 800af32:	617b      	str	r3, [r7, #20]
 800af34:	e001      	b.n	800af3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af36:	2300      	movs	r3, #0
 800af38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d102      	bne.n	800af46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af40:	f000 fd16 	bl	800b970 <xTimerCreateTimerTask>
 800af44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d11b      	bne.n	800af84 <vTaskStartScheduler+0x98>
	__asm volatile
 800af4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af50:	f383 8811 	msr	BASEPRI, r3
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	613b      	str	r3, [r7, #16]
}
 800af5e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af60:	4b15      	ldr	r3, [pc, #84]	; (800afb8 <vTaskStartScheduler+0xcc>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	3354      	adds	r3, #84	; 0x54
 800af66:	4a15      	ldr	r2, [pc, #84]	; (800afbc <vTaskStartScheduler+0xd0>)
 800af68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af6a:	4b15      	ldr	r3, [pc, #84]	; (800afc0 <vTaskStartScheduler+0xd4>)
 800af6c:	f04f 32ff 	mov.w	r2, #4294967295
 800af70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af72:	4b14      	ldr	r3, [pc, #80]	; (800afc4 <vTaskStartScheduler+0xd8>)
 800af74:	2201      	movs	r2, #1
 800af76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800af78:	4b13      	ldr	r3, [pc, #76]	; (800afc8 <vTaskStartScheduler+0xdc>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af7e:	f001 f88b 	bl	800c098 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af82:	e00e      	b.n	800afa2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8a:	d10a      	bne.n	800afa2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	60fb      	str	r3, [r7, #12]
}
 800af9e:	bf00      	nop
 800afa0:	e7fe      	b.n	800afa0 <vTaskStartScheduler+0xb4>
}
 800afa2:	bf00      	nop
 800afa4:	3718      	adds	r7, #24
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	0800d21c 	.word	0x0800d21c
 800afb0:	0800b5f5 	.word	0x0800b5f5
 800afb4:	20001474 	.word	0x20001474
 800afb8:	20000f7c 	.word	0x20000f7c
 800afbc:	200001cc 	.word	0x200001cc
 800afc0:	20001470 	.word	0x20001470
 800afc4:	2000145c 	.word	0x2000145c
 800afc8:	20001454 	.word	0x20001454

0800afcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800afcc:	b480      	push	{r7}
 800afce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800afd0:	4b04      	ldr	r3, [pc, #16]	; (800afe4 <vTaskSuspendAll+0x18>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3301      	adds	r3, #1
 800afd6:	4a03      	ldr	r2, [pc, #12]	; (800afe4 <vTaskSuspendAll+0x18>)
 800afd8:	6013      	str	r3, [r2, #0]
}
 800afda:	bf00      	nop
 800afdc:	46bd      	mov	sp, r7
 800afde:	bc80      	pop	{r7}
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	20001478 	.word	0x20001478

0800afe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800afee:	2300      	movs	r3, #0
 800aff0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aff2:	2300      	movs	r3, #0
 800aff4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aff6:	4b42      	ldr	r3, [pc, #264]	; (800b100 <xTaskResumeAll+0x118>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d10a      	bne.n	800b014 <xTaskResumeAll+0x2c>
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	603b      	str	r3, [r7, #0]
}
 800b010:	bf00      	nop
 800b012:	e7fe      	b.n	800b012 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b014:	f001 f8b2 	bl	800c17c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b018:	4b39      	ldr	r3, [pc, #228]	; (800b100 <xTaskResumeAll+0x118>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3b01      	subs	r3, #1
 800b01e:	4a38      	ldr	r2, [pc, #224]	; (800b100 <xTaskResumeAll+0x118>)
 800b020:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b022:	4b37      	ldr	r3, [pc, #220]	; (800b100 <xTaskResumeAll+0x118>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d162      	bne.n	800b0f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b02a:	4b36      	ldr	r3, [pc, #216]	; (800b104 <xTaskResumeAll+0x11c>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d05e      	beq.n	800b0f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b032:	e02f      	b.n	800b094 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b034:	4b34      	ldr	r3, [pc, #208]	; (800b108 <xTaskResumeAll+0x120>)
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	3318      	adds	r3, #24
 800b040:	4618      	mov	r0, r3
 800b042:	f7ff f861 	bl	800a108 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	3304      	adds	r3, #4
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7ff f85c 	bl	800a108 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b054:	4b2d      	ldr	r3, [pc, #180]	; (800b10c <xTaskResumeAll+0x124>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d903      	bls.n	800b064 <xTaskResumeAll+0x7c>
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b060:	4a2a      	ldr	r2, [pc, #168]	; (800b10c <xTaskResumeAll+0x124>)
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b068:	4613      	mov	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4a27      	ldr	r2, [pc, #156]	; (800b110 <xTaskResumeAll+0x128>)
 800b072:	441a      	add	r2, r3
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3304      	adds	r3, #4
 800b078:	4619      	mov	r1, r3
 800b07a:	4610      	mov	r0, r2
 800b07c:	f7fe ffe9 	bl	800a052 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b084:	4b23      	ldr	r3, [pc, #140]	; (800b114 <xTaskResumeAll+0x12c>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d302      	bcc.n	800b094 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b08e:	4b22      	ldr	r3, [pc, #136]	; (800b118 <xTaskResumeAll+0x130>)
 800b090:	2201      	movs	r2, #1
 800b092:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b094:	4b1c      	ldr	r3, [pc, #112]	; (800b108 <xTaskResumeAll+0x120>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1cb      	bne.n	800b034 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0a2:	f000 fb61 	bl	800b768 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b0a6:	4b1d      	ldr	r3, [pc, #116]	; (800b11c <xTaskResumeAll+0x134>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d010      	beq.n	800b0d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0b2:	f000 f845 	bl	800b140 <xTaskIncrementTick>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b0bc:	4b16      	ldr	r3, [pc, #88]	; (800b118 <xTaskResumeAll+0x130>)
 800b0be:	2201      	movs	r2, #1
 800b0c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1f1      	bne.n	800b0b2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b0ce:	4b13      	ldr	r3, [pc, #76]	; (800b11c <xTaskResumeAll+0x134>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b0d4:	4b10      	ldr	r3, [pc, #64]	; (800b118 <xTaskResumeAll+0x130>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d009      	beq.n	800b0f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b0e0:	4b0f      	ldr	r3, [pc, #60]	; (800b120 <xTaskResumeAll+0x138>)
 800b0e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e6:	601a      	str	r2, [r3, #0]
 800b0e8:	f3bf 8f4f 	dsb	sy
 800b0ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0f0:	f001 f874 	bl	800c1dc <vPortExitCritical>

	return xAlreadyYielded;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	20001478 	.word	0x20001478
 800b104:	20001450 	.word	0x20001450
 800b108:	20001410 	.word	0x20001410
 800b10c:	20001458 	.word	0x20001458
 800b110:	20000f80 	.word	0x20000f80
 800b114:	20000f7c 	.word	0x20000f7c
 800b118:	20001464 	.word	0x20001464
 800b11c:	20001460 	.word	0x20001460
 800b120:	e000ed04 	.word	0xe000ed04

0800b124 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b12a:	4b04      	ldr	r3, [pc, #16]	; (800b13c <xTaskGetTickCount+0x18>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b130:	687b      	ldr	r3, [r7, #4]
}
 800b132:	4618      	mov	r0, r3
 800b134:	370c      	adds	r7, #12
 800b136:	46bd      	mov	sp, r7
 800b138:	bc80      	pop	{r7}
 800b13a:	4770      	bx	lr
 800b13c:	20001454 	.word	0x20001454

0800b140 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b146:	2300      	movs	r3, #0
 800b148:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b14a:	4b51      	ldr	r3, [pc, #324]	; (800b290 <xTaskIncrementTick+0x150>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f040 808e 	bne.w	800b270 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b154:	4b4f      	ldr	r3, [pc, #316]	; (800b294 <xTaskIncrementTick+0x154>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3301      	adds	r3, #1
 800b15a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b15c:	4a4d      	ldr	r2, [pc, #308]	; (800b294 <xTaskIncrementTick+0x154>)
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d120      	bne.n	800b1aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b168:	4b4b      	ldr	r3, [pc, #300]	; (800b298 <xTaskIncrementTick+0x158>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00a      	beq.n	800b188 <xTaskIncrementTick+0x48>
	__asm volatile
 800b172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	603b      	str	r3, [r7, #0]
}
 800b184:	bf00      	nop
 800b186:	e7fe      	b.n	800b186 <xTaskIncrementTick+0x46>
 800b188:	4b43      	ldr	r3, [pc, #268]	; (800b298 <xTaskIncrementTick+0x158>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	4b43      	ldr	r3, [pc, #268]	; (800b29c <xTaskIncrementTick+0x15c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a41      	ldr	r2, [pc, #260]	; (800b298 <xTaskIncrementTick+0x158>)
 800b194:	6013      	str	r3, [r2, #0]
 800b196:	4a41      	ldr	r2, [pc, #260]	; (800b29c <xTaskIncrementTick+0x15c>)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6013      	str	r3, [r2, #0]
 800b19c:	4b40      	ldr	r3, [pc, #256]	; (800b2a0 <xTaskIncrementTick+0x160>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	4a3f      	ldr	r2, [pc, #252]	; (800b2a0 <xTaskIncrementTick+0x160>)
 800b1a4:	6013      	str	r3, [r2, #0]
 800b1a6:	f000 fadf 	bl	800b768 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b1aa:	4b3e      	ldr	r3, [pc, #248]	; (800b2a4 <xTaskIncrementTick+0x164>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	693a      	ldr	r2, [r7, #16]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d34e      	bcc.n	800b252 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1b4:	4b38      	ldr	r3, [pc, #224]	; (800b298 <xTaskIncrementTick+0x158>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d101      	bne.n	800b1c2 <xTaskIncrementTick+0x82>
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e000      	b.n	800b1c4 <xTaskIncrementTick+0x84>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d004      	beq.n	800b1d2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1c8:	4b36      	ldr	r3, [pc, #216]	; (800b2a4 <xTaskIncrementTick+0x164>)
 800b1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ce:	601a      	str	r2, [r3, #0]
					break;
 800b1d0:	e03f      	b.n	800b252 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b1d2:	4b31      	ldr	r3, [pc, #196]	; (800b298 <xTaskIncrementTick+0x158>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b1e2:	693a      	ldr	r2, [r7, #16]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d203      	bcs.n	800b1f2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b1ea:	4a2e      	ldr	r2, [pc, #184]	; (800b2a4 <xTaskIncrementTick+0x164>)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6013      	str	r3, [r2, #0]
						break;
 800b1f0:	e02f      	b.n	800b252 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	3304      	adds	r3, #4
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fe ff86 	bl	800a108 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b200:	2b00      	cmp	r3, #0
 800b202:	d004      	beq.n	800b20e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	3318      	adds	r3, #24
 800b208:	4618      	mov	r0, r3
 800b20a:	f7fe ff7d 	bl	800a108 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b212:	4b25      	ldr	r3, [pc, #148]	; (800b2a8 <xTaskIncrementTick+0x168>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	429a      	cmp	r2, r3
 800b218:	d903      	bls.n	800b222 <xTaskIncrementTick+0xe2>
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21e:	4a22      	ldr	r2, [pc, #136]	; (800b2a8 <xTaskIncrementTick+0x168>)
 800b220:	6013      	str	r3, [r2, #0]
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b226:	4613      	mov	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4413      	add	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	4a1f      	ldr	r2, [pc, #124]	; (800b2ac <xTaskIncrementTick+0x16c>)
 800b230:	441a      	add	r2, r3
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	3304      	adds	r3, #4
 800b236:	4619      	mov	r1, r3
 800b238:	4610      	mov	r0, r2
 800b23a:	f7fe ff0a 	bl	800a052 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b242:	4b1b      	ldr	r3, [pc, #108]	; (800b2b0 <xTaskIncrementTick+0x170>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b248:	429a      	cmp	r2, r3
 800b24a:	d3b3      	bcc.n	800b1b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b24c:	2301      	movs	r3, #1
 800b24e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b250:	e7b0      	b.n	800b1b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b252:	4b17      	ldr	r3, [pc, #92]	; (800b2b0 <xTaskIncrementTick+0x170>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b258:	4914      	ldr	r1, [pc, #80]	; (800b2ac <xTaskIncrementTick+0x16c>)
 800b25a:	4613      	mov	r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	4413      	add	r3, r2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	440b      	add	r3, r1
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d907      	bls.n	800b27a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b26a:	2301      	movs	r3, #1
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	e004      	b.n	800b27a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b270:	4b10      	ldr	r3, [pc, #64]	; (800b2b4 <xTaskIncrementTick+0x174>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3301      	adds	r3, #1
 800b276:	4a0f      	ldr	r2, [pc, #60]	; (800b2b4 <xTaskIncrementTick+0x174>)
 800b278:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b27a:	4b0f      	ldr	r3, [pc, #60]	; (800b2b8 <xTaskIncrementTick+0x178>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d001      	beq.n	800b286 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b282:	2301      	movs	r3, #1
 800b284:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b286:	697b      	ldr	r3, [r7, #20]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3718      	adds	r7, #24
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	20001478 	.word	0x20001478
 800b294:	20001454 	.word	0x20001454
 800b298:	20001408 	.word	0x20001408
 800b29c:	2000140c 	.word	0x2000140c
 800b2a0:	20001468 	.word	0x20001468
 800b2a4:	20001470 	.word	0x20001470
 800b2a8:	20001458 	.word	0x20001458
 800b2ac:	20000f80 	.word	0x20000f80
 800b2b0:	20000f7c 	.word	0x20000f7c
 800b2b4:	20001460 	.word	0x20001460
 800b2b8:	20001464 	.word	0x20001464

0800b2bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2c2:	4b2a      	ldr	r3, [pc, #168]	; (800b36c <vTaskSwitchContext+0xb0>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d003      	beq.n	800b2d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b2ca:	4b29      	ldr	r3, [pc, #164]	; (800b370 <vTaskSwitchContext+0xb4>)
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b2d0:	e046      	b.n	800b360 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b2d2:	4b27      	ldr	r3, [pc, #156]	; (800b370 <vTaskSwitchContext+0xb4>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b2d8:	4b26      	ldr	r3, [pc, #152]	; (800b374 <vTaskSwitchContext+0xb8>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	60fb      	str	r3, [r7, #12]
 800b2de:	e010      	b.n	800b302 <vTaskSwitchContext+0x46>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10a      	bne.n	800b2fc <vTaskSwitchContext+0x40>
	__asm volatile
 800b2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	607b      	str	r3, [r7, #4]
}
 800b2f8:	bf00      	nop
 800b2fa:	e7fe      	b.n	800b2fa <vTaskSwitchContext+0x3e>
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	3b01      	subs	r3, #1
 800b300:	60fb      	str	r3, [r7, #12]
 800b302:	491d      	ldr	r1, [pc, #116]	; (800b378 <vTaskSwitchContext+0xbc>)
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	4613      	mov	r3, r2
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4413      	add	r3, r2
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	440b      	add	r3, r1
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d0e4      	beq.n	800b2e0 <vTaskSwitchContext+0x24>
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	4613      	mov	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	4a15      	ldr	r2, [pc, #84]	; (800b378 <vTaskSwitchContext+0xbc>)
 800b322:	4413      	add	r3, r2
 800b324:	60bb      	str	r3, [r7, #8]
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	685a      	ldr	r2, [r3, #4]
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	605a      	str	r2, [r3, #4]
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	685a      	ldr	r2, [r3, #4]
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	3308      	adds	r3, #8
 800b338:	429a      	cmp	r2, r3
 800b33a:	d104      	bne.n	800b346 <vTaskSwitchContext+0x8a>
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	605a      	str	r2, [r3, #4]
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	4a0b      	ldr	r2, [pc, #44]	; (800b37c <vTaskSwitchContext+0xc0>)
 800b34e:	6013      	str	r3, [r2, #0]
 800b350:	4a08      	ldr	r2, [pc, #32]	; (800b374 <vTaskSwitchContext+0xb8>)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b356:	4b09      	ldr	r3, [pc, #36]	; (800b37c <vTaskSwitchContext+0xc0>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	3354      	adds	r3, #84	; 0x54
 800b35c:	4a08      	ldr	r2, [pc, #32]	; (800b380 <vTaskSwitchContext+0xc4>)
 800b35e:	6013      	str	r3, [r2, #0]
}
 800b360:	bf00      	nop
 800b362:	3714      	adds	r7, #20
 800b364:	46bd      	mov	sp, r7
 800b366:	bc80      	pop	{r7}
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	20001478 	.word	0x20001478
 800b370:	20001464 	.word	0x20001464
 800b374:	20001458 	.word	0x20001458
 800b378:	20000f80 	.word	0x20000f80
 800b37c:	20000f7c 	.word	0x20000f7c
 800b380:	200001cc 	.word	0x200001cc

0800b384 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10a      	bne.n	800b3aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	60fb      	str	r3, [r7, #12]
}
 800b3a6:	bf00      	nop
 800b3a8:	e7fe      	b.n	800b3a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3aa:	4b07      	ldr	r3, [pc, #28]	; (800b3c8 <vTaskPlaceOnEventList+0x44>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3318      	adds	r3, #24
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7fe fe70 	bl	800a098 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	6838      	ldr	r0, [r7, #0]
 800b3bc:	f000 fa84 	bl	800b8c8 <prvAddCurrentTaskToDelayedList>
}
 800b3c0:	bf00      	nop
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	20000f7c 	.word	0x20000f7c

0800b3cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10a      	bne.n	800b3f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	617b      	str	r3, [r7, #20]
}
 800b3f0:	bf00      	nop
 800b3f2:	e7fe      	b.n	800b3f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3f4:	4b0a      	ldr	r3, [pc, #40]	; (800b420 <vTaskPlaceOnEventListRestricted+0x54>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	3318      	adds	r3, #24
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f7fe fe28 	bl	800a052 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d002      	beq.n	800b40e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b408:	f04f 33ff 	mov.w	r3, #4294967295
 800b40c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	68b8      	ldr	r0, [r7, #8]
 800b412:	f000 fa59 	bl	800b8c8 <prvAddCurrentTaskToDelayedList>
	}
 800b416:	bf00      	nop
 800b418:	3718      	adds	r7, #24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	20000f7c 	.word	0x20000f7c

0800b424 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d10a      	bne.n	800b450 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	60fb      	str	r3, [r7, #12]
}
 800b44c:	bf00      	nop
 800b44e:	e7fe      	b.n	800b44e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	3318      	adds	r3, #24
 800b454:	4618      	mov	r0, r3
 800b456:	f7fe fe57 	bl	800a108 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b45a:	4b1e      	ldr	r3, [pc, #120]	; (800b4d4 <xTaskRemoveFromEventList+0xb0>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d11d      	bne.n	800b49e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	3304      	adds	r3, #4
 800b466:	4618      	mov	r0, r3
 800b468:	f7fe fe4e 	bl	800a108 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b470:	4b19      	ldr	r3, [pc, #100]	; (800b4d8 <xTaskRemoveFromEventList+0xb4>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	429a      	cmp	r2, r3
 800b476:	d903      	bls.n	800b480 <xTaskRemoveFromEventList+0x5c>
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47c:	4a16      	ldr	r2, [pc, #88]	; (800b4d8 <xTaskRemoveFromEventList+0xb4>)
 800b47e:	6013      	str	r3, [r2, #0]
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b484:	4613      	mov	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4413      	add	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4a13      	ldr	r2, [pc, #76]	; (800b4dc <xTaskRemoveFromEventList+0xb8>)
 800b48e:	441a      	add	r2, r3
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	3304      	adds	r3, #4
 800b494:	4619      	mov	r1, r3
 800b496:	4610      	mov	r0, r2
 800b498:	f7fe fddb 	bl	800a052 <vListInsertEnd>
 800b49c:	e005      	b.n	800b4aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	3318      	adds	r3, #24
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	480e      	ldr	r0, [pc, #56]	; (800b4e0 <xTaskRemoveFromEventList+0xbc>)
 800b4a6:	f7fe fdd4 	bl	800a052 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ae:	4b0d      	ldr	r3, [pc, #52]	; (800b4e4 <xTaskRemoveFromEventList+0xc0>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d905      	bls.n	800b4c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b4bc:	4b0a      	ldr	r3, [pc, #40]	; (800b4e8 <xTaskRemoveFromEventList+0xc4>)
 800b4be:	2201      	movs	r2, #1
 800b4c0:	601a      	str	r2, [r3, #0]
 800b4c2:	e001      	b.n	800b4c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b4c8:	697b      	ldr	r3, [r7, #20]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3718      	adds	r7, #24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	20001478 	.word	0x20001478
 800b4d8:	20001458 	.word	0x20001458
 800b4dc:	20000f80 	.word	0x20000f80
 800b4e0:	20001410 	.word	0x20001410
 800b4e4:	20000f7c 	.word	0x20000f7c
 800b4e8:	20001464 	.word	0x20001464

0800b4ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4f4:	4b06      	ldr	r3, [pc, #24]	; (800b510 <vTaskInternalSetTimeOutState+0x24>)
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b4fc:	4b05      	ldr	r3, [pc, #20]	; (800b514 <vTaskInternalSetTimeOutState+0x28>)
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	605a      	str	r2, [r3, #4]
}
 800b504:	bf00      	nop
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	bc80      	pop	{r7}
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	20001468 	.word	0x20001468
 800b514:	20001454 	.word	0x20001454

0800b518 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d10a      	bne.n	800b53e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52c:	f383 8811 	msr	BASEPRI, r3
 800b530:	f3bf 8f6f 	isb	sy
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	613b      	str	r3, [r7, #16]
}
 800b53a:	bf00      	nop
 800b53c:	e7fe      	b.n	800b53c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10a      	bne.n	800b55a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b548:	f383 8811 	msr	BASEPRI, r3
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	60fb      	str	r3, [r7, #12]
}
 800b556:	bf00      	nop
 800b558:	e7fe      	b.n	800b558 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b55a:	f000 fe0f 	bl	800c17c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b55e:	4b1d      	ldr	r3, [pc, #116]	; (800b5d4 <xTaskCheckForTimeOut+0xbc>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	69ba      	ldr	r2, [r7, #24]
 800b56a:	1ad3      	subs	r3, r2, r3
 800b56c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b576:	d102      	bne.n	800b57e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b578:	2300      	movs	r3, #0
 800b57a:	61fb      	str	r3, [r7, #28]
 800b57c:	e023      	b.n	800b5c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	4b15      	ldr	r3, [pc, #84]	; (800b5d8 <xTaskCheckForTimeOut+0xc0>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	429a      	cmp	r2, r3
 800b588:	d007      	beq.n	800b59a <xTaskCheckForTimeOut+0x82>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	69ba      	ldr	r2, [r7, #24]
 800b590:	429a      	cmp	r2, r3
 800b592:	d302      	bcc.n	800b59a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b594:	2301      	movs	r3, #1
 800b596:	61fb      	str	r3, [r7, #28]
 800b598:	e015      	b.n	800b5c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d20b      	bcs.n	800b5bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	1ad2      	subs	r2, r2, r3
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7ff ff9b 	bl	800b4ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	61fb      	str	r3, [r7, #28]
 800b5ba:	e004      	b.n	800b5c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b5c6:	f000 fe09 	bl	800c1dc <vPortExitCritical>

	return xReturn;
 800b5ca:	69fb      	ldr	r3, [r7, #28]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3720      	adds	r7, #32
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	20001454 	.word	0x20001454
 800b5d8:	20001468 	.word	0x20001468

0800b5dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b5dc:	b480      	push	{r7}
 800b5de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b5e0:	4b03      	ldr	r3, [pc, #12]	; (800b5f0 <vTaskMissedYield+0x14>)
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	601a      	str	r2, [r3, #0]
}
 800b5e6:	bf00      	nop
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bc80      	pop	{r7}
 800b5ec:	4770      	bx	lr
 800b5ee:	bf00      	nop
 800b5f0:	20001464 	.word	0x20001464

0800b5f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b5fc:	f000 f852 	bl	800b6a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b600:	4b06      	ldr	r3, [pc, #24]	; (800b61c <prvIdleTask+0x28>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d9f9      	bls.n	800b5fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b608:	4b05      	ldr	r3, [pc, #20]	; (800b620 <prvIdleTask+0x2c>)
 800b60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b60e:	601a      	str	r2, [r3, #0]
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b618:	e7f0      	b.n	800b5fc <prvIdleTask+0x8>
 800b61a:	bf00      	nop
 800b61c:	20000f80 	.word	0x20000f80
 800b620:	e000ed04 	.word	0xe000ed04

0800b624 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b62a:	2300      	movs	r3, #0
 800b62c:	607b      	str	r3, [r7, #4]
 800b62e:	e00c      	b.n	800b64a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	4613      	mov	r3, r2
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	4413      	add	r3, r2
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	4a12      	ldr	r2, [pc, #72]	; (800b684 <prvInitialiseTaskLists+0x60>)
 800b63c:	4413      	add	r3, r2
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fe fcdc 	bl	8009ffc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	3301      	adds	r3, #1
 800b648:	607b      	str	r3, [r7, #4]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2b37      	cmp	r3, #55	; 0x37
 800b64e:	d9ef      	bls.n	800b630 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b650:	480d      	ldr	r0, [pc, #52]	; (800b688 <prvInitialiseTaskLists+0x64>)
 800b652:	f7fe fcd3 	bl	8009ffc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b656:	480d      	ldr	r0, [pc, #52]	; (800b68c <prvInitialiseTaskLists+0x68>)
 800b658:	f7fe fcd0 	bl	8009ffc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b65c:	480c      	ldr	r0, [pc, #48]	; (800b690 <prvInitialiseTaskLists+0x6c>)
 800b65e:	f7fe fccd 	bl	8009ffc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b662:	480c      	ldr	r0, [pc, #48]	; (800b694 <prvInitialiseTaskLists+0x70>)
 800b664:	f7fe fcca 	bl	8009ffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b668:	480b      	ldr	r0, [pc, #44]	; (800b698 <prvInitialiseTaskLists+0x74>)
 800b66a:	f7fe fcc7 	bl	8009ffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b66e:	4b0b      	ldr	r3, [pc, #44]	; (800b69c <prvInitialiseTaskLists+0x78>)
 800b670:	4a05      	ldr	r2, [pc, #20]	; (800b688 <prvInitialiseTaskLists+0x64>)
 800b672:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b674:	4b0a      	ldr	r3, [pc, #40]	; (800b6a0 <prvInitialiseTaskLists+0x7c>)
 800b676:	4a05      	ldr	r2, [pc, #20]	; (800b68c <prvInitialiseTaskLists+0x68>)
 800b678:	601a      	str	r2, [r3, #0]
}
 800b67a:	bf00      	nop
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	20000f80 	.word	0x20000f80
 800b688:	200013e0 	.word	0x200013e0
 800b68c:	200013f4 	.word	0x200013f4
 800b690:	20001410 	.word	0x20001410
 800b694:	20001424 	.word	0x20001424
 800b698:	2000143c 	.word	0x2000143c
 800b69c:	20001408 	.word	0x20001408
 800b6a0:	2000140c 	.word	0x2000140c

0800b6a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6aa:	e019      	b.n	800b6e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6ac:	f000 fd66 	bl	800c17c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b6b0:	4b10      	ldr	r3, [pc, #64]	; (800b6f4 <prvCheckTasksWaitingTermination+0x50>)
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	3304      	adds	r3, #4
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fe fd23 	bl	800a108 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b6c2:	4b0d      	ldr	r3, [pc, #52]	; (800b6f8 <prvCheckTasksWaitingTermination+0x54>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	4a0b      	ldr	r2, [pc, #44]	; (800b6f8 <prvCheckTasksWaitingTermination+0x54>)
 800b6ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b6cc:	4b0b      	ldr	r3, [pc, #44]	; (800b6fc <prvCheckTasksWaitingTermination+0x58>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	4a0a      	ldr	r2, [pc, #40]	; (800b6fc <prvCheckTasksWaitingTermination+0x58>)
 800b6d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b6d6:	f000 fd81 	bl	800c1dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 f810 	bl	800b700 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6e0:	4b06      	ldr	r3, [pc, #24]	; (800b6fc <prvCheckTasksWaitingTermination+0x58>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1e1      	bne.n	800b6ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b6e8:	bf00      	nop
 800b6ea:	bf00      	nop
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20001424 	.word	0x20001424
 800b6f8:	20001450 	.word	0x20001450
 800b6fc:	20001438 	.word	0x20001438

0800b700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	3354      	adds	r3, #84	; 0x54
 800b70c:	4618      	mov	r0, r3
 800b70e:	f001 fc8b 	bl	800d028 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d108      	bne.n	800b72e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b720:	4618      	mov	r0, r3
 800b722:	f000 feef 	bl	800c504 <vPortFree>
				vPortFree( pxTCB );
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 feec 	bl	800c504 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b72c:	e018      	b.n	800b760 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b734:	2b01      	cmp	r3, #1
 800b736:	d103      	bne.n	800b740 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fee3 	bl	800c504 <vPortFree>
	}
 800b73e:	e00f      	b.n	800b760 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b746:	2b02      	cmp	r3, #2
 800b748:	d00a      	beq.n	800b760 <prvDeleteTCB+0x60>
	__asm volatile
 800b74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	60fb      	str	r3, [r7, #12]
}
 800b75c:	bf00      	nop
 800b75e:	e7fe      	b.n	800b75e <prvDeleteTCB+0x5e>
	}
 800b760:	bf00      	nop
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b76e:	4b0e      	ldr	r3, [pc, #56]	; (800b7a8 <prvResetNextTaskUnblockTime+0x40>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d101      	bne.n	800b77c <prvResetNextTaskUnblockTime+0x14>
 800b778:	2301      	movs	r3, #1
 800b77a:	e000      	b.n	800b77e <prvResetNextTaskUnblockTime+0x16>
 800b77c:	2300      	movs	r3, #0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d004      	beq.n	800b78c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b782:	4b0a      	ldr	r3, [pc, #40]	; (800b7ac <prvResetNextTaskUnblockTime+0x44>)
 800b784:	f04f 32ff 	mov.w	r2, #4294967295
 800b788:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b78a:	e008      	b.n	800b79e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b78c:	4b06      	ldr	r3, [pc, #24]	; (800b7a8 <prvResetNextTaskUnblockTime+0x40>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	4a04      	ldr	r2, [pc, #16]	; (800b7ac <prvResetNextTaskUnblockTime+0x44>)
 800b79c:	6013      	str	r3, [r2, #0]
}
 800b79e:	bf00      	nop
 800b7a0:	370c      	adds	r7, #12
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bc80      	pop	{r7}
 800b7a6:	4770      	bx	lr
 800b7a8:	20001408 	.word	0x20001408
 800b7ac:	20001470 	.word	0x20001470

0800b7b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b7b6:	4b0b      	ldr	r3, [pc, #44]	; (800b7e4 <xTaskGetSchedulerState+0x34>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d102      	bne.n	800b7c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	607b      	str	r3, [r7, #4]
 800b7c2:	e008      	b.n	800b7d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7c4:	4b08      	ldr	r3, [pc, #32]	; (800b7e8 <xTaskGetSchedulerState+0x38>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d102      	bne.n	800b7d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b7cc:	2302      	movs	r3, #2
 800b7ce:	607b      	str	r3, [r7, #4]
 800b7d0:	e001      	b.n	800b7d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b7d6:	687b      	ldr	r3, [r7, #4]
	}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bc80      	pop	{r7}
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	2000145c 	.word	0x2000145c
 800b7e8:	20001478 	.word	0x20001478

0800b7ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d056      	beq.n	800b8b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b802:	4b2e      	ldr	r3, [pc, #184]	; (800b8bc <xTaskPriorityDisinherit+0xd0>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d00a      	beq.n	800b822 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	60fb      	str	r3, [r7, #12]
}
 800b81e:	bf00      	nop
 800b820:	e7fe      	b.n	800b820 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10a      	bne.n	800b840 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	60bb      	str	r3, [r7, #8]
}
 800b83c:	bf00      	nop
 800b83e:	e7fe      	b.n	800b83e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b844:	1e5a      	subs	r2, r3, #1
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b852:	429a      	cmp	r2, r3
 800b854:	d02c      	beq.n	800b8b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d128      	bne.n	800b8b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	3304      	adds	r3, #4
 800b862:	4618      	mov	r0, r3
 800b864:	f7fe fc50 	bl	800a108 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b874:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b880:	4b0f      	ldr	r3, [pc, #60]	; (800b8c0 <xTaskPriorityDisinherit+0xd4>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	429a      	cmp	r2, r3
 800b886:	d903      	bls.n	800b890 <xTaskPriorityDisinherit+0xa4>
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88c:	4a0c      	ldr	r2, [pc, #48]	; (800b8c0 <xTaskPriorityDisinherit+0xd4>)
 800b88e:	6013      	str	r3, [r2, #0]
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b894:	4613      	mov	r3, r2
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4413      	add	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4a09      	ldr	r2, [pc, #36]	; (800b8c4 <xTaskPriorityDisinherit+0xd8>)
 800b89e:	441a      	add	r2, r3
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	3304      	adds	r3, #4
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4610      	mov	r0, r2
 800b8a8:	f7fe fbd3 	bl	800a052 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8b0:	697b      	ldr	r3, [r7, #20]
	}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3718      	adds	r7, #24
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20000f7c 	.word	0x20000f7c
 800b8c0:	20001458 	.word	0x20001458
 800b8c4:	20000f80 	.word	0x20000f80

0800b8c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b8d2:	4b21      	ldr	r3, [pc, #132]	; (800b958 <prvAddCurrentTaskToDelayedList+0x90>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8d8:	4b20      	ldr	r3, [pc, #128]	; (800b95c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	3304      	adds	r3, #4
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7fe fc12 	bl	800a108 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ea:	d10a      	bne.n	800b902 <prvAddCurrentTaskToDelayedList+0x3a>
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d007      	beq.n	800b902 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8f2:	4b1a      	ldr	r3, [pc, #104]	; (800b95c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4819      	ldr	r0, [pc, #100]	; (800b960 <prvAddCurrentTaskToDelayedList+0x98>)
 800b8fc:	f7fe fba9 	bl	800a052 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b900:	e026      	b.n	800b950 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4413      	add	r3, r2
 800b908:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b90a:	4b14      	ldr	r3, [pc, #80]	; (800b95c <prvAddCurrentTaskToDelayedList+0x94>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	68ba      	ldr	r2, [r7, #8]
 800b910:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	429a      	cmp	r2, r3
 800b918:	d209      	bcs.n	800b92e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b91a:	4b12      	ldr	r3, [pc, #72]	; (800b964 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <prvAddCurrentTaskToDelayedList+0x94>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	3304      	adds	r3, #4
 800b924:	4619      	mov	r1, r3
 800b926:	4610      	mov	r0, r2
 800b928:	f7fe fbb6 	bl	800a098 <vListInsert>
}
 800b92c:	e010      	b.n	800b950 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b92e:	4b0e      	ldr	r3, [pc, #56]	; (800b968 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	4b0a      	ldr	r3, [pc, #40]	; (800b95c <prvAddCurrentTaskToDelayedList+0x94>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	3304      	adds	r3, #4
 800b938:	4619      	mov	r1, r3
 800b93a:	4610      	mov	r0, r2
 800b93c:	f7fe fbac 	bl	800a098 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b940:	4b0a      	ldr	r3, [pc, #40]	; (800b96c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	429a      	cmp	r2, r3
 800b948:	d202      	bcs.n	800b950 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b94a:	4a08      	ldr	r2, [pc, #32]	; (800b96c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	6013      	str	r3, [r2, #0]
}
 800b950:	bf00      	nop
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	20001454 	.word	0x20001454
 800b95c:	20000f7c 	.word	0x20000f7c
 800b960:	2000143c 	.word	0x2000143c
 800b964:	2000140c 	.word	0x2000140c
 800b968:	20001408 	.word	0x20001408
 800b96c:	20001470 	.word	0x20001470

0800b970 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b08a      	sub	sp, #40	; 0x28
 800b974:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b976:	2300      	movs	r3, #0
 800b978:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b97a:	f000 facb 	bl	800bf14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b97e:	4b1c      	ldr	r3, [pc, #112]	; (800b9f0 <xTimerCreateTimerTask+0x80>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d021      	beq.n	800b9ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b986:	2300      	movs	r3, #0
 800b988:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b98a:	2300      	movs	r3, #0
 800b98c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b98e:	1d3a      	adds	r2, r7, #4
 800b990:	f107 0108 	add.w	r1, r7, #8
 800b994:	f107 030c 	add.w	r3, r7, #12
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fe fb15 	bl	8009fc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b99e:	6879      	ldr	r1, [r7, #4]
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	9202      	str	r2, [sp, #8]
 800b9a6:	9301      	str	r3, [sp, #4]
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	460a      	mov	r2, r1
 800b9b0:	4910      	ldr	r1, [pc, #64]	; (800b9f4 <xTimerCreateTimerTask+0x84>)
 800b9b2:	4811      	ldr	r0, [pc, #68]	; (800b9f8 <xTimerCreateTimerTask+0x88>)
 800b9b4:	f7ff f8b6 	bl	800ab24 <xTaskCreateStatic>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	4a10      	ldr	r2, [pc, #64]	; (800b9fc <xTimerCreateTimerTask+0x8c>)
 800b9bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b9be:	4b0f      	ldr	r3, [pc, #60]	; (800b9fc <xTimerCreateTimerTask+0x8c>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d001      	beq.n	800b9ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d10a      	bne.n	800b9e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d4:	f383 8811 	msr	BASEPRI, r3
 800b9d8:	f3bf 8f6f 	isb	sy
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	613b      	str	r3, [r7, #16]
}
 800b9e2:	bf00      	nop
 800b9e4:	e7fe      	b.n	800b9e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b9e6:	697b      	ldr	r3, [r7, #20]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3718      	adds	r7, #24
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	200014ac 	.word	0x200014ac
 800b9f4:	0800d224 	.word	0x0800d224
 800b9f8:	0800bb1d 	.word	0x0800bb1d
 800b9fc:	200014b0 	.word	0x200014b0

0800ba00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b08a      	sub	sp, #40	; 0x28
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
 800ba0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10a      	bne.n	800ba2e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ba18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	623b      	str	r3, [r7, #32]
}
 800ba2a:	bf00      	nop
 800ba2c:	e7fe      	b.n	800ba2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba2e:	4b1a      	ldr	r3, [pc, #104]	; (800ba98 <xTimerGenericCommand+0x98>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d02a      	beq.n	800ba8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	2b05      	cmp	r3, #5
 800ba46:	dc18      	bgt.n	800ba7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ba48:	f7ff feb2 	bl	800b7b0 <xTaskGetSchedulerState>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d109      	bne.n	800ba66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba52:	4b11      	ldr	r3, [pc, #68]	; (800ba98 <xTimerGenericCommand+0x98>)
 800ba54:	6818      	ldr	r0, [r3, #0]
 800ba56:	f107 0110 	add.w	r1, r7, #16
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba5e:	f7fe fc7f 	bl	800a360 <xQueueGenericSend>
 800ba62:	6278      	str	r0, [r7, #36]	; 0x24
 800ba64:	e012      	b.n	800ba8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba66:	4b0c      	ldr	r3, [pc, #48]	; (800ba98 <xTimerGenericCommand+0x98>)
 800ba68:	6818      	ldr	r0, [r3, #0]
 800ba6a:	f107 0110 	add.w	r1, r7, #16
 800ba6e:	2300      	movs	r3, #0
 800ba70:	2200      	movs	r2, #0
 800ba72:	f7fe fc75 	bl	800a360 <xQueueGenericSend>
 800ba76:	6278      	str	r0, [r7, #36]	; 0x24
 800ba78:	e008      	b.n	800ba8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba7a:	4b07      	ldr	r3, [pc, #28]	; (800ba98 <xTimerGenericCommand+0x98>)
 800ba7c:	6818      	ldr	r0, [r3, #0]
 800ba7e:	f107 0110 	add.w	r1, r7, #16
 800ba82:	2300      	movs	r3, #0
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	f7fe fd69 	bl	800a55c <xQueueGenericSendFromISR>
 800ba8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3728      	adds	r7, #40	; 0x28
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	200014ac 	.word	0x200014ac

0800ba9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b088      	sub	sp, #32
 800baa0:	af02      	add	r7, sp, #8
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800baa6:	4b1c      	ldr	r3, [pc, #112]	; (800bb18 <prvProcessExpiredTimer+0x7c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	3304      	adds	r3, #4
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7fe fb27 	bl	800a108 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	69db      	ldr	r3, [r3, #28]
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d122      	bne.n	800bb08 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	699a      	ldr	r2, [r3, #24]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	18d1      	adds	r1, r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	6978      	ldr	r0, [r7, #20]
 800bad0:	f000 f8c8 	bl	800bc64 <prvInsertTimerInActiveList>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d016      	beq.n	800bb08 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bada:	2300      	movs	r3, #0
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	2300      	movs	r3, #0
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	2100      	movs	r1, #0
 800bae4:	6978      	ldr	r0, [r7, #20]
 800bae6:	f7ff ff8b 	bl	800ba00 <xTimerGenericCommand>
 800baea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10a      	bne.n	800bb08 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800baf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	60fb      	str	r3, [r7, #12]
}
 800bb04:	bf00      	nop
 800bb06:	e7fe      	b.n	800bb06 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0c:	6978      	ldr	r0, [r7, #20]
 800bb0e:	4798      	blx	r3
}
 800bb10:	bf00      	nop
 800bb12:	3718      	adds	r7, #24
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	200014a4 	.word	0x200014a4

0800bb1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb24:	f107 0308 	add.w	r3, r7, #8
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f000 f857 	bl	800bbdc <prvGetNextExpireTime>
 800bb2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	4619      	mov	r1, r3
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 f803 	bl	800bb40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb3a:	f000 f8d5 	bl	800bce8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb3e:	e7f1      	b.n	800bb24 <prvTimerTask+0x8>

0800bb40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bb4a:	f7ff fa3f 	bl	800afcc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb4e:	f107 0308 	add.w	r3, r7, #8
 800bb52:	4618      	mov	r0, r3
 800bb54:	f000 f866 	bl	800bc24 <prvSampleTimeNow>
 800bb58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d130      	bne.n	800bbc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10a      	bne.n	800bb7c <prvProcessTimerOrBlockTask+0x3c>
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d806      	bhi.n	800bb7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb6e:	f7ff fa3b 	bl	800afe8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb72:	68f9      	ldr	r1, [r7, #12]
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f7ff ff91 	bl	800ba9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb7a:	e024      	b.n	800bbc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d008      	beq.n	800bb94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb82:	4b13      	ldr	r3, [pc, #76]	; (800bbd0 <prvProcessTimerOrBlockTask+0x90>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	bf0c      	ite	eq
 800bb8c:	2301      	moveq	r3, #1
 800bb8e:	2300      	movne	r3, #0
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb94:	4b0f      	ldr	r3, [pc, #60]	; (800bbd4 <prvProcessTimerOrBlockTask+0x94>)
 800bb96:	6818      	ldr	r0, [r3, #0]
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	1ad3      	subs	r3, r2, r3
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	4619      	mov	r1, r3
 800bba2:	f7fe ff8b 	bl	800aabc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bba6:	f7ff fa1f 	bl	800afe8 <xTaskResumeAll>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10a      	bne.n	800bbc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bbb0:	4b09      	ldr	r3, [pc, #36]	; (800bbd8 <prvProcessTimerOrBlockTask+0x98>)
 800bbb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbb6:	601a      	str	r2, [r3, #0]
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	f3bf 8f6f 	isb	sy
}
 800bbc0:	e001      	b.n	800bbc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bbc2:	f7ff fa11 	bl	800afe8 <xTaskResumeAll>
}
 800bbc6:	bf00      	nop
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	200014a8 	.word	0x200014a8
 800bbd4:	200014ac 	.word	0x200014ac
 800bbd8:	e000ed04 	.word	0xe000ed04

0800bbdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bbe4:	4b0e      	ldr	r3, [pc, #56]	; (800bc20 <prvGetNextExpireTime+0x44>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	bf0c      	ite	eq
 800bbee:	2301      	moveq	r3, #1
 800bbf0:	2300      	movne	r3, #0
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d105      	bne.n	800bc0e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc02:	4b07      	ldr	r3, [pc, #28]	; (800bc20 <prvGetNextExpireTime+0x44>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	60fb      	str	r3, [r7, #12]
 800bc0c:	e001      	b.n	800bc12 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc12:	68fb      	ldr	r3, [r7, #12]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3714      	adds	r7, #20
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bc80      	pop	{r7}
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	200014a4 	.word	0x200014a4

0800bc24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bc2c:	f7ff fa7a 	bl	800b124 <xTaskGetTickCount>
 800bc30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bc32:	4b0b      	ldr	r3, [pc, #44]	; (800bc60 <prvSampleTimeNow+0x3c>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d205      	bcs.n	800bc48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bc3c:	f000 f908 	bl	800be50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	601a      	str	r2, [r3, #0]
 800bc46:	e002      	b.n	800bc4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bc4e:	4a04      	ldr	r2, [pc, #16]	; (800bc60 <prvSampleTimeNow+0x3c>)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bc54:	68fb      	ldr	r3, [r7, #12]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	200014b4 	.word	0x200014b4

0800bc64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
 800bc70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc72:	2300      	movs	r3, #0
 800bc74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d812      	bhi.n	800bcb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	1ad2      	subs	r2, r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d302      	bcc.n	800bc9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	617b      	str	r3, [r7, #20]
 800bc9c:	e01b      	b.n	800bcd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc9e:	4b10      	ldr	r3, [pc, #64]	; (800bce0 <prvInsertTimerInActiveList+0x7c>)
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	3304      	adds	r3, #4
 800bca6:	4619      	mov	r1, r3
 800bca8:	4610      	mov	r0, r2
 800bcaa:	f7fe f9f5 	bl	800a098 <vListInsert>
 800bcae:	e012      	b.n	800bcd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d206      	bcs.n	800bcc6 <prvInsertTimerInActiveList+0x62>
 800bcb8:	68ba      	ldr	r2, [r7, #8]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d302      	bcc.n	800bcc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	617b      	str	r3, [r7, #20]
 800bcc4:	e007      	b.n	800bcd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bcc6:	4b07      	ldr	r3, [pc, #28]	; (800bce4 <prvInsertTimerInActiveList+0x80>)
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	3304      	adds	r3, #4
 800bcce:	4619      	mov	r1, r3
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	f7fe f9e1 	bl	800a098 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bcd6:	697b      	ldr	r3, [r7, #20]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3718      	adds	r7, #24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	200014a8 	.word	0x200014a8
 800bce4:	200014a4 	.word	0x200014a4

0800bce8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b08e      	sub	sp, #56	; 0x38
 800bcec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcee:	e09d      	b.n	800be2c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	da18      	bge.n	800bd28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bcf6:	1d3b      	adds	r3, r7, #4
 800bcf8:	3304      	adds	r3, #4
 800bcfa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10a      	bne.n	800bd18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	61fb      	str	r3, [r7, #28]
}
 800bd14:	bf00      	nop
 800bd16:	e7fe      	b.n	800bd16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd1e:	6850      	ldr	r0, [r2, #4]
 800bd20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd22:	6892      	ldr	r2, [r2, #8]
 800bd24:	4611      	mov	r1, r2
 800bd26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	db7e      	blt.n	800be2c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	695b      	ldr	r3, [r3, #20]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d004      	beq.n	800bd44 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fe f9e2 	bl	800a108 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd44:	463b      	mov	r3, r7
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7ff ff6c 	bl	800bc24 <prvSampleTimeNow>
 800bd4c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b09      	cmp	r3, #9
 800bd52:	d86a      	bhi.n	800be2a <prvProcessReceivedCommands+0x142>
 800bd54:	a201      	add	r2, pc, #4	; (adr r2, 800bd5c <prvProcessReceivedCommands+0x74>)
 800bd56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5a:	bf00      	nop
 800bd5c:	0800bd85 	.word	0x0800bd85
 800bd60:	0800bd85 	.word	0x0800bd85
 800bd64:	0800bd85 	.word	0x0800bd85
 800bd68:	0800be2d 	.word	0x0800be2d
 800bd6c:	0800bde1 	.word	0x0800bde1
 800bd70:	0800be19 	.word	0x0800be19
 800bd74:	0800bd85 	.word	0x0800bd85
 800bd78:	0800bd85 	.word	0x0800bd85
 800bd7c:	0800be2d 	.word	0x0800be2d
 800bd80:	0800bde1 	.word	0x0800bde1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd84:	68ba      	ldr	r2, [r7, #8]
 800bd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	18d1      	adds	r1, r2, r3
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd92:	f7ff ff67 	bl	800bc64 <prvInsertTimerInActiveList>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d047      	beq.n	800be2c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bda2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	69db      	ldr	r3, [r3, #28]
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d13f      	bne.n	800be2c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bdac:	68ba      	ldr	r2, [r7, #8]
 800bdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb0:	699b      	ldr	r3, [r3, #24]
 800bdb2:	441a      	add	r2, r3
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	2300      	movs	r3, #0
 800bdba:	2100      	movs	r1, #0
 800bdbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdbe:	f7ff fe1f 	bl	800ba00 <xTimerGenericCommand>
 800bdc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bdc4:	6a3b      	ldr	r3, [r7, #32]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d130      	bne.n	800be2c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800bdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdce:	f383 8811 	msr	BASEPRI, r3
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	f3bf 8f4f 	dsb	sy
 800bdda:	61bb      	str	r3, [r7, #24]
}
 800bddc:	bf00      	nop
 800bdde:	e7fe      	b.n	800bdde <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10a      	bne.n	800be04 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800bdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf2:	f383 8811 	msr	BASEPRI, r3
 800bdf6:	f3bf 8f6f 	isb	sy
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	617b      	str	r3, [r7, #20]
}
 800be00:	bf00      	nop
 800be02:	e7fe      	b.n	800be02 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	699a      	ldr	r2, [r3, #24]
 800be08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0a:	18d1      	adds	r1, r2, r3
 800be0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be12:	f7ff ff27 	bl	800bc64 <prvInsertTimerInActiveList>
					break;
 800be16:	e009      	b.n	800be2c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d104      	bne.n	800be2c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800be22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be24:	f000 fb6e 	bl	800c504 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be28:	e000      	b.n	800be2c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800be2a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be2c:	4b07      	ldr	r3, [pc, #28]	; (800be4c <prvProcessReceivedCommands+0x164>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	1d39      	adds	r1, r7, #4
 800be32:	2200      	movs	r2, #0
 800be34:	4618      	mov	r0, r3
 800be36:	f7fe fc29 	bl	800a68c <xQueueReceive>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f47f af57 	bne.w	800bcf0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800be42:	bf00      	nop
 800be44:	bf00      	nop
 800be46:	3730      	adds	r7, #48	; 0x30
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	200014ac 	.word	0x200014ac

0800be50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b088      	sub	sp, #32
 800be54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be56:	e045      	b.n	800bee4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be58:	4b2c      	ldr	r3, [pc, #176]	; (800bf0c <prvSwitchTimerLists+0xbc>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be62:	4b2a      	ldr	r3, [pc, #168]	; (800bf0c <prvSwitchTimerLists+0xbc>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	68db      	ldr	r3, [r3, #12]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	3304      	adds	r3, #4
 800be70:	4618      	mov	r0, r3
 800be72:	f7fe f949 	bl	800a108 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	69db      	ldr	r3, [r3, #28]
 800be82:	2b01      	cmp	r3, #1
 800be84:	d12e      	bne.n	800bee4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	699b      	ldr	r3, [r3, #24]
 800be8a:	693a      	ldr	r2, [r7, #16]
 800be8c:	4413      	add	r3, r2
 800be8e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	429a      	cmp	r2, r3
 800be96:	d90e      	bls.n	800beb6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bea4:	4b19      	ldr	r3, [pc, #100]	; (800bf0c <prvSwitchTimerLists+0xbc>)
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	3304      	adds	r3, #4
 800beac:	4619      	mov	r1, r3
 800beae:	4610      	mov	r0, r2
 800beb0:	f7fe f8f2 	bl	800a098 <vListInsert>
 800beb4:	e016      	b.n	800bee4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800beb6:	2300      	movs	r3, #0
 800beb8:	9300      	str	r3, [sp, #0]
 800beba:	2300      	movs	r3, #0
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	2100      	movs	r1, #0
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f7ff fd9d 	bl	800ba00 <xTimerGenericCommand>
 800bec6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10a      	bne.n	800bee4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	603b      	str	r3, [r7, #0]
}
 800bee0:	bf00      	nop
 800bee2:	e7fe      	b.n	800bee2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bee4:	4b09      	ldr	r3, [pc, #36]	; (800bf0c <prvSwitchTimerLists+0xbc>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1b4      	bne.n	800be58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800beee:	4b07      	ldr	r3, [pc, #28]	; (800bf0c <prvSwitchTimerLists+0xbc>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bef4:	4b06      	ldr	r3, [pc, #24]	; (800bf10 <prvSwitchTimerLists+0xc0>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a04      	ldr	r2, [pc, #16]	; (800bf0c <prvSwitchTimerLists+0xbc>)
 800befa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800befc:	4a04      	ldr	r2, [pc, #16]	; (800bf10 <prvSwitchTimerLists+0xc0>)
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	6013      	str	r3, [r2, #0]
}
 800bf02:	bf00      	nop
 800bf04:	3718      	adds	r7, #24
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	200014a4 	.word	0x200014a4
 800bf10:	200014a8 	.word	0x200014a8

0800bf14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf1a:	f000 f92f 	bl	800c17c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf1e:	4b15      	ldr	r3, [pc, #84]	; (800bf74 <prvCheckForValidListAndQueue+0x60>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d120      	bne.n	800bf68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf26:	4814      	ldr	r0, [pc, #80]	; (800bf78 <prvCheckForValidListAndQueue+0x64>)
 800bf28:	f7fe f868 	bl	8009ffc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf2c:	4813      	ldr	r0, [pc, #76]	; (800bf7c <prvCheckForValidListAndQueue+0x68>)
 800bf2e:	f7fe f865 	bl	8009ffc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf32:	4b13      	ldr	r3, [pc, #76]	; (800bf80 <prvCheckForValidListAndQueue+0x6c>)
 800bf34:	4a10      	ldr	r2, [pc, #64]	; (800bf78 <prvCheckForValidListAndQueue+0x64>)
 800bf36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf38:	4b12      	ldr	r3, [pc, #72]	; (800bf84 <prvCheckForValidListAndQueue+0x70>)
 800bf3a:	4a10      	ldr	r2, [pc, #64]	; (800bf7c <prvCheckForValidListAndQueue+0x68>)
 800bf3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf3e:	2300      	movs	r3, #0
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	4b11      	ldr	r3, [pc, #68]	; (800bf88 <prvCheckForValidListAndQueue+0x74>)
 800bf44:	4a11      	ldr	r2, [pc, #68]	; (800bf8c <prvCheckForValidListAndQueue+0x78>)
 800bf46:	2110      	movs	r1, #16
 800bf48:	200a      	movs	r0, #10
 800bf4a:	f7fe f96f 	bl	800a22c <xQueueGenericCreateStatic>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	4a08      	ldr	r2, [pc, #32]	; (800bf74 <prvCheckForValidListAndQueue+0x60>)
 800bf52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf54:	4b07      	ldr	r3, [pc, #28]	; (800bf74 <prvCheckForValidListAndQueue+0x60>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d005      	beq.n	800bf68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf5c:	4b05      	ldr	r3, [pc, #20]	; (800bf74 <prvCheckForValidListAndQueue+0x60>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	490b      	ldr	r1, [pc, #44]	; (800bf90 <prvCheckForValidListAndQueue+0x7c>)
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7fe fd82 	bl	800aa6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf68:	f000 f938 	bl	800c1dc <vPortExitCritical>
}
 800bf6c:	bf00      	nop
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	200014ac 	.word	0x200014ac
 800bf78:	2000147c 	.word	0x2000147c
 800bf7c:	20001490 	.word	0x20001490
 800bf80:	200014a4 	.word	0x200014a4
 800bf84:	200014a8 	.word	0x200014a8
 800bf88:	20001558 	.word	0x20001558
 800bf8c:	200014b8 	.word	0x200014b8
 800bf90:	0800d22c 	.word	0x0800d22c

0800bf94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	3b04      	subs	r3, #4
 800bfa4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bfac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	3b04      	subs	r3, #4
 800bfb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	f023 0201 	bic.w	r2, r3, #1
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	3b04      	subs	r3, #4
 800bfc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bfc4:	4a08      	ldr	r2, [pc, #32]	; (800bfe8 <pxPortInitialiseStack+0x54>)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	3b14      	subs	r3, #20
 800bfce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	3b20      	subs	r3, #32
 800bfda:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3714      	adds	r7, #20
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bc80      	pop	{r7}
 800bfe6:	4770      	bx	lr
 800bfe8:	0800bfed 	.word	0x0800bfed

0800bfec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bff2:	2300      	movs	r3, #0
 800bff4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bff6:	4b12      	ldr	r3, [pc, #72]	; (800c040 <prvTaskExitError+0x54>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffe:	d00a      	beq.n	800c016 <prvTaskExitError+0x2a>
	__asm volatile
 800c000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	60fb      	str	r3, [r7, #12]
}
 800c012:	bf00      	nop
 800c014:	e7fe      	b.n	800c014 <prvTaskExitError+0x28>
	__asm volatile
 800c016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	60bb      	str	r3, [r7, #8]
}
 800c028:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c02a:	bf00      	nop
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d0fc      	beq.n	800c02c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c032:	bf00      	nop
 800c034:	bf00      	nop
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	bc80      	pop	{r7}
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	2000011c 	.word	0x2000011c
	...

0800c050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c050:	4b07      	ldr	r3, [pc, #28]	; (800c070 <pxCurrentTCBConst2>)
 800c052:	6819      	ldr	r1, [r3, #0]
 800c054:	6808      	ldr	r0, [r1, #0]
 800c056:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c05a:	f380 8809 	msr	PSP, r0
 800c05e:	f3bf 8f6f 	isb	sy
 800c062:	f04f 0000 	mov.w	r0, #0
 800c066:	f380 8811 	msr	BASEPRI, r0
 800c06a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c06e:	4770      	bx	lr

0800c070 <pxCurrentTCBConst2>:
 800c070:	20000f7c 	.word	0x20000f7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c074:	bf00      	nop
 800c076:	bf00      	nop

0800c078 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c078:	4806      	ldr	r0, [pc, #24]	; (800c094 <prvPortStartFirstTask+0x1c>)
 800c07a:	6800      	ldr	r0, [r0, #0]
 800c07c:	6800      	ldr	r0, [r0, #0]
 800c07e:	f380 8808 	msr	MSP, r0
 800c082:	b662      	cpsie	i
 800c084:	b661      	cpsie	f
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	f3bf 8f6f 	isb	sy
 800c08e:	df00      	svc	0
 800c090:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c092:	bf00      	nop
 800c094:	e000ed08 	.word	0xe000ed08

0800c098 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c09e:	4b32      	ldr	r3, [pc, #200]	; (800c168 <xPortStartScheduler+0xd0>)
 800c0a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	22ff      	movs	r2, #255	; 0xff
 800c0ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0b8:	78fb      	ldrb	r3, [r7, #3]
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c0c0:	b2da      	uxtb	r2, r3
 800c0c2:	4b2a      	ldr	r3, [pc, #168]	; (800c16c <xPortStartScheduler+0xd4>)
 800c0c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0c6:	4b2a      	ldr	r3, [pc, #168]	; (800c170 <xPortStartScheduler+0xd8>)
 800c0c8:	2207      	movs	r2, #7
 800c0ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0cc:	e009      	b.n	800c0e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c0ce:	4b28      	ldr	r3, [pc, #160]	; (800c170 <xPortStartScheduler+0xd8>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	4a26      	ldr	r2, [pc, #152]	; (800c170 <xPortStartScheduler+0xd8>)
 800c0d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c0d8:	78fb      	ldrb	r3, [r7, #3]
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	005b      	lsls	r3, r3, #1
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0e2:	78fb      	ldrb	r3, [r7, #3]
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0ea:	2b80      	cmp	r3, #128	; 0x80
 800c0ec:	d0ef      	beq.n	800c0ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c0ee:	4b20      	ldr	r3, [pc, #128]	; (800c170 <xPortStartScheduler+0xd8>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f1c3 0307 	rsb	r3, r3, #7
 800c0f6:	2b04      	cmp	r3, #4
 800c0f8:	d00a      	beq.n	800c110 <xPortStartScheduler+0x78>
	__asm volatile
 800c0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	60bb      	str	r3, [r7, #8]
}
 800c10c:	bf00      	nop
 800c10e:	e7fe      	b.n	800c10e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c110:	4b17      	ldr	r3, [pc, #92]	; (800c170 <xPortStartScheduler+0xd8>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	021b      	lsls	r3, r3, #8
 800c116:	4a16      	ldr	r2, [pc, #88]	; (800c170 <xPortStartScheduler+0xd8>)
 800c118:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c11a:	4b15      	ldr	r3, [pc, #84]	; (800c170 <xPortStartScheduler+0xd8>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c122:	4a13      	ldr	r2, [pc, #76]	; (800c170 <xPortStartScheduler+0xd8>)
 800c124:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c12e:	4b11      	ldr	r3, [pc, #68]	; (800c174 <xPortStartScheduler+0xdc>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a10      	ldr	r2, [pc, #64]	; (800c174 <xPortStartScheduler+0xdc>)
 800c134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c138:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c13a:	4b0e      	ldr	r3, [pc, #56]	; (800c174 <xPortStartScheduler+0xdc>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a0d      	ldr	r2, [pc, #52]	; (800c174 <xPortStartScheduler+0xdc>)
 800c140:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c144:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c146:	f000 f8b9 	bl	800c2bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c14a:	4b0b      	ldr	r3, [pc, #44]	; (800c178 <xPortStartScheduler+0xe0>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c150:	f7ff ff92 	bl	800c078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c154:	f7ff f8b2 	bl	800b2bc <vTaskSwitchContext>
	prvTaskExitError();
 800c158:	f7ff ff48 	bl	800bfec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	e000e400 	.word	0xe000e400
 800c16c:	200015a8 	.word	0x200015a8
 800c170:	200015ac 	.word	0x200015ac
 800c174:	e000ed20 	.word	0xe000ed20
 800c178:	2000011c 	.word	0x2000011c

0800c17c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
	__asm volatile
 800c182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	607b      	str	r3, [r7, #4]
}
 800c194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c196:	4b0f      	ldr	r3, [pc, #60]	; (800c1d4 <vPortEnterCritical+0x58>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3301      	adds	r3, #1
 800c19c:	4a0d      	ldr	r2, [pc, #52]	; (800c1d4 <vPortEnterCritical+0x58>)
 800c19e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c1a0:	4b0c      	ldr	r3, [pc, #48]	; (800c1d4 <vPortEnterCritical+0x58>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d10f      	bne.n	800c1c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c1a8:	4b0b      	ldr	r3, [pc, #44]	; (800c1d8 <vPortEnterCritical+0x5c>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00a      	beq.n	800c1c8 <vPortEnterCritical+0x4c>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	603b      	str	r3, [r7, #0]
}
 800c1c4:	bf00      	nop
 800c1c6:	e7fe      	b.n	800c1c6 <vPortEnterCritical+0x4a>
	}
}
 800c1c8:	bf00      	nop
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bc80      	pop	{r7}
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	2000011c 	.word	0x2000011c
 800c1d8:	e000ed04 	.word	0xe000ed04

0800c1dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c1e2:	4b11      	ldr	r3, [pc, #68]	; (800c228 <vPortExitCritical+0x4c>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10a      	bne.n	800c200 <vPortExitCritical+0x24>
	__asm volatile
 800c1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ee:	f383 8811 	msr	BASEPRI, r3
 800c1f2:	f3bf 8f6f 	isb	sy
 800c1f6:	f3bf 8f4f 	dsb	sy
 800c1fa:	607b      	str	r3, [r7, #4]
}
 800c1fc:	bf00      	nop
 800c1fe:	e7fe      	b.n	800c1fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c200:	4b09      	ldr	r3, [pc, #36]	; (800c228 <vPortExitCritical+0x4c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	3b01      	subs	r3, #1
 800c206:	4a08      	ldr	r2, [pc, #32]	; (800c228 <vPortExitCritical+0x4c>)
 800c208:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c20a:	4b07      	ldr	r3, [pc, #28]	; (800c228 <vPortExitCritical+0x4c>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d105      	bne.n	800c21e <vPortExitCritical+0x42>
 800c212:	2300      	movs	r3, #0
 800c214:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	f383 8811 	msr	BASEPRI, r3
}
 800c21c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c21e:	bf00      	nop
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	bc80      	pop	{r7}
 800c226:	4770      	bx	lr
 800c228:	2000011c 	.word	0x2000011c
 800c22c:	00000000 	.word	0x00000000

0800c230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c230:	f3ef 8009 	mrs	r0, PSP
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	4b0d      	ldr	r3, [pc, #52]	; (800c270 <pxCurrentTCBConst>)
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c240:	6010      	str	r0, [r2, #0]
 800c242:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c246:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c24a:	f380 8811 	msr	BASEPRI, r0
 800c24e:	f7ff f835 	bl	800b2bc <vTaskSwitchContext>
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f380 8811 	msr	BASEPRI, r0
 800c25a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c25e:	6819      	ldr	r1, [r3, #0]
 800c260:	6808      	ldr	r0, [r1, #0]
 800c262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c266:	f380 8809 	msr	PSP, r0
 800c26a:	f3bf 8f6f 	isb	sy
 800c26e:	4770      	bx	lr

0800c270 <pxCurrentTCBConst>:
 800c270:	20000f7c 	.word	0x20000f7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c274:	bf00      	nop
 800c276:	bf00      	nop

0800c278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
	__asm volatile
 800c27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	607b      	str	r3, [r7, #4]
}
 800c290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c292:	f7fe ff55 	bl	800b140 <xTaskIncrementTick>
 800c296:	4603      	mov	r3, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d003      	beq.n	800c2a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c29c:	4b06      	ldr	r3, [pc, #24]	; (800c2b8 <SysTick_Handler+0x40>)
 800c29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	f383 8811 	msr	BASEPRI, r3
}
 800c2ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c2b0:	bf00      	nop
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	e000ed04 	.word	0xe000ed04

0800c2bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c2bc:	b480      	push	{r7}
 800c2be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c2c0:	4b0a      	ldr	r3, [pc, #40]	; (800c2ec <vPortSetupTimerInterrupt+0x30>)
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2c6:	4b0a      	ldr	r3, [pc, #40]	; (800c2f0 <vPortSetupTimerInterrupt+0x34>)
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c2cc:	4b09      	ldr	r3, [pc, #36]	; (800c2f4 <vPortSetupTimerInterrupt+0x38>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a09      	ldr	r2, [pc, #36]	; (800c2f8 <vPortSetupTimerInterrupt+0x3c>)
 800c2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2d6:	099b      	lsrs	r3, r3, #6
 800c2d8:	4a08      	ldr	r2, [pc, #32]	; (800c2fc <vPortSetupTimerInterrupt+0x40>)
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2de:	4b03      	ldr	r3, [pc, #12]	; (800c2ec <vPortSetupTimerInterrupt+0x30>)
 800c2e0:	2207      	movs	r2, #7
 800c2e2:	601a      	str	r2, [r3, #0]
}
 800c2e4:	bf00      	nop
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bc80      	pop	{r7}
 800c2ea:	4770      	bx	lr
 800c2ec:	e000e010 	.word	0xe000e010
 800c2f0:	e000e018 	.word	0xe000e018
 800c2f4:	20000000 	.word	0x20000000
 800c2f8:	10624dd3 	.word	0x10624dd3
 800c2fc:	e000e014 	.word	0xe000e014

0800c300 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c306:	f3ef 8305 	mrs	r3, IPSR
 800c30a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2b0f      	cmp	r3, #15
 800c310:	d914      	bls.n	800c33c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c312:	4a16      	ldr	r2, [pc, #88]	; (800c36c <vPortValidateInterruptPriority+0x6c>)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	4413      	add	r3, r2
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c31c:	4b14      	ldr	r3, [pc, #80]	; (800c370 <vPortValidateInterruptPriority+0x70>)
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	7afa      	ldrb	r2, [r7, #11]
 800c322:	429a      	cmp	r2, r3
 800c324:	d20a      	bcs.n	800c33c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32a:	f383 8811 	msr	BASEPRI, r3
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	607b      	str	r3, [r7, #4]
}
 800c338:	bf00      	nop
 800c33a:	e7fe      	b.n	800c33a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c33c:	4b0d      	ldr	r3, [pc, #52]	; (800c374 <vPortValidateInterruptPriority+0x74>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c344:	4b0c      	ldr	r3, [pc, #48]	; (800c378 <vPortValidateInterruptPriority+0x78>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d90a      	bls.n	800c362 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c350:	f383 8811 	msr	BASEPRI, r3
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	603b      	str	r3, [r7, #0]
}
 800c35e:	bf00      	nop
 800c360:	e7fe      	b.n	800c360 <vPortValidateInterruptPriority+0x60>
	}
 800c362:	bf00      	nop
 800c364:	3714      	adds	r7, #20
 800c366:	46bd      	mov	sp, r7
 800c368:	bc80      	pop	{r7}
 800c36a:	4770      	bx	lr
 800c36c:	e000e3f0 	.word	0xe000e3f0
 800c370:	200015a8 	.word	0x200015a8
 800c374:	e000ed0c 	.word	0xe000ed0c
 800c378:	200015ac 	.word	0x200015ac

0800c37c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b08a      	sub	sp, #40	; 0x28
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c384:	2300      	movs	r3, #0
 800c386:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c388:	f7fe fe20 	bl	800afcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c38c:	4b58      	ldr	r3, [pc, #352]	; (800c4f0 <pvPortMalloc+0x174>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d101      	bne.n	800c398 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c394:	f000 f910 	bl	800c5b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c398:	4b56      	ldr	r3, [pc, #344]	; (800c4f4 <pvPortMalloc+0x178>)
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4013      	ands	r3, r2
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f040 808e 	bne.w	800c4c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d01d      	beq.n	800c3e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c3ac:	2208      	movs	r2, #8
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f003 0307 	and.w	r3, r3, #7
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d014      	beq.n	800c3e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f023 0307 	bic.w	r3, r3, #7
 800c3c4:	3308      	adds	r3, #8
 800c3c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f003 0307 	and.w	r3, r3, #7
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00a      	beq.n	800c3e8 <pvPortMalloc+0x6c>
	__asm volatile
 800c3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	617b      	str	r3, [r7, #20]
}
 800c3e4:	bf00      	nop
 800c3e6:	e7fe      	b.n	800c3e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d069      	beq.n	800c4c2 <pvPortMalloc+0x146>
 800c3ee:	4b42      	ldr	r3, [pc, #264]	; (800c4f8 <pvPortMalloc+0x17c>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d864      	bhi.n	800c4c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c3f8:	4b40      	ldr	r3, [pc, #256]	; (800c4fc <pvPortMalloc+0x180>)
 800c3fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c3fc:	4b3f      	ldr	r3, [pc, #252]	; (800c4fc <pvPortMalloc+0x180>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c402:	e004      	b.n	800c40e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c406:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	429a      	cmp	r2, r3
 800c416:	d903      	bls.n	800c420 <pvPortMalloc+0xa4>
 800c418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d1f1      	bne.n	800c404 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c420:	4b33      	ldr	r3, [pc, #204]	; (800c4f0 <pvPortMalloc+0x174>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c426:	429a      	cmp	r2, r3
 800c428:	d04b      	beq.n	800c4c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c42a:	6a3b      	ldr	r3, [r7, #32]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2208      	movs	r2, #8
 800c430:	4413      	add	r3, r2
 800c432:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	6a3b      	ldr	r3, [r7, #32]
 800c43a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43e:	685a      	ldr	r2, [r3, #4]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	1ad2      	subs	r2, r2, r3
 800c444:	2308      	movs	r3, #8
 800c446:	005b      	lsls	r3, r3, #1
 800c448:	429a      	cmp	r2, r3
 800c44a:	d91f      	bls.n	800c48c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c44c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4413      	add	r3, r2
 800c452:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	f003 0307 	and.w	r3, r3, #7
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00a      	beq.n	800c474 <pvPortMalloc+0xf8>
	__asm volatile
 800c45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c462:	f383 8811 	msr	BASEPRI, r3
 800c466:	f3bf 8f6f 	isb	sy
 800c46a:	f3bf 8f4f 	dsb	sy
 800c46e:	613b      	str	r3, [r7, #16]
}
 800c470:	bf00      	nop
 800c472:	e7fe      	b.n	800c472 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c476:	685a      	ldr	r2, [r3, #4]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	1ad2      	subs	r2, r2, r3
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c486:	69b8      	ldr	r0, [r7, #24]
 800c488:	f000 f8f8 	bl	800c67c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c48c:	4b1a      	ldr	r3, [pc, #104]	; (800c4f8 <pvPortMalloc+0x17c>)
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	1ad3      	subs	r3, r2, r3
 800c496:	4a18      	ldr	r2, [pc, #96]	; (800c4f8 <pvPortMalloc+0x17c>)
 800c498:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c49a:	4b17      	ldr	r3, [pc, #92]	; (800c4f8 <pvPortMalloc+0x17c>)
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	4b18      	ldr	r3, [pc, #96]	; (800c500 <pvPortMalloc+0x184>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d203      	bcs.n	800c4ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c4a6:	4b14      	ldr	r3, [pc, #80]	; (800c4f8 <pvPortMalloc+0x17c>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a15      	ldr	r2, [pc, #84]	; (800c500 <pvPortMalloc+0x184>)
 800c4ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b0:	685a      	ldr	r2, [r3, #4]
 800c4b2:	4b10      	ldr	r3, [pc, #64]	; (800c4f4 <pvPortMalloc+0x178>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	431a      	orrs	r2, r3
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4be:	2200      	movs	r2, #0
 800c4c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4c2:	f7fe fd91 	bl	800afe8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	f003 0307 	and.w	r3, r3, #7
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00a      	beq.n	800c4e6 <pvPortMalloc+0x16a>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	60fb      	str	r3, [r7, #12]
}
 800c4e2:	bf00      	nop
 800c4e4:	e7fe      	b.n	800c4e4 <pvPortMalloc+0x168>
	return pvReturn;
 800c4e6:	69fb      	ldr	r3, [r7, #28]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3728      	adds	r7, #40	; 0x28
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	200021b8 	.word	0x200021b8
 800c4f4:	200021c4 	.word	0x200021c4
 800c4f8:	200021bc 	.word	0x200021bc
 800c4fc:	200021b0 	.word	0x200021b0
 800c500:	200021c0 	.word	0x200021c0

0800c504 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d048      	beq.n	800c5a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c516:	2308      	movs	r3, #8
 800c518:	425b      	negs	r3, r3
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	4413      	add	r3, r2
 800c51e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	685a      	ldr	r2, [r3, #4]
 800c528:	4b21      	ldr	r3, [pc, #132]	; (800c5b0 <vPortFree+0xac>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4013      	ands	r3, r2
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d10a      	bne.n	800c548 <vPortFree+0x44>
	__asm volatile
 800c532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c536:	f383 8811 	msr	BASEPRI, r3
 800c53a:	f3bf 8f6f 	isb	sy
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	60fb      	str	r3, [r7, #12]
}
 800c544:	bf00      	nop
 800c546:	e7fe      	b.n	800c546 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00a      	beq.n	800c566 <vPortFree+0x62>
	__asm volatile
 800c550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c554:	f383 8811 	msr	BASEPRI, r3
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	60bb      	str	r3, [r7, #8]
}
 800c562:	bf00      	nop
 800c564:	e7fe      	b.n	800c564 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	685a      	ldr	r2, [r3, #4]
 800c56a:	4b11      	ldr	r3, [pc, #68]	; (800c5b0 <vPortFree+0xac>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4013      	ands	r3, r2
 800c570:	2b00      	cmp	r3, #0
 800c572:	d019      	beq.n	800c5a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d115      	bne.n	800c5a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	685a      	ldr	r2, [r3, #4]
 800c580:	4b0b      	ldr	r3, [pc, #44]	; (800c5b0 <vPortFree+0xac>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	43db      	mvns	r3, r3
 800c586:	401a      	ands	r2, r3
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c58c:	f7fe fd1e 	bl	800afcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	685a      	ldr	r2, [r3, #4]
 800c594:	4b07      	ldr	r3, [pc, #28]	; (800c5b4 <vPortFree+0xb0>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4413      	add	r3, r2
 800c59a:	4a06      	ldr	r2, [pc, #24]	; (800c5b4 <vPortFree+0xb0>)
 800c59c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c59e:	6938      	ldr	r0, [r7, #16]
 800c5a0:	f000 f86c 	bl	800c67c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c5a4:	f7fe fd20 	bl	800afe8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5a8:	bf00      	nop
 800c5aa:	3718      	adds	r7, #24
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	200021c4 	.word	0x200021c4
 800c5b4:	200021bc 	.word	0x200021bc

0800c5b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c5be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c5c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c5c4:	4b27      	ldr	r3, [pc, #156]	; (800c664 <prvHeapInit+0xac>)
 800c5c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f003 0307 	and.w	r3, r3, #7
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00c      	beq.n	800c5ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	3307      	adds	r3, #7
 800c5d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f023 0307 	bic.w	r3, r3, #7
 800c5de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c5e0:	68ba      	ldr	r2, [r7, #8]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	1ad3      	subs	r3, r2, r3
 800c5e6:	4a1f      	ldr	r2, [pc, #124]	; (800c664 <prvHeapInit+0xac>)
 800c5e8:	4413      	add	r3, r2
 800c5ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c5f0:	4a1d      	ldr	r2, [pc, #116]	; (800c668 <prvHeapInit+0xb0>)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c5f6:	4b1c      	ldr	r3, [pc, #112]	; (800c668 <prvHeapInit+0xb0>)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	4413      	add	r3, r2
 800c602:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c604:	2208      	movs	r2, #8
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	1a9b      	subs	r3, r3, r2
 800c60a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f023 0307 	bic.w	r3, r3, #7
 800c612:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	4a15      	ldr	r2, [pc, #84]	; (800c66c <prvHeapInit+0xb4>)
 800c618:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c61a:	4b14      	ldr	r3, [pc, #80]	; (800c66c <prvHeapInit+0xb4>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2200      	movs	r2, #0
 800c620:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c622:	4b12      	ldr	r3, [pc, #72]	; (800c66c <prvHeapInit+0xb4>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2200      	movs	r2, #0
 800c628:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	1ad2      	subs	r2, r2, r3
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c638:	4b0c      	ldr	r3, [pc, #48]	; (800c66c <prvHeapInit+0xb4>)
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	4a0a      	ldr	r2, [pc, #40]	; (800c670 <prvHeapInit+0xb8>)
 800c646:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	4a09      	ldr	r2, [pc, #36]	; (800c674 <prvHeapInit+0xbc>)
 800c64e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c650:	4b09      	ldr	r3, [pc, #36]	; (800c678 <prvHeapInit+0xc0>)
 800c652:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c656:	601a      	str	r2, [r3, #0]
}
 800c658:	bf00      	nop
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bc80      	pop	{r7}
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	200015b0 	.word	0x200015b0
 800c668:	200021b0 	.word	0x200021b0
 800c66c:	200021b8 	.word	0x200021b8
 800c670:	200021c0 	.word	0x200021c0
 800c674:	200021bc 	.word	0x200021bc
 800c678:	200021c4 	.word	0x200021c4

0800c67c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c684:	4b27      	ldr	r3, [pc, #156]	; (800c724 <prvInsertBlockIntoFreeList+0xa8>)
 800c686:	60fb      	str	r3, [r7, #12]
 800c688:	e002      	b.n	800c690 <prvInsertBlockIntoFreeList+0x14>
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	429a      	cmp	r2, r3
 800c698:	d8f7      	bhi.n	800c68a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	68ba      	ldr	r2, [r7, #8]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d108      	bne.n	800c6be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	685a      	ldr	r2, [r3, #4]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	441a      	add	r2, r3
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	441a      	add	r2, r3
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d118      	bne.n	800c704 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	4b14      	ldr	r3, [pc, #80]	; (800c728 <prvInsertBlockIntoFreeList+0xac>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d00d      	beq.n	800c6fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	685a      	ldr	r2, [r3, #4]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	441a      	add	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	601a      	str	r2, [r3, #0]
 800c6f8:	e008      	b.n	800c70c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6fa:	4b0b      	ldr	r3, [pc, #44]	; (800c728 <prvInsertBlockIntoFreeList+0xac>)
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	601a      	str	r2, [r3, #0]
 800c702:	e003      	b.n	800c70c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	429a      	cmp	r2, r3
 800c712:	d002      	beq.n	800c71a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c71a:	bf00      	nop
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	bc80      	pop	{r7}
 800c722:	4770      	bx	lr
 800c724:	200021b0 	.word	0x200021b0
 800c728:	200021b8 	.word	0x200021b8

0800c72c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c730:	2200      	movs	r2, #0
 800c732:	4912      	ldr	r1, [pc, #72]	; (800c77c <MX_USB_DEVICE_Init+0x50>)
 800c734:	4812      	ldr	r0, [pc, #72]	; (800c780 <MX_USB_DEVICE_Init+0x54>)
 800c736:	f7fc fa57 	bl	8008be8 <USBD_Init>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d001      	beq.n	800c744 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c740:	f7f4 fdb0 	bl	80012a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c744:	490f      	ldr	r1, [pc, #60]	; (800c784 <MX_USB_DEVICE_Init+0x58>)
 800c746:	480e      	ldr	r0, [pc, #56]	; (800c780 <MX_USB_DEVICE_Init+0x54>)
 800c748:	f7fc fa79 	bl	8008c3e <USBD_RegisterClass>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d001      	beq.n	800c756 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c752:	f7f4 fda7 	bl	80012a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c756:	490c      	ldr	r1, [pc, #48]	; (800c788 <MX_USB_DEVICE_Init+0x5c>)
 800c758:	4809      	ldr	r0, [pc, #36]	; (800c780 <MX_USB_DEVICE_Init+0x54>)
 800c75a:	f7fc f9d9 	bl	8008b10 <USBD_CDC_RegisterInterface>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d001      	beq.n	800c768 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c764:	f7f4 fd9e 	bl	80012a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c768:	4805      	ldr	r0, [pc, #20]	; (800c780 <MX_USB_DEVICE_Init+0x54>)
 800c76a:	f7fc fa81 	bl	8008c70 <USBD_Start>
 800c76e:	4603      	mov	r3, r0
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c774:	f7f4 fd96 	bl	80012a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c778:	bf00      	nop
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	20000130 	.word	0x20000130
 800c780:	200021c8 	.word	0x200021c8
 800c784:	20000018 	.word	0x20000018
 800c788:	20000120 	.word	0x20000120

0800c78c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c790:	2200      	movs	r2, #0
 800c792:	4905      	ldr	r1, [pc, #20]	; (800c7a8 <CDC_Init_FS+0x1c>)
 800c794:	4805      	ldr	r0, [pc, #20]	; (800c7ac <CDC_Init_FS+0x20>)
 800c796:	f7fc f9d1 	bl	8008b3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c79a:	4905      	ldr	r1, [pc, #20]	; (800c7b0 <CDC_Init_FS+0x24>)
 800c79c:	4803      	ldr	r0, [pc, #12]	; (800c7ac <CDC_Init_FS+0x20>)
 800c79e:	f7fc f9e6 	bl	8008b6e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c7a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	2000288c 	.word	0x2000288c
 800c7ac:	200021c8 	.word	0x200021c8
 800c7b0:	2000248c 	.word	0x2000248c

0800c7b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c7b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bc80      	pop	{r7}
 800c7c0:	4770      	bx	lr
	...

0800c7c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	6039      	str	r1, [r7, #0]
 800c7ce:	71fb      	strb	r3, [r7, #7]
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c7d4:	79fb      	ldrb	r3, [r7, #7]
 800c7d6:	2b23      	cmp	r3, #35	; 0x23
 800c7d8:	d84a      	bhi.n	800c870 <CDC_Control_FS+0xac>
 800c7da:	a201      	add	r2, pc, #4	; (adr r2, 800c7e0 <CDC_Control_FS+0x1c>)
 800c7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e0:	0800c871 	.word	0x0800c871
 800c7e4:	0800c871 	.word	0x0800c871
 800c7e8:	0800c871 	.word	0x0800c871
 800c7ec:	0800c871 	.word	0x0800c871
 800c7f0:	0800c871 	.word	0x0800c871
 800c7f4:	0800c871 	.word	0x0800c871
 800c7f8:	0800c871 	.word	0x0800c871
 800c7fc:	0800c871 	.word	0x0800c871
 800c800:	0800c871 	.word	0x0800c871
 800c804:	0800c871 	.word	0x0800c871
 800c808:	0800c871 	.word	0x0800c871
 800c80c:	0800c871 	.word	0x0800c871
 800c810:	0800c871 	.word	0x0800c871
 800c814:	0800c871 	.word	0x0800c871
 800c818:	0800c871 	.word	0x0800c871
 800c81c:	0800c871 	.word	0x0800c871
 800c820:	0800c871 	.word	0x0800c871
 800c824:	0800c871 	.word	0x0800c871
 800c828:	0800c871 	.word	0x0800c871
 800c82c:	0800c871 	.word	0x0800c871
 800c830:	0800c871 	.word	0x0800c871
 800c834:	0800c871 	.word	0x0800c871
 800c838:	0800c871 	.word	0x0800c871
 800c83c:	0800c871 	.word	0x0800c871
 800c840:	0800c871 	.word	0x0800c871
 800c844:	0800c871 	.word	0x0800c871
 800c848:	0800c871 	.word	0x0800c871
 800c84c:	0800c871 	.word	0x0800c871
 800c850:	0800c871 	.word	0x0800c871
 800c854:	0800c871 	.word	0x0800c871
 800c858:	0800c871 	.word	0x0800c871
 800c85c:	0800c871 	.word	0x0800c871
 800c860:	0800c871 	.word	0x0800c871
 800c864:	0800c871 	.word	0x0800c871
 800c868:	0800c871 	.word	0x0800c871
 800c86c:	0800c871 	.word	0x0800c871
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c870:	bf00      	nop
  }

  return (USBD_OK);
 800c872:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c874:	4618      	mov	r0, r3
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	bc80      	pop	{r7}
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop

0800c880 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c88a:	6879      	ldr	r1, [r7, #4]
 800c88c:	4805      	ldr	r0, [pc, #20]	; (800c8a4 <CDC_Receive_FS+0x24>)
 800c88e:	f7fc f96e 	bl	8008b6e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c892:	4804      	ldr	r0, [pc, #16]	; (800c8a4 <CDC_Receive_FS+0x24>)
 800c894:	f7fc f97e 	bl	8008b94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c898:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3708      	adds	r7, #8
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	200021c8 	.word	0x200021c8

0800c8a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	6039      	str	r1, [r7, #0]
 800c8b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	2212      	movs	r2, #18
 800c8b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c8ba:	4b03      	ldr	r3, [pc, #12]	; (800c8c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bc80      	pop	{r7}
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop
 800c8c8:	2000014c 	.word	0x2000014c

0800c8cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	6039      	str	r1, [r7, #0]
 800c8d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2204      	movs	r2, #4
 800c8dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c8de:	4b03      	ldr	r3, [pc, #12]	; (800c8ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bc80      	pop	{r7}
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	20000160 	.word	0x20000160

0800c8f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	6039      	str	r1, [r7, #0]
 800c8fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8fc:	79fb      	ldrb	r3, [r7, #7]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d105      	bne.n	800c90e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c902:	683a      	ldr	r2, [r7, #0]
 800c904:	4907      	ldr	r1, [pc, #28]	; (800c924 <USBD_FS_ProductStrDescriptor+0x34>)
 800c906:	4808      	ldr	r0, [pc, #32]	; (800c928 <USBD_FS_ProductStrDescriptor+0x38>)
 800c908:	f7fd f92a 	bl	8009b60 <USBD_GetString>
 800c90c:	e004      	b.n	800c918 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c90e:	683a      	ldr	r2, [r7, #0]
 800c910:	4904      	ldr	r1, [pc, #16]	; (800c924 <USBD_FS_ProductStrDescriptor+0x34>)
 800c912:	4805      	ldr	r0, [pc, #20]	; (800c928 <USBD_FS_ProductStrDescriptor+0x38>)
 800c914:	f7fd f924 	bl	8009b60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c918:	4b02      	ldr	r3, [pc, #8]	; (800c924 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	20002c8c 	.word	0x20002c8c
 800c928:	0800d234 	.word	0x0800d234

0800c92c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	4603      	mov	r3, r0
 800c934:	6039      	str	r1, [r7, #0]
 800c936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c938:	683a      	ldr	r2, [r7, #0]
 800c93a:	4904      	ldr	r1, [pc, #16]	; (800c94c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c93c:	4804      	ldr	r0, [pc, #16]	; (800c950 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c93e:	f7fd f90f 	bl	8009b60 <USBD_GetString>
  return USBD_StrDesc;
 800c942:	4b02      	ldr	r3, [pc, #8]	; (800c94c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c944:	4618      	mov	r0, r3
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	20002c8c 	.word	0x20002c8c
 800c950:	0800d24c 	.word	0x0800d24c

0800c954 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	4603      	mov	r3, r0
 800c95c:	6039      	str	r1, [r7, #0]
 800c95e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	221a      	movs	r2, #26
 800c964:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c966:	f000 f843 	bl	800c9f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c96a:	4b02      	ldr	r3, [pc, #8]	; (800c974 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	20000164 	.word	0x20000164

0800c978 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	4603      	mov	r3, r0
 800c980:	6039      	str	r1, [r7, #0]
 800c982:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c984:	79fb      	ldrb	r3, [r7, #7]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d105      	bne.n	800c996 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	4907      	ldr	r1, [pc, #28]	; (800c9ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800c98e:	4808      	ldr	r0, [pc, #32]	; (800c9b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c990:	f7fd f8e6 	bl	8009b60 <USBD_GetString>
 800c994:	e004      	b.n	800c9a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	4904      	ldr	r1, [pc, #16]	; (800c9ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800c99a:	4805      	ldr	r0, [pc, #20]	; (800c9b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c99c:	f7fd f8e0 	bl	8009b60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9a0:	4b02      	ldr	r3, [pc, #8]	; (800c9ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	20002c8c 	.word	0x20002c8c
 800c9b0:	0800d260 	.word	0x0800d260

0800c9b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	6039      	str	r1, [r7, #0]
 800c9be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9c0:	79fb      	ldrb	r3, [r7, #7]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d105      	bne.n	800c9d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c9c6:	683a      	ldr	r2, [r7, #0]
 800c9c8:	4907      	ldr	r1, [pc, #28]	; (800c9e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c9ca:	4808      	ldr	r0, [pc, #32]	; (800c9ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c9cc:	f7fd f8c8 	bl	8009b60 <USBD_GetString>
 800c9d0:	e004      	b.n	800c9dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c9d2:	683a      	ldr	r2, [r7, #0]
 800c9d4:	4904      	ldr	r1, [pc, #16]	; (800c9e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c9d6:	4805      	ldr	r0, [pc, #20]	; (800c9ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c9d8:	f7fd f8c2 	bl	8009b60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9dc:	4b02      	ldr	r3, [pc, #8]	; (800c9e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3708      	adds	r7, #8
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20002c8c 	.word	0x20002c8c
 800c9ec:	0800d26c 	.word	0x0800d26c

0800c9f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c9f6:	4b0f      	ldr	r3, [pc, #60]	; (800ca34 <Get_SerialNum+0x44>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c9fc:	4b0e      	ldr	r3, [pc, #56]	; (800ca38 <Get_SerialNum+0x48>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ca02:	4b0e      	ldr	r3, [pc, #56]	; (800ca3c <Get_SerialNum+0x4c>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d009      	beq.n	800ca2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ca16:	2208      	movs	r2, #8
 800ca18:	4909      	ldr	r1, [pc, #36]	; (800ca40 <Get_SerialNum+0x50>)
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f000 f814 	bl	800ca48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ca20:	2204      	movs	r2, #4
 800ca22:	4908      	ldr	r1, [pc, #32]	; (800ca44 <Get_SerialNum+0x54>)
 800ca24:	68b8      	ldr	r0, [r7, #8]
 800ca26:	f000 f80f 	bl	800ca48 <IntToUnicode>
  }
}
 800ca2a:	bf00      	nop
 800ca2c:	3710      	adds	r7, #16
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	1ffff7e8 	.word	0x1ffff7e8
 800ca38:	1ffff7ec 	.word	0x1ffff7ec
 800ca3c:	1ffff7f0 	.word	0x1ffff7f0
 800ca40:	20000166 	.word	0x20000166
 800ca44:	20000176 	.word	0x20000176

0800ca48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b087      	sub	sp, #28
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	4613      	mov	r3, r2
 800ca54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ca56:	2300      	movs	r3, #0
 800ca58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	75fb      	strb	r3, [r7, #23]
 800ca5e:	e027      	b.n	800cab0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	0f1b      	lsrs	r3, r3, #28
 800ca64:	2b09      	cmp	r3, #9
 800ca66:	d80b      	bhi.n	800ca80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	0f1b      	lsrs	r3, r3, #28
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
 800ca70:	005b      	lsls	r3, r3, #1
 800ca72:	4619      	mov	r1, r3
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	440b      	add	r3, r1
 800ca78:	3230      	adds	r2, #48	; 0x30
 800ca7a:	b2d2      	uxtb	r2, r2
 800ca7c:	701a      	strb	r2, [r3, #0]
 800ca7e:	e00a      	b.n	800ca96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	0f1b      	lsrs	r3, r3, #28
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	7dfb      	ldrb	r3, [r7, #23]
 800ca88:	005b      	lsls	r3, r3, #1
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	440b      	add	r3, r1
 800ca90:	3237      	adds	r2, #55	; 0x37
 800ca92:	b2d2      	uxtb	r2, r2
 800ca94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	011b      	lsls	r3, r3, #4
 800ca9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca9c:	7dfb      	ldrb	r3, [r7, #23]
 800ca9e:	005b      	lsls	r3, r3, #1
 800caa0:	3301      	adds	r3, #1
 800caa2:	68ba      	ldr	r2, [r7, #8]
 800caa4:	4413      	add	r3, r2
 800caa6:	2200      	movs	r2, #0
 800caa8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800caaa:	7dfb      	ldrb	r3, [r7, #23]
 800caac:	3301      	adds	r3, #1
 800caae:	75fb      	strb	r3, [r7, #23]
 800cab0:	7dfa      	ldrb	r2, [r7, #23]
 800cab2:	79fb      	ldrb	r3, [r7, #7]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d3d3      	bcc.n	800ca60 <IntToUnicode+0x18>
  }
}
 800cab8:	bf00      	nop
 800caba:	bf00      	nop
 800cabc:	371c      	adds	r7, #28
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bc80      	pop	{r7}
 800cac2:	4770      	bx	lr

0800cac4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a0d      	ldr	r2, [pc, #52]	; (800cb08 <HAL_PCD_MspInit+0x44>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d113      	bne.n	800cafe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cad6:	4b0d      	ldr	r3, [pc, #52]	; (800cb0c <HAL_PCD_MspInit+0x48>)
 800cad8:	69db      	ldr	r3, [r3, #28]
 800cada:	4a0c      	ldr	r2, [pc, #48]	; (800cb0c <HAL_PCD_MspInit+0x48>)
 800cadc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cae0:	61d3      	str	r3, [r2, #28]
 800cae2:	4b0a      	ldr	r3, [pc, #40]	; (800cb0c <HAL_PCD_MspInit+0x48>)
 800cae4:	69db      	ldr	r3, [r3, #28]
 800cae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800caea:	60fb      	str	r3, [r7, #12]
 800caec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800caee:	2200      	movs	r2, #0
 800caf0:	2105      	movs	r1, #5
 800caf2:	2014      	movs	r0, #20
 800caf4:	f7f5 fb85 	bl	8002202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800caf8:	2014      	movs	r0, #20
 800cafa:	f7f5 fb9e 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cafe:	bf00      	nop
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	40005c00 	.word	0x40005c00
 800cb0c:	40021000 	.word	0x40021000

0800cb10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cb24:	4619      	mov	r1, r3
 800cb26:	4610      	mov	r0, r2
 800cb28:	f7fc f8ea 	bl	8008d00 <USBD_LL_SetupStage>
}
 800cb2c:	bf00      	nop
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800cb46:	78fa      	ldrb	r2, [r7, #3]
 800cb48:	6879      	ldr	r1, [r7, #4]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4413      	add	r3, r2
 800cb50:	00db      	lsls	r3, r3, #3
 800cb52:	440b      	add	r3, r1
 800cb54:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	78fb      	ldrb	r3, [r7, #3]
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	f7fc f91c 	bl	8008d9a <USBD_LL_DataOutStage>
}
 800cb62:	bf00      	nop
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b082      	sub	sp, #8
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
 800cb72:	460b      	mov	r3, r1
 800cb74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800cb7c:	78fa      	ldrb	r2, [r7, #3]
 800cb7e:	6879      	ldr	r1, [r7, #4]
 800cb80:	4613      	mov	r3, r2
 800cb82:	009b      	lsls	r3, r3, #2
 800cb84:	4413      	add	r3, r2
 800cb86:	00db      	lsls	r3, r3, #3
 800cb88:	440b      	add	r3, r1
 800cb8a:	333c      	adds	r3, #60	; 0x3c
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	78fb      	ldrb	r3, [r7, #3]
 800cb90:	4619      	mov	r1, r3
 800cb92:	f7fc f973 	bl	8008e7c <USBD_LL_DataInStage>
}
 800cb96:	bf00      	nop
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}

0800cb9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b082      	sub	sp, #8
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7fc fa83 	bl	80090b8 <USBD_LL_SOF>
}
 800cbb2:	bf00      	nop
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b084      	sub	sp, #16
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	2b02      	cmp	r3, #2
 800cbcc:	d001      	beq.n	800cbd2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cbce:	f7f4 fb69 	bl	80012a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cbd8:	7bfa      	ldrb	r2, [r7, #15]
 800cbda:	4611      	mov	r1, r2
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7fc fa33 	bl	8009048 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7fc f9ec 	bl	8008fc6 <USBD_LL_Reset>
}
 800cbee:	bf00      	nop
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
	...

0800cbf8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7fc fa2d 	bl	8009066 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	699b      	ldr	r3, [r3, #24]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d005      	beq.n	800cc20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc14:	4b04      	ldr	r3, [pc, #16]	; (800cc28 <HAL_PCD_SuspendCallback+0x30>)
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	4a03      	ldr	r2, [pc, #12]	; (800cc28 <HAL_PCD_SuspendCallback+0x30>)
 800cc1a:	f043 0306 	orr.w	r3, r3, #6
 800cc1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cc20:	bf00      	nop
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	e000ed00 	.word	0xe000ed00

0800cc2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7fc fa27 	bl	800908e <USBD_LL_Resume>
}
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cc50:	4a28      	ldr	r2, [pc, #160]	; (800ccf4 <USBD_LL_Init+0xac>)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4a26      	ldr	r2, [pc, #152]	; (800ccf4 <USBD_LL_Init+0xac>)
 800cc5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cc60:	4b24      	ldr	r3, [pc, #144]	; (800ccf4 <USBD_LL_Init+0xac>)
 800cc62:	4a25      	ldr	r2, [pc, #148]	; (800ccf8 <USBD_LL_Init+0xb0>)
 800cc64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cc66:	4b23      	ldr	r3, [pc, #140]	; (800ccf4 <USBD_LL_Init+0xac>)
 800cc68:	2208      	movs	r2, #8
 800cc6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cc6c:	4b21      	ldr	r3, [pc, #132]	; (800ccf4 <USBD_LL_Init+0xac>)
 800cc6e:	2202      	movs	r2, #2
 800cc70:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cc72:	4b20      	ldr	r3, [pc, #128]	; (800ccf4 <USBD_LL_Init+0xac>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cc78:	4b1e      	ldr	r3, [pc, #120]	; (800ccf4 <USBD_LL_Init+0xac>)
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cc7e:	4b1d      	ldr	r3, [pc, #116]	; (800ccf4 <USBD_LL_Init+0xac>)
 800cc80:	2200      	movs	r2, #0
 800cc82:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cc84:	481b      	ldr	r0, [pc, #108]	; (800ccf4 <USBD_LL_Init+0xac>)
 800cc86:	f7f5 ffcf 	bl	8002c28 <HAL_PCD_Init>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d001      	beq.n	800cc94 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cc90:	f7f4 fb08 	bl	80012a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cc9a:	2318      	movs	r3, #24
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	2100      	movs	r1, #0
 800cca0:	f7f7 fcee 	bl	8004680 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ccaa:	2358      	movs	r3, #88	; 0x58
 800ccac:	2200      	movs	r2, #0
 800ccae:	2180      	movs	r1, #128	; 0x80
 800ccb0:	f7f7 fce6 	bl	8004680 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ccba:	23c0      	movs	r3, #192	; 0xc0
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	2181      	movs	r1, #129	; 0x81
 800ccc0:	f7f7 fcde 	bl	8004680 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ccca:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ccce:	2200      	movs	r2, #0
 800ccd0:	2101      	movs	r1, #1
 800ccd2:	f7f7 fcd5 	bl	8004680 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ccdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cce0:	2200      	movs	r2, #0
 800cce2:	2182      	movs	r1, #130	; 0x82
 800cce4:	f7f7 fccc 	bl	8004680 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3708      	adds	r7, #8
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	20002e8c 	.word	0x20002e8c
 800ccf8:	40005c00 	.word	0x40005c00

0800ccfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd04:	2300      	movs	r3, #0
 800cd06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7f6 f887 	bl	8002e26 <HAL_PCD_Start>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd1c:	7bfb      	ldrb	r3, [r7, #15]
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 f94e 	bl	800cfc0 <USBD_Get_USB_Status>
 800cd24:	4603      	mov	r3, r0
 800cd26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd28:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}

0800cd32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cd32:	b580      	push	{r7, lr}
 800cd34:	b084      	sub	sp, #16
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
 800cd3a:	4608      	mov	r0, r1
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	461a      	mov	r2, r3
 800cd40:	4603      	mov	r3, r0
 800cd42:	70fb      	strb	r3, [r7, #3]
 800cd44:	460b      	mov	r3, r1
 800cd46:	70bb      	strb	r3, [r7, #2]
 800cd48:	4613      	mov	r3, r2
 800cd4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd5a:	78bb      	ldrb	r3, [r7, #2]
 800cd5c:	883a      	ldrh	r2, [r7, #0]
 800cd5e:	78f9      	ldrb	r1, [r7, #3]
 800cd60:	f7f6 f9dc 	bl	800311c <HAL_PCD_EP_Open>
 800cd64:	4603      	mov	r3, r0
 800cd66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd68:	7bfb      	ldrb	r3, [r7, #15]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f000 f928 	bl	800cfc0 <USBD_Get_USB_Status>
 800cd70:	4603      	mov	r3, r0
 800cd72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd74:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b084      	sub	sp, #16
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	460b      	mov	r3, r1
 800cd88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd98:	78fa      	ldrb	r2, [r7, #3]
 800cd9a:	4611      	mov	r1, r2
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7f6 fa1a 	bl	80031d6 <HAL_PCD_EP_Close>
 800cda2:	4603      	mov	r3, r0
 800cda4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cda6:	7bfb      	ldrb	r3, [r7, #15]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 f909 	bl	800cfc0 <USBD_Get_USB_Status>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdd6:	78fa      	ldrb	r2, [r7, #3]
 800cdd8:	4611      	mov	r1, r2
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7f6 fac2 	bl	8003364 <HAL_PCD_EP_SetStall>
 800cde0:	4603      	mov	r3, r0
 800cde2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cde4:	7bfb      	ldrb	r3, [r7, #15]
 800cde6:	4618      	mov	r0, r3
 800cde8:	f000 f8ea 	bl	800cfc0 <USBD_Get_USB_Status>
 800cdec:	4603      	mov	r3, r0
 800cdee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}

0800cdfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b084      	sub	sp, #16
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
 800ce02:	460b      	mov	r3, r1
 800ce04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce06:	2300      	movs	r3, #0
 800ce08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce14:	78fa      	ldrb	r2, [r7, #3]
 800ce16:	4611      	mov	r1, r2
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7f6 fb03 	bl	8003424 <HAL_PCD_EP_ClrStall>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce22:	7bfb      	ldrb	r3, [r7, #15]
 800ce24:	4618      	mov	r0, r3
 800ce26:	f000 f8cb 	bl	800cfc0 <USBD_Get_USB_Status>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	460b      	mov	r3, r1
 800ce42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ce4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	da0c      	bge.n	800ce6e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ce54:	78fb      	ldrb	r3, [r7, #3]
 800ce56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce5a:	68f9      	ldr	r1, [r7, #12]
 800ce5c:	1c5a      	adds	r2, r3, #1
 800ce5e:	4613      	mov	r3, r2
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	4413      	add	r3, r2
 800ce64:	00db      	lsls	r3, r3, #3
 800ce66:	440b      	add	r3, r1
 800ce68:	3302      	adds	r3, #2
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	e00b      	b.n	800ce86 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce6e:	78fb      	ldrb	r3, [r7, #3]
 800ce70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce74:	68f9      	ldr	r1, [r7, #12]
 800ce76:	4613      	mov	r3, r2
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4413      	add	r3, r2
 800ce7c:	00db      	lsls	r3, r3, #3
 800ce7e:	440b      	add	r3, r1
 800ce80:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ce84:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bc80      	pop	{r7}
 800ce8e:	4770      	bx	lr

0800ce90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cea0:	2300      	movs	r3, #0
 800cea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ceaa:	78fa      	ldrb	r2, [r7, #3]
 800ceac:	4611      	mov	r1, r2
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7f6 f90f 	bl	80030d2 <HAL_PCD_SetAddress>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceb8:	7bfb      	ldrb	r3, [r7, #15]
 800ceba:	4618      	mov	r0, r3
 800cebc:	f000 f880 	bl	800cfc0 <USBD_Get_USB_Status>
 800cec0:	4603      	mov	r3, r0
 800cec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cec4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b086      	sub	sp, #24
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	60f8      	str	r0, [r7, #12]
 800ced6:	607a      	str	r2, [r7, #4]
 800ced8:	461a      	mov	r2, r3
 800ceda:	460b      	mov	r3, r1
 800cedc:	72fb      	strb	r3, [r7, #11]
 800cede:	4613      	mov	r3, r2
 800cee0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cee6:	2300      	movs	r3, #0
 800cee8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cef0:	893b      	ldrh	r3, [r7, #8]
 800cef2:	7af9      	ldrb	r1, [r7, #11]
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	f7f6 f9fe 	bl	80032f6 <HAL_PCD_EP_Transmit>
 800cefa:	4603      	mov	r3, r0
 800cefc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cefe:	7dfb      	ldrb	r3, [r7, #23]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f000 f85d 	bl	800cfc0 <USBD_Get_USB_Status>
 800cf06:	4603      	mov	r3, r0
 800cf08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3718      	adds	r7, #24
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b086      	sub	sp, #24
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	607a      	str	r2, [r7, #4]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	460b      	mov	r3, r1
 800cf22:	72fb      	strb	r3, [r7, #11]
 800cf24:	4613      	mov	r3, r2
 800cf26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf36:	893b      	ldrh	r3, [r7, #8]
 800cf38:	7af9      	ldrb	r1, [r7, #11]
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	f7f6 f993 	bl	8003266 <HAL_PCD_EP_Receive>
 800cf40:	4603      	mov	r3, r0
 800cf42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf44:	7dfb      	ldrb	r3, [r7, #23]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f000 f83a 	bl	800cfc0 <USBD_Get_USB_Status>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf50:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3718      	adds	r7, #24
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
 800cf62:	460b      	mov	r3, r1
 800cf64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf6c:	78fa      	ldrb	r2, [r7, #3]
 800cf6e:	4611      	mov	r1, r2
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7f6 f9a9 	bl	80032c8 <HAL_PCD_EP_GetRxCount>
 800cf76:	4603      	mov	r3, r0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cf88:	4b02      	ldr	r3, [pc, #8]	; (800cf94 <USBD_static_malloc+0x14>)
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	370c      	adds	r7, #12
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bc80      	pop	{r7}
 800cf92:	4770      	bx	lr
 800cf94:	2000317c 	.word	0x2000317c

0800cf98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]

}
 800cfa0:	bf00      	nop
 800cfa2:	370c      	adds	r7, #12
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bc80      	pop	{r7}
 800cfa8:	4770      	bx	lr

0800cfaa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfaa:	b480      	push	{r7}
 800cfac:	b083      	sub	sp, #12
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cfb6:	bf00      	nop
 800cfb8:	370c      	adds	r7, #12
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bc80      	pop	{r7}
 800cfbe:	4770      	bx	lr

0800cfc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cfce:	79fb      	ldrb	r3, [r7, #7]
 800cfd0:	2b03      	cmp	r3, #3
 800cfd2:	d817      	bhi.n	800d004 <USBD_Get_USB_Status+0x44>
 800cfd4:	a201      	add	r2, pc, #4	; (adr r2, 800cfdc <USBD_Get_USB_Status+0x1c>)
 800cfd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfda:	bf00      	nop
 800cfdc:	0800cfed 	.word	0x0800cfed
 800cfe0:	0800cff3 	.word	0x0800cff3
 800cfe4:	0800cff9 	.word	0x0800cff9
 800cfe8:	0800cfff 	.word	0x0800cfff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cfec:	2300      	movs	r3, #0
 800cfee:	73fb      	strb	r3, [r7, #15]
    break;
 800cff0:	e00b      	b.n	800d00a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cff2:	2302      	movs	r3, #2
 800cff4:	73fb      	strb	r3, [r7, #15]
    break;
 800cff6:	e008      	b.n	800d00a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cff8:	2301      	movs	r3, #1
 800cffa:	73fb      	strb	r3, [r7, #15]
    break;
 800cffc:	e005      	b.n	800d00a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cffe:	2302      	movs	r3, #2
 800d000:	73fb      	strb	r3, [r7, #15]
    break;
 800d002:	e002      	b.n	800d00a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d004:	2302      	movs	r3, #2
 800d006:	73fb      	strb	r3, [r7, #15]
    break;
 800d008:	bf00      	nop
  }
  return usb_status;
 800d00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3714      	adds	r7, #20
 800d010:	46bd      	mov	sp, r7
 800d012:	bc80      	pop	{r7}
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop

0800d018 <memset>:
 800d018:	4603      	mov	r3, r0
 800d01a:	4402      	add	r2, r0
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d100      	bne.n	800d022 <memset+0xa>
 800d020:	4770      	bx	lr
 800d022:	f803 1b01 	strb.w	r1, [r3], #1
 800d026:	e7f9      	b.n	800d01c <memset+0x4>

0800d028 <_reclaim_reent>:
 800d028:	4b29      	ldr	r3, [pc, #164]	; (800d0d0 <_reclaim_reent+0xa8>)
 800d02a:	b570      	push	{r4, r5, r6, lr}
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4604      	mov	r4, r0
 800d030:	4283      	cmp	r3, r0
 800d032:	d04b      	beq.n	800d0cc <_reclaim_reent+0xa4>
 800d034:	69c3      	ldr	r3, [r0, #28]
 800d036:	b143      	cbz	r3, 800d04a <_reclaim_reent+0x22>
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d144      	bne.n	800d0c8 <_reclaim_reent+0xa0>
 800d03e:	69e3      	ldr	r3, [r4, #28]
 800d040:	6819      	ldr	r1, [r3, #0]
 800d042:	b111      	cbz	r1, 800d04a <_reclaim_reent+0x22>
 800d044:	4620      	mov	r0, r4
 800d046:	f000 f879 	bl	800d13c <_free_r>
 800d04a:	6961      	ldr	r1, [r4, #20]
 800d04c:	b111      	cbz	r1, 800d054 <_reclaim_reent+0x2c>
 800d04e:	4620      	mov	r0, r4
 800d050:	f000 f874 	bl	800d13c <_free_r>
 800d054:	69e1      	ldr	r1, [r4, #28]
 800d056:	b111      	cbz	r1, 800d05e <_reclaim_reent+0x36>
 800d058:	4620      	mov	r0, r4
 800d05a:	f000 f86f 	bl	800d13c <_free_r>
 800d05e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d060:	b111      	cbz	r1, 800d068 <_reclaim_reent+0x40>
 800d062:	4620      	mov	r0, r4
 800d064:	f000 f86a 	bl	800d13c <_free_r>
 800d068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d06a:	b111      	cbz	r1, 800d072 <_reclaim_reent+0x4a>
 800d06c:	4620      	mov	r0, r4
 800d06e:	f000 f865 	bl	800d13c <_free_r>
 800d072:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d074:	b111      	cbz	r1, 800d07c <_reclaim_reent+0x54>
 800d076:	4620      	mov	r0, r4
 800d078:	f000 f860 	bl	800d13c <_free_r>
 800d07c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d07e:	b111      	cbz	r1, 800d086 <_reclaim_reent+0x5e>
 800d080:	4620      	mov	r0, r4
 800d082:	f000 f85b 	bl	800d13c <_free_r>
 800d086:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d088:	b111      	cbz	r1, 800d090 <_reclaim_reent+0x68>
 800d08a:	4620      	mov	r0, r4
 800d08c:	f000 f856 	bl	800d13c <_free_r>
 800d090:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d092:	b111      	cbz	r1, 800d09a <_reclaim_reent+0x72>
 800d094:	4620      	mov	r0, r4
 800d096:	f000 f851 	bl	800d13c <_free_r>
 800d09a:	6a23      	ldr	r3, [r4, #32]
 800d09c:	b1b3      	cbz	r3, 800d0cc <_reclaim_reent+0xa4>
 800d09e:	4620      	mov	r0, r4
 800d0a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0a4:	4718      	bx	r3
 800d0a6:	5949      	ldr	r1, [r1, r5]
 800d0a8:	b941      	cbnz	r1, 800d0bc <_reclaim_reent+0x94>
 800d0aa:	3504      	adds	r5, #4
 800d0ac:	69e3      	ldr	r3, [r4, #28]
 800d0ae:	2d80      	cmp	r5, #128	; 0x80
 800d0b0:	68d9      	ldr	r1, [r3, #12]
 800d0b2:	d1f8      	bne.n	800d0a6 <_reclaim_reent+0x7e>
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	f000 f841 	bl	800d13c <_free_r>
 800d0ba:	e7c0      	b.n	800d03e <_reclaim_reent+0x16>
 800d0bc:	680e      	ldr	r6, [r1, #0]
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f000 f83c 	bl	800d13c <_free_r>
 800d0c4:	4631      	mov	r1, r6
 800d0c6:	e7ef      	b.n	800d0a8 <_reclaim_reent+0x80>
 800d0c8:	2500      	movs	r5, #0
 800d0ca:	e7ef      	b.n	800d0ac <_reclaim_reent+0x84>
 800d0cc:	bd70      	pop	{r4, r5, r6, pc}
 800d0ce:	bf00      	nop
 800d0d0:	200001cc 	.word	0x200001cc

0800d0d4 <__libc_init_array>:
 800d0d4:	b570      	push	{r4, r5, r6, lr}
 800d0d6:	2600      	movs	r6, #0
 800d0d8:	4d0c      	ldr	r5, [pc, #48]	; (800d10c <__libc_init_array+0x38>)
 800d0da:	4c0d      	ldr	r4, [pc, #52]	; (800d110 <__libc_init_array+0x3c>)
 800d0dc:	1b64      	subs	r4, r4, r5
 800d0de:	10a4      	asrs	r4, r4, #2
 800d0e0:	42a6      	cmp	r6, r4
 800d0e2:	d109      	bne.n	800d0f8 <__libc_init_array+0x24>
 800d0e4:	f000 f87e 	bl	800d1e4 <_init>
 800d0e8:	2600      	movs	r6, #0
 800d0ea:	4d0a      	ldr	r5, [pc, #40]	; (800d114 <__libc_init_array+0x40>)
 800d0ec:	4c0a      	ldr	r4, [pc, #40]	; (800d118 <__libc_init_array+0x44>)
 800d0ee:	1b64      	subs	r4, r4, r5
 800d0f0:	10a4      	asrs	r4, r4, #2
 800d0f2:	42a6      	cmp	r6, r4
 800d0f4:	d105      	bne.n	800d102 <__libc_init_array+0x2e>
 800d0f6:	bd70      	pop	{r4, r5, r6, pc}
 800d0f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0fc:	4798      	blx	r3
 800d0fe:	3601      	adds	r6, #1
 800d100:	e7ee      	b.n	800d0e0 <__libc_init_array+0xc>
 800d102:	f855 3b04 	ldr.w	r3, [r5], #4
 800d106:	4798      	blx	r3
 800d108:	3601      	adds	r6, #1
 800d10a:	e7f2      	b.n	800d0f2 <__libc_init_array+0x1e>
 800d10c:	0800d2f0 	.word	0x0800d2f0
 800d110:	0800d2f0 	.word	0x0800d2f0
 800d114:	0800d2f0 	.word	0x0800d2f0
 800d118:	0800d2f4 	.word	0x0800d2f4

0800d11c <__retarget_lock_acquire_recursive>:
 800d11c:	4770      	bx	lr

0800d11e <__retarget_lock_release_recursive>:
 800d11e:	4770      	bx	lr

0800d120 <memcpy>:
 800d120:	440a      	add	r2, r1
 800d122:	4291      	cmp	r1, r2
 800d124:	f100 33ff 	add.w	r3, r0, #4294967295
 800d128:	d100      	bne.n	800d12c <memcpy+0xc>
 800d12a:	4770      	bx	lr
 800d12c:	b510      	push	{r4, lr}
 800d12e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d132:	4291      	cmp	r1, r2
 800d134:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d138:	d1f9      	bne.n	800d12e <memcpy+0xe>
 800d13a:	bd10      	pop	{r4, pc}

0800d13c <_free_r>:
 800d13c:	b538      	push	{r3, r4, r5, lr}
 800d13e:	4605      	mov	r5, r0
 800d140:	2900      	cmp	r1, #0
 800d142:	d040      	beq.n	800d1c6 <_free_r+0x8a>
 800d144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d148:	1f0c      	subs	r4, r1, #4
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	bfb8      	it	lt
 800d14e:	18e4      	addlt	r4, r4, r3
 800d150:	f000 f83c 	bl	800d1cc <__malloc_lock>
 800d154:	4a1c      	ldr	r2, [pc, #112]	; (800d1c8 <_free_r+0x8c>)
 800d156:	6813      	ldr	r3, [r2, #0]
 800d158:	b933      	cbnz	r3, 800d168 <_free_r+0x2c>
 800d15a:	6063      	str	r3, [r4, #4]
 800d15c:	6014      	str	r4, [r2, #0]
 800d15e:	4628      	mov	r0, r5
 800d160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d164:	f000 b838 	b.w	800d1d8 <__malloc_unlock>
 800d168:	42a3      	cmp	r3, r4
 800d16a:	d908      	bls.n	800d17e <_free_r+0x42>
 800d16c:	6820      	ldr	r0, [r4, #0]
 800d16e:	1821      	adds	r1, r4, r0
 800d170:	428b      	cmp	r3, r1
 800d172:	bf01      	itttt	eq
 800d174:	6819      	ldreq	r1, [r3, #0]
 800d176:	685b      	ldreq	r3, [r3, #4]
 800d178:	1809      	addeq	r1, r1, r0
 800d17a:	6021      	streq	r1, [r4, #0]
 800d17c:	e7ed      	b.n	800d15a <_free_r+0x1e>
 800d17e:	461a      	mov	r2, r3
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	b10b      	cbz	r3, 800d188 <_free_r+0x4c>
 800d184:	42a3      	cmp	r3, r4
 800d186:	d9fa      	bls.n	800d17e <_free_r+0x42>
 800d188:	6811      	ldr	r1, [r2, #0]
 800d18a:	1850      	adds	r0, r2, r1
 800d18c:	42a0      	cmp	r0, r4
 800d18e:	d10b      	bne.n	800d1a8 <_free_r+0x6c>
 800d190:	6820      	ldr	r0, [r4, #0]
 800d192:	4401      	add	r1, r0
 800d194:	1850      	adds	r0, r2, r1
 800d196:	4283      	cmp	r3, r0
 800d198:	6011      	str	r1, [r2, #0]
 800d19a:	d1e0      	bne.n	800d15e <_free_r+0x22>
 800d19c:	6818      	ldr	r0, [r3, #0]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	4408      	add	r0, r1
 800d1a2:	6010      	str	r0, [r2, #0]
 800d1a4:	6053      	str	r3, [r2, #4]
 800d1a6:	e7da      	b.n	800d15e <_free_r+0x22>
 800d1a8:	d902      	bls.n	800d1b0 <_free_r+0x74>
 800d1aa:	230c      	movs	r3, #12
 800d1ac:	602b      	str	r3, [r5, #0]
 800d1ae:	e7d6      	b.n	800d15e <_free_r+0x22>
 800d1b0:	6820      	ldr	r0, [r4, #0]
 800d1b2:	1821      	adds	r1, r4, r0
 800d1b4:	428b      	cmp	r3, r1
 800d1b6:	bf01      	itttt	eq
 800d1b8:	6819      	ldreq	r1, [r3, #0]
 800d1ba:	685b      	ldreq	r3, [r3, #4]
 800d1bc:	1809      	addeq	r1, r1, r0
 800d1be:	6021      	streq	r1, [r4, #0]
 800d1c0:	6063      	str	r3, [r4, #4]
 800d1c2:	6054      	str	r4, [r2, #4]
 800d1c4:	e7cb      	b.n	800d15e <_free_r+0x22>
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
 800d1c8:	200034d8 	.word	0x200034d8

0800d1cc <__malloc_lock>:
 800d1cc:	4801      	ldr	r0, [pc, #4]	; (800d1d4 <__malloc_lock+0x8>)
 800d1ce:	f7ff bfa5 	b.w	800d11c <__retarget_lock_acquire_recursive>
 800d1d2:	bf00      	nop
 800d1d4:	200034d4 	.word	0x200034d4

0800d1d8 <__malloc_unlock>:
 800d1d8:	4801      	ldr	r0, [pc, #4]	; (800d1e0 <__malloc_unlock+0x8>)
 800d1da:	f7ff bfa0 	b.w	800d11e <__retarget_lock_release_recursive>
 800d1de:	bf00      	nop
 800d1e0:	200034d4 	.word	0x200034d4

0800d1e4 <_init>:
 800d1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1e6:	bf00      	nop
 800d1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ea:	bc08      	pop	{r3}
 800d1ec:	469e      	mov	lr, r3
 800d1ee:	4770      	bx	lr

0800d1f0 <_fini>:
 800d1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f2:	bf00      	nop
 800d1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1f6:	bc08      	pop	{r3}
 800d1f8:	469e      	mov	lr, r3
 800d1fa:	4770      	bx	lr
