
OpenHandFirmwareRBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dcc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009edc  08009edc  00019edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f64  08009f64  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08009f64  08009f64  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f64  08009f64  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f64  08009f64  00019f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f68  08009f68  00019f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08009f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001384  2000017c  0800a0e8  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001500  0800a0e8  00021500  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d32  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037bf  00000000  00000000  00037f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  0003b6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ed  00000000  00000000  0003cca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b5c0  00000000  00000000  0003dd8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b721  00000000  00000000  0005934d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096a90  00000000  00000000  00074a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ce4  00000000  00000000  0010b500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  001111e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000017c 	.word	0x2000017c
 800012c:	00000000 	.word	0x00000000
 8000130:	08009ec4 	.word	0x08009ec4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000180 	.word	0x20000180
 800014c:	08009ec4 	.word	0x08009ec4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr
 800092c:	0000      	movs	r0, r0
	...

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t my_pot = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	827b      	strh	r3, [r7, #18]
  double my_pwm = 50;
 800093a:	f04f 0200 	mov.w	r2, #0
 800093e:	4b82      	ldr	r3, [pc, #520]	; (8000b48 <main+0x218>)
 8000940:	e9c7 2302 	strd	r2, r3, [r7, #8]
  GPIO_PinState my_button = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	71fb      	strb	r3, [r7, #7]
  uint32_t my_led_last_time = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094c:	f000 fe54 	bl	80015f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000950:	f000 f90e 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000954:	f000 fb3c 	bl	8000fd0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000958:	f008 fe12 	bl	8009580 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800095c:	f000 f9e2 	bl	8000d24 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000960:	f000 f964 	bl	8000c2c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000964:	f000 f9a0 	bl	8000ca8 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000968:	f000 fb08 	bl	8000f7c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800096c:	f000 fa08 	bl	8000d80 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000970:	f000 faa0 	bl	8000eb4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* Start all PWM channels */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000974:	2100      	movs	r1, #0
 8000976:	4875      	ldr	r0, [pc, #468]	; (8000b4c <main+0x21c>)
 8000978:	f004 fa26 	bl	8004dc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800097c:	2104      	movs	r1, #4
 800097e:	4873      	ldr	r0, [pc, #460]	; (8000b4c <main+0x21c>)
 8000980:	f004 fa22 	bl	8004dc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000984:	2108      	movs	r1, #8
 8000986:	4871      	ldr	r0, [pc, #452]	; (8000b4c <main+0x21c>)
 8000988:	f004 fa1e 	bl	8004dc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800098c:	2100      	movs	r1, #0
 800098e:	4870      	ldr	r0, [pc, #448]	; (8000b50 <main+0x220>)
 8000990:	f004 fa1a 	bl	8004dc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000994:	2108      	movs	r1, #8
 8000996:	486e      	ldr	r0, [pc, #440]	; (8000b50 <main+0x220>)
 8000998:	f004 fa16 	bl	8004dc8 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	/* Blink the status LED */
	if(HAL_GetTick() - my_led_last_time > 500)
 800099c:	f000 fe84 	bl	80016a8 <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009aa:	d906      	bls.n	80009ba <main+0x8a>
	{
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	4869      	ldr	r0, [pc, #420]	; (8000b54 <main+0x224>)
 80009b0:	f001 fd71 	bl	8002496 <HAL_GPIO_TogglePin>
	  // HAL_Delay(500);
	  my_led_last_time = HAL_GetTick();
 80009b4:	f000 fe78 	bl	80016a8 <HAL_GetTick>
 80009b8:	6178      	str	r0, [r7, #20]
	}

	/* All the motors are ENABLED by default (configured HIGH by default) */

	/* Get pot value */
    HAL_ADC_Start(&hadc2);
 80009ba:	4867      	ldr	r0, [pc, #412]	; (8000b58 <main+0x228>)
 80009bc:	f000 ff56 	bl	800186c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	4864      	ldr	r0, [pc, #400]	; (8000b58 <main+0x228>)
 80009c6:	f000 ffff 	bl	80019c8 <HAL_ADC_PollForConversion>
    my_pot = HAL_ADC_GetValue(&hadc2);
 80009ca:	4863      	ldr	r0, [pc, #396]	; (8000b58 <main+0x228>)
 80009cc:	f001 f902 	bl	8001bd4 <HAL_ADC_GetValue>
 80009d0:	4603      	mov	r3, r0
 80009d2:	827b      	strh	r3, [r7, #18]

	/* Get button value */
	my_button = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	485f      	ldr	r0, [pc, #380]	; (8000b54 <main+0x224>)
 80009d8:	f001 fd2e 	bl	8002438 <HAL_GPIO_ReadPin>
 80009dc:	4603      	mov	r3, r0
 80009de:	71fb      	strb	r3, [r7, #7]

	/* Set DIR for all motors to given value (from button) */
	/* And PWM for all motors to given value (from potentiometer) */
	if (my_button == GPIO_PIN_RESET)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d152      	bne.n	8000a8c <main+0x15c>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ec:	485b      	ldr	r0, [pc, #364]	; (8000b5c <main+0x22c>)
 80009ee:	f001 fd3a 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f8:	4856      	ldr	r0, [pc, #344]	; (8000b54 <main+0x224>)
 80009fa:	f001 fd34 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a04:	4853      	ldr	r0, [pc, #332]	; (8000b54 <main+0x224>)
 8000a06:	f001 fd2e 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	4854      	ldr	r0, [pc, #336]	; (8000b60 <main+0x230>)
 8000a10:	f001 fd29 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1a:	4851      	ldr	r0, [pc, #324]	; (8000b60 <main+0x230>)
 8000a1c:	f001 fd23 	bl	8002466 <HAL_GPIO_WritePin>

		my_pwm = (double)my_pot / 40.96;
 8000a20:	8a7b      	ldrh	r3, [r7, #18]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fcd6 	bl	80003d4 <__aeabi_ui2d>
 8000a28:	a345      	add	r3, pc, #276	; (adr r3, 8000b40 <main+0x210>)
 8000a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a2e:	f7ff fe75 	bl	800071c <__aeabi_ddiv>
 8000a32:	4602      	mov	r2, r0
 8000a34:	460b      	mov	r3, r1
 8000a36:	e9c7 2302 	strd	r2, r3, [r7, #8]
		TIM1->CCR1 = (uint16_t)my_pwm;
 8000a3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a3e:	f7ff ff55 	bl	80008ec <__aeabi_d2uiz>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	4b47      	ldr	r3, [pc, #284]	; (8000b64 <main+0x234>)
 8000a48:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = (uint16_t)my_pwm;
 8000a4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a4e:	f7ff ff4d 	bl	80008ec <__aeabi_d2uiz>
 8000a52:	4603      	mov	r3, r0
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	4b43      	ldr	r3, [pc, #268]	; (8000b64 <main+0x234>)
 8000a58:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = (uint16_t)my_pwm;
 8000a5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a5e:	f7ff ff45 	bl	80008ec <__aeabi_d2uiz>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	4b3f      	ldr	r3, [pc, #252]	; (8000b64 <main+0x234>)
 8000a68:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = (uint16_t)my_pwm;
 8000a6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a6e:	f7ff ff3d 	bl	80008ec <__aeabi_d2uiz>
 8000a72:	4603      	mov	r3, r0
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	4b3c      	ldr	r3, [pc, #240]	; (8000b68 <main+0x238>)
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR3 = (uint16_t)my_pwm;
 8000a7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a7e:	f7ff ff35 	bl	80008ec <__aeabi_d2uiz>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <main+0x238>)
 8000a88:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a8a:	e787      	b.n	800099c <main+0x6c>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a92:	4832      	ldr	r0, [pc, #200]	; (8000b5c <main+0x22c>)
 8000a94:	f001 fce7 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9e:	482d      	ldr	r0, [pc, #180]	; (8000b54 <main+0x224>)
 8000aa0:	f001 fce1 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aaa:	482a      	ldr	r0, [pc, #168]	; (8000b54 <main+0x224>)
 8000aac:	f001 fcdb 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2180      	movs	r1, #128	; 0x80
 8000ab4:	482a      	ldr	r0, [pc, #168]	; (8000b60 <main+0x230>)
 8000ab6:	f001 fcd6 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac0:	4827      	ldr	r0, [pc, #156]	; (8000b60 <main+0x230>)
 8000ac2:	f001 fcd0 	bl	8002466 <HAL_GPIO_WritePin>

		my_pwm = 100.0 - (double)my_pot / 40.96;
 8000ac6:	8a7b      	ldrh	r3, [r7, #18]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fc83 	bl	80003d4 <__aeabi_ui2d>
 8000ace:	a31c      	add	r3, pc, #112	; (adr r3, 8000b40 <main+0x210>)
 8000ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad4:	f7ff fe22 	bl	800071c <__aeabi_ddiv>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	460b      	mov	r3, r1
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4922      	ldr	r1, [pc, #136]	; (8000b6c <main+0x23c>)
 8000ae2:	f7ff fb39 	bl	8000158 <__aeabi_dsub>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	460b      	mov	r3, r1
 8000aea:	e9c7 2302 	strd	r2, r3, [r7, #8]
		TIM1->CCR1 = (uint16_t)my_pwm;
 8000aee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000af2:	f7ff fefb 	bl	80008ec <__aeabi_d2uiz>
 8000af6:	4603      	mov	r3, r0
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <main+0x234>)
 8000afc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = (uint16_t)my_pwm;
 8000afe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b02:	f7ff fef3 	bl	80008ec <__aeabi_d2uiz>
 8000b06:	4603      	mov	r3, r0
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <main+0x234>)
 8000b0c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = (uint16_t)my_pwm;
 8000b0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b12:	f7ff feeb 	bl	80008ec <__aeabi_d2uiz>
 8000b16:	4603      	mov	r3, r0
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <main+0x234>)
 8000b1c:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = (uint16_t)my_pwm;
 8000b1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b22:	f7ff fee3 	bl	80008ec <__aeabi_d2uiz>
 8000b26:	4603      	mov	r3, r0
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <main+0x238>)
 8000b2c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR3 = (uint16_t)my_pwm;
 8000b2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b32:	f7ff fedb 	bl	80008ec <__aeabi_d2uiz>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <main+0x238>)
 8000b3c:	63da      	str	r2, [r3, #60]	; 0x3c
	if(HAL_GetTick() - my_led_last_time > 500)
 8000b3e:	e72d      	b.n	800099c <main+0x6c>
 8000b40:	47ae147b 	.word	0x47ae147b
 8000b44:	40447ae1 	.word	0x40447ae1
 8000b48:	40490000 	.word	0x40490000
 8000b4c:	2000024c 	.word	0x2000024c
 8000b50:	20000294 	.word	0x20000294
 8000b54:	40010c00 	.word	0x40010c00
 8000b58:	200001c8 	.word	0x200001c8
 8000b5c:	40010800 	.word	0x40010800
 8000b60:	40011000 	.word	0x40011000
 8000b64:	40012c00 	.word	0x40012c00
 8000b68:	40000400 	.word	0x40000400
 8000b6c:	40590000 	.word	0x40590000

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b094      	sub	sp, #80	; 0x50
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7a:	2228      	movs	r2, #40	; 0x28
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f009 f974 	bl	8009e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bbe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fb2f 	bl	800422c <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000bd4:	f000 faaa 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 fd9b 	bl	8004730 <HAL_RCC_ClockConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c00:	f000 fa94 	bl	800112c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000c04:	2312      	movs	r3, #18
 8000c06:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c0c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4618      	mov	r0, r3
 8000c16:	f003 ff1b 	bl	8004a50 <HAL_RCCEx_PeriphCLKConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c20:	f000 fa84 	bl	800112c <Error_Handler>
  }
}
 8000c24:	bf00      	nop
 8000c26:	3750      	adds	r7, #80	; 0x50
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c3e:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <MX_ADC1_Init+0x78>)
 8000c40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c56:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c6a:	f000 fd27 	bl	80016bc <HAL_ADC_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c74:	f000 fa5a 	bl	800112c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c78:	230b      	movs	r3, #11
 8000c7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c8a:	f000 ffaf 	bl	8001bec <HAL_ADC_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c94:	f000 fa4a 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000198 	.word	0x20000198
 8000ca4:	40012400 	.word	0x40012400

08000ca8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_ADC2_Init+0x74>)
 8000cba:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <MX_ADC2_Init+0x78>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_ADC2_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_ADC2_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_ADC2_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_ADC2_Init+0x74>)
 8000cd2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cd6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <MX_ADC2_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_ADC2_Init+0x74>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <MX_ADC2_Init+0x74>)
 8000ce6:	f000 fce9 	bl	80016bc <HAL_ADC_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000cf0:	f000 fa1c 	bl	800112c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_ADC2_Init+0x74>)
 8000d06:	f000 ff71 	bl	8001bec <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000d10:	f000 fa0c 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200001c8 	.word	0x200001c8
 8000d20:	40012800 	.word	0x40012800

08000d24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_I2C1_Init+0x50>)
 8000d2a:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <MX_I2C1_Init+0x54>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_I2C1_Init+0x50>)
 8000d30:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <MX_I2C1_Init+0x58>)
 8000d32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_I2C1_Init+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_I2C1_Init+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_I2C1_Init+0x50>)
 8000d42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <MX_I2C1_Init+0x50>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_I2C1_Init+0x50>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <MX_I2C1_Init+0x50>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_I2C1_Init+0x50>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_I2C1_Init+0x50>)
 8000d62:	f001 fbb1 	bl	80024c8 <HAL_I2C_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d6c:	f000 f9de 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200001f8 	.word	0x200001f8
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	000186a0 	.word	0x000186a0

08000d80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b092      	sub	sp, #72	; 0x48
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
 8000da0:	615a      	str	r2, [r3, #20]
 8000da2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2220      	movs	r2, #32
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f009 f85e 	bl	8009e6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000db0:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <MX_TIM1_Init+0x12c>)
 8000db2:	4a3f      	ldr	r2, [pc, #252]	; (8000eb0 <MX_TIM1_Init+0x130>)
 8000db4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <MX_TIM1_Init+0x12c>)
 8000db8:	220f      	movs	r2, #15
 8000dba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <MX_TIM1_Init+0x12c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <MX_TIM1_Init+0x12c>)
 8000dc4:	2263      	movs	r2, #99	; 0x63
 8000dc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <MX_TIM1_Init+0x12c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <MX_TIM1_Init+0x12c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <MX_TIM1_Init+0x12c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dda:	4834      	ldr	r0, [pc, #208]	; (8000eac <MX_TIM1_Init+0x12c>)
 8000ddc:	f003 ffa4 	bl	8004d28 <HAL_TIM_PWM_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000de6:	f000 f9a1 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000df6:	4619      	mov	r1, r3
 8000df8:	482c      	ldr	r0, [pc, #176]	; (8000eac <MX_TIM1_Init+0x12c>)
 8000dfa:	f004 fb57 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000e04:	f000 f992 	bl	800112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e08:	2360      	movs	r3, #96	; 0x60
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	481f      	ldr	r0, [pc, #124]	; (8000eac <MX_TIM1_Init+0x12c>)
 8000e2e:	f004 f86d 	bl	8004f0c <HAL_TIM_PWM_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000e38:	f000 f978 	bl	800112c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	2204      	movs	r2, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4819      	ldr	r0, [pc, #100]	; (8000eac <MX_TIM1_Init+0x12c>)
 8000e46:	f004 f861 	bl	8004f0c <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000e50:	f000 f96c 	bl	800112c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	2208      	movs	r2, #8
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4813      	ldr	r0, [pc, #76]	; (8000eac <MX_TIM1_Init+0x12c>)
 8000e5e:	f004 f855 	bl	8004f0c <HAL_TIM_PWM_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000e68:	f000 f960 	bl	800112c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4807      	ldr	r0, [pc, #28]	; (8000eac <MX_TIM1_Init+0x12c>)
 8000e90:	f004 fb6a 	bl	8005568 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000e9a:	f000 f947 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e9e:	4803      	ldr	r0, [pc, #12]	; (8000eac <MX_TIM1_Init+0x12c>)
 8000ea0:	f000 fa66 	bl	8001370 <HAL_TIM_MspPostInit>

}
 8000ea4:	bf00      	nop
 8000ea6:	3748      	adds	r7, #72	; 0x48
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2000024c 	.word	0x2000024c
 8000eb0:	40012c00 	.word	0x40012c00

08000eb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eba:	f107 0320 	add.w	r3, r7, #32
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]
 8000ed2:	615a      	str	r2, [r3, #20]
 8000ed4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ed6:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <MX_TIM3_Init+0xc0>)
 8000ed8:	4a27      	ldr	r2, [pc, #156]	; (8000f78 <MX_TIM3_Init+0xc4>)
 8000eda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <MX_TIM3_Init+0xc0>)
 8000ede:	220f      	movs	r2, #15
 8000ee0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee2:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <MX_TIM3_Init+0xc0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <MX_TIM3_Init+0xc0>)
 8000eea:	2263      	movs	r2, #99	; 0x63
 8000eec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <MX_TIM3_Init+0xc0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_TIM3_Init+0xc0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000efa:	481e      	ldr	r0, [pc, #120]	; (8000f74 <MX_TIM3_Init+0xc0>)
 8000efc:	f003 ff14 	bl	8004d28 <HAL_TIM_PWM_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000f06:	f000 f911 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	4619      	mov	r1, r3
 8000f18:	4816      	ldr	r0, [pc, #88]	; (8000f74 <MX_TIM3_Init+0xc0>)
 8000f1a:	f004 fac7 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000f24:	f000 f902 	bl	800112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f28:	2360      	movs	r3, #96	; 0x60
 8000f2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480d      	ldr	r0, [pc, #52]	; (8000f74 <MX_TIM3_Init+0xc0>)
 8000f40:	f003 ffe4 	bl	8004f0c <HAL_TIM_PWM_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000f4a:	f000 f8ef 	bl	800112c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2208      	movs	r2, #8
 8000f52:	4619      	mov	r1, r3
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <MX_TIM3_Init+0xc0>)
 8000f56:	f003 ffd9 	bl	8004f0c <HAL_TIM_PWM_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f60:	f000 f8e4 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <MX_TIM3_Init+0xc0>)
 8000f66:	f000 fa03 	bl	8001370 <HAL_TIM_MspPostInit>

}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000294 	.word	0x20000294
 8000f78:	40000400 	.word	0x40000400

08000f7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <MX_USART3_UART_Init+0x50>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fb4:	f004 fb29 	bl	800560a <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fbe:	f000 f8b5 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200002dc 	.word	0x200002dc
 8000fcc:	40004800 	.word	0x40004800

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe4:	4b4d      	ldr	r3, [pc, #308]	; (800111c <MX_GPIO_Init+0x14c>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a4c      	ldr	r2, [pc, #304]	; (800111c <MX_GPIO_Init+0x14c>)
 8000fea:	f043 0320 	orr.w	r3, r3, #32
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b4a      	ldr	r3, [pc, #296]	; (800111c <MX_GPIO_Init+0x14c>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0320 	and.w	r3, r3, #32
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <MX_GPIO_Init+0x14c>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a46      	ldr	r2, [pc, #280]	; (800111c <MX_GPIO_Init+0x14c>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b44      	ldr	r3, [pc, #272]	; (800111c <MX_GPIO_Init+0x14c>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b41      	ldr	r3, [pc, #260]	; (800111c <MX_GPIO_Init+0x14c>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a40      	ldr	r2, [pc, #256]	; (800111c <MX_GPIO_Init+0x14c>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b3e      	ldr	r3, [pc, #248]	; (800111c <MX_GPIO_Init+0x14c>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102c:	4b3b      	ldr	r3, [pc, #236]	; (800111c <MX_GPIO_Init+0x14c>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a3a      	ldr	r2, [pc, #232]	; (800111c <MX_GPIO_Init+0x14c>)
 8001032:	f043 0308 	orr.w	r3, r3, #8
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b38      	ldr	r3, [pc, #224]	; (800111c <MX_GPIO_Init+0x14c>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HAPTIC_EN_GPIO_Port, HAPTIC_EN_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	4835      	ldr	r0, [pc, #212]	; (8001120 <MX_GPIO_Init+0x150>)
 800104a:	f001 fa0c 	bl	8002466 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_01_EN_GPIO_Port, MOTOR_01_EN_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2120      	movs	r1, #32
 8001052:	4834      	ldr	r0, [pc, #208]	; (8001124 <MX_GPIO_Init+0x154>)
 8001054:	f001 fa07 	bl	8002466 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_02_EN_Pin|MOTOR_03_EN_Pin, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f240 4102 	movw	r1, #1026	; 0x402
 800105e:	4832      	ldr	r0, [pc, #200]	; (8001128 <MX_GPIO_Init+0x158>)
 8001060:	f001 fa01 	bl	8002466 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HAPTIC_01_DIR_Pin|HAPTIC_02_DIR_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f24a 0160 	movw	r1, #41056	; 0xa060
 800106a:	482f      	ldr	r0, [pc, #188]	; (8001128 <MX_GPIO_Init+0x158>)
 800106c:	f001 f9fb 	bl	8002466 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_01_DIR_Pin|MOTOR_02_DIR_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001076:	482b      	ldr	r0, [pc, #172]	; (8001124 <MX_GPIO_Init+0x154>)
 8001078:	f001 f9f5 	bl	8002466 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_03_DIR_GPIO_Port, MOTOR_03_DIR_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001082:	4827      	ldr	r0, [pc, #156]	; (8001120 <MX_GPIO_Init+0x150>)
 8001084:	f001 f9ef 	bl	8002466 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HAPTIC_EN_Pin MOTOR_03_DIR_Pin */
  GPIO_InitStruct.Pin = HAPTIC_EN_Pin|MOTOR_03_DIR_Pin;
 8001088:	f44f 7320 	mov.w	r3, #640	; 0x280
 800108c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2302      	movs	r3, #2
 8001098:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	481f      	ldr	r0, [pc, #124]	; (8001120 <MX_GPIO_Init+0x150>)
 80010a2:	f001 f845 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pin : HAPTIC_FAULT_Pin */
  GPIO_InitStruct.Pin = HAPTIC_FAULT_Pin;
 80010a6:	2310      	movs	r3, #16
 80010a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HAPTIC_FAULT_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	4619      	mov	r1, r3
 80010b8:	481a      	ldr	r0, [pc, #104]	; (8001124 <MX_GPIO_Init+0x154>)
 80010ba:	f001 f839 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_01_EN_Pin MOTOR_01_DIR_Pin MOTOR_02_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_01_EN_Pin|MOTOR_01_DIR_Pin|MOTOR_02_DIR_Pin;
 80010be:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 80010c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4619      	mov	r1, r3
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <MX_GPIO_Init+0x154>)
 80010d8:	f001 f82a 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_01_FAULT_Pin MOTOR_02_FAULT_Pin MOTOR_03_FAULT_Pin BTN_01_Pin */
  GPIO_InitStruct.Pin = MOTOR_01_FAULT_Pin|MOTOR_02_FAULT_Pin|MOTOR_03_FAULT_Pin|BTN_01_Pin;
 80010dc:	f640 0385 	movw	r3, #2181	; 0x885
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4619      	mov	r1, r3
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_GPIO_Init+0x158>)
 80010f2:	f001 f81d 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_02_EN_Pin MOTOR_03_EN_Pin HAPTIC_01_DIR_Pin HAPTIC_02_DIR_Pin
                           LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = MOTOR_02_EN_Pin|MOTOR_03_EN_Pin|HAPTIC_01_DIR_Pin|HAPTIC_02_DIR_Pin
 80010f6:	f24a 4362 	movw	r3, #42082	; 0xa462
 80010fa:	613b      	str	r3, [r7, #16]
                          |LED_01_Pin|LED_02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2302      	movs	r3, #2
 8001106:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_GPIO_Init+0x158>)
 8001110:	f001 f80e 	bl	8002130 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	40010800 	.word	0x40010800
 8001124:	40011000 	.word	0x40011000
 8001128:	40010c00 	.word	0x40010c00

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	e7fe      	b.n	8001134 <Error_Handler+0x8>
	...

08001138 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_MspInit+0x5c>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <HAL_MspInit+0x5c>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6193      	str	r3, [r2, #24]
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_MspInit+0x5c>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_MspInit+0x5c>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <HAL_MspInit+0x5c>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_MspInit+0x5c>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_MspInit+0x60>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_MspInit+0x60>)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40021000 	.word	0x40021000
 8001198:	40010000 	.word	0x40010000

0800119c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a28      	ldr	r2, [pc, #160]	; (8001258 <HAL_ADC_MspInit+0xbc>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d122      	bne.n	8001202 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_ADC_MspInit+0xc0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a26      	ldr	r2, [pc, #152]	; (800125c <HAL_ADC_MspInit+0xc0>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_ADC_MspInit+0xc0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_ADC_MspInit+0xc0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a20      	ldr	r2, [pc, #128]	; (800125c <HAL_ADC_MspInit+0xc0>)
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <HAL_ADC_MspInit+0xc0>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	693b      	ldr	r3, [r7, #16]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = BATT_SENSE_Pin|HALL_SENSE_01_Pin|HALL_SENSE_02_Pin|HALL_SENSE_03_Pin;
 80011ec:	230f      	movs	r3, #15
 80011ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f0:	2303      	movs	r3, #3
 80011f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	f107 0318 	add.w	r3, r7, #24
 80011f8:	4619      	mov	r1, r3
 80011fa:	4819      	ldr	r0, [pc, #100]	; (8001260 <HAL_ADC_MspInit+0xc4>)
 80011fc:	f000 ff98 	bl	8002130 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001200:	e026      	b.n	8001250 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_ADC_MspInit+0xc8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d121      	bne.n	8001250 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_ADC_MspInit+0xc0>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <HAL_ADC_MspInit+0xc0>)
 8001212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_ADC_MspInit+0xc0>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_ADC_MspInit+0xc0>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <HAL_ADC_MspInit+0xc0>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_ADC_MspInit+0xc0>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TRIM_POT_01_Pin|TRIM_POT_02_Pin|EMG_01_Pin|EMG_02_Pin;
 800123c:	231e      	movs	r3, #30
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001240:	2303      	movs	r3, #3
 8001242:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4619      	mov	r1, r3
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <HAL_ADC_MspInit+0xcc>)
 800124c:	f000 ff70 	bl	8002130 <HAL_GPIO_Init>
}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40012400 	.word	0x40012400
 800125c:	40021000 	.word	0x40021000
 8001260:	40011000 	.word	0x40011000
 8001264:	40012800 	.word	0x40012800
 8001268:	40010800 	.word	0x40010800

0800126c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_I2C_MspInit+0x90>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d132      	bne.n	80012f2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <HAL_I2C_MspInit+0x94>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <HAL_I2C_MspInit+0x94>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_I2C_MspInit+0x94>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012aa:	2312      	movs	r3, #18
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4812      	ldr	r0, [pc, #72]	; (8001304 <HAL_I2C_MspInit+0x98>)
 80012ba:	f000 ff39 	bl	8002130 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_I2C_MspInit+0x9c>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	f043 0302 	orr.w	r3, r3, #2
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
 80012d4:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <HAL_I2C_MspInit+0x9c>)
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_I2C_MspInit+0x94>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	4a08      	ldr	r2, [pc, #32]	; (8001300 <HAL_I2C_MspInit+0x94>)
 80012e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e4:	61d3      	str	r3, [r2, #28]
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_I2C_MspInit+0x94>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40005400 	.word	0x40005400
 8001300:	40021000 	.word	0x40021000
 8001304:	40010c00 	.word	0x40010c00
 8001308:	40010000 	.word	0x40010000

0800130c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <HAL_TIM_PWM_MspInit+0x58>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d10c      	bne.n	8001338 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_TIM_PWM_MspInit+0x5c>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	4a11      	ldr	r2, [pc, #68]	; (8001368 <HAL_TIM_PWM_MspInit+0x5c>)
 8001324:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001328:	6193      	str	r3, [r2, #24]
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_TIM_PWM_MspInit+0x5c>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001336:	e010      	b.n	800135a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0b      	ldr	r2, [pc, #44]	; (800136c <HAL_TIM_PWM_MspInit+0x60>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d10b      	bne.n	800135a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_TIM_PWM_MspInit+0x5c>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_TIM_PWM_MspInit+0x5c>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_TIM_PWM_MspInit+0x5c>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	40012c00 	.word	0x40012c00
 8001368:	40021000 	.word	0x40021000
 800136c:	40000400 	.word	0x40000400

08001370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a35      	ldr	r2, [pc, #212]	; (8001460 <HAL_TIM_MspPostInit+0xf0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d132      	bne.n	80013f6 <HAL_TIM_MspPostInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	4b34      	ldr	r3, [pc, #208]	; (8001464 <HAL_TIM_MspPostInit+0xf4>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a33      	ldr	r2, [pc, #204]	; (8001464 <HAL_TIM_MspPostInit+0xf4>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b31      	ldr	r3, [pc, #196]	; (8001464 <HAL_TIM_MspPostInit+0xf4>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <HAL_TIM_MspPostInit+0xf4>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a2d      	ldr	r2, [pc, #180]	; (8001464 <HAL_TIM_MspPostInit+0xf4>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <HAL_TIM_MspPostInit+0xf4>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HAPTIC_01_PWM_Pin;
 80013c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2302      	movs	r3, #2
 80013cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HAPTIC_01_PWM_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4824      	ldr	r0, [pc, #144]	; (8001468 <HAL_TIM_MspPostInit+0xf8>)
 80013d6:	f000 feab 	bl	8002130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_02_PWM_Pin|MOTOR_03_PWM_Pin;
 80013da:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2302      	movs	r3, #2
 80013e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	481f      	ldr	r0, [pc, #124]	; (800146c <HAL_TIM_MspPostInit+0xfc>)
 80013f0:	f000 fe9e 	bl	8002130 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013f4:	e02f      	b.n	8001456 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <HAL_TIM_MspPostInit+0x100>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d12a      	bne.n	8001456 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_TIM_MspPostInit+0xf4>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_TIM_MspPostInit+0xf4>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_TIM_MspPostInit+0xf4>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HAPTIC_02_PWM_Pin|MOTOR_01_PWM_Pin;
 8001418:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2302      	movs	r3, #2
 8001424:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4811      	ldr	r0, [pc, #68]	; (8001474 <HAL_TIM_MspPostInit+0x104>)
 800142e:	f000 fe7f 	bl	8002130 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_TIM_MspPostInit+0x108>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
 8001450:	4a09      	ldr	r2, [pc, #36]	; (8001478 <HAL_TIM_MspPostInit+0x108>)
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	6053      	str	r3, [r2, #4]
}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40012c00 	.word	0x40012c00
 8001464:	40021000 	.word	0x40021000
 8001468:	40010c00 	.word	0x40010c00
 800146c:	40010800 	.word	0x40010800
 8001470:	40000400 	.word	0x40000400
 8001474:	40011000 	.word	0x40011000
 8001478:	40010000 	.word	0x40010000

0800147c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a25      	ldr	r2, [pc, #148]	; (800152c <HAL_UART_MspInit+0xb0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d143      	bne.n	8001524 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_UART_MspInit+0xb4>)
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	4a23      	ldr	r2, [pc, #140]	; (8001530 <HAL_UART_MspInit+0xb4>)
 80014a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a6:	61d3      	str	r3, [r2, #28]
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_UART_MspInit+0xb4>)
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <HAL_UART_MspInit+0xb4>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <HAL_UART_MspInit+0xb4>)
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <HAL_UART_MspInit+0xb4>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4814      	ldr	r0, [pc, #80]	; (8001534 <HAL_UART_MspInit+0xb8>)
 80014e2:	f000 fe25 	bl	8002130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	480e      	ldr	r0, [pc, #56]	; (8001534 <HAL_UART_MspInit+0xb8>)
 80014fc:	f000 fe18 	bl	8002130 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_UART_MspInit+0xbc>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	f043 0310 	orr.w	r3, r3, #16
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
 800151e:	4a06      	ldr	r2, [pc, #24]	; (8001538 <HAL_UART_MspInit+0xbc>)
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	; 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40004800 	.word	0x40004800
 8001530:	40021000 	.word	0x40021000
 8001534:	40011000 	.word	0x40011000
 8001538:	40010000 	.word	0x40010000

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001582:	f000 f87f 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001592:	f001 fa02 	bl	800299a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000ff0 	.word	0x20000ff0

080015a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015ac:	f7ff fff8 	bl	80015a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015b2:	490c      	ldr	r1, [pc, #48]	; (80015e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015b4:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015c8:	4c09      	ldr	r4, [pc, #36]	; (80015f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d6:	f008 fc51 	bl	8009e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015da:	f7ff f9a9 	bl	8000930 <main>
  bx lr
 80015de:	4770      	bx	lr
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e4:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80015e8:	08009f6c 	.word	0x08009f6c
  ldr r2, =_sbss
 80015ec:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80015f0:	20001500 	.word	0x20001500

080015f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC1_2_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_Init+0x28>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_Init+0x28>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 fd4f 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	200f      	movs	r0, #15
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fd90 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40022000 	.word	0x40022000

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fd67 	bl	8002116 <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f000 fd2f 	bl	80020c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000000 	.word	0x20000000
 800167c:	20000008 	.word	0x20000008
 8001680:	20000004 	.word	0x20000004

08001684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_IncTick+0x1c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_IncTick+0x20>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a03      	ldr	r2, [pc, #12]	; (80016a4 <HAL_IncTick+0x20>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	20000008 	.word	0x20000008
 80016a4:	20000324 	.word	0x20000324

080016a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <HAL_GetTick+0x10>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000324 	.word	0x20000324

080016bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e0be      	b.n	800185c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d109      	bne.n	8001700 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fd4e 	bl	800119c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fbc5 	bl	8001e90 <ADC_ConversionStop_Disable>
 8001706:	4603      	mov	r3, r0
 8001708:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 8099 	bne.w	800184a <HAL_ADC_Init+0x18e>
 8001718:	7dfb      	ldrb	r3, [r7, #23]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f040 8095 	bne.w	800184a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001728:	f023 0302 	bic.w	r3, r3, #2
 800172c:	f043 0202 	orr.w	r2, r3, #2
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800173c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7b1b      	ldrb	r3, [r3, #12]
 8001742:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001744:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	4313      	orrs	r3, r2
 800174a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001754:	d003      	beq.n	800175e <HAL_ADC_Init+0xa2>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d102      	bne.n	8001764 <HAL_ADC_Init+0xa8>
 800175e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001762:	e000      	b.n	8001766 <HAL_ADC_Init+0xaa>
 8001764:	2300      	movs	r3, #0
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7d1b      	ldrb	r3, [r3, #20]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d119      	bne.n	80017a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7b1b      	ldrb	r3, [r3, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d109      	bne.n	8001790 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	3b01      	subs	r3, #1
 8001782:	035a      	lsls	r2, r3, #13
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	e00b      	b.n	80017a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	f043 0220 	orr.w	r2, r3, #32
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	4b28      	ldr	r3, [pc, #160]	; (8001864 <HAL_ADC_Init+0x1a8>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	68b9      	ldr	r1, [r7, #8]
 80017cc:	430b      	orrs	r3, r1
 80017ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d8:	d003      	beq.n	80017e2 <HAL_ADC_Init+0x126>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d104      	bne.n	80017ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	051b      	lsls	r3, r3, #20
 80017ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_ADC_Init+0x1ac>)
 8001808:	4013      	ands	r3, r2
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	429a      	cmp	r2, r3
 800180e:	d10b      	bne.n	8001828 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	f023 0303 	bic.w	r3, r3, #3
 800181e:	f043 0201 	orr.w	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001826:	e018      	b.n	800185a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	f023 0312 	bic.w	r3, r3, #18
 8001830:	f043 0210 	orr.w	r2, r3, #16
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	f043 0201 	orr.w	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001848:	e007      	b.n	800185a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	f043 0210 	orr.w	r2, r3, #16
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800185a:	7dfb      	ldrb	r3, [r7, #23]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	ffe1f7fd 	.word	0xffe1f7fd
 8001868:	ff1f0efe 	.word	0xff1f0efe

0800186c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_ADC_Start+0x1a>
 8001882:	2302      	movs	r3, #2
 8001884:	e098      	b.n	80019b8 <HAL_ADC_Start+0x14c>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 faa4 	bl	8001ddc <ADC_Enable>
 8001894:	4603      	mov	r3, r0
 8001896:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	2b00      	cmp	r3, #0
 800189c:	f040 8087 	bne.w	80019ae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a41      	ldr	r2, [pc, #260]	; (80019c0 <HAL_ADC_Start+0x154>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d105      	bne.n	80018ca <HAL_ADC_Start+0x5e>
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <HAL_ADC_Start+0x158>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d115      	bne.n	80018f6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d026      	beq.n	8001932 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018f4:	e01d      	b.n	8001932 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a2f      	ldr	r2, [pc, #188]	; (80019c4 <HAL_ADC_Start+0x158>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d004      	beq.n	8001916 <HAL_ADC_Start+0xaa>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a2b      	ldr	r2, [pc, #172]	; (80019c0 <HAL_ADC_Start+0x154>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d10d      	bne.n	8001932 <HAL_ADC_Start+0xc6>
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <HAL_ADC_Start+0x158>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800192a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d006      	beq.n	800194c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	f023 0206 	bic.w	r2, r3, #6
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
 800194a:	e002      	b.n	8001952 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f06f 0202 	mvn.w	r2, #2
 8001962:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800196e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001972:	d113      	bne.n	800199c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001978:	4a11      	ldr	r2, [pc, #68]	; (80019c0 <HAL_ADC_Start+0x154>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d105      	bne.n	800198a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_ADC_Start+0x158>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001986:	2b00      	cmp	r3, #0
 8001988:	d108      	bne.n	800199c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	e00c      	b.n	80019b6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	e003      	b.n	80019b6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40012800 	.word	0x40012800
 80019c4:	40012400 	.word	0x40012400

080019c8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80019de:	f7ff fe63 	bl	80016a8 <HAL_GetTick>
 80019e2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00b      	beq.n	8001a0a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	f043 0220 	orr.w	r2, r3, #32
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0d3      	b.n	8001bb2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d131      	bne.n	8001a7c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d12a      	bne.n	8001a7c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a26:	e021      	b.n	8001a6c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2e:	d01d      	beq.n	8001a6c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <HAL_ADC_PollForConversion+0x7e>
 8001a36:	f7ff fe37 	bl	80016a8 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d212      	bcs.n	8001a6c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10b      	bne.n	8001a6c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a58:	f043 0204 	orr.w	r2, r3, #4
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0a2      	b.n	8001bb2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0d6      	beq.n	8001a28 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a7a:	e070      	b.n	8001b5e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a7c:	4b4f      	ldr	r3, [pc, #316]	; (8001bbc <HAL_ADC_PollForConversion+0x1f4>)
 8001a7e:	681c      	ldr	r4, [r3, #0]
 8001a80:	2002      	movs	r0, #2
 8001a82:	f003 f89b 	bl	8004bbc <HAL_RCCEx_GetPeriphCLKFreq>
 8001a86:	4603      	mov	r3, r0
 8001a88:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6919      	ldr	r1, [r3, #16]
 8001a92:	4b4b      	ldr	r3, [pc, #300]	; (8001bc0 <HAL_ADC_PollForConversion+0x1f8>)
 8001a94:	400b      	ands	r3, r1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d118      	bne.n	8001acc <HAL_ADC_PollForConversion+0x104>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68d9      	ldr	r1, [r3, #12]
 8001aa0:	4b48      	ldr	r3, [pc, #288]	; (8001bc4 <HAL_ADC_PollForConversion+0x1fc>)
 8001aa2:	400b      	ands	r3, r1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d111      	bne.n	8001acc <HAL_ADC_PollForConversion+0x104>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6919      	ldr	r1, [r3, #16]
 8001aae:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <HAL_ADC_PollForConversion+0x200>)
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d108      	bne.n	8001ac8 <HAL_ADC_PollForConversion+0x100>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68d9      	ldr	r1, [r3, #12]
 8001abc:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <HAL_ADC_PollForConversion+0x204>)
 8001abe:	400b      	ands	r3, r1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_PollForConversion+0x100>
 8001ac4:	2314      	movs	r3, #20
 8001ac6:	e020      	b.n	8001b0a <HAL_ADC_PollForConversion+0x142>
 8001ac8:	2329      	movs	r3, #41	; 0x29
 8001aca:	e01e      	b.n	8001b0a <HAL_ADC_PollForConversion+0x142>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6919      	ldr	r1, [r3, #16]
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <HAL_ADC_PollForConversion+0x200>)
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x120>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68d9      	ldr	r1, [r3, #12]
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <HAL_ADC_PollForConversion+0x204>)
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00d      	beq.n	8001b04 <HAL_ADC_PollForConversion+0x13c>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6919      	ldr	r1, [r3, #16]
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <HAL_ADC_PollForConversion+0x208>)
 8001af0:	400b      	ands	r3, r1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d108      	bne.n	8001b08 <HAL_ADC_PollForConversion+0x140>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68d9      	ldr	r1, [r3, #12]
 8001afc:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <HAL_ADC_PollForConversion+0x208>)
 8001afe:	400b      	ands	r3, r1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_ADC_PollForConversion+0x140>
 8001b04:	2354      	movs	r3, #84	; 0x54
 8001b06:	e000      	b.n	8001b0a <HAL_ADC_PollForConversion+0x142>
 8001b08:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b10:	e021      	b.n	8001b56 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d01a      	beq.n	8001b50 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <HAL_ADC_PollForConversion+0x168>
 8001b20:	f7ff fdc2 	bl	80016a8 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d20f      	bcs.n	8001b50 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d90b      	bls.n	8001b50 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	f043 0204 	orr.w	r2, r3, #4
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e030      	b.n	8001bb2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3301      	adds	r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d8d9      	bhi.n	8001b12 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f06f 0212 	mvn.w	r2, #18
 8001b66:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b7e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b82:	d115      	bne.n	8001bb0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d111      	bne.n	8001bb0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d105      	bne.n	8001bb0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba8:	f043 0201 	orr.w	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd90      	pop	{r4, r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	24924924 	.word	0x24924924
 8001bc4:	00924924 	.word	0x00924924
 8001bc8:	12492492 	.word	0x12492492
 8001bcc:	00492492 	.word	0x00492492
 8001bd0:	00249249 	.word	0x00249249

08001bd4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x20>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e0dc      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x1da>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b06      	cmp	r3, #6
 8001c1a:	d81c      	bhi.n	8001c56 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b05      	subs	r3, #5
 8001c2e:	221f      	movs	r2, #31
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	4019      	ands	r1, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	3b05      	subs	r3, #5
 8001c48:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	635a      	str	r2, [r3, #52]	; 0x34
 8001c54:	e03c      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d81c      	bhi.n	8001c98 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b23      	subs	r3, #35	; 0x23
 8001c70:	221f      	movs	r2, #31
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4019      	ands	r1, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	3b23      	subs	r3, #35	; 0x23
 8001c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	631a      	str	r2, [r3, #48]	; 0x30
 8001c96:	e01b      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b41      	subs	r3, #65	; 0x41
 8001caa:	221f      	movs	r2, #31
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	4019      	ands	r1, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3b41      	subs	r3, #65	; 0x41
 8001cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b09      	cmp	r3, #9
 8001cd6:	d91c      	bls.n	8001d12 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68d9      	ldr	r1, [r3, #12]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3b1e      	subs	r3, #30
 8001cea:	2207      	movs	r2, #7
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	4019      	ands	r1, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6898      	ldr	r0, [r3, #8]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	3b1e      	subs	r3, #30
 8001d04:	fa00 f203 	lsl.w	r2, r0, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	e019      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6919      	ldr	r1, [r3, #16]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	2207      	movs	r2, #7
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	4019      	ands	r1, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6898      	ldr	r0, [r3, #8]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d003      	beq.n	8001d56 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d52:	2b11      	cmp	r3, #17
 8001d54:	d132      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d125      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d126      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d7c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d11a      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	0c9a      	lsrs	r2, r3, #18
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d9c:	e002      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f9      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x1b2>
 8001daa:	e007      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db0:	f043 0220 	orr.w	r2, r3, #32
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	40012400 	.word	0x40012400
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	431bde83 	.word	0x431bde83

08001ddc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d040      	beq.n	8001e7c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0201 	orr.w	r2, r2, #1
 8001e08:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <ADC_Enable+0xac>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <ADC_Enable+0xb0>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	0c9b      	lsrs	r3, r3, #18
 8001e16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e18:	e002      	b.n	8001e20 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f9      	bne.n	8001e1a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e26:	f7ff fc3f 	bl	80016a8 <HAL_GetTick>
 8001e2a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e2c:	e01f      	b.n	8001e6e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e2e:	f7ff fc3b 	bl	80016a8 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d918      	bls.n	8001e6e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d011      	beq.n	8001e6e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	f043 0210 	orr.w	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e007      	b.n	8001e7e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d1d8      	bne.n	8001e2e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	431bde83 	.word	0x431bde83

08001e90 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d12e      	bne.n	8001f08 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eba:	f7ff fbf5 	bl	80016a8 <HAL_GetTick>
 8001ebe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ec0:	e01b      	b.n	8001efa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ec2:	f7ff fbf1 	bl	80016a8 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d914      	bls.n	8001efa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d10d      	bne.n	8001efa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	f043 0210 	orr.w	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e007      	b.n	8001f0a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d0dc      	beq.n	8001ec2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0b      	blt.n	8001fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4906      	ldr	r1, [pc, #24]	; (8001fac <__NVIC_EnableIRQ+0x34>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100

08001fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db0a      	blt.n	8001fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	490c      	ldr	r1, [pc, #48]	; (8001ffc <__NVIC_SetPriority+0x4c>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd8:	e00a      	b.n	8001ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4908      	ldr	r1, [pc, #32]	; (8002000 <__NVIC_SetPriority+0x50>)
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3b04      	subs	r3, #4
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	440b      	add	r3, r1
 8001fee:	761a      	strb	r2, [r3, #24]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000e100 	.word	0xe000e100
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f1c3 0307 	rsb	r3, r3, #7
 800201e:	2b04      	cmp	r3, #4
 8002020:	bf28      	it	cs
 8002022:	2304      	movcs	r3, #4
 8002024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3304      	adds	r3, #4
 800202a:	2b06      	cmp	r3, #6
 800202c:	d902      	bls.n	8002034 <NVIC_EncodePriority+0x30>
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3b03      	subs	r3, #3
 8002032:	e000      	b.n	8002036 <NVIC_EncodePriority+0x32>
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	401a      	ands	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43d9      	mvns	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	4313      	orrs	r3, r2
         );
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f7ff ff90 	bl	8001fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff2d 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff42 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff90 	bl	8002004 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5f 	bl	8001fb0 <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff35 	bl	8001f78 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffa2 	bl	8002068 <SysTick_Config>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b08b      	sub	sp, #44	; 0x2c
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002142:	e169      	b.n	8002418 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002144:	2201      	movs	r2, #1
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	429a      	cmp	r2, r3
 800215e:	f040 8158 	bne.w	8002412 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4a9a      	ldr	r2, [pc, #616]	; (80023d0 <HAL_GPIO_Init+0x2a0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d05e      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 800216c:	4a98      	ldr	r2, [pc, #608]	; (80023d0 <HAL_GPIO_Init+0x2a0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d875      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 8002172:	4a98      	ldr	r2, [pc, #608]	; (80023d4 <HAL_GPIO_Init+0x2a4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d058      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 8002178:	4a96      	ldr	r2, [pc, #600]	; (80023d4 <HAL_GPIO_Init+0x2a4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d86f      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 800217e:	4a96      	ldr	r2, [pc, #600]	; (80023d8 <HAL_GPIO_Init+0x2a8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d052      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 8002184:	4a94      	ldr	r2, [pc, #592]	; (80023d8 <HAL_GPIO_Init+0x2a8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d869      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 800218a:	4a94      	ldr	r2, [pc, #592]	; (80023dc <HAL_GPIO_Init+0x2ac>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d04c      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 8002190:	4a92      	ldr	r2, [pc, #584]	; (80023dc <HAL_GPIO_Init+0x2ac>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d863      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 8002196:	4a92      	ldr	r2, [pc, #584]	; (80023e0 <HAL_GPIO_Init+0x2b0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d046      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 800219c:	4a90      	ldr	r2, [pc, #576]	; (80023e0 <HAL_GPIO_Init+0x2b0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d85d      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 80021a2:	2b12      	cmp	r3, #18
 80021a4:	d82a      	bhi.n	80021fc <HAL_GPIO_Init+0xcc>
 80021a6:	2b12      	cmp	r3, #18
 80021a8:	d859      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 80021aa:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <HAL_GPIO_Init+0x80>)
 80021ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b0:	0800222b 	.word	0x0800222b
 80021b4:	08002205 	.word	0x08002205
 80021b8:	08002217 	.word	0x08002217
 80021bc:	08002259 	.word	0x08002259
 80021c0:	0800225f 	.word	0x0800225f
 80021c4:	0800225f 	.word	0x0800225f
 80021c8:	0800225f 	.word	0x0800225f
 80021cc:	0800225f 	.word	0x0800225f
 80021d0:	0800225f 	.word	0x0800225f
 80021d4:	0800225f 	.word	0x0800225f
 80021d8:	0800225f 	.word	0x0800225f
 80021dc:	0800225f 	.word	0x0800225f
 80021e0:	0800225f 	.word	0x0800225f
 80021e4:	0800225f 	.word	0x0800225f
 80021e8:	0800225f 	.word	0x0800225f
 80021ec:	0800225f 	.word	0x0800225f
 80021f0:	0800225f 	.word	0x0800225f
 80021f4:	0800220d 	.word	0x0800220d
 80021f8:	08002221 	.word	0x08002221
 80021fc:	4a79      	ldr	r2, [pc, #484]	; (80023e4 <HAL_GPIO_Init+0x2b4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002202:	e02c      	b.n	800225e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	623b      	str	r3, [r7, #32]
          break;
 800220a:	e029      	b.n	8002260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	3304      	adds	r3, #4
 8002212:	623b      	str	r3, [r7, #32]
          break;
 8002214:	e024      	b.n	8002260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	3308      	adds	r3, #8
 800221c:	623b      	str	r3, [r7, #32]
          break;
 800221e:	e01f      	b.n	8002260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	330c      	adds	r3, #12
 8002226:	623b      	str	r3, [r7, #32]
          break;
 8002228:	e01a      	b.n	8002260 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d102      	bne.n	8002238 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002232:	2304      	movs	r3, #4
 8002234:	623b      	str	r3, [r7, #32]
          break;
 8002236:	e013      	b.n	8002260 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d105      	bne.n	800224c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002240:	2308      	movs	r3, #8
 8002242:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	611a      	str	r2, [r3, #16]
          break;
 800224a:	e009      	b.n	8002260 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800224c:	2308      	movs	r3, #8
 800224e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	615a      	str	r2, [r3, #20]
          break;
 8002256:	e003      	b.n	8002260 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002258:	2300      	movs	r3, #0
 800225a:	623b      	str	r3, [r7, #32]
          break;
 800225c:	e000      	b.n	8002260 <HAL_GPIO_Init+0x130>
          break;
 800225e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2bff      	cmp	r3, #255	; 0xff
 8002264:	d801      	bhi.n	800226a <HAL_GPIO_Init+0x13a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	e001      	b.n	800226e <HAL_GPIO_Init+0x13e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3304      	adds	r3, #4
 800226e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2bff      	cmp	r3, #255	; 0xff
 8002274:	d802      	bhi.n	800227c <HAL_GPIO_Init+0x14c>
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	e002      	b.n	8002282 <HAL_GPIO_Init+0x152>
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	3b08      	subs	r3, #8
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	210f      	movs	r1, #15
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	401a      	ands	r2, r3
 8002294:	6a39      	ldr	r1, [r7, #32]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	431a      	orrs	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 80b1 	beq.w	8002412 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022b0:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <HAL_GPIO_Init+0x2b8>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4a4c      	ldr	r2, [pc, #304]	; (80023e8 <HAL_GPIO_Init+0x2b8>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6193      	str	r3, [r2, #24]
 80022bc:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <HAL_GPIO_Init+0x2b8>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022c8:	4a48      	ldr	r2, [pc, #288]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	220f      	movs	r2, #15
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a40      	ldr	r2, [pc, #256]	; (80023f0 <HAL_GPIO_Init+0x2c0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <HAL_GPIO_Init+0x1ec>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a3f      	ldr	r2, [pc, #252]	; (80023f4 <HAL_GPIO_Init+0x2c4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00d      	beq.n	8002318 <HAL_GPIO_Init+0x1e8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3e      	ldr	r2, [pc, #248]	; (80023f8 <HAL_GPIO_Init+0x2c8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d007      	beq.n	8002314 <HAL_GPIO_Init+0x1e4>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3d      	ldr	r2, [pc, #244]	; (80023fc <HAL_GPIO_Init+0x2cc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_GPIO_Init+0x1e0>
 800230c:	2303      	movs	r3, #3
 800230e:	e006      	b.n	800231e <HAL_GPIO_Init+0x1ee>
 8002310:	2304      	movs	r3, #4
 8002312:	e004      	b.n	800231e <HAL_GPIO_Init+0x1ee>
 8002314:	2302      	movs	r3, #2
 8002316:	e002      	b.n	800231e <HAL_GPIO_Init+0x1ee>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_GPIO_Init+0x1ee>
 800231c:	2300      	movs	r3, #0
 800231e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002320:	f002 0203 	and.w	r2, r2, #3
 8002324:	0092      	lsls	r2, r2, #2
 8002326:	4093      	lsls	r3, r2
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800232e:	492f      	ldr	r1, [pc, #188]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002348:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	492c      	ldr	r1, [pc, #176]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]
 8002354:	e006      	b.n	8002364 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002356:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	43db      	mvns	r3, r3
 800235e:	4928      	ldr	r1, [pc, #160]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002360:	4013      	ands	r3, r2
 8002362:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002370:	4b23      	ldr	r3, [pc, #140]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	4922      	ldr	r1, [pc, #136]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	60cb      	str	r3, [r1, #12]
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	43db      	mvns	r3, r3
 8002386:	491e      	ldr	r1, [pc, #120]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002388:	4013      	ands	r3, r2
 800238a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4918      	ldr	r1, [pc, #96]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
 80023a4:	e006      	b.n	80023b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023a6:	4b16      	ldr	r3, [pc, #88]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	4914      	ldr	r1, [pc, #80]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d021      	beq.n	8002404 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	490e      	ldr	r1, [pc, #56]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e021      	b.n	8002412 <HAL_GPIO_Init+0x2e2>
 80023ce:	bf00      	nop
 80023d0:	10320000 	.word	0x10320000
 80023d4:	10310000 	.word	0x10310000
 80023d8:	10220000 	.word	0x10220000
 80023dc:	10210000 	.word	0x10210000
 80023e0:	10120000 	.word	0x10120000
 80023e4:	10110000 	.word	0x10110000
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40010800 	.word	0x40010800
 80023f4:	40010c00 	.word	0x40010c00
 80023f8:	40011000 	.word	0x40011000
 80023fc:	40011400 	.word	0x40011400
 8002400:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_GPIO_Init+0x304>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	43db      	mvns	r3, r3
 800240c:	4909      	ldr	r1, [pc, #36]	; (8002434 <HAL_GPIO_Init+0x304>)
 800240e:	4013      	ands	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	3301      	adds	r3, #1
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	f47f ae8e 	bne.w	8002144 <HAL_GPIO_Init+0x14>
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	372c      	adds	r7, #44	; 0x2c
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	40010400 	.word	0x40010400

08002438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e001      	b.n	800245a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	807b      	strh	r3, [r7, #2]
 8002472:	4613      	mov	r3, r2
 8002474:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002476:	787b      	ldrb	r3, [r7, #1]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247c:	887a      	ldrh	r2, [r7, #2]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002482:	e003      	b.n	800248c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	041a      	lsls	r2, r3, #16
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	611a      	str	r2, [r3, #16]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002496:	b480      	push	{r7}
 8002498:	b085      	sub	sp, #20
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024a8:	887a      	ldrh	r2, [r7, #2]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4013      	ands	r3, r2
 80024ae:	041a      	lsls	r2, r3, #16
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	887b      	ldrh	r3, [r7, #2]
 80024b6:	400b      	ands	r3, r1
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	611a      	str	r2, [r3, #16]
}
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e12b      	b.n	8002732 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe febc 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2224      	movs	r2, #36	; 0x24
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800251a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800252a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800252c:	f002 fa4a 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8002530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4a81      	ldr	r2, [pc, #516]	; (800273c <HAL_I2C_Init+0x274>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d807      	bhi.n	800254c <HAL_I2C_Init+0x84>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a80      	ldr	r2, [pc, #512]	; (8002740 <HAL_I2C_Init+0x278>)
 8002540:	4293      	cmp	r3, r2
 8002542:	bf94      	ite	ls
 8002544:	2301      	movls	r3, #1
 8002546:	2300      	movhi	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	e006      	b.n	800255a <HAL_I2C_Init+0x92>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a7d      	ldr	r2, [pc, #500]	; (8002744 <HAL_I2C_Init+0x27c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	bf94      	ite	ls
 8002554:	2301      	movls	r3, #1
 8002556:	2300      	movhi	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e0e7      	b.n	8002732 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a78      	ldr	r2, [pc, #480]	; (8002748 <HAL_I2C_Init+0x280>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	0c9b      	lsrs	r3, r3, #18
 800256c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	430a      	orrs	r2, r1
 8002580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a6a      	ldr	r2, [pc, #424]	; (800273c <HAL_I2C_Init+0x274>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d802      	bhi.n	800259c <HAL_I2C_Init+0xd4>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3301      	adds	r3, #1
 800259a:	e009      	b.n	80025b0 <HAL_I2C_Init+0xe8>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	4a69      	ldr	r2, [pc, #420]	; (800274c <HAL_I2C_Init+0x284>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	099b      	lsrs	r3, r3, #6
 80025ae:	3301      	adds	r3, #1
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	495c      	ldr	r1, [pc, #368]	; (800273c <HAL_I2C_Init+0x274>)
 80025cc:	428b      	cmp	r3, r1
 80025ce:	d819      	bhi.n	8002604 <HAL_I2C_Init+0x13c>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1e59      	subs	r1, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	fbb1 f3f3 	udiv	r3, r1, r3
 80025de:	1c59      	adds	r1, r3, #1
 80025e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025e4:	400b      	ands	r3, r1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_I2C_Init+0x138>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1e59      	subs	r1, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fe:	e051      	b.n	80026a4 <HAL_I2C_Init+0x1dc>
 8002600:	2304      	movs	r3, #4
 8002602:	e04f      	b.n	80026a4 <HAL_I2C_Init+0x1dc>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d111      	bne.n	8002630 <HAL_I2C_Init+0x168>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1e58      	subs	r0, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	e012      	b.n	8002656 <HAL_I2C_Init+0x18e>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1e58      	subs	r0, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	0099      	lsls	r1, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	fbb0 f3f3 	udiv	r3, r0, r3
 8002646:	3301      	adds	r3, #1
 8002648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Init+0x196>
 800265a:	2301      	movs	r3, #1
 800265c:	e022      	b.n	80026a4 <HAL_I2C_Init+0x1dc>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10e      	bne.n	8002684 <HAL_I2C_Init+0x1bc>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1e58      	subs	r0, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6859      	ldr	r1, [r3, #4]
 800266e:	460b      	mov	r3, r1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	440b      	add	r3, r1
 8002674:	fbb0 f3f3 	udiv	r3, r0, r3
 8002678:	3301      	adds	r3, #1
 800267a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002682:	e00f      	b.n	80026a4 <HAL_I2C_Init+0x1dc>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1e58      	subs	r0, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	0099      	lsls	r1, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	fbb0 f3f3 	udiv	r3, r0, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	6809      	ldr	r1, [r1, #0]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69da      	ldr	r2, [r3, #28]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6911      	ldr	r1, [r2, #16]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68d2      	ldr	r2, [r2, #12]
 80026de:	4311      	orrs	r1, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	000186a0 	.word	0x000186a0
 8002740:	001e847f 	.word	0x001e847f
 8002744:	003d08ff 	.word	0x003d08ff
 8002748:	431bde83 	.word	0x431bde83
 800274c:	10624dd3 	.word	0x10624dd3

08002750 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002752:	b08b      	sub	sp, #44	; 0x2c
 8002754:	af06      	add	r7, sp, #24
 8002756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e0f1      	b.n	8002946 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f007 f8ce 	bl	8009918 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2203      	movs	r2, #3
 8002780:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f003 f843 	bl	8005814 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	687e      	ldr	r6, [r7, #4]
 8002796:	466d      	mov	r5, sp
 8002798:	f106 0410 	add.w	r4, r6, #16
 800279c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800279e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	602b      	str	r3, [r5, #0]
 80027a4:	1d33      	adds	r3, r6, #4
 80027a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a8:	6838      	ldr	r0, [r7, #0]
 80027aa:	f003 f80d 	bl	80057c8 <USB_CoreInit>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0c2      	b.n	8002946 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f003 f83e 	bl	8005848 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e040      	b.n	8002854 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	440b      	add	r3, r1
 80027e2:	3301      	adds	r3, #1
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	440b      	add	r3, r1
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	440b      	add	r3, r1
 800280c:	3303      	adds	r3, #3
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	440b      	add	r3, r1
 8002820:	3338      	adds	r3, #56	; 0x38
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	333c      	adds	r3, #60	; 0x3c
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	3340      	adds	r3, #64	; 0x40
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	3301      	adds	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	d3b9      	bcc.n	80027d2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	e044      	b.n	80028ee <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002864:	7bfa      	ldrb	r2, [r7, #15]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	440b      	add	r3, r1
 8002888:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	3301      	adds	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d3b5      	bcc.n	8002864 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	687e      	ldr	r6, [r7, #4]
 8002900:	466d      	mov	r5, sp
 8002902:	f106 0410 	add.w	r4, r6, #16
 8002906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	602b      	str	r3, [r5, #0]
 800290e:	1d33      	adds	r3, r6, #4
 8002910:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002912:	6838      	ldr	r0, [r7, #0]
 8002914:	f002 ffa4 	bl	8005860 <USB_DevInit>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2202      	movs	r2, #2
 8002922:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e00d      	b.n	8002946 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f005 fa25 	bl	8007d8e <USB_DevDisconnect>

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800294e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_PCD_Start+0x16>
 8002960:	2302      	movs	r3, #2
 8002962:	e016      	b.n	8002992 <HAL_PCD_Start+0x44>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f002 ff39 	bl	80057e8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002976:	2101      	movs	r1, #1
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f007 fa40 	bl	8009dfe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f005 f9f9 	bl	8007d7a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b088      	sub	sp, #32
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f005 f9fb 	bl	8007da2 <USB_ReadInterrupts>
 80029ac:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fb1b 	bl	8002ff4 <PCD_EP_ISR_Handler>

    return;
 80029be:	e119      	b.n	8002bf4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d013      	beq.n	80029f2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029dc:	b292      	uxth	r2, r2
 80029de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f007 f813 	bl	8009a0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80029e8:	2100      	movs	r1, #0
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f905 	bl	8002bfa <HAL_PCD_SetAddress>

    return;
 80029f0:	e100      	b.n	8002bf4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00c      	beq.n	8002a16 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a0e:	b292      	uxth	r2, r2
 8002a10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a14:	e0ee      	b.n	8002bf4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00c      	beq.n	8002a3a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a32:	b292      	uxth	r2, r2
 8002a34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a38:	e0dc      	b.n	8002bf4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d027      	beq.n	8002a94 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0204 	bic.w	r2, r2, #4
 8002a56:	b292      	uxth	r2, r2
 8002a58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0208 	bic.w	r2, r2, #8
 8002a6e:	b292      	uxth	r2, r2
 8002a70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f007 f803 	bl	8009a80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a8c:	b292      	uxth	r2, r2
 8002a8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a92:	e0af      	b.n	8002bf4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8083 	beq.w	8002ba6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	77fb      	strb	r3, [r7, #31]
 8002aa4:	e010      	b.n	8002ac8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	7ffb      	ldrb	r3, [r7, #31]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	7ffb      	ldrb	r3, [r7, #31]
 8002ab4:	8812      	ldrh	r2, [r2, #0]
 8002ab6:	b292      	uxth	r2, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	3320      	adds	r3, #32
 8002abc:	443b      	add	r3, r7
 8002abe:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002ac2:	7ffb      	ldrb	r3, [r7, #31]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	77fb      	strb	r3, [r7, #31]
 8002ac8:	7ffb      	ldrb	r3, [r7, #31]
 8002aca:	2b07      	cmp	r3, #7
 8002acc:	d9eb      	bls.n	8002aa6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	b292      	uxth	r2, r2
 8002ae2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0201 	bic.w	r2, r2, #1
 8002af8:	b292      	uxth	r2, r2
 8002afa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002afe:	bf00      	nop
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f6      	beq.n	8002b00 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b24:	b292      	uxth	r2, r2
 8002b26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	77fb      	strb	r3, [r7, #31]
 8002b2e:	e00f      	b.n	8002b50 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002b30:	7ffb      	ldrb	r3, [r7, #31]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	4611      	mov	r1, r2
 8002b38:	7ffa      	ldrb	r2, [r7, #31]
 8002b3a:	0092      	lsls	r2, r2, #2
 8002b3c:	440a      	add	r2, r1
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	3320      	adds	r3, #32
 8002b42:	443b      	add	r3, r7
 8002b44:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002b48:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002b4a:	7ffb      	ldrb	r3, [r7, #31]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	77fb      	strb	r3, [r7, #31]
 8002b50:	7ffb      	ldrb	r3, [r7, #31]
 8002b52:	2b07      	cmp	r3, #7
 8002b54:	d9ec      	bls.n	8002b30 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0208 	orr.w	r2, r2, #8
 8002b68:	b292      	uxth	r2, r2
 8002b6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b80:	b292      	uxth	r2, r2
 8002b82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0204 	orr.w	r2, r2, #4
 8002b98:	b292      	uxth	r2, r2
 8002b9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f006 ff54 	bl	8009a4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ba4:	e026      	b.n	8002bf4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00f      	beq.n	8002bd0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bc2:	b292      	uxth	r2, r2
 8002bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f006 ff12 	bl	80099f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002bce:	e011      	b.n	8002bf4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bec:	b292      	uxth	r2, r2
 8002bee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002bf2:	bf00      	nop
  }
}
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_PCD_SetAddress+0x1a>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e013      	b.n	8002c3c <HAL_PCD_SetAddress+0x42>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f005 f891 	bl	8007d54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	70fb      	strb	r3, [r7, #3]
 8002c56:	460b      	mov	r3, r1
 8002c58:	803b      	strh	r3, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da0e      	bge.n	8002c88 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	705a      	strb	r2, [r3, #1]
 8002c86:	e00e      	b.n	8002ca6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	f003 0207 	and.w	r2, r3, #7
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cb2:	883a      	ldrh	r2, [r7, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	78ba      	ldrb	r2, [r7, #2]
 8002cbc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cbe:	78bb      	ldrb	r3, [r7, #2]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d102      	bne.n	8002cca <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_PCD_EP_Open+0x94>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e00e      	b.n	8002cf6 <HAL_PCD_EP_Open+0xb2>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68f9      	ldr	r1, [r7, #12]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f002 fdda 	bl	80058a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002cf4:	7afb      	ldrb	r3, [r7, #11]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	da0e      	bge.n	8002d30 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	705a      	strb	r2, [r3, #1]
 8002d2e:	e00e      	b.n	8002d4e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	f003 0207 	and.w	r2, r3, #7
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_PCD_EP_Close+0x6a>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e00e      	b.n	8002d86 <HAL_PCD_EP_Close+0x88>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 f952 	bl	8006020 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b086      	sub	sp, #24
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d9e:	7afb      	ldrb	r3, [r7, #11]
 8002da0:	f003 0207 	and.w	r2, r3, #7
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dce:	7afb      	ldrb	r3, [r7, #11]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6979      	ldr	r1, [r7, #20]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 fb09 	bl	80063f8 <USB_EPStartXfer>

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	f003 0207 	and.w	r2, r3, #7
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr

08002e1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e2e:	7afb      	ldrb	r3, [r7, #11]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4413      	add	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2200      	movs	r2, #0
 8002e62:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2201      	movs	r2, #1
 8002e68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e6a:	7afb      	ldrb	r3, [r7, #11]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6979      	ldr	r1, [r7, #20]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f003 fabb 	bl	80063f8 <USB_EPStartXfer>

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 0207 	and.w	r2, r3, #7
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d901      	bls.n	8002eaa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e04c      	b.n	8002f44 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	da0e      	bge.n	8002ed0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	705a      	strb	r2, [r3, #1]
 8002ece:	e00c      	b.n	8002eea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_PCD_EP_SetStall+0x7e>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e01c      	b.n	8002f44 <HAL_PCD_EP_SetStall+0xb8>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68f9      	ldr	r1, [r7, #12]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f004 fe1e 	bl	8007b5a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d108      	bne.n	8002f3a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002f32:	4619      	mov	r1, r3
 8002f34:	4610      	mov	r0, r2
 8002f36:	f004 ff43 	bl	8007dc0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	f003 020f 	and.w	r2, r3, #15
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d901      	bls.n	8002f6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e040      	b.n	8002fec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	da0e      	bge.n	8002f90 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	705a      	strb	r2, [r3, #1]
 8002f8e:	e00e      	b.n	8002fae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 0207 	and.w	r2, r3, #7
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_PCD_EP_ClrStall+0x82>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e00e      	b.n	8002fec <HAL_PCD_EP_ClrStall+0xa0>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68f9      	ldr	r1, [r7, #12]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f004 fe0c 	bl	8007bfa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b096      	sub	sp, #88	; 0x58
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ffc:	e3bf      	b.n	800377e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003006:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800300a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003018:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800301c:	2b00      	cmp	r3, #0
 800301e:	f040 8179 	bne.w	8003314 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003022:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	d152      	bne.n	80030d4 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	b29b      	uxth	r3, r3
 8003036:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800303a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303e:	81fb      	strh	r3, [r7, #14]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	89fb      	ldrh	r3, [r7, #14]
 8003046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800304a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800304e:	b29b      	uxth	r3, r3
 8003050:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3328      	adds	r3, #40	; 0x28
 8003056:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003060:	b29b      	uxth	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	3302      	adds	r3, #2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	4413      	add	r3, r2
 8003076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003082:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	441a      	add	r2, r3
 800308e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003090:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003092:	2100      	movs	r1, #0
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f006 fc92 	bl	80099be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 836b 	beq.w	800377e <PCD_EP_ISR_Handler+0x78a>
 80030a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f040 8366 	bne.w	800377e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	b292      	uxth	r2, r2
 80030c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030d2:	e354      	b.n	800377e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030da:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80030e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80030ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d034      	beq.n	800315c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	3306      	adds	r3, #6
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800311a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800312a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800312c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800312e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003130:	b29b      	uxth	r3, r3
 8003132:	f004 fe95 	bl	8007e60 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29a      	uxth	r2, r3
 800313e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003142:	4013      	ands	r3, r2
 8003144:	823b      	strh	r3, [r7, #16]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	8a3a      	ldrh	r2, [r7, #16]
 800314c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003150:	b292      	uxth	r2, r2
 8003152:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f006 fc05 	bl	8009964 <HAL_PCD_SetupStageCallback>
 800315a:	e310      	b.n	800377e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800315c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003160:	2b00      	cmp	r3, #0
 8003162:	f280 830c 	bge.w	800377e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	b29a      	uxth	r2, r3
 800316e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003172:	4013      	ands	r3, r2
 8003174:	83fb      	strh	r3, [r7, #30]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	8bfa      	ldrh	r2, [r7, #30]
 800317c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003180:	b292      	uxth	r2, r2
 8003182:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800318c:	b29b      	uxth	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	3306      	adds	r3, #6
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d019      	beq.n	80031ec <PCD_EP_ISR_Handler+0x1f8>
 80031b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d015      	beq.n	80031ec <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c6:	6959      	ldr	r1, [r3, #20]
 80031c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80031cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f004 fe45 	bl	8007e60 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80031d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	441a      	add	r2, r3
 80031e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80031e4:	2100      	movs	r1, #0
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f006 fbce 	bl	8009988 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80031f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 82bd 	bne.w	800377e <PCD_EP_ISR_Handler+0x78a>
 8003204:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003208:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800320c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003210:	f000 82b5 	beq.w	800377e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003222:	b29b      	uxth	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	4413      	add	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800323e:	b29a      	uxth	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	801a      	strh	r2, [r3, #0]
 8003244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	2b3e      	cmp	r3, #62	; 0x3e
 800324a:	d91d      	bls.n	8003288 <PCD_EP_ISR_Handler+0x294>
 800324c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	647b      	str	r3, [r7, #68]	; 0x44
 8003254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <PCD_EP_ISR_Handler+0x272>
 8003260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003262:	3b01      	subs	r3, #1
 8003264:	647b      	str	r3, [r7, #68]	; 0x44
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	b29a      	uxth	r2, r3
 800326c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800326e:	b29b      	uxth	r3, r3
 8003270:	029b      	lsls	r3, r3, #10
 8003272:	b29b      	uxth	r3, r3
 8003274:	4313      	orrs	r3, r2
 8003276:	b29b      	uxth	r3, r3
 8003278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800327c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003280:	b29a      	uxth	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	801a      	strh	r2, [r3, #0]
 8003286:	e026      	b.n	80032d6 <PCD_EP_ISR_Handler+0x2e2>
 8003288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10a      	bne.n	80032a6 <PCD_EP_ISR_Handler+0x2b2>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800329a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800329e:	b29a      	uxth	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	801a      	strh	r2, [r3, #0]
 80032a4:	e017      	b.n	80032d6 <PCD_EP_ISR_Handler+0x2e2>
 80032a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	085b      	lsrs	r3, r3, #1
 80032ac:	647b      	str	r3, [r7, #68]	; 0x44
 80032ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <PCD_EP_ISR_Handler+0x2cc>
 80032ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032bc:	3301      	adds	r3, #1
 80032be:	647b      	str	r3, [r7, #68]	; 0x44
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	029b      	lsls	r3, r3, #10
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	4313      	orrs	r3, r2
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	827b      	strh	r3, [r7, #18]
 80032e8:	8a7b      	ldrh	r3, [r7, #18]
 80032ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80032ee:	827b      	strh	r3, [r7, #18]
 80032f0:	8a7b      	ldrh	r3, [r7, #18]
 80032f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032f6:	827b      	strh	r3, [r7, #18]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	8a7b      	ldrh	r3, [r7, #18]
 80032fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330e:	b29b      	uxth	r3, r3
 8003310:	8013      	strh	r3, [r2, #0]
 8003312:	e234      	b.n	800377e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003328:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800332c:	2b00      	cmp	r3, #0
 800332e:	f280 80fc 	bge.w	800352a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	b29a      	uxth	r2, r3
 8003344:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003348:	4013      	ands	r3, r2
 800334a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003360:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003364:	b292      	uxth	r2, r2
 8003366:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003368:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	4413      	add	r3, r2
 800337c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800337e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003380:	7b1b      	ldrb	r3, [r3, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d125      	bne.n	80033d2 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800338e:	b29b      	uxth	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	3306      	adds	r3, #6
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80033b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 8092 	beq.w	80034e0 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c2:	6959      	ldr	r1, [r3, #20]
 80033c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c6:	88da      	ldrh	r2, [r3, #6]
 80033c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033cc:	f004 fd48 	bl	8007e60 <USB_ReadPMA>
 80033d0:	e086      	b.n	80034e0 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80033d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d4:	78db      	ldrb	r3, [r3, #3]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d10a      	bne.n	80033f0 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80033da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033de:	461a      	mov	r2, r3
 80033e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f9d9 	bl	800379a <HAL_PCD_EP_DB_Receive>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80033ee:	e077      	b.n	80034e0 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	441a      	add	r2, r3
 800341c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003430:	b29b      	uxth	r3, r3
 8003432:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d024      	beq.n	8003498 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003456:	b29b      	uxth	r3, r3
 8003458:	461a      	mov	r2, r3
 800345a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	3302      	adds	r3, #2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	4413      	add	r3, r2
 800346c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003476:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800347a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800347e:	2b00      	cmp	r3, #0
 8003480:	d02e      	beq.n	80034e0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003488:	6959      	ldr	r1, [r3, #20]
 800348a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348c:	891a      	ldrh	r2, [r3, #8]
 800348e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003492:	f004 fce5 	bl	8007e60 <USB_ReadPMA>
 8003496:	e023      	b.n	80034e0 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	3306      	adds	r3, #6
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80034c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d009      	beq.n	80034e0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d2:	6959      	ldr	r1, [r3, #20]
 80034d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d6:	895a      	ldrh	r2, [r3, #10]
 80034d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034dc:	f004 fcc0 	bl	8007e60 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80034e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034e8:	441a      	add	r2, r3
 80034ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80034ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034f6:	441a      	add	r2, r3
 80034f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80034fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <PCD_EP_ISR_Handler+0x51c>
 8003504:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	429a      	cmp	r2, r3
 800350e:	d206      	bcs.n	800351e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f006 fa36 	bl	8009988 <HAL_PCD_DataOutStageCallback>
 800351c:	e005      	b.n	800352a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003524:	4618      	mov	r0, r3
 8003526:	f002 ff67 	bl	80063f8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800352a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8123 	beq.w	800377e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003538:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	b29b      	uxth	r3, r3
 800355e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003566:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	441a      	add	r2, r3
 8003578:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800357c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003584:	b29b      	uxth	r3, r3
 8003586:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358a:	78db      	ldrb	r3, [r3, #3]
 800358c:	2b01      	cmp	r3, #1
 800358e:	f040 80a2 	bne.w	80036d6 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003594:	2200      	movs	r2, #0
 8003596:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359a:	7b1b      	ldrb	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8093 	beq.w	80036c8 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d046      	beq.n	800363c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b0:	785b      	ldrb	r3, [r3, #1]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d126      	bne.n	8003604 <PCD_EP_ISR_Handler+0x610>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	4413      	add	r3, r2
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
 80035ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	011a      	lsls	r2, r3, #4
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	4413      	add	r3, r2
 80035d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80035dc:	623b      	str	r3, [r7, #32]
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	801a      	strh	r2, [r3, #0]
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	801a      	strh	r2, [r3, #0]
 8003602:	e061      	b.n	80036c8 <PCD_EP_ISR_Handler+0x6d4>
 8003604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d15d      	bne.n	80036c8 <PCD_EP_ISR_Handler+0x6d4>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800361a:	b29b      	uxth	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	4413      	add	r3, r2
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	011a      	lsls	r2, r3, #4
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362c:	4413      	add	r3, r2
 800362e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28
 8003634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003636:	2200      	movs	r2, #0
 8003638:	801a      	strh	r2, [r3, #0]
 800363a:	e045      	b.n	80036c8 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d126      	bne.n	8003698 <PCD_EP_ISR_Handler+0x6a4>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003658:	b29b      	uxth	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365e:	4413      	add	r3, r2
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
 8003662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	011a      	lsls	r2, r3, #4
 8003668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366a:	4413      	add	r3, r2
 800366c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800367c:	b29a      	uxth	r2, r3
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	801a      	strh	r2, [r3, #0]
 8003682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800368c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003690:	b29a      	uxth	r2, r3
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	801a      	strh	r2, [r3, #0]
 8003696:	e017      	b.n	80036c8 <PCD_EP_ISR_Handler+0x6d4>
 8003698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369a:	785b      	ldrb	r3, [r3, #1]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d113      	bne.n	80036c8 <PCD_EP_ISR_Handler+0x6d4>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ae:	4413      	add	r3, r2
 80036b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	011a      	lsls	r2, r3, #4
 80036b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ba:	4413      	add	r3, r2
 80036bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c4:	2200      	movs	r2, #0
 80036c6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	4619      	mov	r1, r3
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f006 f975 	bl	80099be <HAL_PCD_DataInStageCallback>
 80036d4:	e053      	b.n	800377e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80036d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d146      	bne.n	8003770 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	3302      	adds	r3, #2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800370a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800370e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003716:	429a      	cmp	r2, r3
 8003718:	d907      	bls.n	800372a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800371a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003722:	1ad2      	subs	r2, r2, r3
 8003724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003726:	619a      	str	r2, [r3, #24]
 8003728:	e002      	b.n	8003730 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800372a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800372c:	2200      	movs	r2, #0
 800372e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	4619      	mov	r1, r3
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f006 f93d 	bl	80099be <HAL_PCD_DataInStageCallback>
 8003744:	e01b      	b.n	800377e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800374e:	441a      	add	r2, r3
 8003750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003752:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800375c:	441a      	add	r2, r3
 800375e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003760:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003768:	4618      	mov	r0, r3
 800376a:	f002 fe45 	bl	80063f8 <USB_EPStartXfer>
 800376e:	e006      	b.n	800377e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003770:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003774:	461a      	mov	r2, r3
 8003776:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f91b 	bl	80039b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003786:	b29b      	uxth	r3, r3
 8003788:	b21b      	sxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	f6ff ac37 	blt.w	8002ffe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3758      	adds	r7, #88	; 0x58
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b088      	sub	sp, #32
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	4613      	mov	r3, r2
 80037a6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d07e      	beq.n	80038b0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	3302      	adds	r3, #2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	699a      	ldr	r2, [r3, #24]
 80037e0:	8b7b      	ldrh	r3, [r7, #26]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d306      	bcc.n	80037f4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	8b7b      	ldrh	r3, [r7, #26]
 80037ec:	1ad2      	subs	r2, r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	619a      	str	r2, [r3, #24]
 80037f2:	e002      	b.n	80037fa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2200      	movs	r2, #0
 80037f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d123      	bne.n	800384a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381c:	833b      	strh	r3, [r7, #24]
 800381e:	8b3b      	ldrh	r3, [r7, #24]
 8003820:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003824:	833b      	strh	r3, [r7, #24]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	441a      	add	r2, r3
 8003834:	8b3b      	ldrh	r3, [r7, #24]
 8003836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800383a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800383e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003846:	b29b      	uxth	r3, r3
 8003848:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01f      	beq.n	8003894 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	82fb      	strh	r3, [r7, #22]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	441a      	add	r2, r3
 800387e:	8afb      	ldrh	r3, [r7, #22]
 8003880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800388c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003890:	b29b      	uxth	r3, r3
 8003892:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003894:	8b7b      	ldrh	r3, [r7, #26]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8087 	beq.w	80039aa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	6959      	ldr	r1, [r3, #20]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	891a      	ldrh	r2, [r3, #8]
 80038a8:	8b7b      	ldrh	r3, [r7, #26]
 80038aa:	f004 fad9 	bl	8007e60 <USB_ReadPMA>
 80038ae:	e07c      	b.n	80039aa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	3306      	adds	r3, #6
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	8b7b      	ldrh	r3, [r7, #26]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d306      	bcc.n	80038f2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	699a      	ldr	r2, [r3, #24]
 80038e8:	8b7b      	ldrh	r3, [r7, #26]
 80038ea:	1ad2      	subs	r2, r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	619a      	str	r2, [r3, #24]
 80038f0:	e002      	b.n	80038f8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2200      	movs	r2, #0
 80038f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d123      	bne.n	8003948 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	83fb      	strh	r3, [r7, #30]
 800391c:	8bfb      	ldrh	r3, [r7, #30]
 800391e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003922:	83fb      	strh	r3, [r7, #30]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	441a      	add	r2, r3
 8003932:	8bfb      	ldrh	r3, [r7, #30]
 8003934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800393c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003944:	b29b      	uxth	r3, r3
 8003946:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d11f      	bne.n	8003992 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	b29b      	uxth	r3, r3
 8003964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396c:	83bb      	strh	r3, [r7, #28]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	441a      	add	r2, r3
 800397c:	8bbb      	ldrh	r3, [r7, #28]
 800397e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800398a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800398e:	b29b      	uxth	r3, r3
 8003990:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003992:	8b7b      	ldrh	r3, [r7, #26]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	6959      	ldr	r1, [r3, #20]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	895a      	ldrh	r2, [r3, #10]
 80039a4:	8b7b      	ldrh	r3, [r7, #26]
 80039a6:	f004 fa5b 	bl	8007e60 <USB_ReadPMA>
    }
  }

  return count;
 80039aa:	8b7b      	ldrh	r3, [r7, #26]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b0a4      	sub	sp, #144	; 0x90
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	4613      	mov	r3, r2
 80039c0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 81dd 	beq.w	8003d88 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4413      	add	r3, r2
 80039e2:	3302      	adds	r3, #2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039f6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d907      	bls.n	8003a16 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003a0e:	1ad2      	subs	r2, r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	619a      	str	r2, [r3, #24]
 8003a14:	e002      	b.n	8003a1c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f040 80b9 	bne.w	8003b98 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	785b      	ldrb	r3, [r3, #1]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d126      	bne.n	8003a7c <HAL_PCD_EP_DB_Transmit+0xc8>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a42:	4413      	add	r3, r2
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	011a      	lsls	r2, r3, #4
 8003a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4e:	4413      	add	r3, r2
 8003a50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	801a      	strh	r2, [r3, #0]
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	801a      	strh	r2, [r3, #0]
 8003a7a:	e01a      	b.n	8003ab2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	785b      	ldrb	r3, [r3, #1]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d116      	bne.n	8003ab2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a98:	4413      	add	r3, r2
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	011a      	lsls	r2, r3, #4
 8003aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	2200      	movs	r2, #0
 8003ab0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	785b      	ldrb	r3, [r3, #1]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d126      	bne.n	8003b0e <HAL_PCD_EP_DB_Transmit+0x15a>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	011a      	lsls	r2, r3, #4
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	801a      	strh	r2, [r3, #0]
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	801a      	strh	r2, [r3, #0]
 8003b0c:	e017      	b.n	8003b3e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	785b      	ldrb	r3, [r3, #1]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d113      	bne.n	8003b3e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	4413      	add	r3, r2
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	011a      	lsls	r2, r3, #4
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	4413      	add	r3, r2
 8003b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b36:	623b      	str	r3, [r7, #32]
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	4619      	mov	r1, r3
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f005 ff3a 	bl	80099be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 82fc 	beq.w	800414e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b70:	82fb      	strh	r3, [r7, #22]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	441a      	add	r2, r3
 8003b80:	8afb      	ldrh	r3, [r7, #22]
 8003b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	8013      	strh	r3, [r2, #0]
 8003b96:	e2da      	b.n	800414e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d021      	beq.n	8003be6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	441a      	add	r2, r3
 8003bce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	f040 82ae 	bne.w	800414e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003bfa:	441a      	add	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003c08:	441a      	add	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6a1a      	ldr	r2, [r3, #32]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d30b      	bcc.n	8003c32 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6a1a      	ldr	r2, [r3, #32]
 8003c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c2a:	1ad2      	subs	r2, r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	621a      	str	r2, [r3, #32]
 8003c30:	e017      	b.n	8003c62 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d108      	bne.n	8003c4c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003c3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003c3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c4a:	e00a      	b.n	8003c62 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d165      	bne.n	8003d36 <HAL_PCD_EP_DB_Transmit+0x382>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7e:	4413      	add	r3, r2
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	011a      	lsls	r2, r3, #4
 8003c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	801a      	strh	r2, [r3, #0]
 8003ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ca8:	d91d      	bls.n	8003ce6 <HAL_PCD_EP_DB_Transmit+0x332>
 8003caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d102      	bne.n	8003cc4 <HAL_PCD_EP_DB_Transmit+0x310>
 8003cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	029b      	lsls	r3, r3, #10
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	801a      	strh	r2, [r3, #0]
 8003ce4:	e044      	b.n	8003d70 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <HAL_PCD_EP_DB_Transmit+0x350>
 8003cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	e035      	b.n	8003d70 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <HAL_PCD_EP_DB_Transmit+0x36a>
 8003d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	029b      	lsls	r3, r3, #10
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d32:	801a      	strh	r2, [r3, #0]
 8003d34:	e01c      	b.n	8003d70 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	785b      	ldrb	r3, [r3, #1]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d118      	bne.n	8003d70 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	647b      	str	r3, [r7, #68]	; 0x44
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d52:	4413      	add	r3, r2
 8003d54:	647b      	str	r3, [r7, #68]	; 0x44
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	011a      	lsls	r2, r3, #4
 8003d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5e:	4413      	add	r3, r2
 8003d60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d64:	643b      	str	r3, [r7, #64]	; 0x40
 8003d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	6959      	ldr	r1, [r3, #20]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	891a      	ldrh	r2, [r3, #8]
 8003d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	f004 f828 	bl	8007dd6 <USB_WritePMA>
 8003d86:	e1e2      	b.n	800414e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3306      	adds	r3, #6
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	699a      	ldr	r2, [r3, #24]
 8003db8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d307      	bcc.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	699a      	ldr	r2, [r3, #24]
 8003dc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003dc8:	1ad2      	subs	r2, r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	619a      	str	r2, [r3, #24]
 8003dce:	e002      	b.n	8003dd6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 80c0 	bne.w	8003f60 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d126      	bne.n	8003e36 <HAL_PCD_EP_DB_Transmit+0x482>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dfc:	4413      	add	r3, r2
 8003dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	011a      	lsls	r2, r3, #4
 8003e06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e08:	4413      	add	r3, r2
 8003e0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e1e:	801a      	strh	r2, [r3, #0]
 8003e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	e01a      	b.n	8003e6c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d116      	bne.n	8003e6c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	667b      	str	r3, [r7, #100]	; 0x64
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e52:	4413      	add	r3, r2
 8003e54:	667b      	str	r3, [r7, #100]	; 0x64
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	011a      	lsls	r2, r3, #4
 8003e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e5e:	4413      	add	r3, r2
 8003e60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e64:	663b      	str	r3, [r7, #96]	; 0x60
 8003e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e68:	2200      	movs	r2, #0
 8003e6a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	677b      	str	r3, [r7, #116]	; 0x74
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d12b      	bne.n	8003ed2 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	4413      	add	r3, r2
 8003e90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	011a      	lsls	r2, r3, #4
 8003e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ece:	801a      	strh	r2, [r3, #0]
 8003ed0:	e017      	b.n	8003f02 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	785b      	ldrb	r3, [r3, #1]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d113      	bne.n	8003f02 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ee8:	4413      	add	r3, r2
 8003eea:	677b      	str	r3, [r7, #116]	; 0x74
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	011a      	lsls	r2, r3, #4
 8003ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003efa:	673b      	str	r3, [r7, #112]	; 0x70
 8003efc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003efe:	2200      	movs	r2, #0
 8003f00:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	4619      	mov	r1, r3
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f005 fd58 	bl	80099be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f040 811a 	bne.w	800414e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f34:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	441a      	add	r2, r3
 8003f46:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	8013      	strh	r3, [r2, #0]
 8003f5e:	e0f6      	b.n	800414e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f60:	88fb      	ldrh	r3, [r7, #6]
 8003f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d121      	bne.n	8003fae <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	f040 80ca 	bne.w	800414e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003fc2:	441a      	add	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003fd0:	441a      	add	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6a1a      	ldr	r2, [r3, #32]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d30b      	bcc.n	8003ffa <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	6a1a      	ldr	r2, [r3, #32]
 8003fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ff2:	1ad2      	subs	r2, r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	621a      	str	r2, [r3, #32]
 8003ff8:	e017      	b.n	800402a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d108      	bne.n	8004014 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004002:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004012:	e00a      	b.n	800402a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2200      	movs	r2, #0
 8004020:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	657b      	str	r3, [r7, #84]	; 0x54
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	785b      	ldrb	r3, [r3, #1]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d165      	bne.n	8004104 <HAL_PCD_EP_DB_Transmit+0x750>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004046:	b29b      	uxth	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800404c:	4413      	add	r3, r2
 800404e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	011a      	lsls	r2, r3, #4
 8004056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004058:	4413      	add	r3, r2
 800405a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800405e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800406a:	b29a      	uxth	r2, r3
 800406c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800406e:	801a      	strh	r2, [r3, #0]
 8004070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004074:	2b3e      	cmp	r3, #62	; 0x3e
 8004076:	d91d      	bls.n	80040b4 <HAL_PCD_EP_DB_Transmit+0x700>
 8004078:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004080:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <HAL_PCD_EP_DB_Transmit+0x6de>
 800408c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800408e:	3b01      	subs	r3, #1
 8004090:	66bb      	str	r3, [r7, #104]	; 0x68
 8004092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	b29a      	uxth	r2, r3
 8004098:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800409a:	b29b      	uxth	r3, r3
 800409c:	029b      	lsls	r3, r3, #10
 800409e:	b29b      	uxth	r3, r3
 80040a0:	4313      	orrs	r3, r2
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040b0:	801a      	strh	r2, [r3, #0]
 80040b2:	e041      	b.n	8004138 <HAL_PCD_EP_DB_Transmit+0x784>
 80040b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x71e>
 80040bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ce:	801a      	strh	r2, [r3, #0]
 80040d0:	e032      	b.n	8004138 <HAL_PCD_EP_DB_Transmit+0x784>
 80040d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_PCD_EP_DB_Transmit+0x738>
 80040e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040e8:	3301      	adds	r3, #1
 80040ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	029b      	lsls	r3, r3, #10
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	4313      	orrs	r3, r2
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004100:	801a      	strh	r2, [r3, #0]
 8004102:	e019      	b.n	8004138 <HAL_PCD_EP_DB_Transmit+0x784>
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d115      	bne.n	8004138 <HAL_PCD_EP_DB_Transmit+0x784>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004114:	b29b      	uxth	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411a:	4413      	add	r3, r2
 800411c:	657b      	str	r3, [r7, #84]	; 0x54
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	011a      	lsls	r2, r3, #4
 8004124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004126:	4413      	add	r3, r2
 8004128:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800412c:	653b      	str	r3, [r7, #80]	; 0x50
 800412e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004132:	b29a      	uxth	r2, r3
 8004134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004136:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	6959      	ldr	r1, [r3, #20]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	895a      	ldrh	r2, [r3, #10]
 8004144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004148:	b29b      	uxth	r3, r3
 800414a:	f003 fe44 	bl	8007dd6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29b      	uxth	r3, r3
 8004160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004168:	82bb      	strh	r3, [r7, #20]
 800416a:	8abb      	ldrh	r3, [r7, #20]
 800416c:	f083 0310 	eor.w	r3, r3, #16
 8004170:	82bb      	strh	r3, [r7, #20]
 8004172:	8abb      	ldrh	r3, [r7, #20]
 8004174:	f083 0320 	eor.w	r3, r3, #32
 8004178:	82bb      	strh	r3, [r7, #20]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	441a      	add	r2, r3
 8004188:	8abb      	ldrh	r3, [r7, #20]
 800418a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800418e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419a:	b29b      	uxth	r3, r3
 800419c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3790      	adds	r7, #144	; 0x90
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	817b      	strh	r3, [r7, #10]
 80041b6:	4613      	mov	r3, r2
 80041b8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80041ba:	897b      	ldrh	r3, [r7, #10]
 80041bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c6:	897b      	ldrh	r3, [r7, #10]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4413      	add	r3, r2
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e009      	b.n	80041f2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041de:	897a      	ldrh	r2, [r7, #10]
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80041f2:	893b      	ldrh	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d107      	bne.n	8004208 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2200      	movs	r2, #0
 80041fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	b29a      	uxth	r2, r3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	80da      	strh	r2, [r3, #6]
 8004206:	e00b      	b.n	8004220 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2201      	movs	r2, #1
 800420c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	b29a      	uxth	r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	b29a      	uxth	r2, r3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e272      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 8087 	beq.w	800435a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800424c:	4b92      	ldr	r3, [pc, #584]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b04      	cmp	r3, #4
 8004256:	d00c      	beq.n	8004272 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004258:	4b8f      	ldr	r3, [pc, #572]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b08      	cmp	r3, #8
 8004262:	d112      	bne.n	800428a <HAL_RCC_OscConfig+0x5e>
 8004264:	4b8c      	ldr	r3, [pc, #560]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004270:	d10b      	bne.n	800428a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004272:	4b89      	ldr	r3, [pc, #548]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d06c      	beq.n	8004358 <HAL_RCC_OscConfig+0x12c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d168      	bne.n	8004358 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e24c      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x76>
 8004294:	4b80      	ldr	r3, [pc, #512]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a7f      	ldr	r2, [pc, #508]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800429a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	e02e      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x98>
 80042aa:	4b7b      	ldr	r3, [pc, #492]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a7a      	ldr	r2, [pc, #488]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	4b78      	ldr	r3, [pc, #480]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a77      	ldr	r2, [pc, #476]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e01d      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0xbc>
 80042ce:	4b72      	ldr	r3, [pc, #456]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a71      	ldr	r2, [pc, #452]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b6f      	ldr	r3, [pc, #444]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6e      	ldr	r2, [pc, #440]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e00b      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042e8:	4b6b      	ldr	r3, [pc, #428]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a6a      	ldr	r2, [pc, #424]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b68      	ldr	r3, [pc, #416]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a67      	ldr	r2, [pc, #412]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fd f9ce 	bl	80016a8 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004310:	f7fd f9ca 	bl	80016a8 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e200      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b5d      	ldr	r3, [pc, #372]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0xe4>
 800432e:	e014      	b.n	800435a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fd f9ba 	bl	80016a8 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004338:	f7fd f9b6 	bl	80016a8 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1ec      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	4b53      	ldr	r3, [pc, #332]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x10c>
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d063      	beq.n	800442e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004366:	4b4c      	ldr	r3, [pc, #304]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004372:	4b49      	ldr	r3, [pc, #292]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b08      	cmp	r3, #8
 800437c:	d11c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x18c>
 800437e:	4b46      	ldr	r3, [pc, #280]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d116      	bne.n	80043b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	4b43      	ldr	r3, [pc, #268]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_RCC_OscConfig+0x176>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e1c0      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b3d      	ldr	r3, [pc, #244]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4939      	ldr	r1, [pc, #228]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	e03a      	b.n	800442e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c0:	4b36      	ldr	r3, [pc, #216]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fd f96f 	bl	80016a8 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ce:	f7fd f96b 	bl	80016a8 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e1a1      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b2a      	ldr	r3, [pc, #168]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4927      	ldr	r1, [pc, #156]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	e015      	b.n	800442e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004402:	4b26      	ldr	r3, [pc, #152]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fd f94e 	bl	80016a8 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004410:	f7fd f94a 	bl	80016a8 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e180      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d03a      	beq.n	80044b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d019      	beq.n	8004476 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004448:	f7fd f92e 	bl	80016a8 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004450:	f7fd f92a 	bl	80016a8 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e160      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800446e:	2001      	movs	r0, #1
 8004470:	f000 fad0 	bl	8004a14 <RCC_Delay>
 8004474:	e01c      	b.n	80044b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447c:	f7fd f914 	bl	80016a8 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004482:	e00f      	b.n	80044a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004484:	f7fd f910 	bl	80016a8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d908      	bls.n	80044a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e146      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	42420000 	.word	0x42420000
 80044a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a4:	4b92      	ldr	r3, [pc, #584]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e9      	bne.n	8004484 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a6 	beq.w	800460a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044be:	2300      	movs	r3, #0
 80044c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c2:	4b8b      	ldr	r3, [pc, #556]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10d      	bne.n	80044ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	4b88      	ldr	r3, [pc, #544]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	4a87      	ldr	r2, [pc, #540]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d8:	61d3      	str	r3, [r2, #28]
 80044da:	4b85      	ldr	r3, [pc, #532]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ea:	4b82      	ldr	r3, [pc, #520]	; (80046f4 <HAL_RCC_OscConfig+0x4c8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d118      	bne.n	8004528 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f6:	4b7f      	ldr	r3, [pc, #508]	; (80046f4 <HAL_RCC_OscConfig+0x4c8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a7e      	ldr	r2, [pc, #504]	; (80046f4 <HAL_RCC_OscConfig+0x4c8>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004502:	f7fd f8d1 	bl	80016a8 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fd f8cd 	bl	80016a8 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b64      	cmp	r3, #100	; 0x64
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e103      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	4b75      	ldr	r3, [pc, #468]	; (80046f4 <HAL_RCC_OscConfig+0x4c8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x312>
 8004530:	4b6f      	ldr	r3, [pc, #444]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	4a6e      	ldr	r2, [pc, #440]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6213      	str	r3, [r2, #32]
 800453c:	e02d      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0x334>
 8004546:	4b6a      	ldr	r3, [pc, #424]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4a69      	ldr	r2, [pc, #420]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	6213      	str	r3, [r2, #32]
 8004552:	4b67      	ldr	r3, [pc, #412]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	4a66      	ldr	r2, [pc, #408]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	f023 0304 	bic.w	r3, r3, #4
 800455c:	6213      	str	r3, [r2, #32]
 800455e:	e01c      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b05      	cmp	r3, #5
 8004566:	d10c      	bne.n	8004582 <HAL_RCC_OscConfig+0x356>
 8004568:	4b61      	ldr	r3, [pc, #388]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4a60      	ldr	r2, [pc, #384]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800456e:	f043 0304 	orr.w	r3, r3, #4
 8004572:	6213      	str	r3, [r2, #32]
 8004574:	4b5e      	ldr	r3, [pc, #376]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	4a5d      	ldr	r2, [pc, #372]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6213      	str	r3, [r2, #32]
 8004580:	e00b      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 8004582:	4b5b      	ldr	r3, [pc, #364]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	4a5a      	ldr	r2, [pc, #360]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6213      	str	r3, [r2, #32]
 800458e:	4b58      	ldr	r3, [pc, #352]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4a57      	ldr	r2, [pc, #348]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d015      	beq.n	80045ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a2:	f7fd f881 	bl	80016a8 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	e00a      	b.n	80045c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fd f87d 	bl	80016a8 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e0b1      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c0:	4b4b      	ldr	r3, [pc, #300]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ee      	beq.n	80045aa <HAL_RCC_OscConfig+0x37e>
 80045cc:	e014      	b.n	80045f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fd f86b 	bl	80016a8 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d4:	e00a      	b.n	80045ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fd f867 	bl	80016a8 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e09b      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ec:	4b40      	ldr	r3, [pc, #256]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1ee      	bne.n	80045d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d105      	bne.n	800460a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fe:	4b3c      	ldr	r3, [pc, #240]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	4a3b      	ldr	r2, [pc, #236]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004608:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8087 	beq.w	8004722 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004614:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 030c 	and.w	r3, r3, #12
 800461c:	2b08      	cmp	r3, #8
 800461e:	d061      	beq.n	80046e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d146      	bne.n	80046b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004628:	4b33      	ldr	r3, [pc, #204]	; (80046f8 <HAL_RCC_OscConfig+0x4cc>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7fd f83b 	bl	80016a8 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004636:	f7fd f837 	bl	80016a8 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e06d      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004648:	4b29      	ldr	r3, [pc, #164]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d108      	bne.n	8004670 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800465e:	4b24      	ldr	r3, [pc, #144]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	4921      	ldr	r1, [pc, #132]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004670:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a19      	ldr	r1, [r3, #32]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	430b      	orrs	r3, r1
 8004682:	491b      	ldr	r1, [pc, #108]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004688:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <HAL_RCC_OscConfig+0x4cc>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468e:	f7fd f80b 	bl	80016a8 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004696:	f7fd f807 	bl	80016a8 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e03d      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046a8:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x46a>
 80046b4:	e035      	b.n	8004722 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <HAL_RCC_OscConfig+0x4cc>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046bc:	f7fc fff4 	bl	80016a8 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fc fff0 	bl	80016a8 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e026      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x498>
 80046e2:	e01e      	b.n	8004722 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d107      	bne.n	80046fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e019      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40007000 	.word	0x40007000
 80046f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_OscConfig+0x500>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	429a      	cmp	r2, r3
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d001      	beq.n	8004722 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40021000 	.word	0x40021000

08004730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0d0      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004744:	4b6a      	ldr	r3, [pc, #424]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d910      	bls.n	8004774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b67      	ldr	r3, [pc, #412]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 0207 	bic.w	r2, r3, #7
 800475a:	4965      	ldr	r1, [pc, #404]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b63      	ldr	r3, [pc, #396]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0b8      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d020      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800478c:	4b59      	ldr	r3, [pc, #356]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a58      	ldr	r2, [pc, #352]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004796:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a4:	4b53      	ldr	r3, [pc, #332]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a52      	ldr	r2, [pc, #328]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b0:	4b50      	ldr	r3, [pc, #320]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	494d      	ldr	r1, [pc, #308]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d040      	beq.n	8004850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d107      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	4b47      	ldr	r3, [pc, #284]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d115      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e07f      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d107      	bne.n	80047fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ee:	4b41      	ldr	r3, [pc, #260]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e073      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fe:	4b3d      	ldr	r3, [pc, #244]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e06b      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800480e:	4b39      	ldr	r3, [pc, #228]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f023 0203 	bic.w	r2, r3, #3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	4936      	ldr	r1, [pc, #216]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	4313      	orrs	r3, r2
 800481e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004820:	f7fc ff42 	bl	80016a8 <HAL_GetTick>
 8004824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	e00a      	b.n	800483e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004828:	f7fc ff3e 	bl	80016a8 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e053      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483e:	4b2d      	ldr	r3, [pc, #180]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 020c 	and.w	r2, r3, #12
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	429a      	cmp	r2, r3
 800484e:	d1eb      	bne.n	8004828 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004850:	4b27      	ldr	r3, [pc, #156]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d210      	bcs.n	8004880 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 0207 	bic.w	r2, r3, #7
 8004866:	4922      	ldr	r1, [pc, #136]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e032      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800488c:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4916      	ldr	r1, [pc, #88]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800489a:	4313      	orrs	r3, r2
 800489c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	490e      	ldr	r1, [pc, #56]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048be:	f000 f821 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 80048c2:	4602      	mov	r2, r0
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	490a      	ldr	r1, [pc, #40]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80048d0:	5ccb      	ldrb	r3, [r1, r3]
 80048d2:	fa22 f303 	lsr.w	r3, r2, r3
 80048d6:	4a09      	ldr	r2, [pc, #36]	; (80048fc <HAL_RCC_ClockConfig+0x1cc>)
 80048d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <HAL_RCC_ClockConfig+0x1d0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fc fea0 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40022000 	.word	0x40022000
 80048f4:	40021000 	.word	0x40021000
 80048f8:	08009f24 	.word	0x08009f24
 80048fc:	20000000 	.word	0x20000000
 8004900:	20000004 	.word	0x20000004

08004904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800491e:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <HAL_RCC_GetSysClockFreq+0x94>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b04      	cmp	r3, #4
 800492c:	d002      	beq.n	8004934 <HAL_RCC_GetSysClockFreq+0x30>
 800492e:	2b08      	cmp	r3, #8
 8004930:	d003      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0x36>
 8004932:	e027      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004934:	4b19      	ldr	r3, [pc, #100]	; (800499c <HAL_RCC_GetSysClockFreq+0x98>)
 8004936:	613b      	str	r3, [r7, #16]
      break;
 8004938:	e027      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	0c9b      	lsrs	r3, r3, #18
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004944:	5cd3      	ldrb	r3, [r2, r3]
 8004946:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d010      	beq.n	8004974 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004952:	4b11      	ldr	r3, [pc, #68]	; (8004998 <HAL_RCC_GetSysClockFreq+0x94>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	0c5b      	lsrs	r3, r3, #17
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	4a11      	ldr	r2, [pc, #68]	; (80049a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800495e:	5cd3      	ldrb	r3, [r2, r3]
 8004960:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a0d      	ldr	r2, [pc, #52]	; (800499c <HAL_RCC_GetSysClockFreq+0x98>)
 8004966:	fb03 f202 	mul.w	r2, r3, r2
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	e004      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a0c      	ldr	r2, [pc, #48]	; (80049a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004978:	fb02 f303 	mul.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	613b      	str	r3, [r7, #16]
      break;
 8004982:	e002      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004984:	4b09      	ldr	r3, [pc, #36]	; (80049ac <HAL_RCC_GetSysClockFreq+0xa8>)
 8004986:	613b      	str	r3, [r7, #16]
      break;
 8004988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800498a:	693b      	ldr	r3, [r7, #16]
}
 800498c:	4618      	mov	r0, r3
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	00f42400 	.word	0x00f42400
 80049a0:	08009f3c 	.word	0x08009f3c
 80049a4:	08009f4c 	.word	0x08009f4c
 80049a8:	003d0900 	.word	0x003d0900
 80049ac:	007a1200 	.word	0x007a1200

080049b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b4:	4b02      	ldr	r3, [pc, #8]	; (80049c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80049b6:	681b      	ldr	r3, [r3, #0]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	20000000 	.word	0x20000000

080049c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049c8:	f7ff fff2 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4903      	ldr	r1, [pc, #12]	; (80049e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40021000 	.word	0x40021000
 80049e8:	08009f34 	.word	0x08009f34

080049ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049f0:	f7ff ffde 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	0adb      	lsrs	r3, r3, #11
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	4903      	ldr	r1, [pc, #12]	; (8004a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	08009f34 	.word	0x08009f34

08004a14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <RCC_Delay+0x34>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <RCC_Delay+0x38>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	0a5b      	lsrs	r3, r3, #9
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a30:	bf00      	nop
  }
  while (Delay --);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1e5a      	subs	r2, r3, #1
 8004a36:	60fa      	str	r2, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f9      	bne.n	8004a30 <RCC_Delay+0x1c>
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	20000000 	.word	0x20000000
 8004a4c:	10624dd3 	.word	0x10624dd3

08004a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d07d      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a70:	4b4f      	ldr	r3, [pc, #316]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10d      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a7c:	4b4c      	ldr	r3, [pc, #304]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	4a4b      	ldr	r2, [pc, #300]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a86:	61d3      	str	r3, [r2, #28]
 8004a88:	4b49      	ldr	r3, [pc, #292]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a90:	60bb      	str	r3, [r7, #8]
 8004a92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a94:	2301      	movs	r3, #1
 8004a96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a98:	4b46      	ldr	r3, [pc, #280]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d118      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aa4:	4b43      	ldr	r3, [pc, #268]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a42      	ldr	r2, [pc, #264]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ab0:	f7fc fdfa 	bl	80016a8 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab6:	e008      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab8:	f7fc fdf6 	bl	80016a8 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	; 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e06d      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aca:	4b3a      	ldr	r3, [pc, #232]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ad6:	4b36      	ldr	r3, [pc, #216]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ade:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d02e      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d027      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004af4:	4b2e      	ldr	r3, [pc, #184]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004afe:	4b2e      	ldr	r3, [pc, #184]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b04:	4b2c      	ldr	r3, [pc, #176]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b0a:	4a29      	ldr	r2, [pc, #164]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d014      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1a:	f7fc fdc5 	bl	80016a8 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b20:	e00a      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b22:	f7fc fdc1 	bl	80016a8 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e036      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b38:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ee      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b44:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4917      	ldr	r1, [pc, #92]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d105      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b5c:	4b14      	ldr	r3, [pc, #80]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	4a13      	ldr	r2, [pc, #76]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b74:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	490b      	ldr	r1, [pc, #44]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b92:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	4904      	ldr	r1, [pc, #16]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40007000 	.word	0x40007000
 8004bb8:	42420440 	.word	0x42420440

08004bbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61fb      	str	r3, [r7, #28]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	f200 8089 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d045      	beq.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d074      	beq.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004bf2:	e081      	b.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 8004bf4:	4b45      	ldr	r3, [pc, #276]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004bfa:	4b44      	ldr	r3, [pc, #272]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d07a      	beq.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	0c9b      	lsrs	r3, r3, #18
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	4a40      	ldr	r2, [pc, #256]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c10:	5cd3      	ldrb	r3, [r2, r3]
 8004c12:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d015      	beq.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c1e:	4b3b      	ldr	r3, [pc, #236]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	0c5b      	lsrs	r3, r3, #17
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	4a3a      	ldr	r2, [pc, #232]	; (8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004c2a:	5cd3      	ldrb	r3, [r2, r3]
 8004c2c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00d      	beq.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004c38:	4a37      	ldr	r2, [pc, #220]	; (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	fb02 f303 	mul.w	r3, r2, r3
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	e004      	b.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4a33      	ldr	r2, [pc, #204]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004c54:	4b2d      	ldr	r3, [pc, #180]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c60:	d102      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	61bb      	str	r3, [r7, #24]
      break;
 8004c66:	e049      	b.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	4a2c      	ldr	r2, [pc, #176]	; (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	61bb      	str	r3, [r7, #24]
      break;
 8004c76:	e041      	b.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8004c78:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c88:	d108      	bne.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004c94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	e01e      	b.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca6:	d109      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004ca8:	4b18      	ldr	r3, [pc, #96]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004cb4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	e00e      	b.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cc6:	d11b      	bne.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004cc8:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d015      	beq.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 8004cd4:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004cd6:	61bb      	str	r3, [r7, #24]
      break;
 8004cd8:	e012      	b.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004cda:	e011      	b.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004cdc:	f7ff fe86 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	0b9b      	lsrs	r3, r3, #14
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	3301      	adds	r3, #1
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	61bb      	str	r3, [r7, #24]
      break;
 8004cf6:	e004      	b.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8004cf8:	bf00      	nop
 8004cfa:	e002      	b.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8004cfc:	bf00      	nop
 8004cfe:	e000      	b.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8004d00:	bf00      	nop
    }
  }
  return (frequency);
 8004d02:	69bb      	ldr	r3, [r7, #24]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3720      	adds	r7, #32
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	08009f50 	.word	0x08009f50
 8004d14:	08009f60 	.word	0x08009f60
 8004d18:	00f42400 	.word	0x00f42400
 8004d1c:	003d0900 	.word	0x003d0900
 8004d20:	aaaaaaab 	.word	0xaaaaaaab
 8004d24:	0001e848 	.word	0x0001e848

08004d28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e041      	b.n	8004dbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fc fadc 	bl	800130c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3304      	adds	r3, #4
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f000 f992 	bl	8005090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d109      	bne.n	8004dec <HAL_TIM_PWM_Start+0x24>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	bf14      	ite	ne
 8004de4:	2301      	movne	r3, #1
 8004de6:	2300      	moveq	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	e022      	b.n	8004e32 <HAL_TIM_PWM_Start+0x6a>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d109      	bne.n	8004e06 <HAL_TIM_PWM_Start+0x3e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	bf14      	ite	ne
 8004dfe:	2301      	movne	r3, #1
 8004e00:	2300      	moveq	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	e015      	b.n	8004e32 <HAL_TIM_PWM_Start+0x6a>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d109      	bne.n	8004e20 <HAL_TIM_PWM_Start+0x58>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	bf14      	ite	ne
 8004e18:	2301      	movne	r3, #1
 8004e1a:	2300      	moveq	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	e008      	b.n	8004e32 <HAL_TIM_PWM_Start+0x6a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	bf14      	ite	ne
 8004e2c:	2301      	movne	r3, #1
 8004e2e:	2300      	moveq	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e05e      	b.n	8004ef8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d104      	bne.n	8004e4a <HAL_TIM_PWM_Start+0x82>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e48:	e013      	b.n	8004e72 <HAL_TIM_PWM_Start+0xaa>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_PWM_Start+0x92>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e58:	e00b      	b.n	8004e72 <HAL_TIM_PWM_Start+0xaa>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d104      	bne.n	8004e6a <HAL_TIM_PWM_Start+0xa2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e68:	e003      	b.n	8004e72 <HAL_TIM_PWM_Start+0xaa>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2201      	movs	r2, #1
 8004e78:	6839      	ldr	r1, [r7, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 faf2 	bl	8005464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1e      	ldr	r2, [pc, #120]	; (8004f00 <HAL_TIM_PWM_Start+0x138>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d107      	bne.n	8004e9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <HAL_TIM_PWM_Start+0x138>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00e      	beq.n	8004ec2 <HAL_TIM_PWM_Start+0xfa>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eac:	d009      	beq.n	8004ec2 <HAL_TIM_PWM_Start+0xfa>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a14      	ldr	r2, [pc, #80]	; (8004f04 <HAL_TIM_PWM_Start+0x13c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <HAL_TIM_PWM_Start+0xfa>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a12      	ldr	r2, [pc, #72]	; (8004f08 <HAL_TIM_PWM_Start+0x140>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d111      	bne.n	8004ee6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b06      	cmp	r3, #6
 8004ed2:	d010      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee4:	e007      	b.n	8004ef6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0201 	orr.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40012c00 	.word	0x40012c00
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800

08004f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e0ae      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	f200 809f 	bhi.w	8005078 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f75 	.word	0x08004f75
 8004f44:	08005079 	.word	0x08005079
 8004f48:	08005079 	.word	0x08005079
 8004f4c:	08005079 	.word	0x08005079
 8004f50:	08004fb5 	.word	0x08004fb5
 8004f54:	08005079 	.word	0x08005079
 8004f58:	08005079 	.word	0x08005079
 8004f5c:	08005079 	.word	0x08005079
 8004f60:	08004ff7 	.word	0x08004ff7
 8004f64:	08005079 	.word	0x08005079
 8004f68:	08005079 	.word	0x08005079
 8004f6c:	08005079 	.word	0x08005079
 8004f70:	08005037 	.word	0x08005037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 f8ea 	bl	8005154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0208 	orr.w	r2, r2, #8
 8004f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0204 	bic.w	r2, r2, #4
 8004f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6999      	ldr	r1, [r3, #24]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	619a      	str	r2, [r3, #24]
      break;
 8004fb2:	e064      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f930 	bl	8005220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6999      	ldr	r1, [r3, #24]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	021a      	lsls	r2, r3, #8
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	619a      	str	r2, [r3, #24]
      break;
 8004ff4:	e043      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f979 	bl	80052f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0208 	orr.w	r2, r2, #8
 8005010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0204 	bic.w	r2, r2, #4
 8005020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69d9      	ldr	r1, [r3, #28]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	61da      	str	r2, [r3, #28]
      break;
 8005034:	e023      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	4618      	mov	r0, r3
 800503e:	f000 f9c3 	bl	80053c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69d9      	ldr	r1, [r3, #28]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	021a      	lsls	r2, r3, #8
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	61da      	str	r2, [r3, #28]
      break;
 8005076:	e002      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
      break;
 800507c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005086:	7dfb      	ldrb	r3, [r7, #23]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a29      	ldr	r2, [pc, #164]	; (8005148 <TIM_Base_SetConfig+0xb8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00b      	beq.n	80050c0 <TIM_Base_SetConfig+0x30>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ae:	d007      	beq.n	80050c0 <TIM_Base_SetConfig+0x30>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a26      	ldr	r2, [pc, #152]	; (800514c <TIM_Base_SetConfig+0xbc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_Base_SetConfig+0x30>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a25      	ldr	r2, [pc, #148]	; (8005150 <TIM_Base_SetConfig+0xc0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d108      	bne.n	80050d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a1c      	ldr	r2, [pc, #112]	; (8005148 <TIM_Base_SetConfig+0xb8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <TIM_Base_SetConfig+0x62>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e0:	d007      	beq.n	80050f2 <TIM_Base_SetConfig+0x62>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a19      	ldr	r2, [pc, #100]	; (800514c <TIM_Base_SetConfig+0xbc>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_Base_SetConfig+0x62>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a18      	ldr	r2, [pc, #96]	; (8005150 <TIM_Base_SetConfig+0xc0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d108      	bne.n	8005104 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a07      	ldr	r2, [pc, #28]	; (8005148 <TIM_Base_SetConfig+0xb8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d103      	bne.n	8005138 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	615a      	str	r2, [r3, #20]
}
 800513e:	bf00      	nop
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40000400 	.word	0x40000400
 8005150:	40000800 	.word	0x40000800

08005154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f023 0201 	bic.w	r2, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0303 	bic.w	r3, r3, #3
 800518a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f023 0302 	bic.w	r3, r3, #2
 800519c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a1c      	ldr	r2, [pc, #112]	; (800521c <TIM_OC1_SetConfig+0xc8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d10c      	bne.n	80051ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f023 0308 	bic.w	r3, r3, #8
 80051b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f023 0304 	bic.w	r3, r3, #4
 80051c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a13      	ldr	r2, [pc, #76]	; (800521c <TIM_OC1_SetConfig+0xc8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d111      	bne.n	80051f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	621a      	str	r2, [r3, #32]
}
 8005210:	bf00      	nop
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40012c00 	.word	0x40012c00

08005220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	f023 0210 	bic.w	r2, r3, #16
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f023 0320 	bic.w	r3, r3, #32
 800526a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a1d      	ldr	r2, [pc, #116]	; (80052f0 <TIM_OC2_SetConfig+0xd0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d10d      	bne.n	800529c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800529a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a14      	ldr	r2, [pc, #80]	; (80052f0 <TIM_OC2_SetConfig+0xd0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d113      	bne.n	80052cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr
 80052f0:	40012c00 	.word	0x40012c00

080052f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0303 	bic.w	r3, r3, #3
 800532a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800533c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a1d      	ldr	r2, [pc, #116]	; (80053c4 <TIM_OC3_SetConfig+0xd0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d10d      	bne.n	800536e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800536c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a14      	ldr	r2, [pc, #80]	; (80053c4 <TIM_OC3_SetConfig+0xd0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d113      	bne.n	800539e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800537c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	621a      	str	r2, [r3, #32]
}
 80053b8:	bf00      	nop
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40012c00 	.word	0x40012c00

080053c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	021b      	lsls	r3, r3, #8
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	031b      	lsls	r3, r3, #12
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a0f      	ldr	r2, [pc, #60]	; (8005460 <TIM_OC4_SetConfig+0x98>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d109      	bne.n	800543c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800542e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	019b      	lsls	r3, r3, #6
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr
 8005460:	40012c00 	.word	0x40012c00

08005464 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 031f 	and.w	r3, r3, #31
 8005476:	2201      	movs	r2, #1
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a1a      	ldr	r2, [r3, #32]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	43db      	mvns	r3, r3
 8005486:	401a      	ands	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a1a      	ldr	r2, [r3, #32]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	fa01 f303 	lsl.w	r3, r1, r3
 800549c:	431a      	orrs	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e046      	b.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a16      	ldr	r2, [pc, #88]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00e      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005510:	d009      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a12      	ldr	r2, [pc, #72]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d004      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a10      	ldr	r2, [pc, #64]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d10c      	bne.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800552c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	4313      	orrs	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800

08005568 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005580:	2302      	movs	r3, #2
 8005582:	e03d      	b.n	8005600 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr

0800560a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e042      	b.n	80056a2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7fb ff23 	bl	800147c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2224      	movs	r2, #36	; 0x24
 800563a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800564c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f82c 	bl	80056ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005662:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005672:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005682:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80056e6:	f023 030c 	bic.w	r3, r3, #12
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6812      	ldr	r2, [r2, #0]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	430b      	orrs	r3, r1
 80056f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a2c      	ldr	r2, [pc, #176]	; (80057c0 <UART_SetConfig+0x114>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d103      	bne.n	800571c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005714:	f7ff f96a 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	e002      	b.n	8005722 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800571c:	f7ff f952 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8005720:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	009a      	lsls	r2, r3, #2
 800572c:	441a      	add	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	fbb2 f3f3 	udiv	r3, r2, r3
 8005738:	4a22      	ldr	r2, [pc, #136]	; (80057c4 <UART_SetConfig+0x118>)
 800573a:	fba2 2303 	umull	r2, r3, r2, r3
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	0119      	lsls	r1, r3, #4
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	009a      	lsls	r2, r3, #2
 800574c:	441a      	add	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	fbb2 f2f3 	udiv	r2, r2, r3
 8005758:	4b1a      	ldr	r3, [pc, #104]	; (80057c4 <UART_SetConfig+0x118>)
 800575a:	fba3 0302 	umull	r0, r3, r3, r2
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	2064      	movs	r0, #100	; 0x64
 8005762:	fb00 f303 	mul.w	r3, r0, r3
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	3332      	adds	r3, #50	; 0x32
 800576c:	4a15      	ldr	r2, [pc, #84]	; (80057c4 <UART_SetConfig+0x118>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005778:	4419      	add	r1, r3
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009a      	lsls	r2, r3, #2
 8005784:	441a      	add	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005790:	4b0c      	ldr	r3, [pc, #48]	; (80057c4 <UART_SetConfig+0x118>)
 8005792:	fba3 0302 	umull	r0, r3, r3, r2
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	2064      	movs	r0, #100	; 0x64
 800579a:	fb00 f303 	mul.w	r3, r0, r3
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	3332      	adds	r3, #50	; 0x32
 80057a4:	4a07      	ldr	r2, [pc, #28]	; (80057c4 <UART_SetConfig+0x118>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	f003 020f 	and.w	r2, r3, #15
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	440a      	add	r2, r1
 80057b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80057b8:	bf00      	nop
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40013800 	.word	0x40013800
 80057c4:	51eb851f 	.word	0x51eb851f

080057c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057c8:	b084      	sub	sp, #16
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	f107 0014 	add.w	r0, r7, #20
 80057d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	b004      	add	sp, #16
 80057e6:	4770      	bx	lr

080057e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80057fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800581c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005820:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	b29b      	uxth	r3, r3
 800582e:	43db      	mvns	r3, r3
 8005830:	b29b      	uxth	r3, r3
 8005832:	4013      	ands	r3, r2
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005860:	b084      	sub	sp, #16
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	f107 0014 	add.w	r0, r7, #20
 800586e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	b004      	add	sp, #16
 800589e:	4770      	bx	lr

080058a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b09d      	sub	sp, #116	; 0x74
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	78db      	ldrb	r3, [r3, #3]
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d81f      	bhi.n	8005912 <USB_ActivateEndpoint+0x72>
 80058d2:	a201      	add	r2, pc, #4	; (adr r2, 80058d8 <USB_ActivateEndpoint+0x38>)
 80058d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d8:	080058e9 	.word	0x080058e9
 80058dc:	08005905 	.word	0x08005905
 80058e0:	0800591b 	.word	0x0800591b
 80058e4:	080058f7 	.word	0x080058f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80058e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80058f4:	e012      	b.n	800591c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80058f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058fa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80058fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005902:	e00b      	b.n	800591c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005904:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005908:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800590c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005910:	e004      	b.n	800591c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005918:	e000      	b.n	800591c <USB_ActivateEndpoint+0x7c>
      break;
 800591a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	441a      	add	r2, r3
 8005926:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800592a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800592e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593a:	b29b      	uxth	r3, r3
 800593c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005954:	b29a      	uxth	r2, r3
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	4313      	orrs	r3, r2
 800595e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	441a      	add	r2, r3
 800596c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005980:	b29b      	uxth	r3, r3
 8005982:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	7b1b      	ldrb	r3, [r3, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	f040 8178 	bne.w	8005c7e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 8084 	beq.w	8005aa0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	61bb      	str	r3, [r7, #24]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	4413      	add	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	011a      	lsls	r2, r3, #4
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	88db      	ldrh	r3, [r3, #6]
 80059c0:	085b      	lsrs	r3, r3, #1
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	827b      	strh	r3, [r7, #18]
 80059da:	8a7b      	ldrh	r3, [r7, #18]
 80059dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d01b      	beq.n	8005a1c <USB_ActivateEndpoint+0x17c>
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fa:	823b      	strh	r3, [r7, #16]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	441a      	add	r2, r3
 8005a06:	8a3b      	ldrh	r3, [r7, #16]
 8005a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	78db      	ldrb	r3, [r3, #3]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d020      	beq.n	8005a66 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a3a:	81bb      	strh	r3, [r7, #12]
 8005a3c:	89bb      	ldrh	r3, [r7, #12]
 8005a3e:	f083 0320 	eor.w	r3, r3, #32
 8005a42:	81bb      	strh	r3, [r7, #12]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	441a      	add	r2, r3
 8005a4e:	89bb      	ldrh	r3, [r7, #12]
 8005a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8013      	strh	r3, [r2, #0]
 8005a64:	e2d5      	b.n	8006012 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a7c:	81fb      	strh	r3, [r7, #14]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	441a      	add	r2, r3
 8005a88:	89fb      	ldrh	r3, [r7, #14]
 8005a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	8013      	strh	r3, [r2, #0]
 8005a9e:	e2b8      	b.n	8006012 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	461a      	mov	r2, r3
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	4413      	add	r3, r2
 8005ab2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	011a      	lsls	r2, r3, #4
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	88db      	ldrh	r3, [r3, #6]
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae4:	4413      	add	r3, r2
 8005ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	011a      	lsls	r2, r3, #4
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	4413      	add	r3, r2
 8005af2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	801a      	strh	r2, [r3, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b0e:	d91d      	bls.n	8005b4c <USB_ActivateEndpoint+0x2ac>
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	f003 031f 	and.w	r3, r3, #31
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <USB_ActivateEndpoint+0x28a>
 8005b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b26:	3b01      	subs	r3, #1
 8005b28:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	029b      	lsls	r3, r3, #10
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	e026      	b.n	8005b9a <USB_ActivateEndpoint+0x2fa>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <USB_ActivateEndpoint+0x2ca>
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	801a      	strh	r2, [r3, #0]
 8005b68:	e017      	b.n	8005b9a <USB_ActivateEndpoint+0x2fa>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <USB_ActivateEndpoint+0x2e4>
 8005b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b80:	3301      	adds	r3, #1
 8005b82:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	029b      	lsls	r3, r3, #10
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	4313      	orrs	r3, r2
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	847b      	strh	r3, [r7, #34]	; 0x22
 8005ba8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01b      	beq.n	8005bea <USB_ActivateEndpoint+0x34a>
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc8:	843b      	strh	r3, [r7, #32]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	441a      	add	r2, r3
 8005bd4:	8c3b      	ldrh	r3, [r7, #32]
 8005bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d124      	bne.n	8005c3c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c08:	83bb      	strh	r3, [r7, #28]
 8005c0a:	8bbb      	ldrh	r3, [r7, #28]
 8005c0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c10:	83bb      	strh	r3, [r7, #28]
 8005c12:	8bbb      	ldrh	r3, [r7, #28]
 8005c14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c18:	83bb      	strh	r3, [r7, #28]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	441a      	add	r2, r3
 8005c24:	8bbb      	ldrh	r3, [r7, #28]
 8005c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	8013      	strh	r3, [r2, #0]
 8005c3a:	e1ea      	b.n	8006012 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c52:	83fb      	strh	r3, [r7, #30]
 8005c54:	8bfb      	ldrh	r3, [r7, #30]
 8005c56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c5a:	83fb      	strh	r3, [r7, #30]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	8bfb      	ldrh	r3, [r7, #30]
 8005c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	8013      	strh	r3, [r2, #0]
 8005c7c:	e1c9      	b.n	8006012 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	78db      	ldrb	r3, [r3, #3]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d11e      	bne.n	8005cc4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	441a      	add	r2, r3
 8005caa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	8013      	strh	r3, [r2, #0]
 8005cc2:	e01d      	b.n	8005d00 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cda:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	441a      	add	r2, r3
 8005ce8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d10:	4413      	add	r3, r2
 8005d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	011a      	lsls	r2, r3, #4
 8005d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d22:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	891b      	ldrh	r3, [r3, #8]
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	657b      	str	r3, [r7, #84]	; 0x54
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d44:	4413      	add	r3, r2
 8005d46:	657b      	str	r3, [r7, #84]	; 0x54
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	011a      	lsls	r2, r3, #4
 8005d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d56:	653b      	str	r3, [r7, #80]	; 0x50
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	895b      	ldrh	r3, [r3, #10]
 8005d5c:	085b      	lsrs	r3, r3, #1
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d66:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f040 8093 	bne.w	8005e98 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01b      	beq.n	8005dc6 <USB_ActivateEndpoint+0x526>
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	441a      	add	r2, r3
 8005db0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005dd4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d01b      	beq.n	8005e16 <USB_ActivateEndpoint+0x576>
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	441a      	add	r2, r3
 8005e00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2c:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e34:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e3c:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	441a      	add	r2, r3
 8005e48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e74:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	441a      	add	r2, r3
 8005e80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	8013      	strh	r3, [r2, #0]
 8005e96:	e0bc      	b.n	8006012 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005ea8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01d      	beq.n	8005ef0 <USB_ActivateEndpoint+0x650>
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	441a      	add	r2, r3
 8005ed8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005f00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01d      	beq.n	8005f48 <USB_ActivateEndpoint+0x6a8>
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f22:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	441a      	add	r2, r3
 8005f30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	78db      	ldrb	r3, [r3, #3]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d024      	beq.n	8005f9a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f66:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f6e:	f083 0320 	eor.w	r3, r3, #32
 8005f72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	441a      	add	r2, r3
 8005f80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	8013      	strh	r3, [r2, #0]
 8005f98:	e01d      	b.n	8005fd6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	441a      	add	r2, r3
 8005fbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	441a      	add	r2, r3
 8005ffa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600e:	b29b      	uxth	r3, r3
 8006010:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006012:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006016:	4618      	mov	r0, r3
 8006018:	3774      	adds	r7, #116	; 0x74
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr

08006020 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006020:	b480      	push	{r7}
 8006022:	b08d      	sub	sp, #52	; 0x34
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	7b1b      	ldrb	r3, [r3, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	f040 808e 	bne.w	8006150 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	785b      	ldrb	r3, [r3, #1]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d044      	beq.n	80060c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	81bb      	strh	r3, [r7, #12]
 800604a:	89bb      	ldrh	r3, [r7, #12]
 800604c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01b      	beq.n	800608c <USB_DeactivateEndpoint+0x6c>
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606a:	817b      	strh	r3, [r7, #10]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	441a      	add	r2, r3
 8006076:	897b      	ldrh	r3, [r7, #10]
 8006078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006084:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006088:	b29b      	uxth	r3, r3
 800608a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	b29b      	uxth	r3, r3
 800609a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a2:	813b      	strh	r3, [r7, #8]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	441a      	add	r2, r3
 80060ae:	893b      	ldrh	r3, [r7, #8]
 80060b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	8013      	strh	r3, [r2, #0]
 80060c4:	e192      	b.n	80063ec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	827b      	strh	r3, [r7, #18]
 80060d4:	8a7b      	ldrh	r3, [r7, #18]
 80060d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01b      	beq.n	8006116 <USB_DeactivateEndpoint+0xf6>
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f4:	823b      	strh	r3, [r7, #16]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	441a      	add	r2, r3
 8006100:	8a3b      	ldrh	r3, [r7, #16]
 8006102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800610a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800610e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006112:	b29b      	uxth	r3, r3
 8006114:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612c:	81fb      	strh	r3, [r7, #14]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	441a      	add	r2, r3
 8006138:	89fb      	ldrh	r3, [r7, #14]
 800613a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614a:	b29b      	uxth	r3, r3
 800614c:	8013      	strh	r3, [r2, #0]
 800614e:	e14d      	b.n	80063ec <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	785b      	ldrb	r3, [r3, #1]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f040 80a5 	bne.w	80062a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	843b      	strh	r3, [r7, #32]
 8006168:	8c3b      	ldrh	r3, [r7, #32]
 800616a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d01b      	beq.n	80061aa <USB_DeactivateEndpoint+0x18a>
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006188:	83fb      	strh	r3, [r7, #30]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	441a      	add	r2, r3
 8006194:	8bfb      	ldrh	r3, [r7, #30]
 8006196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	83bb      	strh	r3, [r7, #28]
 80061b8:	8bbb      	ldrh	r3, [r7, #28]
 80061ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d01b      	beq.n	80061fa <USB_DeactivateEndpoint+0x1da>
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d8:	837b      	strh	r3, [r7, #26]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	441a      	add	r2, r3
 80061e4:	8b7b      	ldrh	r3, [r7, #26]
 80061e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006210:	833b      	strh	r3, [r7, #24]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	441a      	add	r2, r3
 800621c:	8b3b      	ldrh	r3, [r7, #24]
 800621e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800622e:	b29b      	uxth	r3, r3
 8006230:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006248:	82fb      	strh	r3, [r7, #22]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	441a      	add	r2, r3
 8006254:	8afb      	ldrh	r3, [r7, #22]
 8006256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800625a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800625e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006266:	b29b      	uxth	r3, r3
 8006268:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800627c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006280:	82bb      	strh	r3, [r7, #20]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	441a      	add	r2, r3
 800628c:	8abb      	ldrh	r3, [r7, #20]
 800628e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629e:	b29b      	uxth	r3, r3
 80062a0:	8013      	strh	r3, [r2, #0]
 80062a2:	e0a3      	b.n	80063ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80062b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01b      	beq.n	80062f4 <USB_DeactivateEndpoint+0x2d4>
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	441a      	add	r2, r3
 80062de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006302:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d01b      	beq.n	8006344 <USB_DeactivateEndpoint+0x324>
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	b29b      	uxth	r3, r3
 800631a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006322:	853b      	strh	r3, [r7, #40]	; 0x28
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	441a      	add	r2, r3
 800632e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800633c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006340:	b29b      	uxth	r3, r3
 8006342:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29b      	uxth	r3, r3
 8006352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	441a      	add	r2, r3
 8006366:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800636c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006370:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006378:	b29b      	uxth	r3, r3
 800637a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	b29b      	uxth	r3, r3
 800638a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800638e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006392:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	441a      	add	r2, r3
 800639e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	441a      	add	r2, r3
 80063d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3734      	adds	r7, #52	; 0x34
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bc80      	pop	{r7}
 80063f6:	4770      	bx	lr

080063f8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b0c2      	sub	sp, #264	; 0x108
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006402:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006406:	6018      	str	r0, [r3, #0]
 8006408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006410:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	785b      	ldrb	r3, [r3, #1]
 800641e:	2b01      	cmp	r3, #1
 8006420:	f040 86b7 	bne.w	8007192 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699a      	ldr	r2, [r3, #24]
 8006430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	429a      	cmp	r2, r3
 800643e:	d908      	bls.n	8006452 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006450:	e007      	b.n	8006462 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	7b1b      	ldrb	r3, [r3, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d13a      	bne.n	80064e8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6959      	ldr	r1, [r3, #20]
 800647e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	88da      	ldrh	r2, [r3, #6]
 800648a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648e:	b29b      	uxth	r3, r3
 8006490:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006494:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006498:	6800      	ldr	r0, [r0, #0]
 800649a:	f001 fc9c 	bl	8007dd6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800649e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	461a      	mov	r2, r3
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	4413      	add	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	011a      	lsls	r2, r3, #4
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	4413      	add	r3, r2
 80064d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	f000 be1f 	b.w	8007126 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80064e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	78db      	ldrb	r3, [r3, #3]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	f040 8462 	bne.w	8006dbe <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80064fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6a1a      	ldr	r2, [r3, #32]
 8006506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	429a      	cmp	r2, r3
 8006514:	f240 83df 	bls.w	8006cd6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800651c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	b29b      	uxth	r3, r3
 8006536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	441a      	add	r2, r3
 800655c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006568:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800656c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006570:	b29b      	uxth	r3, r3
 8006572:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6a1a      	ldr	r2, [r3, #32]
 8006580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006584:	1ad2      	subs	r2, r2, r3
 8006586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 81c7 	beq.w	8006948 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	633b      	str	r3, [r7, #48]	; 0x30
 80065c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d177      	bne.n	80066c6 <USB_EPStartXfer+0x2ce>
 80065d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	4413      	add	r3, r2
 80065f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80065fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	011a      	lsls	r2, r3, #4
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	4413      	add	r3, r2
 800660c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800661c:	b29a      	uxth	r2, r3
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006626:	2b3e      	cmp	r3, #62	; 0x3e
 8006628:	d921      	bls.n	800666e <USB_EPStartXfer+0x276>
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800662e:	095b      	lsrs	r3, r3, #5
 8006630:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <USB_EPStartXfer+0x252>
 8006640:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006644:	3b01      	subs	r3, #1
 8006646:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29a      	uxth	r2, r3
 8006650:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006654:	b29b      	uxth	r3, r3
 8006656:	029b      	lsls	r3, r3, #10
 8006658:	b29b      	uxth	r3, r3
 800665a:	4313      	orrs	r3, r2
 800665c:	b29b      	uxth	r3, r3
 800665e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006666:	b29a      	uxth	r2, r3
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	801a      	strh	r2, [r3, #0]
 800666c:	e050      	b.n	8006710 <USB_EPStartXfer+0x318>
 800666e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <USB_EPStartXfer+0x294>
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	b29b      	uxth	r3, r3
 800667c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006684:	b29a      	uxth	r2, r3
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	e041      	b.n	8006710 <USB_EPStartXfer+0x318>
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006690:	085b      	lsrs	r3, r3, #1
 8006692:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d004      	beq.n	80066ac <USB_EPStartXfer+0x2b4>
 80066a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066a6:	3301      	adds	r3, #1
 80066a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	029b      	lsls	r3, r3, #10
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	4313      	orrs	r3, r2
 80066be:	b29a      	uxth	r2, r3
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	801a      	strh	r2, [r3, #0]
 80066c4:	e024      	b.n	8006710 <USB_EPStartXfer+0x318>
 80066c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d11c      	bne.n	8006710 <USB_EPStartXfer+0x318>
 80066d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	4413      	add	r3, r2
 80066ec:	633b      	str	r3, [r7, #48]	; 0x30
 80066ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	011a      	lsls	r2, r3, #4
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	4413      	add	r3, r2
 8006700:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670a:	b29a      	uxth	r2, r3
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	895b      	ldrh	r3, [r3, #10]
 800671c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6959      	ldr	r1, [r3, #20]
 800672c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006730:	b29b      	uxth	r3, r3
 8006732:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006736:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800673a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800673e:	6800      	ldr	r0, [r0, #0]
 8006740:	f001 fb49 	bl	8007dd6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695a      	ldr	r2, [r3, #20]
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006754:	441a      	add	r2, r3
 8006756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6a1a      	ldr	r2, [r3, #32]
 800676e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	429a      	cmp	r2, r3
 800677c:	d90f      	bls.n	800679e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800677e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6a1a      	ldr	r2, [r3, #32]
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678e:	1ad2      	subs	r2, r2, r3
 8006790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	621a      	str	r2, [r3, #32]
 800679c:	e00e      	b.n	80067bc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800679e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80067ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2200      	movs	r2, #0
 80067ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d177      	bne.n	80068bc <USB_EPStartXfer+0x4c4>
 80067cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	4413      	add	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	011a      	lsls	r2, r3, #4
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	4413      	add	r3, r2
 8006802:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006812:	b29a      	uxth	r2, r3
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	801a      	strh	r2, [r3, #0]
 8006818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681c:	2b3e      	cmp	r3, #62	; 0x3e
 800681e:	d921      	bls.n	8006864 <USB_EPStartXfer+0x46c>
 8006820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800682a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	2b00      	cmp	r3, #0
 8006834:	d104      	bne.n	8006840 <USB_EPStartXfer+0x448>
 8006836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800683a:	3b01      	subs	r3, #1
 800683c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29a      	uxth	r2, r3
 8006846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800684a:	b29b      	uxth	r3, r3
 800684c:	029b      	lsls	r3, r3, #10
 800684e:	b29b      	uxth	r3, r3
 8006850:	4313      	orrs	r3, r2
 8006852:	b29b      	uxth	r3, r3
 8006854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685c:	b29a      	uxth	r2, r3
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	801a      	strh	r2, [r3, #0]
 8006862:	e056      	b.n	8006912 <USB_EPStartXfer+0x51a>
 8006864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <USB_EPStartXfer+0x48a>
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687a:	b29a      	uxth	r2, r3
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	e047      	b.n	8006912 <USB_EPStartXfer+0x51a>
 8006882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800688c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d004      	beq.n	80068a2 <USB_EPStartXfer+0x4aa>
 8006898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800689c:	3301      	adds	r3, #1
 800689e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	029b      	lsls	r3, r3, #10
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	4313      	orrs	r3, r2
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	801a      	strh	r2, [r3, #0]
 80068ba:	e02a      	b.n	8006912 <USB_EPStartXfer+0x51a>
 80068bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	785b      	ldrb	r3, [r3, #1]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d122      	bne.n	8006912 <USB_EPStartXfer+0x51a>
 80068cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	623b      	str	r3, [r7, #32]
 80068d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	461a      	mov	r2, r3
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	4413      	add	r3, r2
 80068ee:	623b      	str	r3, [r7, #32]
 80068f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	011a      	lsls	r2, r3, #4
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	4413      	add	r3, r2
 8006902:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006906:	61fb      	str	r3, [r7, #28]
 8006908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690c:	b29a      	uxth	r2, r3
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	891b      	ldrh	r3, [r3, #8]
 800691e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6959      	ldr	r1, [r3, #20]
 800692e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006932:	b29b      	uxth	r3, r3
 8006934:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006938:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800693c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006940:	6800      	ldr	r0, [r0, #0]
 8006942:	f001 fa48 	bl	8007dd6 <USB_WritePMA>
 8006946:	e3ee      	b.n	8007126 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800694c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d177      	bne.n	8006a48 <USB_EPStartXfer+0x650>
 8006958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	64bb      	str	r3, [r7, #72]	; 0x48
 8006964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006968:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006972:	b29b      	uxth	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006978:	4413      	add	r3, r2
 800697a:	64bb      	str	r3, [r7, #72]	; 0x48
 800697c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	011a      	lsls	r2, r3, #4
 800698a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800698c:	4413      	add	r3, r2
 800698e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006992:	647b      	str	r3, [r7, #68]	; 0x44
 8006994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800699e:	b29a      	uxth	r2, r3
 80069a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a8:	2b3e      	cmp	r3, #62	; 0x3e
 80069aa:	d921      	bls.n	80069f0 <USB_EPStartXfer+0x5f8>
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b0:	095b      	lsrs	r3, r3, #5
 80069b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ba:	f003 031f 	and.w	r3, r3, #31
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d104      	bne.n	80069cc <USB_EPStartXfer+0x5d4>
 80069c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069c6:	3b01      	subs	r3, #1
 80069c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	029b      	lsls	r3, r3, #10
 80069da:	b29b      	uxth	r3, r3
 80069dc:	4313      	orrs	r3, r2
 80069de:	b29b      	uxth	r3, r3
 80069e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ec:	801a      	strh	r2, [r3, #0]
 80069ee:	e056      	b.n	8006a9e <USB_EPStartXfer+0x6a6>
 80069f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <USB_EPStartXfer+0x616>
 80069f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a0a:	801a      	strh	r2, [r3, #0]
 8006a0c:	e047      	b.n	8006a9e <USB_EPStartXfer+0x6a6>
 8006a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a12:	085b      	lsrs	r3, r3, #1
 8006a14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d004      	beq.n	8006a2e <USB_EPStartXfer+0x636>
 8006a24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a28:	3301      	adds	r3, #1
 8006a2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	029b      	lsls	r3, r3, #10
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a44:	801a      	strh	r2, [r3, #0]
 8006a46:	e02a      	b.n	8006a9e <USB_EPStartXfer+0x6a6>
 8006a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	785b      	ldrb	r3, [r3, #1]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d122      	bne.n	8006a9e <USB_EPStartXfer+0x6a6>
 8006a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	653b      	str	r3, [r7, #80]	; 0x50
 8006a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a78:	4413      	add	r3, r2
 8006a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	011a      	lsls	r2, r3, #4
 8006a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	891b      	ldrh	r3, [r3, #8]
 8006aaa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6959      	ldr	r1, [r3, #20]
 8006aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ac4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ac8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006acc:	6800      	ldr	r0, [r0, #0]
 8006ace:	f001 f982 	bl	8007dd6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695a      	ldr	r2, [r3, #20]
 8006ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae2:	441a      	add	r2, r3
 8006ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6a1a      	ldr	r2, [r3, #32]
 8006afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d90f      	bls.n	8006b2c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6a1a      	ldr	r2, [r3, #32]
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b1c:	1ad2      	subs	r2, r2, r3
 8006b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	621a      	str	r2, [r3, #32]
 8006b2a:	e00e      	b.n	8006b4a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2200      	movs	r2, #0
 8006b48:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	643b      	str	r3, [r7, #64]	; 0x40
 8006b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d177      	bne.n	8006c56 <USB_EPStartXfer+0x85e>
 8006b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	461a      	mov	r2, r3
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	4413      	add	r3, r2
 8006b88:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	011a      	lsls	r2, r3, #4
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb0:	801a      	strh	r2, [r3, #0]
 8006bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8006bb8:	d921      	bls.n	8006bfe <USB_EPStartXfer+0x806>
 8006bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc8:	f003 031f 	and.w	r3, r3, #31
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d104      	bne.n	8006bda <USB_EPStartXfer+0x7e2>
 8006bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	029b      	lsls	r3, r3, #10
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	4313      	orrs	r3, r2
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfa:	801a      	strh	r2, [r3, #0]
 8006bfc:	e050      	b.n	8006ca0 <USB_EPStartXfer+0x8a8>
 8006bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10a      	bne.n	8006c1c <USB_EPStartXfer+0x824>
 8006c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c18:	801a      	strh	r2, [r3, #0]
 8006c1a:	e041      	b.n	8006ca0 <USB_EPStartXfer+0x8a8>
 8006c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c20:	085b      	lsrs	r3, r3, #1
 8006c22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d004      	beq.n	8006c3c <USB_EPStartXfer+0x844>
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c36:	3301      	adds	r3, #1
 8006c38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	029b      	lsls	r3, r3, #10
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c52:	801a      	strh	r2, [r3, #0]
 8006c54:	e024      	b.n	8006ca0 <USB_EPStartXfer+0x8a8>
 8006c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	785b      	ldrb	r3, [r3, #1]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d11c      	bne.n	8006ca0 <USB_EPStartXfer+0x8a8>
 8006c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c7a:	4413      	add	r3, r2
 8006c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	011a      	lsls	r2, r3, #4
 8006c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c8e:	4413      	add	r3, r2
 8006c90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	895b      	ldrh	r3, [r3, #10]
 8006cac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6959      	ldr	r1, [r3, #20]
 8006cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cc6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006cca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006cce:	6800      	ldr	r0, [r0, #0]
 8006cd0:	f001 f881 	bl	8007dd6 <USB_WritePMA>
 8006cd4:	e227      	b.n	8007126 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	441a      	add	r2, r3
 8006d2a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d62:	4413      	add	r3, r2
 8006d64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	011a      	lsls	r2, r3, #4
 8006d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d76:	4413      	add	r3, r2
 8006d78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	891b      	ldrh	r3, [r3, #8]
 8006d94:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6959      	ldr	r1, [r3, #20]
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006db2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006db6:	6800      	ldr	r0, [r0, #0]
 8006db8:	f001 f80d 	bl	8007dd6 <USB_WritePMA>
 8006dbc:	e1b3      	b.n	8007126 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6a1a      	ldr	r2, [r3, #32]
 8006dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dce:	1ad2      	subs	r2, r2, r3
 8006dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 80c6 	beq.w	8006f90 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	673b      	str	r3, [r7, #112]	; 0x70
 8006e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d177      	bne.n	8006f10 <USB_EPStartXfer+0xb18>
 8006e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e40:	4413      	add	r3, r2
 8006e42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	011a      	lsls	r2, r3, #4
 8006e52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e54:	4413      	add	r3, r2
 8006e56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e5a:	667b      	str	r3, [r7, #100]	; 0x64
 8006e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e6a:	801a      	strh	r2, [r3, #0]
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e70:	2b3e      	cmp	r3, #62	; 0x3e
 8006e72:	d921      	bls.n	8006eb8 <USB_EPStartXfer+0xac0>
 8006e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e78:	095b      	lsrs	r3, r3, #5
 8006e7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e82:	f003 031f 	and.w	r3, r3, #31
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d104      	bne.n	8006e94 <USB_EPStartXfer+0xa9c>
 8006e8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	029b      	lsls	r3, r3, #10
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eb4:	801a      	strh	r2, [r3, #0]
 8006eb6:	e050      	b.n	8006f5a <USB_EPStartXfer+0xb62>
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <USB_EPStartXfer+0xade>
 8006ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	e041      	b.n	8006f5a <USB_EPStartXfer+0xb62>
 8006ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eda:	085b      	lsrs	r3, r3, #1
 8006edc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d004      	beq.n	8006ef6 <USB_EPStartXfer+0xafe>
 8006eec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	029b      	lsls	r3, r3, #10
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	4313      	orrs	r3, r2
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f0c:	801a      	strh	r2, [r3, #0]
 8006f0e:	e024      	b.n	8006f5a <USB_EPStartXfer+0xb62>
 8006f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	785b      	ldrb	r3, [r3, #1]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d11c      	bne.n	8006f5a <USB_EPStartXfer+0xb62>
 8006f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f34:	4413      	add	r3, r2
 8006f36:	673b      	str	r3, [r7, #112]	; 0x70
 8006f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	011a      	lsls	r2, r3, #4
 8006f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f48:	4413      	add	r3, r2
 8006f4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	895b      	ldrh	r3, [r3, #10]
 8006f66:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6959      	ldr	r1, [r3, #20]
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f80:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f84:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f88:	6800      	ldr	r0, [r0, #0]
 8006f8a:	f000 ff24 	bl	8007dd6 <USB_WritePMA>
 8006f8e:	e0ca      	b.n	8007126 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d177      	bne.n	8007090 <USB_EPStartXfer+0xc98>
 8006fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fc0:	4413      	add	r3, r2
 8006fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	011a      	lsls	r2, r3, #4
 8006fd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fda:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fea:	801a      	strh	r2, [r3, #0]
 8006fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ff2:	d921      	bls.n	8007038 <USB_EPStartXfer+0xc40>
 8006ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff8:	095b      	lsrs	r3, r3, #5
 8006ffa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007002:	f003 031f 	and.w	r3, r3, #31
 8007006:	2b00      	cmp	r3, #0
 8007008:	d104      	bne.n	8007014 <USB_EPStartXfer+0xc1c>
 800700a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800700e:	3b01      	subs	r3, #1
 8007010:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	b29a      	uxth	r2, r3
 800701a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800701e:	b29b      	uxth	r3, r3
 8007020:	029b      	lsls	r3, r3, #10
 8007022:	b29b      	uxth	r3, r3
 8007024:	4313      	orrs	r3, r2
 8007026:	b29b      	uxth	r3, r3
 8007028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800702c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007030:	b29a      	uxth	r2, r3
 8007032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007034:	801a      	strh	r2, [r3, #0]
 8007036:	e05c      	b.n	80070f2 <USB_EPStartXfer+0xcfa>
 8007038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10a      	bne.n	8007056 <USB_EPStartXfer+0xc5e>
 8007040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29b      	uxth	r3, r3
 8007046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800704a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800704e:	b29a      	uxth	r2, r3
 8007050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007052:	801a      	strh	r2, [r3, #0]
 8007054:	e04d      	b.n	80070f2 <USB_EPStartXfer+0xcfa>
 8007056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705a:	085b      	lsrs	r3, r3, #1
 800705c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d004      	beq.n	8007076 <USB_EPStartXfer+0xc7e>
 800706c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007070:	3301      	adds	r3, #1
 8007072:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	b29a      	uxth	r2, r3
 800707c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007080:	b29b      	uxth	r3, r3
 8007082:	029b      	lsls	r3, r3, #10
 8007084:	b29b      	uxth	r3, r3
 8007086:	4313      	orrs	r3, r2
 8007088:	b29a      	uxth	r2, r3
 800708a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800708c:	801a      	strh	r2, [r3, #0]
 800708e:	e030      	b.n	80070f2 <USB_EPStartXfer+0xcfa>
 8007090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d128      	bne.n	80070f2 <USB_EPStartXfer+0xcfa>
 80070a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070bc:	b29b      	uxth	r3, r3
 80070be:	461a      	mov	r2, r3
 80070c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070c4:	4413      	add	r3, r2
 80070c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	011a      	lsls	r2, r3, #4
 80070d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070dc:	4413      	add	r3, r2
 80070de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80070f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	891b      	ldrh	r3, [r3, #8]
 80070fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6959      	ldr	r1, [r3, #20]
 800710e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007112:	b29b      	uxth	r3, r3
 8007114:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007118:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800711c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007120:	6800      	ldr	r0, [r0, #0]
 8007122:	f000 fe58 	bl	8007dd6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	b29b      	uxth	r3, r3
 8007144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800714c:	817b      	strh	r3, [r7, #10]
 800714e:	897b      	ldrh	r3, [r7, #10]
 8007150:	f083 0310 	eor.w	r3, r3, #16
 8007154:	817b      	strh	r3, [r7, #10]
 8007156:	897b      	ldrh	r3, [r7, #10]
 8007158:	f083 0320 	eor.w	r3, r3, #32
 800715c:	817b      	strh	r3, [r7, #10]
 800715e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	441a      	add	r2, r3
 8007178:	897b      	ldrh	r3, [r7, #10]
 800717a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800717e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718a:	b29b      	uxth	r3, r3
 800718c:	8013      	strh	r3, [r2, #0]
 800718e:	f000 bcde 	b.w	8007b4e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	7b1b      	ldrb	r3, [r3, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f040 80bb 	bne.w	800731a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80071a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	699a      	ldr	r2, [r3, #24]
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d917      	bls.n	80071f0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80071c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80071d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699a      	ldr	r2, [r3, #24]
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e0:	1ad2      	subs	r2, r2, r3
 80071e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	619a      	str	r2, [r3, #24]
 80071ee:	e00e      	b.n	800720e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80071f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2200      	movs	r2, #0
 800720c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800720e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007212:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800721c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007220:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800722a:	b29b      	uxth	r3, r3
 800722c:	461a      	mov	r2, r3
 800722e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007232:	4413      	add	r3, r2
 8007234:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	011a      	lsls	r2, r3, #4
 8007246:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800724a:	4413      	add	r3, r2
 800724c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007254:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007260:	b29a      	uxth	r2, r3
 8007262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007266:	801a      	strh	r2, [r3, #0]
 8007268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800726c:	2b3e      	cmp	r3, #62	; 0x3e
 800726e:	d924      	bls.n	80072ba <USB_EPStartXfer+0xec2>
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727e:	f003 031f 	and.w	r3, r3, #31
 8007282:	2b00      	cmp	r3, #0
 8007284:	d104      	bne.n	8007290 <USB_EPStartXfer+0xe98>
 8007286:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800728a:	3b01      	subs	r3, #1
 800728c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	b29a      	uxth	r2, r3
 8007298:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800729c:	b29b      	uxth	r3, r3
 800729e:	029b      	lsls	r3, r3, #10
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	4313      	orrs	r3, r2
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072b4:	801a      	strh	r2, [r3, #0]
 80072b6:	f000 bc10 	b.w	8007ada <USB_EPStartXfer+0x16e2>
 80072ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10c      	bne.n	80072dc <USB_EPStartXfer+0xee4>
 80072c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072d8:	801a      	strh	r2, [r3, #0]
 80072da:	e3fe      	b.n	8007ada <USB_EPStartXfer+0x16e2>
 80072dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e0:	085b      	lsrs	r3, r3, #1
 80072e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <USB_EPStartXfer+0xf04>
 80072f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072f6:	3301      	adds	r3, #1
 80072f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	b29a      	uxth	r2, r3
 8007304:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007308:	b29b      	uxth	r3, r3
 800730a:	029b      	lsls	r3, r3, #10
 800730c:	b29b      	uxth	r3, r3
 800730e:	4313      	orrs	r3, r2
 8007310:	b29a      	uxth	r2, r3
 8007312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007316:	801a      	strh	r2, [r3, #0]
 8007318:	e3df      	b.n	8007ada <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800731a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	78db      	ldrb	r3, [r3, #3]
 8007326:	2b02      	cmp	r3, #2
 8007328:	f040 8218 	bne.w	800775c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800732c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	2b00      	cmp	r3, #0
 800733a:	f040 809d 	bne.w	8007478 <USB_EPStartXfer+0x1080>
 800733e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800734c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007350:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735a:	b29b      	uxth	r3, r3
 800735c:	461a      	mov	r2, r3
 800735e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007362:	4413      	add	r3, r2
 8007364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	011a      	lsls	r2, r3, #4
 8007376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800737a:	4413      	add	r3, r2
 800737c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007390:	b29a      	uxth	r2, r3
 8007392:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007396:	801a      	strh	r2, [r3, #0]
 8007398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800739c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	2b3e      	cmp	r3, #62	; 0x3e
 80073a6:	d92b      	bls.n	8007400 <USB_EPStartXfer+0x1008>
 80073a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	f003 031f 	and.w	r3, r3, #31
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d104      	bne.n	80073d8 <USB_EPStartXfer+0xfe0>
 80073ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d2:	3b01      	subs	r3, #1
 80073d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	b29a      	uxth	r2, r3
 80073e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	029b      	lsls	r3, r3, #10
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	4313      	orrs	r3, r2
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	e070      	b.n	80074e2 <USB_EPStartXfer+0x10ea>
 8007400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10c      	bne.n	800742a <USB_EPStartXfer+0x1032>
 8007410:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800741c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007420:	b29a      	uxth	r2, r3
 8007422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	e05b      	b.n	80074e2 <USB_EPStartXfer+0x10ea>
 800742a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	085b      	lsrs	r3, r3, #1
 8007438:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800743c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d004      	beq.n	800745a <USB_EPStartXfer+0x1062>
 8007450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007454:	3301      	adds	r3, #1
 8007456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800745a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	b29a      	uxth	r2, r3
 8007462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007466:	b29b      	uxth	r3, r3
 8007468:	029b      	lsls	r3, r3, #10
 800746a:	b29b      	uxth	r3, r3
 800746c:	4313      	orrs	r3, r2
 800746e:	b29a      	uxth	r2, r3
 8007470:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007474:	801a      	strh	r2, [r3, #0]
 8007476:	e034      	b.n	80074e2 <USB_EPStartXfer+0x10ea>
 8007478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	785b      	ldrb	r3, [r3, #1]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d12c      	bne.n	80074e2 <USB_EPStartXfer+0x10ea>
 8007488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	461a      	mov	r2, r3
 80074a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074ac:	4413      	add	r3, r2
 80074ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	011a      	lsls	r2, r3, #4
 80074c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074c4:	4413      	add	r3, r2
 80074c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	b29a      	uxth	r2, r3
 80074dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80074e0:	801a      	strh	r2, [r3, #0]
 80074e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80074f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	785b      	ldrb	r3, [r3, #1]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f040 809d 	bne.w	800763c <USB_EPStartXfer+0x1244>
 8007502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800751e:	b29b      	uxth	r3, r3
 8007520:	461a      	mov	r2, r3
 8007522:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007526:	4413      	add	r3, r2
 8007528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800752c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	011a      	lsls	r2, r3, #4
 800753a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800753e:	4413      	add	r3, r2
 8007540:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	b29b      	uxth	r3, r3
 8007550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007554:	b29a      	uxth	r2, r3
 8007556:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b3e      	cmp	r3, #62	; 0x3e
 800756a:	d92b      	bls.n	80075c4 <USB_EPStartXfer+0x11cc>
 800756c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	095b      	lsrs	r3, r3, #5
 800757a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800757e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f003 031f 	and.w	r3, r3, #31
 800758e:	2b00      	cmp	r3, #0
 8007590:	d104      	bne.n	800759c <USB_EPStartXfer+0x11a4>
 8007592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007596:	3b01      	subs	r3, #1
 8007598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800759c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	029b      	lsls	r3, r3, #10
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	4313      	orrs	r3, r2
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075c0:	801a      	strh	r2, [r3, #0]
 80075c2:	e069      	b.n	8007698 <USB_EPStartXfer+0x12a0>
 80075c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10c      	bne.n	80075ee <USB_EPStartXfer+0x11f6>
 80075d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	b29b      	uxth	r3, r3
 80075dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075ea:	801a      	strh	r2, [r3, #0]
 80075ec:	e054      	b.n	8007698 <USB_EPStartXfer+0x12a0>
 80075ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	085b      	lsrs	r3, r3, #1
 80075fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <USB_EPStartXfer+0x1226>
 8007614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007618:	3301      	adds	r3, #1
 800761a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800761e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29a      	uxth	r2, r3
 8007626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800762a:	b29b      	uxth	r3, r3
 800762c:	029b      	lsls	r3, r3, #10
 800762e:	b29b      	uxth	r3, r3
 8007630:	4313      	orrs	r3, r2
 8007632:	b29a      	uxth	r2, r3
 8007634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007638:	801a      	strh	r2, [r3, #0]
 800763a:	e02d      	b.n	8007698 <USB_EPStartXfer+0x12a0>
 800763c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d125      	bne.n	8007698 <USB_EPStartXfer+0x12a0>
 800764c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765a:	b29b      	uxth	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007662:	4413      	add	r3, r2
 8007664:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	011a      	lsls	r2, r3, #4
 8007676:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800767a:	4413      	add	r3, r2
 800767c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007680:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	b29a      	uxth	r2, r3
 8007692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007696:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 8218 	beq.w	8007ada <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80076aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80076ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d005      	beq.n	80076e2 <USB_EPStartXfer+0x12ea>
 80076d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80076da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10d      	bne.n	80076fe <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80076e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f040 81f5 	bne.w	8007ada <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80076f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f040 81ee 	bne.w	8007ada <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80076fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800770c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	b29b      	uxth	r3, r3
 800771c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007724:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	441a      	add	r2, r3
 8007742:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800774a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800774e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007752:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007756:	b29b      	uxth	r3, r3
 8007758:	8013      	strh	r3, [r2, #0]
 800775a:	e1be      	b.n	8007ada <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800775c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	78db      	ldrb	r3, [r3, #3]
 8007768:	2b01      	cmp	r3, #1
 800776a:	f040 81b4 	bne.w	8007ad6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800776e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699a      	ldr	r2, [r3, #24]
 800777a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	429a      	cmp	r2, r3
 8007788:	d917      	bls.n	80077ba <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800778a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800779a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077aa:	1ad2      	subs	r2, r2, r3
 80077ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	619a      	str	r2, [r3, #24]
 80077b8:	e00e      	b.n	80077d8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80077ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80077ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2200      	movs	r2, #0
 80077d6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80077d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	785b      	ldrb	r3, [r3, #1]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f040 8085 	bne.w	80078f4 <USB_EPStartXfer+0x14fc>
 80077ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007806:	b29b      	uxth	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800780e:	4413      	add	r3, r2
 8007810:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	011a      	lsls	r2, r3, #4
 8007822:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007826:	4413      	add	r3, r2
 8007828:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800782c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007830:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	b29b      	uxth	r3, r3
 8007838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800783c:	b29a      	uxth	r2, r3
 800783e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007842:	801a      	strh	r2, [r3, #0]
 8007844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007848:	2b3e      	cmp	r3, #62	; 0x3e
 800784a:	d923      	bls.n	8007894 <USB_EPStartXfer+0x149c>
 800784c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007850:	095b      	lsrs	r3, r3, #5
 8007852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785a:	f003 031f 	and.w	r3, r3, #31
 800785e:	2b00      	cmp	r3, #0
 8007860:	d104      	bne.n	800786c <USB_EPStartXfer+0x1474>
 8007862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007866:	3b01      	subs	r3, #1
 8007868:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800786c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	b29a      	uxth	r2, r3
 8007874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007878:	b29b      	uxth	r3, r3
 800787a:	029b      	lsls	r3, r3, #10
 800787c:	b29b      	uxth	r3, r3
 800787e:	4313      	orrs	r3, r2
 8007880:	b29b      	uxth	r3, r3
 8007882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800788a:	b29a      	uxth	r2, r3
 800788c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007890:	801a      	strh	r2, [r3, #0]
 8007892:	e060      	b.n	8007956 <USB_EPStartXfer+0x155e>
 8007894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10c      	bne.n	80078b6 <USB_EPStartXfer+0x14be>
 800789c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078b2:	801a      	strh	r2, [r3, #0]
 80078b4:	e04f      	b.n	8007956 <USB_EPStartXfer+0x155e>
 80078b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ba:	085b      	lsrs	r3, r3, #1
 80078bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d004      	beq.n	80078d6 <USB_EPStartXfer+0x14de>
 80078cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078d0:	3301      	adds	r3, #1
 80078d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	b29a      	uxth	r2, r3
 80078de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	029b      	lsls	r3, r3, #10
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	4313      	orrs	r3, r2
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078f0:	801a      	strh	r2, [r3, #0]
 80078f2:	e030      	b.n	8007956 <USB_EPStartXfer+0x155e>
 80078f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	785b      	ldrb	r3, [r3, #1]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d128      	bne.n	8007956 <USB_EPStartXfer+0x155e>
 8007904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007908:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007920:	b29b      	uxth	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007928:	4413      	add	r3, r2
 800792a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800792e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	011a      	lsls	r2, r3, #4
 800793c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007940:	4413      	add	r3, r2
 8007942:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007946:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800794a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800794e:	b29a      	uxth	r2, r3
 8007950:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007954:	801a      	strh	r2, [r3, #0]
 8007956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800795a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	785b      	ldrb	r3, [r3, #1]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f040 8085 	bne.w	8007a80 <USB_EPStartXfer+0x1688>
 8007976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800797a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007988:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007992:	b29b      	uxth	r3, r3
 8007994:	461a      	mov	r2, r3
 8007996:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800799a:	4413      	add	r3, r2
 800799c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80079a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	011a      	lsls	r2, r3, #4
 80079ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079b2:	4413      	add	r3, r2
 80079b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079ce:	801a      	strh	r2, [r3, #0]
 80079d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d4:	2b3e      	cmp	r3, #62	; 0x3e
 80079d6:	d923      	bls.n	8007a20 <USB_EPStartXfer+0x1628>
 80079d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079dc:	095b      	lsrs	r3, r3, #5
 80079de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e6:	f003 031f 	and.w	r3, r3, #31
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d104      	bne.n	80079f8 <USB_EPStartXfer+0x1600>
 80079ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079f2:	3b01      	subs	r3, #1
 80079f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	029b      	lsls	r3, r3, #10
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a1c:	801a      	strh	r2, [r3, #0]
 8007a1e:	e05c      	b.n	8007ada <USB_EPStartXfer+0x16e2>
 8007a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10c      	bne.n	8007a42 <USB_EPStartXfer+0x164a>
 8007a28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	e04b      	b.n	8007ada <USB_EPStartXfer+0x16e2>
 8007a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <USB_EPStartXfer+0x166a>
 8007a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	029b      	lsls	r3, r3, #10
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	4313      	orrs	r3, r2
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a7c:	801a      	strh	r2, [r3, #0]
 8007a7e:	e02c      	b.n	8007ada <USB_EPStartXfer+0x16e2>
 8007a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	785b      	ldrb	r3, [r3, #1]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d124      	bne.n	8007ada <USB_EPStartXfer+0x16e2>
 8007a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	011a      	lsls	r2, r3, #4
 8007aba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007abe:	4413      	add	r3, r2
 8007ac0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ad2:	801a      	strh	r2, [r3, #0]
 8007ad4:	e001      	b.n	8007ada <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e03a      	b.n	8007b50 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b00:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b0c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b18:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	441a      	add	r2, r3
 8007b36:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	785b      	ldrb	r3, [r3, #1]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d020      	beq.n	8007bae <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b82:	81bb      	strh	r3, [r7, #12]
 8007b84:	89bb      	ldrh	r3, [r7, #12]
 8007b86:	f083 0310 	eor.w	r3, r3, #16
 8007b8a:	81bb      	strh	r3, [r7, #12]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	441a      	add	r2, r3
 8007b96:	89bb      	ldrh	r3, [r7, #12]
 8007b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	8013      	strh	r3, [r2, #0]
 8007bac:	e01f      	b.n	8007bee <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc4:	81fb      	strh	r3, [r7, #14]
 8007bc6:	89fb      	ldrh	r3, [r7, #14]
 8007bc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bcc:	81fb      	strh	r3, [r7, #14]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	441a      	add	r2, r3
 8007bd8:	89fb      	ldrh	r3, [r7, #14]
 8007bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bc80      	pop	{r7}
 8007bf8:	4770      	bx	lr

08007bfa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b087      	sub	sp, #28
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	7b1b      	ldrb	r3, [r3, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f040 809d 	bne.w	8007d48 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	785b      	ldrb	r3, [r3, #1]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d04c      	beq.n	8007cb0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	823b      	strh	r3, [r7, #16]
 8007c24:	8a3b      	ldrh	r3, [r7, #16]
 8007c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d01b      	beq.n	8007c66 <USB_EPClearStall+0x6c>
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c44:	81fb      	strh	r3, [r7, #14]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	441a      	add	r2, r3
 8007c50:	89fb      	ldrh	r3, [r7, #14]
 8007c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	78db      	ldrb	r3, [r3, #3]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d06c      	beq.n	8007d48 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c84:	81bb      	strh	r3, [r7, #12]
 8007c86:	89bb      	ldrh	r3, [r7, #12]
 8007c88:	f083 0320 	eor.w	r3, r3, #32
 8007c8c:	81bb      	strh	r3, [r7, #12]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	441a      	add	r2, r3
 8007c98:	89bb      	ldrh	r3, [r7, #12]
 8007c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	8013      	strh	r3, [r2, #0]
 8007cae:	e04b      	b.n	8007d48 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	82fb      	strh	r3, [r7, #22]
 8007cbe:	8afb      	ldrh	r3, [r7, #22]
 8007cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01b      	beq.n	8007d00 <USB_EPClearStall+0x106>
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cde:	82bb      	strh	r3, [r7, #20]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	441a      	add	r2, r3
 8007cea:	8abb      	ldrh	r3, [r7, #20]
 8007cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d16:	827b      	strh	r3, [r7, #18]
 8007d18:	8a7b      	ldrh	r3, [r7, #18]
 8007d1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d1e:	827b      	strh	r3, [r7, #18]
 8007d20:	8a7b      	ldrh	r3, [r7, #18]
 8007d22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d26:	827b      	strh	r3, [r7, #18]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	441a      	add	r2, r3
 8007d32:	8a7b      	ldrh	r3, [r7, #18]
 8007d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bc80      	pop	{r7}
 8007d52:	4770      	bx	lr

08007d54 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d103      	bne.n	8007d6e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2280      	movs	r2, #128	; 0x80
 8007d6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bc80      	pop	{r7}
 8007d78:	4770      	bx	lr

08007d7a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bc80      	pop	{r7}
 8007d8c:	4770      	bx	lr

08007d8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	4770      	bx	lr

08007da2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b085      	sub	sp, #20
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007db4:	68fb      	ldr	r3, [r7, #12]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bc80      	pop	{r7}
 8007dbe:	4770      	bx	lr

08007dc0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bc80      	pop	{r7}
 8007dd4:	4770      	bx	lr

08007dd6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b08b      	sub	sp, #44	; 0x2c
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	60b9      	str	r1, [r7, #8]
 8007de0:	4611      	mov	r1, r2
 8007de2:	461a      	mov	r2, r3
 8007de4:	460b      	mov	r3, r1
 8007de6:	80fb      	strh	r3, [r7, #6]
 8007de8:	4613      	mov	r3, r2
 8007dea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007dec:	88bb      	ldrh	r3, [r7, #4]
 8007dee:	3301      	adds	r3, #1
 8007df0:	085b      	lsrs	r3, r3, #1
 8007df2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dfc:	88fb      	ldrh	r3, [r7, #6]
 8007dfe:	005a      	lsls	r2, r3, #1
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e08:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e0e:	e01e      	b.n	8007e4e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	021b      	lsls	r3, r3, #8
 8007e1e:	b21a      	sxth	r2, r3
 8007e20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	b21b      	sxth	r3, r3
 8007e28:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	8a7a      	ldrh	r2, [r7, #18]
 8007e2e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	3302      	adds	r3, #2
 8007e34:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	3302      	adds	r3, #2
 8007e3a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	3301      	adds	r3, #1
 8007e46:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1dd      	bne.n	8007e10 <USB_WritePMA+0x3a>
  }
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	372c      	adds	r7, #44	; 0x2c
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bc80      	pop	{r7}
 8007e5e:	4770      	bx	lr

08007e60 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b08b      	sub	sp, #44	; 0x2c
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	460b      	mov	r3, r1
 8007e70:	80fb      	strh	r3, [r7, #6]
 8007e72:	4613      	mov	r3, r2
 8007e74:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e76:	88bb      	ldrh	r3, [r7, #4]
 8007e78:	085b      	lsrs	r3, r3, #1
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	005a      	lsls	r2, r3, #1
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e92:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	627b      	str	r3, [r7, #36]	; 0x24
 8007e98:	e01b      	b.n	8007ed2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	3302      	adds	r3, #2
 8007ea6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	0a1b      	lsrs	r3, r3, #8
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	3302      	adds	r3, #2
 8007eca:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e0      	bne.n	8007e9a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007ed8:	88bb      	ldrh	r3, [r7, #4]
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d007      	beq.n	8007ef4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	701a      	strb	r2, [r3, #0]
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	372c      	adds	r7, #44	; 0x2c
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc80      	pop	{r7}
 8007efc:	4770      	bx	lr

08007efe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	460b      	mov	r3, r1
 8007f08:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	7c1b      	ldrb	r3, [r3, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d115      	bne.n	8007f42 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	2181      	movs	r1, #129	; 0x81
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 fe31 	bl	8009b86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f2e:	2202      	movs	r2, #2
 8007f30:	2101      	movs	r1, #1
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 fe27 	bl	8009b86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007f40:	e012      	b.n	8007f68 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f42:	2340      	movs	r3, #64	; 0x40
 8007f44:	2202      	movs	r2, #2
 8007f46:	2181      	movs	r1, #129	; 0x81
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f001 fe1c 	bl	8009b86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f54:	2340      	movs	r3, #64	; 0x40
 8007f56:	2202      	movs	r2, #2
 8007f58:	2101      	movs	r1, #1
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f001 fe13 	bl	8009b86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f68:	2308      	movs	r3, #8
 8007f6a:	2203      	movs	r2, #3
 8007f6c:	2182      	movs	r1, #130	; 0x82
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 fe09 	bl	8009b86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f7a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f7e:	f001 ff29 	bl	8009dd4 <USBD_static_malloc>
 8007f82:	4602      	mov	r2, r0
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d102      	bne.n	8007f9a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007f94:	2301      	movs	r3, #1
 8007f96:	73fb      	strb	r3, [r7, #15]
 8007f98:	e026      	b.n	8007fe8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	7c1b      	ldrb	r3, [r3, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d109      	bne.n	8007fd8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fce:	2101      	movs	r1, #1
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 fec9 	bl	8009d68 <USBD_LL_PrepareReceive>
 8007fd6:	e007      	b.n	8007fe8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fde:	2340      	movs	r3, #64	; 0x40
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 fec0 	bl	8009d68 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008002:	2181      	movs	r1, #129	; 0x81
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 fde4 	bl	8009bd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008010:	2101      	movs	r1, #1
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f001 fddd 	bl	8009bd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008020:	2182      	movs	r1, #130	; 0x82
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f001 fdd5 	bl	8009bd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00e      	beq.n	8008056 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008048:	4618      	mov	r0, r3
 800804a:	f001 fecf 	bl	8009dec <USBD_static_free>
    pdev->pClassData = NULL;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008056:	7bfb      	ldrb	r3, [r7, #15]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008070:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008086:	2b00      	cmp	r3, #0
 8008088:	d039      	beq.n	80080fe <USBD_CDC_Setup+0x9e>
 800808a:	2b20      	cmp	r3, #32
 800808c:	d17f      	bne.n	800818e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	88db      	ldrh	r3, [r3, #6]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d029      	beq.n	80080ea <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	b25b      	sxtb	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	da11      	bge.n	80080c4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80080ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	88d2      	ldrh	r2, [r2, #6]
 80080b2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80080b4:	6939      	ldr	r1, [r7, #16]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	88db      	ldrh	r3, [r3, #6]
 80080ba:	461a      	mov	r2, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f001 f9da 	bl	8009476 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80080c2:	e06b      	b.n	800819c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	785a      	ldrb	r2, [r3, #1]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	88db      	ldrh	r3, [r3, #6]
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80080da:	6939      	ldr	r1, [r7, #16]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	88db      	ldrh	r3, [r3, #6]
 80080e0:	461a      	mov	r2, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f001 f9f5 	bl	80094d2 <USBD_CtlPrepareRx>
      break;
 80080e8:	e058      	b.n	800819c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	7850      	ldrb	r0, [r2, #1]
 80080f6:	2200      	movs	r2, #0
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	4798      	blx	r3
      break;
 80080fc:	e04e      	b.n	800819c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	785b      	ldrb	r3, [r3, #1]
 8008102:	2b0b      	cmp	r3, #11
 8008104:	d02e      	beq.n	8008164 <USBD_CDC_Setup+0x104>
 8008106:	2b0b      	cmp	r3, #11
 8008108:	dc38      	bgt.n	800817c <USBD_CDC_Setup+0x11c>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d002      	beq.n	8008114 <USBD_CDC_Setup+0xb4>
 800810e:	2b0a      	cmp	r3, #10
 8008110:	d014      	beq.n	800813c <USBD_CDC_Setup+0xdc>
 8008112:	e033      	b.n	800817c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800811a:	2b03      	cmp	r3, #3
 800811c:	d107      	bne.n	800812e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800811e:	f107 030c 	add.w	r3, r7, #12
 8008122:	2202      	movs	r2, #2
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 f9a5 	bl	8009476 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800812c:	e02e      	b.n	800818c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f001 f936 	bl	80093a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008136:	2302      	movs	r3, #2
 8008138:	75fb      	strb	r3, [r7, #23]
          break;
 800813a:	e027      	b.n	800818c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008142:	2b03      	cmp	r3, #3
 8008144:	d107      	bne.n	8008156 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008146:	f107 030f 	add.w	r3, r7, #15
 800814a:	2201      	movs	r2, #1
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 f991 	bl	8009476 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008154:	e01a      	b.n	800818c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 f922 	bl	80093a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800815e:	2302      	movs	r3, #2
 8008160:	75fb      	strb	r3, [r7, #23]
          break;
 8008162:	e013      	b.n	800818c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816a:	2b03      	cmp	r3, #3
 800816c:	d00d      	beq.n	800818a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 f916 	bl	80093a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008176:	2302      	movs	r3, #2
 8008178:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800817a:	e006      	b.n	800818a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 f90f 	bl	80093a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008184:	2302      	movs	r3, #2
 8008186:	75fb      	strb	r3, [r7, #23]
          break;
 8008188:	e000      	b.n	800818c <USBD_CDC_Setup+0x12c>
          break;
 800818a:	bf00      	nop
      }
      break;
 800818c:	e006      	b.n	800819c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 f906 	bl	80093a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008196:	2302      	movs	r3, #2
 8008198:	75fb      	strb	r3, [r7, #23]
      break;
 800819a:	bf00      	nop
  }

  return ret;
 800819c:	7dfb      	ldrb	r3, [r7, #23]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3718      	adds	r7, #24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	460b      	mov	r3, r1
 80081b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081c0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d03a      	beq.n	8008242 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80081cc:	78fa      	ldrb	r2, [r7, #3]
 80081ce:	6879      	ldr	r1, [r7, #4]
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	440b      	add	r3, r1
 80081da:	331c      	adds	r3, #28
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d029      	beq.n	8008236 <USBD_CDC_DataIn+0x90>
 80081e2:	78fa      	ldrb	r2, [r7, #3]
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	4613      	mov	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	440b      	add	r3, r1
 80081f0:	331c      	adds	r3, #28
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	78f9      	ldrb	r1, [r7, #3]
 80081f6:	68b8      	ldr	r0, [r7, #8]
 80081f8:	460b      	mov	r3, r1
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	440b      	add	r3, r1
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	4403      	add	r3, r0
 8008202:	3338      	adds	r3, #56	; 0x38
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	fbb2 f1f3 	udiv	r1, r2, r3
 800820a:	fb01 f303 	mul.w	r3, r1, r3
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d110      	bne.n	8008236 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008214:	78fa      	ldrb	r2, [r7, #3]
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	4613      	mov	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	440b      	add	r3, r1
 8008222:	331c      	adds	r3, #28
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008228:	78f9      	ldrb	r1, [r7, #3]
 800822a:	2300      	movs	r3, #0
 800822c:	2200      	movs	r2, #0
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f001 fd77 	bl	8009d22 <USBD_LL_Transmit>
 8008234:	e003      	b.n	800823e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	e000      	b.n	8008244 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008242:	2302      	movs	r3, #2
  }
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 fda2 	bl	8009dae <USBD_LL_GetRxDataSize>
 800826a:	4602      	mov	r2, r0
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00d      	beq.n	8008298 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008290:	4611      	mov	r1, r2
 8008292:	4798      	blx	r3

    return USBD_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	e000      	b.n	800829a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008298:	2302      	movs	r3, #2
  }
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d015      	beq.n	80082e8 <USBD_CDC_EP0_RxReady+0x46>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082c2:	2bff      	cmp	r3, #255	; 0xff
 80082c4:	d010      	beq.n	80082e8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80082d4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082dc:	b292      	uxth	r2, r2
 80082de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	22ff      	movs	r2, #255	; 0xff
 80082e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2243      	movs	r2, #67	; 0x43
 8008300:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008302:	4b03      	ldr	r3, [pc, #12]	; (8008310 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008304:	4618      	mov	r0, r3
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	bc80      	pop	{r7}
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	20000094 	.word	0x20000094

08008314 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2243      	movs	r2, #67	; 0x43
 8008320:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008322:	4b03      	ldr	r3, [pc, #12]	; (8008330 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	bc80      	pop	{r7}
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	20000050 	.word	0x20000050

08008334 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2243      	movs	r2, #67	; 0x43
 8008340:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008342:	4b03      	ldr	r3, [pc, #12]	; (8008350 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	bc80      	pop	{r7}
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	200000d8 	.word	0x200000d8

08008354 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	220a      	movs	r2, #10
 8008360:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008362:	4b03      	ldr	r3, [pc, #12]	; (8008370 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008364:	4618      	mov	r0, r3
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	bc80      	pop	{r7}
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	2000000c 	.word	0x2000000c

08008374 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800837e:	2302      	movs	r3, #2
 8008380:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d005      	beq.n	8008394 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008394:	7bfb      	ldrb	r3, [r7, #15]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	bc80      	pop	{r7}
 800839e:	4770      	bx	lr

080083a0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	4613      	mov	r3, r2
 80083ac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80083be:	88fa      	ldrh	r2, [r7, #6]
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	371c      	adds	r7, #28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bc80      	pop	{r7}
 80083d0:	4770      	bx	lr

080083d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b085      	sub	sp, #20
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bc80      	pop	{r7}
 80083f6:	4770      	bx	lr

080083f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008406:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840e:	2b00      	cmp	r3, #0
 8008410:	d017      	beq.n	8008442 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	7c1b      	ldrb	r3, [r3, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d109      	bne.n	800842e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008424:	2101      	movs	r1, #1
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f001 fc9e 	bl	8009d68 <USBD_LL_PrepareReceive>
 800842c:	e007      	b.n	800843e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008434:	2340      	movs	r3, #64	; 0x40
 8008436:	2101      	movs	r1, #1
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f001 fc95 	bl	8009d68 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	e000      	b.n	8008444 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008442:	2302      	movs	r3, #2
  }
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	4613      	mov	r3, r2
 8008458:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008460:	2302      	movs	r3, #2
 8008462:	e01a      	b.n	800849a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	79fa      	ldrb	r2, [r7, #7]
 8008490:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f001 fb02 	bl	8009a9c <USBD_LL_Init>

  return USBD_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b085      	sub	sp, #20
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d006      	beq.n	80084c4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]
 80084c2:	e001      	b.n	80084c8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80084c4:	2302      	movs	r3, #2
 80084c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bc80      	pop	{r7}
 80084d2:	4770      	bx	lr

080084d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f001 fb37 	bl	8009b50 <USBD_LL_Start>

  return USBD_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bc80      	pop	{r7}
 80084fe:	4770      	bx	lr

08008500 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800850c:	2302      	movs	r3, #2
 800850e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00c      	beq.n	8008534 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	78fa      	ldrb	r2, [r7, #3]
 8008524:	4611      	mov	r1, r2
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	4798      	blx	r3
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008534:	7bfb      	ldrb	r3, [r7, #15]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b082      	sub	sp, #8
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	460b      	mov	r3, r1
 8008548:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	78fa      	ldrb	r2, [r7, #3]
 8008554:	4611      	mov	r1, r2
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3

  return USBD_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fed7 	bl	800932a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800858a:	461a      	mov	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008598:	f003 031f 	and.w	r3, r3, #31
 800859c:	2b02      	cmp	r3, #2
 800859e:	d016      	beq.n	80085ce <USBD_LL_SetupStage+0x6a>
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d81c      	bhi.n	80085de <USBD_LL_SetupStage+0x7a>
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <USBD_LL_SetupStage+0x4a>
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d008      	beq.n	80085be <USBD_LL_SetupStage+0x5a>
 80085ac:	e017      	b.n	80085de <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f9ca 	bl	8008950 <USBD_StdDevReq>
      break;
 80085bc:	e01a      	b.n	80085f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fa2c 	bl	8008a24 <USBD_StdItfReq>
      break;
 80085cc:	e012      	b.n	80085f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fa6c 	bl	8008ab4 <USBD_StdEPReq>
      break;
 80085dc:	e00a      	b.n	80085f4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80085e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f001 fb0f 	bl	8009c10 <USBD_LL_StallEP>
      break;
 80085f2:	bf00      	nop
  }

  return USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b086      	sub	sp, #24
 8008602:	af00      	add	r7, sp, #0
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	460b      	mov	r3, r1
 8008608:	607a      	str	r2, [r7, #4]
 800860a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800860c:	7afb      	ldrb	r3, [r7, #11]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d14b      	bne.n	80086aa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008618:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008620:	2b03      	cmp	r3, #3
 8008622:	d134      	bne.n	800868e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	429a      	cmp	r2, r3
 800862e:	d919      	bls.n	8008664 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	68da      	ldr	r2, [r3, #12]
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	1ad2      	subs	r2, r2, r3
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	68da      	ldr	r2, [r3, #12]
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008646:	429a      	cmp	r2, r3
 8008648:	d203      	bcs.n	8008652 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800864e:	b29b      	uxth	r3, r3
 8008650:	e002      	b.n	8008658 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008656:	b29b      	uxth	r3, r3
 8008658:	461a      	mov	r2, r3
 800865a:	6879      	ldr	r1, [r7, #4]
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 ff56 	bl	800950e <USBD_CtlContinueRx>
 8008662:	e038      	b.n	80086d6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008676:	2b03      	cmp	r3, #3
 8008678:	d105      	bne.n	8008686 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 ff53 	bl	8009532 <USBD_CtlSendStatus>
 800868c:	e023      	b.n	80086d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008694:	2b05      	cmp	r3, #5
 8008696:	d11e      	bne.n	80086d6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80086a0:	2100      	movs	r1, #0
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f001 fab4 	bl	8009c10 <USBD_LL_StallEP>
 80086a8:	e015      	b.n	80086d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00d      	beq.n	80086d2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d108      	bne.n	80086d2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	7afa      	ldrb	r2, [r7, #11]
 80086ca:	4611      	mov	r1, r2
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	4798      	blx	r3
 80086d0:	e001      	b.n	80086d6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086d2:	2302      	movs	r3, #2
 80086d4:	e000      	b.n	80086d8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	460b      	mov	r3, r1
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80086ee:	7afb      	ldrb	r3, [r7, #11]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d17f      	bne.n	80087f4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	3314      	adds	r3, #20
 80086f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008700:	2b02      	cmp	r3, #2
 8008702:	d15c      	bne.n	80087be <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	68da      	ldr	r2, [r3, #12]
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	429a      	cmp	r2, r3
 800870e:	d915      	bls.n	800873c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	68da      	ldr	r2, [r3, #12]
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	1ad2      	subs	r2, r2, r3
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	b29b      	uxth	r3, r3
 8008724:	461a      	mov	r2, r3
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 fec0 	bl	80094ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800872e:	2300      	movs	r3, #0
 8008730:	2200      	movs	r2, #0
 8008732:	2100      	movs	r1, #0
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f001 fb17 	bl	8009d68 <USBD_LL_PrepareReceive>
 800873a:	e04e      	b.n	80087da <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	6912      	ldr	r2, [r2, #16]
 8008744:	fbb3 f1f2 	udiv	r1, r3, r2
 8008748:	fb01 f202 	mul.w	r2, r1, r2
 800874c:	1a9b      	subs	r3, r3, r2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d11c      	bne.n	800878c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	689a      	ldr	r2, [r3, #8]
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800875a:	429a      	cmp	r2, r3
 800875c:	d316      	bcc.n	800878c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008768:	429a      	cmp	r2, r3
 800876a:	d20f      	bcs.n	800878c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800876c:	2200      	movs	r2, #0
 800876e:	2100      	movs	r1, #0
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 fe9c 	bl	80094ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800877e:	2300      	movs	r3, #0
 8008780:	2200      	movs	r2, #0
 8008782:	2100      	movs	r1, #0
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f001 faef 	bl	8009d68 <USBD_LL_PrepareReceive>
 800878a:	e026      	b.n	80087da <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00a      	beq.n	80087ae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d105      	bne.n	80087ae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80087ae:	2180      	movs	r1, #128	; 0x80
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f001 fa2d 	bl	8009c10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 fece 	bl	8009558 <USBD_CtlReceiveStatus>
 80087bc:	e00d      	b.n	80087da <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	d004      	beq.n	80087d2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d103      	bne.n	80087da <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80087d2:	2180      	movs	r1, #128	; 0x80
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f001 fa1b 	bl	8009c10 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d11d      	bne.n	8008820 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f7ff fe81 	bl	80084ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80087f2:	e015      	b.n	8008820 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00d      	beq.n	800881c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008806:	2b03      	cmp	r3, #3
 8008808:	d108      	bne.n	800881c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	7afa      	ldrb	r2, [r7, #11]
 8008814:	4611      	mov	r1, r2
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	4798      	blx	r3
 800881a:	e001      	b.n	8008820 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800881c:	2302      	movs	r3, #2
 800881e:	e000      	b.n	8008822 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008832:	2340      	movs	r3, #64	; 0x40
 8008834:	2200      	movs	r2, #0
 8008836:	2100      	movs	r1, #0
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f001 f9a4 	bl	8009b86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2240      	movs	r2, #64	; 0x40
 800884a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800884e:	2340      	movs	r3, #64	; 0x40
 8008850:	2200      	movs	r2, #0
 8008852:	2180      	movs	r1, #128	; 0x80
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f001 f996 	bl	8009b86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2240      	movs	r2, #64	; 0x40
 8008864:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800888a:	2b00      	cmp	r3, #0
 800888c:	d009      	beq.n	80088a2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6852      	ldr	r2, [r2, #4]
 800889a:	b2d2      	uxtb	r2, r2
 800889c:	4611      	mov	r1, r2
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	4798      	blx	r3
  }

  return USBD_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	78fa      	ldrb	r2, [r7, #3]
 80088bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bc80      	pop	{r7}
 80088c8:	4770      	bx	lr

080088ca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2204      	movs	r2, #4
 80088e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bc80      	pop	{r7}
 80088f0:	4770      	bx	lr

080088f2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008900:	2b04      	cmp	r3, #4
 8008902:	d105      	bne.n	8008910 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	bc80      	pop	{r7}
 800891a:	4770      	bx	lr

0800891c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800892a:	2b03      	cmp	r3, #3
 800892c:	d10b      	bne.n	8008946 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d005      	beq.n	8008946 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008966:	2b40      	cmp	r3, #64	; 0x40
 8008968:	d005      	beq.n	8008976 <USBD_StdDevReq+0x26>
 800896a:	2b40      	cmp	r3, #64	; 0x40
 800896c:	d84f      	bhi.n	8008a0e <USBD_StdDevReq+0xbe>
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <USBD_StdDevReq+0x36>
 8008972:	2b20      	cmp	r3, #32
 8008974:	d14b      	bne.n	8008a0e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4798      	blx	r3
      break;
 8008984:	e048      	b.n	8008a18 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	785b      	ldrb	r3, [r3, #1]
 800898a:	2b09      	cmp	r3, #9
 800898c:	d839      	bhi.n	8008a02 <USBD_StdDevReq+0xb2>
 800898e:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <USBD_StdDevReq+0x44>)
 8008990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008994:	080089e5 	.word	0x080089e5
 8008998:	080089f9 	.word	0x080089f9
 800899c:	08008a03 	.word	0x08008a03
 80089a0:	080089ef 	.word	0x080089ef
 80089a4:	08008a03 	.word	0x08008a03
 80089a8:	080089c7 	.word	0x080089c7
 80089ac:	080089bd 	.word	0x080089bd
 80089b0:	08008a03 	.word	0x08008a03
 80089b4:	080089db 	.word	0x080089db
 80089b8:	080089d1 	.word	0x080089d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f9dc 	bl	8008d7c <USBD_GetDescriptor>
          break;
 80089c4:	e022      	b.n	8008a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fb3f 	bl	800904c <USBD_SetAddress>
          break;
 80089ce:	e01d      	b.n	8008a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fb7e 	bl	80090d4 <USBD_SetConfig>
          break;
 80089d8:	e018      	b.n	8008a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fc07 	bl	80091f0 <USBD_GetConfig>
          break;
 80089e2:	e013      	b.n	8008a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fc37 	bl	800925a <USBD_GetStatus>
          break;
 80089ec:	e00e      	b.n	8008a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fc65 	bl	80092c0 <USBD_SetFeature>
          break;
 80089f6:	e009      	b.n	8008a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fc74 	bl	80092e8 <USBD_ClrFeature>
          break;
 8008a00:	e004      	b.n	8008a0c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fccc 	bl	80093a2 <USBD_CtlError>
          break;
 8008a0a:	bf00      	nop
      }
      break;
 8008a0c:	e004      	b.n	8008a18 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fcc6 	bl	80093a2 <USBD_CtlError>
      break;
 8008a16:	bf00      	nop
  }

  return ret;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop

08008a24 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a3a:	2b40      	cmp	r3, #64	; 0x40
 8008a3c:	d005      	beq.n	8008a4a <USBD_StdItfReq+0x26>
 8008a3e:	2b40      	cmp	r3, #64	; 0x40
 8008a40:	d82e      	bhi.n	8008aa0 <USBD_StdItfReq+0x7c>
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <USBD_StdItfReq+0x26>
 8008a46:	2b20      	cmp	r3, #32
 8008a48:	d12a      	bne.n	8008aa0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a50:	3b01      	subs	r3, #1
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d81d      	bhi.n	8008a92 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	889b      	ldrh	r3, [r3, #4]
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d813      	bhi.n	8008a88 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	4798      	blx	r3
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	88db      	ldrh	r3, [r3, #6]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d110      	bne.n	8008a9c <USBD_StdItfReq+0x78>
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10d      	bne.n	8008a9c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fd56 	bl	8009532 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a86:	e009      	b.n	8008a9c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fc89 	bl	80093a2 <USBD_CtlError>
          break;
 8008a90:	e004      	b.n	8008a9c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fc84 	bl	80093a2 <USBD_CtlError>
          break;
 8008a9a:	e000      	b.n	8008a9e <USBD_StdItfReq+0x7a>
          break;
 8008a9c:	bf00      	nop
      }
      break;
 8008a9e:	e004      	b.n	8008aaa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fc7d 	bl	80093a2 <USBD_CtlError>
      break;
 8008aa8:	bf00      	nop
  }

  return USBD_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	889b      	ldrh	r3, [r3, #4]
 8008ac6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ad0:	2b40      	cmp	r3, #64	; 0x40
 8008ad2:	d007      	beq.n	8008ae4 <USBD_StdEPReq+0x30>
 8008ad4:	2b40      	cmp	r3, #64	; 0x40
 8008ad6:	f200 8146 	bhi.w	8008d66 <USBD_StdEPReq+0x2b2>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00a      	beq.n	8008af4 <USBD_StdEPReq+0x40>
 8008ade:	2b20      	cmp	r3, #32
 8008ae0:	f040 8141 	bne.w	8008d66 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	4798      	blx	r3
      break;
 8008af2:	e13d      	b.n	8008d70 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008afc:	2b20      	cmp	r3, #32
 8008afe:	d10a      	bne.n	8008b16 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	4798      	blx	r3
 8008b0e:	4603      	mov	r3, r0
 8008b10:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	e12d      	b.n	8008d72 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	785b      	ldrb	r3, [r3, #1]
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d007      	beq.n	8008b2e <USBD_StdEPReq+0x7a>
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	f300 811b 	bgt.w	8008d5a <USBD_StdEPReq+0x2a6>
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d072      	beq.n	8008c0e <USBD_StdEPReq+0x15a>
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d03a      	beq.n	8008ba2 <USBD_StdEPReq+0xee>
 8008b2c:	e115      	b.n	8008d5a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d002      	beq.n	8008b3e <USBD_StdEPReq+0x8a>
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d015      	beq.n	8008b68 <USBD_StdEPReq+0xb4>
 8008b3c:	e02b      	b.n	8008b96 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00c      	beq.n	8008b5e <USBD_StdEPReq+0xaa>
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	2b80      	cmp	r3, #128	; 0x80
 8008b48:	d009      	beq.n	8008b5e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b4a:	7bbb      	ldrb	r3, [r7, #14]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 f85e 	bl	8009c10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b54:	2180      	movs	r1, #128	; 0x80
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f001 f85a 	bl	8009c10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b5c:	e020      	b.n	8008ba0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fc1e 	bl	80093a2 <USBD_CtlError>
              break;
 8008b66:	e01b      	b.n	8008ba0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	885b      	ldrh	r3, [r3, #2]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10e      	bne.n	8008b8e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00b      	beq.n	8008b8e <USBD_StdEPReq+0xda>
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	2b80      	cmp	r3, #128	; 0x80
 8008b7a:	d008      	beq.n	8008b8e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	88db      	ldrh	r3, [r3, #6]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d104      	bne.n	8008b8e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f001 f841 	bl	8009c10 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fccf 	bl	8009532 <USBD_CtlSendStatus>

              break;
 8008b94:	e004      	b.n	8008ba0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fc02 	bl	80093a2 <USBD_CtlError>
              break;
 8008b9e:	bf00      	nop
          }
          break;
 8008ba0:	e0e0      	b.n	8008d64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d002      	beq.n	8008bb2 <USBD_StdEPReq+0xfe>
 8008bac:	2b03      	cmp	r3, #3
 8008bae:	d015      	beq.n	8008bdc <USBD_StdEPReq+0x128>
 8008bb0:	e026      	b.n	8008c00 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00c      	beq.n	8008bd2 <USBD_StdEPReq+0x11e>
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
 8008bba:	2b80      	cmp	r3, #128	; 0x80
 8008bbc:	d009      	beq.n	8008bd2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f001 f824 	bl	8009c10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008bc8:	2180      	movs	r1, #128	; 0x80
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f001 f820 	bl	8009c10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bd0:	e01c      	b.n	8008c0c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fbe4 	bl	80093a2 <USBD_CtlError>
              break;
 8008bda:	e017      	b.n	8008c0c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	885b      	ldrh	r3, [r3, #2]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d112      	bne.n	8008c0a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d004      	beq.n	8008bf8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bee:	7bbb      	ldrb	r3, [r7, #14]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f001 f82b 	bl	8009c4e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fc9a 	bl	8009532 <USBD_CtlSendStatus>
              }
              break;
 8008bfe:	e004      	b.n	8008c0a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fbcd 	bl	80093a2 <USBD_CtlError>
              break;
 8008c08:	e000      	b.n	8008c0c <USBD_StdEPReq+0x158>
              break;
 8008c0a:	bf00      	nop
          }
          break;
 8008c0c:	e0aa      	b.n	8008d64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d002      	beq.n	8008c1e <USBD_StdEPReq+0x16a>
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d032      	beq.n	8008c82 <USBD_StdEPReq+0x1ce>
 8008c1c:	e097      	b.n	8008d4e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d007      	beq.n	8008c34 <USBD_StdEPReq+0x180>
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	2b80      	cmp	r3, #128	; 0x80
 8008c28:	d004      	beq.n	8008c34 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fbb8 	bl	80093a2 <USBD_CtlError>
                break;
 8008c32:	e091      	b.n	8008d58 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	da0b      	bge.n	8008c54 <USBD_StdEPReq+0x1a0>
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c42:	4613      	mov	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	3310      	adds	r3, #16
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	4413      	add	r3, r2
 8008c50:	3304      	adds	r3, #4
 8008c52:	e00b      	b.n	8008c6c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
 8008c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	4413      	add	r3, r2
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2200      	movs	r2, #0
 8008c72:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2202      	movs	r2, #2
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fbfb 	bl	8009476 <USBD_CtlSendData>
              break;
 8008c80:	e06a      	b.n	8008d58 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	da11      	bge.n	8008cae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	f003 020f 	and.w	r2, r3, #15
 8008c90:	6879      	ldr	r1, [r7, #4]
 8008c92:	4613      	mov	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	440b      	add	r3, r1
 8008c9c:	3318      	adds	r3, #24
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d117      	bne.n	8008cd4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fb7b 	bl	80093a2 <USBD_CtlError>
                  break;
 8008cac:	e054      	b.n	8008d58 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
 8008cb0:	f003 020f 	and.w	r2, r3, #15
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d104      	bne.n	8008cd4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fb68 	bl	80093a2 <USBD_CtlError>
                  break;
 8008cd2:	e041      	b.n	8008d58 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	da0b      	bge.n	8008cf4 <USBD_StdEPReq+0x240>
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
 8008cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	3310      	adds	r3, #16
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	4413      	add	r3, r2
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	e00b      	b.n	8008d0c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	4413      	add	r3, r2
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d0e:	7bbb      	ldrb	r3, [r7, #14]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <USBD_StdEPReq+0x266>
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
 8008d16:	2b80      	cmp	r3, #128	; 0x80
 8008d18:	d103      	bne.n	8008d22 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	e00e      	b.n	8008d40 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 ffb0 	bl	8009c8c <USBD_LL_IsStallEP>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	2201      	movs	r2, #1
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	e002      	b.n	8008d40 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2202      	movs	r2, #2
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fb95 	bl	8009476 <USBD_CtlSendData>
              break;
 8008d4c:	e004      	b.n	8008d58 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fb26 	bl	80093a2 <USBD_CtlError>
              break;
 8008d56:	bf00      	nop
          }
          break;
 8008d58:	e004      	b.n	8008d64 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fb20 	bl	80093a2 <USBD_CtlError>
          break;
 8008d62:	bf00      	nop
      }
      break;
 8008d64:	e004      	b.n	8008d70 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fb1a 	bl	80093a2 <USBD_CtlError>
      break;
 8008d6e:	bf00      	nop
  }

  return ret;
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
	...

08008d7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	885b      	ldrh	r3, [r3, #2]
 8008d96:	0a1b      	lsrs	r3, r3, #8
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	2b06      	cmp	r3, #6
 8008d9e:	f200 8128 	bhi.w	8008ff2 <USBD_GetDescriptor+0x276>
 8008da2:	a201      	add	r2, pc, #4	; (adr r2, 8008da8 <USBD_GetDescriptor+0x2c>)
 8008da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da8:	08008dc5 	.word	0x08008dc5
 8008dac:	08008ddd 	.word	0x08008ddd
 8008db0:	08008e1d 	.word	0x08008e1d
 8008db4:	08008ff3 	.word	0x08008ff3
 8008db8:	08008ff3 	.word	0x08008ff3
 8008dbc:	08008f93 	.word	0x08008f93
 8008dc0:	08008fbf 	.word	0x08008fbf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	7c12      	ldrb	r2, [r2, #16]
 8008dd0:	f107 0108 	add.w	r1, r7, #8
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4798      	blx	r3
 8008dd8:	60f8      	str	r0, [r7, #12]
      break;
 8008dda:	e112      	b.n	8009002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	7c1b      	ldrb	r3, [r3, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10d      	bne.n	8008e00 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dec:	f107 0208 	add.w	r2, r7, #8
 8008df0:	4610      	mov	r0, r2
 8008df2:	4798      	blx	r3
 8008df4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008dfe:	e100      	b.n	8009002 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e08:	f107 0208 	add.w	r2, r7, #8
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	4798      	blx	r3
 8008e10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3301      	adds	r3, #1
 8008e16:	2202      	movs	r2, #2
 8008e18:	701a      	strb	r2, [r3, #0]
      break;
 8008e1a:	e0f2      	b.n	8009002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	885b      	ldrh	r3, [r3, #2]
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b05      	cmp	r3, #5
 8008e24:	f200 80ac 	bhi.w	8008f80 <USBD_GetDescriptor+0x204>
 8008e28:	a201      	add	r2, pc, #4	; (adr r2, 8008e30 <USBD_GetDescriptor+0xb4>)
 8008e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2e:	bf00      	nop
 8008e30:	08008e49 	.word	0x08008e49
 8008e34:	08008e7d 	.word	0x08008e7d
 8008e38:	08008eb1 	.word	0x08008eb1
 8008e3c:	08008ee5 	.word	0x08008ee5
 8008e40:	08008f19 	.word	0x08008f19
 8008e44:	08008f4d 	.word	0x08008f4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00b      	beq.n	8008e6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	7c12      	ldrb	r2, [r2, #16]
 8008e60:	f107 0108 	add.w	r1, r7, #8
 8008e64:	4610      	mov	r0, r2
 8008e66:	4798      	blx	r3
 8008e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e6a:	e091      	b.n	8008f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fa97 	bl	80093a2 <USBD_CtlError>
            err++;
 8008e74:	7afb      	ldrb	r3, [r7, #11]
 8008e76:	3301      	adds	r3, #1
 8008e78:	72fb      	strb	r3, [r7, #11]
          break;
 8008e7a:	e089      	b.n	8008f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00b      	beq.n	8008ea0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	7c12      	ldrb	r2, [r2, #16]
 8008e94:	f107 0108 	add.w	r1, r7, #8
 8008e98:	4610      	mov	r0, r2
 8008e9a:	4798      	blx	r3
 8008e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e9e:	e077      	b.n	8008f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fa7d 	bl	80093a2 <USBD_CtlError>
            err++;
 8008ea8:	7afb      	ldrb	r3, [r7, #11]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	72fb      	strb	r3, [r7, #11]
          break;
 8008eae:	e06f      	b.n	8008f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00b      	beq.n	8008ed4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	7c12      	ldrb	r2, [r2, #16]
 8008ec8:	f107 0108 	add.w	r1, r7, #8
 8008ecc:	4610      	mov	r0, r2
 8008ece:	4798      	blx	r3
 8008ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ed2:	e05d      	b.n	8008f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fa63 	bl	80093a2 <USBD_CtlError>
            err++;
 8008edc:	7afb      	ldrb	r3, [r7, #11]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ee2:	e055      	b.n	8008f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	7c12      	ldrb	r2, [r2, #16]
 8008efc:	f107 0108 	add.w	r1, r7, #8
 8008f00:	4610      	mov	r0, r2
 8008f02:	4798      	blx	r3
 8008f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f06:	e043      	b.n	8008f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fa49 	bl	80093a2 <USBD_CtlError>
            err++;
 8008f10:	7afb      	ldrb	r3, [r7, #11]
 8008f12:	3301      	adds	r3, #1
 8008f14:	72fb      	strb	r3, [r7, #11]
          break;
 8008f16:	e03b      	b.n	8008f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00b      	beq.n	8008f3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	7c12      	ldrb	r2, [r2, #16]
 8008f30:	f107 0108 	add.w	r1, r7, #8
 8008f34:	4610      	mov	r0, r2
 8008f36:	4798      	blx	r3
 8008f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f3a:	e029      	b.n	8008f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fa2f 	bl	80093a2 <USBD_CtlError>
            err++;
 8008f44:	7afb      	ldrb	r3, [r7, #11]
 8008f46:	3301      	adds	r3, #1
 8008f48:	72fb      	strb	r3, [r7, #11]
          break;
 8008f4a:	e021      	b.n	8008f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00b      	beq.n	8008f70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	7c12      	ldrb	r2, [r2, #16]
 8008f64:	f107 0108 	add.w	r1, r7, #8
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4798      	blx	r3
 8008f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f6e:	e00f      	b.n	8008f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fa15 	bl	80093a2 <USBD_CtlError>
            err++;
 8008f78:	7afb      	ldrb	r3, [r7, #11]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f7e:	e007      	b.n	8008f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa0d 	bl	80093a2 <USBD_CtlError>
          err++;
 8008f88:	7afb      	ldrb	r3, [r7, #11]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f8e:	e038      	b.n	8009002 <USBD_GetDescriptor+0x286>
 8008f90:	e037      	b.n	8009002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	7c1b      	ldrb	r3, [r3, #16]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d109      	bne.n	8008fae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa2:	f107 0208 	add.w	r2, r7, #8
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	4798      	blx	r3
 8008faa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fac:	e029      	b.n	8009002 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f9f6 	bl	80093a2 <USBD_CtlError>
        err++;
 8008fb6:	7afb      	ldrb	r3, [r7, #11]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	72fb      	strb	r3, [r7, #11]
      break;
 8008fbc:	e021      	b.n	8009002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	7c1b      	ldrb	r3, [r3, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10d      	bne.n	8008fe2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fce:	f107 0208 	add.w	r2, r7, #8
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	4798      	blx	r3
 8008fd6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	2207      	movs	r2, #7
 8008fde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fe0:	e00f      	b.n	8009002 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f9dc 	bl	80093a2 <USBD_CtlError>
        err++;
 8008fea:	7afb      	ldrb	r3, [r7, #11]
 8008fec:	3301      	adds	r3, #1
 8008fee:	72fb      	strb	r3, [r7, #11]
      break;
 8008ff0:	e007      	b.n	8009002 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f9d4 	bl	80093a2 <USBD_CtlError>
      err++;
 8008ffa:	7afb      	ldrb	r3, [r7, #11]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	72fb      	strb	r3, [r7, #11]
      break;
 8009000:	bf00      	nop
  }

  if (err != 0U)
 8009002:	7afb      	ldrb	r3, [r7, #11]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d11c      	bne.n	8009042 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009008:	893b      	ldrh	r3, [r7, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d011      	beq.n	8009032 <USBD_GetDescriptor+0x2b6>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	88db      	ldrh	r3, [r3, #6]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00d      	beq.n	8009032 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	88da      	ldrh	r2, [r3, #6]
 800901a:	893b      	ldrh	r3, [r7, #8]
 800901c:	4293      	cmp	r3, r2
 800901e:	bf28      	it	cs
 8009020:	4613      	movcs	r3, r2
 8009022:	b29b      	uxth	r3, r3
 8009024:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009026:	893b      	ldrh	r3, [r7, #8]
 8009028:	461a      	mov	r2, r3
 800902a:	68f9      	ldr	r1, [r7, #12]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fa22 	bl	8009476 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	88db      	ldrh	r3, [r3, #6]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d104      	bne.n	8009044 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fa79 	bl	8009532 <USBD_CtlSendStatus>
 8009040:	e000      	b.n	8009044 <USBD_GetDescriptor+0x2c8>
    return;
 8009042:	bf00      	nop
    }
  }
}
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop

0800904c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	889b      	ldrh	r3, [r3, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d130      	bne.n	80090c0 <USBD_SetAddress+0x74>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	88db      	ldrh	r3, [r3, #6]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d12c      	bne.n	80090c0 <USBD_SetAddress+0x74>
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	885b      	ldrh	r3, [r3, #2]
 800906a:	2b7f      	cmp	r3, #127	; 0x7f
 800906c:	d828      	bhi.n	80090c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	885b      	ldrh	r3, [r3, #2]
 8009072:	b2db      	uxtb	r3, r3
 8009074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009078:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009080:	2b03      	cmp	r3, #3
 8009082:	d104      	bne.n	800908e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f98b 	bl	80093a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800908c:	e01d      	b.n	80090ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	7bfa      	ldrb	r2, [r7, #15]
 8009092:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fe22 	bl	8009ce4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fa46 	bl	8009532 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d004      	beq.n	80090b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090b4:	e009      	b.n	80090ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090be:	e004      	b.n	80090ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f96d 	bl	80093a2 <USBD_CtlError>
  }
}
 80090c8:	bf00      	nop
 80090ca:	bf00      	nop
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
	...

080090d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	885b      	ldrh	r3, [r3, #2]
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	4b41      	ldr	r3, [pc, #260]	; (80091ec <USBD_SetConfig+0x118>)
 80090e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090e8:	4b40      	ldr	r3, [pc, #256]	; (80091ec <USBD_SetConfig+0x118>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d904      	bls.n	80090fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f955 	bl	80093a2 <USBD_CtlError>
 80090f8:	e075      	b.n	80091e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009100:	2b02      	cmp	r3, #2
 8009102:	d002      	beq.n	800910a <USBD_SetConfig+0x36>
 8009104:	2b03      	cmp	r3, #3
 8009106:	d023      	beq.n	8009150 <USBD_SetConfig+0x7c>
 8009108:	e062      	b.n	80091d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800910a:	4b38      	ldr	r3, [pc, #224]	; (80091ec <USBD_SetConfig+0x118>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d01a      	beq.n	8009148 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009112:	4b36      	ldr	r3, [pc, #216]	; (80091ec <USBD_SetConfig+0x118>)
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2203      	movs	r2, #3
 8009120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009124:	4b31      	ldr	r3, [pc, #196]	; (80091ec <USBD_SetConfig+0x118>)
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7ff f9e8 	bl	8008500 <USBD_SetClassConfig>
 8009130:	4603      	mov	r3, r0
 8009132:	2b02      	cmp	r3, #2
 8009134:	d104      	bne.n	8009140 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f932 	bl	80093a2 <USBD_CtlError>
            return;
 800913e:	e052      	b.n	80091e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f9f6 	bl	8009532 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009146:	e04e      	b.n	80091e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f9f2 	bl	8009532 <USBD_CtlSendStatus>
        break;
 800914e:	e04a      	b.n	80091e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009150:	4b26      	ldr	r3, [pc, #152]	; (80091ec <USBD_SetConfig+0x118>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d112      	bne.n	800917e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2202      	movs	r2, #2
 800915c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009160:	4b22      	ldr	r3, [pc, #136]	; (80091ec <USBD_SetConfig+0x118>)
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	461a      	mov	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800916a:	4b20      	ldr	r3, [pc, #128]	; (80091ec <USBD_SetConfig+0x118>)
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff f9e4 	bl	800853e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f9db 	bl	8009532 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800917c:	e033      	b.n	80091e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800917e:	4b1b      	ldr	r3, [pc, #108]	; (80091ec <USBD_SetConfig+0x118>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	429a      	cmp	r2, r3
 800918a:	d01d      	beq.n	80091c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	b2db      	uxtb	r3, r3
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7ff f9d2 	bl	800853e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800919a:	4b14      	ldr	r3, [pc, #80]	; (80091ec <USBD_SetConfig+0x118>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80091a4:	4b11      	ldr	r3, [pc, #68]	; (80091ec <USBD_SetConfig+0x118>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7ff f9a8 	bl	8008500 <USBD_SetClassConfig>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d104      	bne.n	80091c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f8f2 	bl	80093a2 <USBD_CtlError>
            return;
 80091be:	e012      	b.n	80091e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f9b6 	bl	8009532 <USBD_CtlSendStatus>
        break;
 80091c6:	e00e      	b.n	80091e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f9b2 	bl	8009532 <USBD_CtlSendStatus>
        break;
 80091ce:	e00a      	b.n	80091e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f8e5 	bl	80093a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80091d8:	4b04      	ldr	r3, [pc, #16]	; (80091ec <USBD_SetConfig+0x118>)
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7ff f9ad 	bl	800853e <USBD_ClrClassConfig>
        break;
 80091e4:	bf00      	nop
    }
  }
}
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	20000328 	.word	0x20000328

080091f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	88db      	ldrh	r3, [r3, #6]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d004      	beq.n	800920c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f8cc 	bl	80093a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800920a:	e022      	b.n	8009252 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009212:	2b02      	cmp	r3, #2
 8009214:	dc02      	bgt.n	800921c <USBD_GetConfig+0x2c>
 8009216:	2b00      	cmp	r3, #0
 8009218:	dc03      	bgt.n	8009222 <USBD_GetConfig+0x32>
 800921a:	e015      	b.n	8009248 <USBD_GetConfig+0x58>
 800921c:	2b03      	cmp	r3, #3
 800921e:	d00b      	beq.n	8009238 <USBD_GetConfig+0x48>
 8009220:	e012      	b.n	8009248 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3308      	adds	r3, #8
 800922c:	2201      	movs	r2, #1
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f920 	bl	8009476 <USBD_CtlSendData>
        break;
 8009236:	e00c      	b.n	8009252 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3304      	adds	r3, #4
 800923c:	2201      	movs	r2, #1
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f918 	bl	8009476 <USBD_CtlSendData>
        break;
 8009246:	e004      	b.n	8009252 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f8a9 	bl	80093a2 <USBD_CtlError>
        break;
 8009250:	bf00      	nop
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800926a:	3b01      	subs	r3, #1
 800926c:	2b02      	cmp	r3, #2
 800926e:	d81e      	bhi.n	80092ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	88db      	ldrh	r3, [r3, #6]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d004      	beq.n	8009282 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f891 	bl	80093a2 <USBD_CtlError>
        break;
 8009280:	e01a      	b.n	80092b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800928e:	2b00      	cmp	r3, #0
 8009290:	d005      	beq.n	800929e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f043 0202 	orr.w	r2, r3, #2
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	330c      	adds	r3, #12
 80092a2:	2202      	movs	r2, #2
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f8e5 	bl	8009476 <USBD_CtlSendData>
      break;
 80092ac:	e004      	b.n	80092b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f876 	bl	80093a2 <USBD_CtlError>
      break;
 80092b6:	bf00      	nop
  }
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	885b      	ldrh	r3, [r3, #2]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d106      	bne.n	80092e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f929 	bl	8009532 <USBD_CtlSendStatus>
  }
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f8:	3b01      	subs	r3, #1
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d80b      	bhi.n	8009316 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	885b      	ldrh	r3, [r3, #2]
 8009302:	2b01      	cmp	r3, #1
 8009304:	d10c      	bne.n	8009320 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f90f 	bl	8009532 <USBD_CtlSendStatus>
      }
      break;
 8009314:	e004      	b.n	8009320 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f842 	bl	80093a2 <USBD_CtlError>
      break;
 800931e:	e000      	b.n	8009322 <USBD_ClrFeature+0x3a>
      break;
 8009320:	bf00      	nop
  }
}
 8009322:	bf00      	nop
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781a      	ldrb	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	785a      	ldrb	r2, [r3, #1]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	3302      	adds	r3, #2
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	b29a      	uxth	r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	3303      	adds	r3, #3
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	b29b      	uxth	r3, r3
 8009354:	021b      	lsls	r3, r3, #8
 8009356:	b29b      	uxth	r3, r3
 8009358:	4413      	add	r3, r2
 800935a:	b29a      	uxth	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	3304      	adds	r3, #4
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	b29a      	uxth	r2, r3
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	3305      	adds	r3, #5
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	b29b      	uxth	r3, r3
 8009370:	021b      	lsls	r3, r3, #8
 8009372:	b29b      	uxth	r3, r3
 8009374:	4413      	add	r3, r2
 8009376:	b29a      	uxth	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	3306      	adds	r3, #6
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	b29a      	uxth	r2, r3
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	3307      	adds	r3, #7
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	b29b      	uxth	r3, r3
 800938c:	021b      	lsls	r3, r3, #8
 800938e:	b29b      	uxth	r3, r3
 8009390:	4413      	add	r3, r2
 8009392:	b29a      	uxth	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	80da      	strh	r2, [r3, #6]

}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	bc80      	pop	{r7}
 80093a0:	4770      	bx	lr

080093a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b082      	sub	sp, #8
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80093ac:	2180      	movs	r1, #128	; 0x80
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fc2e 	bl	8009c10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80093b4:	2100      	movs	r1, #0
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fc2a 	bl	8009c10 <USBD_LL_StallEP>
}
 80093bc:	bf00      	nop
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d032      	beq.n	8009440 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f000 f834 	bl	8009448 <USBD_GetLen>
 80093e0:	4603      	mov	r3, r0
 80093e2:	3301      	adds	r3, #1
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	005b      	lsls	r3, r3, #1
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
 80093f0:	1c5a      	adds	r2, r3, #1
 80093f2:	75fa      	strb	r2, [r7, #23]
 80093f4:	461a      	mov	r2, r3
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	4413      	add	r3, r2
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	7812      	ldrb	r2, [r2, #0]
 80093fe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009400:	7dfb      	ldrb	r3, [r7, #23]
 8009402:	1c5a      	adds	r2, r3, #1
 8009404:	75fa      	strb	r2, [r7, #23]
 8009406:	461a      	mov	r2, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	4413      	add	r3, r2
 800940c:	2203      	movs	r2, #3
 800940e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009410:	e012      	b.n	8009438 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	60fa      	str	r2, [r7, #12]
 8009418:	7dfa      	ldrb	r2, [r7, #23]
 800941a:	1c51      	adds	r1, r2, #1
 800941c:	75f9      	strb	r1, [r7, #23]
 800941e:	4611      	mov	r1, r2
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	440a      	add	r2, r1
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009428:	7dfb      	ldrb	r3, [r7, #23]
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	75fa      	strb	r2, [r7, #23]
 800942e:	461a      	mov	r2, r3
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	4413      	add	r3, r2
 8009434:	2200      	movs	r2, #0
 8009436:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e8      	bne.n	8009412 <USBD_GetString+0x4e>
    }
  }
}
 8009440:	bf00      	nop
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009450:	2300      	movs	r3, #0
 8009452:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009454:	e005      	b.n	8009462 <USBD_GetLen+0x1a>
  {
    len++;
 8009456:	7bfb      	ldrb	r3, [r7, #15]
 8009458:	3301      	adds	r3, #1
 800945a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	3301      	adds	r3, #1
 8009460:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1f5      	bne.n	8009456 <USBD_GetLen+0xe>
  }

  return len;
 800946a:	7bfb      	ldrb	r3, [r7, #15]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3714      	adds	r7, #20
 8009470:	46bd      	mov	sp, r7
 8009472:	bc80      	pop	{r7}
 8009474:	4770      	bx	lr

08009476 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b084      	sub	sp, #16
 800947a:	af00      	add	r7, sp, #0
 800947c:	60f8      	str	r0, [r7, #12]
 800947e:	60b9      	str	r1, [r7, #8]
 8009480:	4613      	mov	r3, r2
 8009482:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2202      	movs	r2, #2
 8009488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800948c:	88fa      	ldrh	r2, [r7, #6]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009492:	88fa      	ldrh	r2, [r7, #6]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009498:	88fb      	ldrh	r3, [r7, #6]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	2100      	movs	r1, #0
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f000 fc3f 	bl	8009d22 <USBD_LL_Transmit>

  return USBD_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	60f8      	str	r0, [r7, #12]
 80094b6:	60b9      	str	r1, [r7, #8]
 80094b8:	4613      	mov	r3, r2
 80094ba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094bc:	88fb      	ldrh	r3, [r7, #6]
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	2100      	movs	r1, #0
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 fc2d 	bl	8009d22 <USBD_LL_Transmit>

  return USBD_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	60f8      	str	r0, [r7, #12]
 80094da:	60b9      	str	r1, [r7, #8]
 80094dc:	4613      	mov	r3, r2
 80094de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2203      	movs	r2, #3
 80094e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094e8:	88fa      	ldrh	r2, [r7, #6]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80094f0:	88fa      	ldrh	r2, [r7, #6]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094f8:	88fb      	ldrh	r3, [r7, #6]
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	2100      	movs	r1, #0
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 fc32 	bl	8009d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	60f8      	str	r0, [r7, #12]
 8009516:	60b9      	str	r1, [r7, #8]
 8009518:	4613      	mov	r3, r2
 800951a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800951c:	88fb      	ldrh	r3, [r7, #6]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	2100      	movs	r1, #0
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 fc20 	bl	8009d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b082      	sub	sp, #8
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2204      	movs	r2, #4
 800953e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009542:	2300      	movs	r3, #0
 8009544:	2200      	movs	r2, #0
 8009546:	2100      	movs	r1, #0
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fbea 	bl	8009d22 <USBD_LL_Transmit>

  return USBD_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2205      	movs	r2, #5
 8009564:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009568:	2300      	movs	r3, #0
 800956a:	2200      	movs	r2, #0
 800956c:	2100      	movs	r1, #0
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fbfa 	bl	8009d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009584:	2200      	movs	r2, #0
 8009586:	4912      	ldr	r1, [pc, #72]	; (80095d0 <MX_USB_DEVICE_Init+0x50>)
 8009588:	4812      	ldr	r0, [pc, #72]	; (80095d4 <MX_USB_DEVICE_Init+0x54>)
 800958a:	f7fe ff5f 	bl	800844c <USBD_Init>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009594:	f7f7 fdca 	bl	800112c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009598:	490f      	ldr	r1, [pc, #60]	; (80095d8 <MX_USB_DEVICE_Init+0x58>)
 800959a:	480e      	ldr	r0, [pc, #56]	; (80095d4 <MX_USB_DEVICE_Init+0x54>)
 800959c:	f7fe ff81 	bl	80084a2 <USBD_RegisterClass>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80095a6:	f7f7 fdc1 	bl	800112c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80095aa:	490c      	ldr	r1, [pc, #48]	; (80095dc <MX_USB_DEVICE_Init+0x5c>)
 80095ac:	4809      	ldr	r0, [pc, #36]	; (80095d4 <MX_USB_DEVICE_Init+0x54>)
 80095ae:	f7fe fee1 	bl	8008374 <USBD_CDC_RegisterInterface>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80095b8:	f7f7 fdb8 	bl	800112c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80095bc:	4805      	ldr	r0, [pc, #20]	; (80095d4 <MX_USB_DEVICE_Init+0x54>)
 80095be:	f7fe ff89 	bl	80084d4 <USBD_Start>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80095c8:	f7f7 fdb0 	bl	800112c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80095cc:	bf00      	nop
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	2000012c 	.word	0x2000012c
 80095d4:	2000032c 	.word	0x2000032c
 80095d8:	20000018 	.word	0x20000018
 80095dc:	2000011c 	.word	0x2000011c

080095e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095e4:	2200      	movs	r2, #0
 80095e6:	4905      	ldr	r1, [pc, #20]	; (80095fc <CDC_Init_FS+0x1c>)
 80095e8:	4805      	ldr	r0, [pc, #20]	; (8009600 <CDC_Init_FS+0x20>)
 80095ea:	f7fe fed9 	bl	80083a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095ee:	4905      	ldr	r1, [pc, #20]	; (8009604 <CDC_Init_FS+0x24>)
 80095f0:	4803      	ldr	r0, [pc, #12]	; (8009600 <CDC_Init_FS+0x20>)
 80095f2:	f7fe feee 	bl	80083d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	200009f0 	.word	0x200009f0
 8009600:	2000032c 	.word	0x2000032c
 8009604:	200005f0 	.word	0x200005f0

08009608 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009608:	b480      	push	{r7}
 800960a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800960c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800960e:	4618      	mov	r0, r3
 8009610:	46bd      	mov	sp, r7
 8009612:	bc80      	pop	{r7}
 8009614:	4770      	bx	lr
	...

08009618 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	6039      	str	r1, [r7, #0]
 8009622:	71fb      	strb	r3, [r7, #7]
 8009624:	4613      	mov	r3, r2
 8009626:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009628:	79fb      	ldrb	r3, [r7, #7]
 800962a:	2b23      	cmp	r3, #35	; 0x23
 800962c:	d84a      	bhi.n	80096c4 <CDC_Control_FS+0xac>
 800962e:	a201      	add	r2, pc, #4	; (adr r2, 8009634 <CDC_Control_FS+0x1c>)
 8009630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009634:	080096c5 	.word	0x080096c5
 8009638:	080096c5 	.word	0x080096c5
 800963c:	080096c5 	.word	0x080096c5
 8009640:	080096c5 	.word	0x080096c5
 8009644:	080096c5 	.word	0x080096c5
 8009648:	080096c5 	.word	0x080096c5
 800964c:	080096c5 	.word	0x080096c5
 8009650:	080096c5 	.word	0x080096c5
 8009654:	080096c5 	.word	0x080096c5
 8009658:	080096c5 	.word	0x080096c5
 800965c:	080096c5 	.word	0x080096c5
 8009660:	080096c5 	.word	0x080096c5
 8009664:	080096c5 	.word	0x080096c5
 8009668:	080096c5 	.word	0x080096c5
 800966c:	080096c5 	.word	0x080096c5
 8009670:	080096c5 	.word	0x080096c5
 8009674:	080096c5 	.word	0x080096c5
 8009678:	080096c5 	.word	0x080096c5
 800967c:	080096c5 	.word	0x080096c5
 8009680:	080096c5 	.word	0x080096c5
 8009684:	080096c5 	.word	0x080096c5
 8009688:	080096c5 	.word	0x080096c5
 800968c:	080096c5 	.word	0x080096c5
 8009690:	080096c5 	.word	0x080096c5
 8009694:	080096c5 	.word	0x080096c5
 8009698:	080096c5 	.word	0x080096c5
 800969c:	080096c5 	.word	0x080096c5
 80096a0:	080096c5 	.word	0x080096c5
 80096a4:	080096c5 	.word	0x080096c5
 80096a8:	080096c5 	.word	0x080096c5
 80096ac:	080096c5 	.word	0x080096c5
 80096b0:	080096c5 	.word	0x080096c5
 80096b4:	080096c5 	.word	0x080096c5
 80096b8:	080096c5 	.word	0x080096c5
 80096bc:	080096c5 	.word	0x080096c5
 80096c0:	080096c5 	.word	0x080096c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80096c4:	bf00      	nop
  }

  return (USBD_OK);
 80096c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bc80      	pop	{r7}
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop

080096d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	4805      	ldr	r0, [pc, #20]	; (80096f8 <CDC_Receive_FS+0x24>)
 80096e2:	f7fe fe76 	bl	80083d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096e6:	4804      	ldr	r0, [pc, #16]	; (80096f8 <CDC_Receive_FS+0x24>)
 80096e8:	f7fe fe86 	bl	80083f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	2000032c 	.word	0x2000032c

080096fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	4603      	mov	r3, r0
 8009704:	6039      	str	r1, [r7, #0]
 8009706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2212      	movs	r2, #18
 800970c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800970e:	4b03      	ldr	r3, [pc, #12]	; (800971c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	bc80      	pop	{r7}
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	20000148 	.word	0x20000148

08009720 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	6039      	str	r1, [r7, #0]
 800972a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2204      	movs	r2, #4
 8009730:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009732:	4b03      	ldr	r3, [pc, #12]	; (8009740 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009734:	4618      	mov	r0, r3
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	bc80      	pop	{r7}
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	2000015c 	.word	0x2000015c

08009744 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	6039      	str	r1, [r7, #0]
 800974e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009750:	79fb      	ldrb	r3, [r7, #7]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d105      	bne.n	8009762 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	4907      	ldr	r1, [pc, #28]	; (8009778 <USBD_FS_ProductStrDescriptor+0x34>)
 800975a:	4808      	ldr	r0, [pc, #32]	; (800977c <USBD_FS_ProductStrDescriptor+0x38>)
 800975c:	f7ff fe32 	bl	80093c4 <USBD_GetString>
 8009760:	e004      	b.n	800976c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	4904      	ldr	r1, [pc, #16]	; (8009778 <USBD_FS_ProductStrDescriptor+0x34>)
 8009766:	4805      	ldr	r0, [pc, #20]	; (800977c <USBD_FS_ProductStrDescriptor+0x38>)
 8009768:	f7ff fe2c 	bl	80093c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800976c:	4b02      	ldr	r3, [pc, #8]	; (8009778 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20000df0 	.word	0x20000df0
 800977c:	08009edc 	.word	0x08009edc

08009780 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	4904      	ldr	r1, [pc, #16]	; (80097a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009790:	4804      	ldr	r0, [pc, #16]	; (80097a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009792:	f7ff fe17 	bl	80093c4 <USBD_GetString>
  return USBD_StrDesc;
 8009796:	4b02      	ldr	r3, [pc, #8]	; (80097a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	20000df0 	.word	0x20000df0
 80097a4:	08009ef4 	.word	0x08009ef4

080097a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	6039      	str	r1, [r7, #0]
 80097b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	221a      	movs	r2, #26
 80097b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097ba:	f000 f843 	bl	8009844 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097be:	4b02      	ldr	r3, [pc, #8]	; (80097c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	20000160 	.word	0x20000160

080097cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	6039      	str	r1, [r7, #0]
 80097d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097d8:	79fb      	ldrb	r3, [r7, #7]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d105      	bne.n	80097ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097de:	683a      	ldr	r2, [r7, #0]
 80097e0:	4907      	ldr	r1, [pc, #28]	; (8009800 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097e2:	4808      	ldr	r0, [pc, #32]	; (8009804 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097e4:	f7ff fdee 	bl	80093c4 <USBD_GetString>
 80097e8:	e004      	b.n	80097f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	4904      	ldr	r1, [pc, #16]	; (8009800 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097ee:	4805      	ldr	r0, [pc, #20]	; (8009804 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097f0:	f7ff fde8 	bl	80093c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097f4:	4b02      	ldr	r3, [pc, #8]	; (8009800 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	20000df0 	.word	0x20000df0
 8009804:	08009f08 	.word	0x08009f08

08009808 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	6039      	str	r1, [r7, #0]
 8009812:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d105      	bne.n	8009826 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	4907      	ldr	r1, [pc, #28]	; (800983c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800981e:	4808      	ldr	r0, [pc, #32]	; (8009840 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009820:	f7ff fdd0 	bl	80093c4 <USBD_GetString>
 8009824:	e004      	b.n	8009830 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	4904      	ldr	r1, [pc, #16]	; (800983c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800982a:	4805      	ldr	r0, [pc, #20]	; (8009840 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800982c:	f7ff fdca 	bl	80093c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009830:	4b02      	ldr	r3, [pc, #8]	; (800983c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	20000df0 	.word	0x20000df0
 8009840:	08009f14 	.word	0x08009f14

08009844 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800984a:	4b0f      	ldr	r3, [pc, #60]	; (8009888 <Get_SerialNum+0x44>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009850:	4b0e      	ldr	r3, [pc, #56]	; (800988c <Get_SerialNum+0x48>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009856:	4b0e      	ldr	r3, [pc, #56]	; (8009890 <Get_SerialNum+0x4c>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4413      	add	r3, r2
 8009862:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d009      	beq.n	800987e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800986a:	2208      	movs	r2, #8
 800986c:	4909      	ldr	r1, [pc, #36]	; (8009894 <Get_SerialNum+0x50>)
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 f814 	bl	800989c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009874:	2204      	movs	r2, #4
 8009876:	4908      	ldr	r1, [pc, #32]	; (8009898 <Get_SerialNum+0x54>)
 8009878:	68b8      	ldr	r0, [r7, #8]
 800987a:	f000 f80f 	bl	800989c <IntToUnicode>
  }
}
 800987e:	bf00      	nop
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	1ffff7e8 	.word	0x1ffff7e8
 800988c:	1ffff7ec 	.word	0x1ffff7ec
 8009890:	1ffff7f0 	.word	0x1ffff7f0
 8009894:	20000162 	.word	0x20000162
 8009898:	20000172 	.word	0x20000172

0800989c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	4613      	mov	r3, r2
 80098a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098ae:	2300      	movs	r3, #0
 80098b0:	75fb      	strb	r3, [r7, #23]
 80098b2:	e027      	b.n	8009904 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	0f1b      	lsrs	r3, r3, #28
 80098b8:	2b09      	cmp	r3, #9
 80098ba:	d80b      	bhi.n	80098d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	0f1b      	lsrs	r3, r3, #28
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	005b      	lsls	r3, r3, #1
 80098c6:	4619      	mov	r1, r3
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	440b      	add	r3, r1
 80098cc:	3230      	adds	r2, #48	; 0x30
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	701a      	strb	r2, [r3, #0]
 80098d2:	e00a      	b.n	80098ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	0f1b      	lsrs	r3, r3, #28
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	7dfb      	ldrb	r3, [r7, #23]
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	4619      	mov	r1, r3
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	440b      	add	r3, r1
 80098e4:	3237      	adds	r2, #55	; 0x37
 80098e6:	b2d2      	uxtb	r2, r2
 80098e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	011b      	lsls	r3, r3, #4
 80098ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	3301      	adds	r3, #1
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	4413      	add	r3, r2
 80098fa:	2200      	movs	r2, #0
 80098fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	3301      	adds	r3, #1
 8009902:	75fb      	strb	r3, [r7, #23]
 8009904:	7dfa      	ldrb	r2, [r7, #23]
 8009906:	79fb      	ldrb	r3, [r7, #7]
 8009908:	429a      	cmp	r2, r3
 800990a:	d3d3      	bcc.n	80098b4 <IntToUnicode+0x18>
  }
}
 800990c:	bf00      	nop
 800990e:	bf00      	nop
 8009910:	371c      	adds	r7, #28
 8009912:	46bd      	mov	sp, r7
 8009914:	bc80      	pop	{r7}
 8009916:	4770      	bx	lr

08009918 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a0d      	ldr	r2, [pc, #52]	; (800995c <HAL_PCD_MspInit+0x44>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d113      	bne.n	8009952 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800992a:	4b0d      	ldr	r3, [pc, #52]	; (8009960 <HAL_PCD_MspInit+0x48>)
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	4a0c      	ldr	r2, [pc, #48]	; (8009960 <HAL_PCD_MspInit+0x48>)
 8009930:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009934:	61d3      	str	r3, [r2, #28]
 8009936:	4b0a      	ldr	r3, [pc, #40]	; (8009960 <HAL_PCD_MspInit+0x48>)
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009942:	2200      	movs	r2, #0
 8009944:	2100      	movs	r1, #0
 8009946:	2014      	movs	r0, #20
 8009948:	f7f8 fbbb 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800994c:	2014      	movs	r0, #20
 800994e:	f7f8 fbd4 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009952:	bf00      	nop
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	40005c00 	.word	0x40005c00
 8009960:	40021000 	.word	0x40021000

08009964 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009978:	4619      	mov	r1, r3
 800997a:	4610      	mov	r0, r2
 800997c:	f7fe fdf2 	bl	8008564 <USBD_LL_SetupStage>
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800999a:	78fa      	ldrb	r2, [r7, #3]
 800999c:	6879      	ldr	r1, [r7, #4]
 800999e:	4613      	mov	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	00db      	lsls	r3, r3, #3
 80099a6:	440b      	add	r3, r1
 80099a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	78fb      	ldrb	r3, [r7, #3]
 80099b0:	4619      	mov	r1, r3
 80099b2:	f7fe fe24 	bl	80085fe <USBD_LL_DataOutStage>
}
 80099b6:	bf00      	nop
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b082      	sub	sp, #8
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	460b      	mov	r3, r1
 80099c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80099d0:	78fa      	ldrb	r2, [r7, #3]
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	4613      	mov	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	440b      	add	r3, r1
 80099de:	333c      	adds	r3, #60	; 0x3c
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	78fb      	ldrb	r3, [r7, #3]
 80099e4:	4619      	mov	r1, r3
 80099e6:	f7fe fe7b 	bl	80086e0 <USBD_LL_DataInStage>
}
 80099ea:	bf00      	nop
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7fe ff8b 	bl	800891c <USBD_LL_SOF>
}
 8009a06:	bf00      	nop
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a16:	2301      	movs	r3, #1
 8009a18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d001      	beq.n	8009a26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a22:	f7f7 fb83 	bl	800112c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009a2c:	7bfa      	ldrb	r2, [r7, #15]
 8009a2e:	4611      	mov	r1, r2
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7fe ff3b 	bl	80088ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fe fef4 	bl	800882a <USBD_LL_Reset>
}
 8009a42:	bf00      	nop
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
	...

08009a4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe ff35 	bl	80088ca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d005      	beq.n	8009a74 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a68:	4b04      	ldr	r3, [pc, #16]	; (8009a7c <HAL_PCD_SuspendCallback+0x30>)
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	4a03      	ldr	r2, [pc, #12]	; (8009a7c <HAL_PCD_SuspendCallback+0x30>)
 8009a6e:	f043 0306 	orr.w	r3, r3, #6
 8009a72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a74:	bf00      	nop
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	e000ed00 	.word	0xe000ed00

08009a80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe ff2f 	bl	80088f2 <USBD_LL_Resume>
}
 8009a94:	bf00      	nop
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009aa4:	4a28      	ldr	r2, [pc, #160]	; (8009b48 <USBD_LL_Init+0xac>)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a26      	ldr	r2, [pc, #152]	; (8009b48 <USBD_LL_Init+0xac>)
 8009ab0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009ab4:	4b24      	ldr	r3, [pc, #144]	; (8009b48 <USBD_LL_Init+0xac>)
 8009ab6:	4a25      	ldr	r2, [pc, #148]	; (8009b4c <USBD_LL_Init+0xb0>)
 8009ab8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009aba:	4b23      	ldr	r3, [pc, #140]	; (8009b48 <USBD_LL_Init+0xac>)
 8009abc:	2208      	movs	r2, #8
 8009abe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009ac0:	4b21      	ldr	r3, [pc, #132]	; (8009b48 <USBD_LL_Init+0xac>)
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009ac6:	4b20      	ldr	r3, [pc, #128]	; (8009b48 <USBD_LL_Init+0xac>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009acc:	4b1e      	ldr	r3, [pc, #120]	; (8009b48 <USBD_LL_Init+0xac>)
 8009ace:	2200      	movs	r2, #0
 8009ad0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009ad2:	4b1d      	ldr	r3, [pc, #116]	; (8009b48 <USBD_LL_Init+0xac>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009ad8:	481b      	ldr	r0, [pc, #108]	; (8009b48 <USBD_LL_Init+0xac>)
 8009ada:	f7f8 fe39 	bl	8002750 <HAL_PCD_Init>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009ae4:	f7f7 fb22 	bl	800112c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009aee:	2318      	movs	r3, #24
 8009af0:	2200      	movs	r2, #0
 8009af2:	2100      	movs	r1, #0
 8009af4:	f7fa fb58 	bl	80041a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009afe:	2358      	movs	r3, #88	; 0x58
 8009b00:	2200      	movs	r2, #0
 8009b02:	2180      	movs	r1, #128	; 0x80
 8009b04:	f7fa fb50 	bl	80041a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b0e:	23c0      	movs	r3, #192	; 0xc0
 8009b10:	2200      	movs	r2, #0
 8009b12:	2181      	movs	r1, #129	; 0x81
 8009b14:	f7fa fb48 	bl	80041a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b1e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009b22:	2200      	movs	r2, #0
 8009b24:	2101      	movs	r1, #1
 8009b26:	f7fa fb3f 	bl	80041a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b34:	2200      	movs	r2, #0
 8009b36:	2182      	movs	r1, #130	; 0x82
 8009b38:	f7fa fb36 	bl	80041a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20000ff0 	.word	0x20000ff0
 8009b4c:	40005c00 	.word	0x40005c00

08009b50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7f8 fef1 	bl	800294e <HAL_PCD_Start>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 f94e 	bl	8009e14 <USBD_Get_USB_Status>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4611      	mov	r1, r2
 8009b92:	461a      	mov	r2, r3
 8009b94:	4603      	mov	r3, r0
 8009b96:	70fb      	strb	r3, [r7, #3]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	70bb      	strb	r3, [r7, #2]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bae:	78bb      	ldrb	r3, [r7, #2]
 8009bb0:	883a      	ldrh	r2, [r7, #0]
 8009bb2:	78f9      	ldrb	r1, [r7, #3]
 8009bb4:	f7f9 f846 	bl	8002c44 <HAL_PCD_EP_Open>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 f928 	bl	8009e14 <USBD_Get_USB_Status>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	460b      	mov	r3, r1
 8009bdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bec:	78fa      	ldrb	r2, [r7, #3]
 8009bee:	4611      	mov	r1, r2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7f9 f884 	bl	8002cfe <HAL_PCD_EP_Close>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bfa:	7bfb      	ldrb	r3, [r7, #15]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 f909 	bl	8009e14 <USBD_Get_USB_Status>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c20:	2300      	movs	r3, #0
 8009c22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c2a:	78fa      	ldrb	r2, [r7, #3]
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7f9 f92c 	bl	8002e8c <HAL_PCD_EP_SetStall>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 f8ea 	bl	8009e14 <USBD_Get_USB_Status>
 8009c40:	4603      	mov	r3, r0
 8009c42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c44:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	460b      	mov	r3, r1
 8009c58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c68:	78fa      	ldrb	r2, [r7, #3]
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7f9 f96d 	bl	8002f4c <HAL_PCD_EP_ClrStall>
 8009c72:	4603      	mov	r3, r0
 8009c74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c76:	7bfb      	ldrb	r3, [r7, #15]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 f8cb 	bl	8009e14 <USBD_Get_USB_Status>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	da0c      	bge.n	8009cc2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ca8:	78fb      	ldrb	r3, [r7, #3]
 8009caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cae:	68f9      	ldr	r1, [r7, #12]
 8009cb0:	1c5a      	adds	r2, r3, #1
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	00db      	lsls	r3, r3, #3
 8009cba:	440b      	add	r3, r1
 8009cbc:	3302      	adds	r3, #2
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	e00b      	b.n	8009cda <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009cc2:	78fb      	ldrb	r3, [r7, #3]
 8009cc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cc8:	68f9      	ldr	r1, [r7, #12]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	00db      	lsls	r3, r3, #3
 8009cd2:	440b      	add	r3, r1
 8009cd4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009cd8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bc80      	pop	{r7}
 8009ce2:	4770      	bx	lr

08009ce4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cfe:	78fa      	ldrb	r2, [r7, #3]
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7f8 ff79 	bl	8002bfa <HAL_PCD_SetAddress>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 f880 	bl	8009e14 <USBD_Get_USB_Status>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	60f8      	str	r0, [r7, #12]
 8009d2a:	607a      	str	r2, [r7, #4]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	460b      	mov	r3, r1
 8009d30:	72fb      	strb	r3, [r7, #11]
 8009d32:	4613      	mov	r3, r2
 8009d34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d44:	893b      	ldrh	r3, [r7, #8]
 8009d46:	7af9      	ldrb	r1, [r7, #11]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	f7f9 f868 	bl	8002e1e <HAL_PCD_EP_Transmit>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d52:	7dfb      	ldrb	r3, [r7, #23]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f000 f85d 	bl	8009e14 <USBD_Get_USB_Status>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	607a      	str	r2, [r7, #4]
 8009d72:	461a      	mov	r2, r3
 8009d74:	460b      	mov	r3, r1
 8009d76:	72fb      	strb	r3, [r7, #11]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d8a:	893b      	ldrh	r3, [r7, #8]
 8009d8c:	7af9      	ldrb	r1, [r7, #11]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	f7f8 fffd 	bl	8002d8e <HAL_PCD_EP_Receive>
 8009d94:	4603      	mov	r3, r0
 8009d96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d98:	7dfb      	ldrb	r3, [r7, #23]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 f83a 	bl	8009e14 <USBD_Get_USB_Status>
 8009da0:	4603      	mov	r3, r0
 8009da2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009da4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b082      	sub	sp, #8
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dc0:	78fa      	ldrb	r2, [r7, #3]
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7f9 f813 	bl	8002df0 <HAL_PCD_EP_GetRxCount>
 8009dca:	4603      	mov	r3, r0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ddc:	4b02      	ldr	r3, [pc, #8]	; (8009de8 <USBD_static_malloc+0x14>)
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bc80      	pop	{r7}
 8009de6:	4770      	bx	lr
 8009de8:	200012e0 	.word	0x200012e0

08009dec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]

}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bc80      	pop	{r7}
 8009dfc:	4770      	bx	lr

08009dfe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dfe:	b480      	push	{r7}
 8009e00:	b083      	sub	sp, #12
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
 8009e06:	460b      	mov	r3, r1
 8009e08:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009e0a:	bf00      	nop
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bc80      	pop	{r7}
 8009e12:	4770      	bx	lr

08009e14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e22:	79fb      	ldrb	r3, [r7, #7]
 8009e24:	2b03      	cmp	r3, #3
 8009e26:	d817      	bhi.n	8009e58 <USBD_Get_USB_Status+0x44>
 8009e28:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <USBD_Get_USB_Status+0x1c>)
 8009e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2e:	bf00      	nop
 8009e30:	08009e41 	.word	0x08009e41
 8009e34:	08009e47 	.word	0x08009e47
 8009e38:	08009e4d 	.word	0x08009e4d
 8009e3c:	08009e53 	.word	0x08009e53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
    break;
 8009e44:	e00b      	b.n	8009e5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e46:	2302      	movs	r3, #2
 8009e48:	73fb      	strb	r3, [r7, #15]
    break;
 8009e4a:	e008      	b.n	8009e5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e50:	e005      	b.n	8009e5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e52:	2302      	movs	r3, #2
 8009e54:	73fb      	strb	r3, [r7, #15]
    break;
 8009e56:	e002      	b.n	8009e5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e58:	2302      	movs	r3, #2
 8009e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e5c:	bf00      	nop
  }
  return usb_status;
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3714      	adds	r7, #20
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bc80      	pop	{r7}
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop

08009e6c <memset>:
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	4402      	add	r2, r0
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d100      	bne.n	8009e76 <memset+0xa>
 8009e74:	4770      	bx	lr
 8009e76:	f803 1b01 	strb.w	r1, [r3], #1
 8009e7a:	e7f9      	b.n	8009e70 <memset+0x4>

08009e7c <__libc_init_array>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	2600      	movs	r6, #0
 8009e80:	4d0c      	ldr	r5, [pc, #48]	; (8009eb4 <__libc_init_array+0x38>)
 8009e82:	4c0d      	ldr	r4, [pc, #52]	; (8009eb8 <__libc_init_array+0x3c>)
 8009e84:	1b64      	subs	r4, r4, r5
 8009e86:	10a4      	asrs	r4, r4, #2
 8009e88:	42a6      	cmp	r6, r4
 8009e8a:	d109      	bne.n	8009ea0 <__libc_init_array+0x24>
 8009e8c:	f000 f81a 	bl	8009ec4 <_init>
 8009e90:	2600      	movs	r6, #0
 8009e92:	4d0a      	ldr	r5, [pc, #40]	; (8009ebc <__libc_init_array+0x40>)
 8009e94:	4c0a      	ldr	r4, [pc, #40]	; (8009ec0 <__libc_init_array+0x44>)
 8009e96:	1b64      	subs	r4, r4, r5
 8009e98:	10a4      	asrs	r4, r4, #2
 8009e9a:	42a6      	cmp	r6, r4
 8009e9c:	d105      	bne.n	8009eaa <__libc_init_array+0x2e>
 8009e9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ea4:	4798      	blx	r3
 8009ea6:	3601      	adds	r6, #1
 8009ea8:	e7ee      	b.n	8009e88 <__libc_init_array+0xc>
 8009eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eae:	4798      	blx	r3
 8009eb0:	3601      	adds	r6, #1
 8009eb2:	e7f2      	b.n	8009e9a <__libc_init_array+0x1e>
 8009eb4:	08009f64 	.word	0x08009f64
 8009eb8:	08009f64 	.word	0x08009f64
 8009ebc:	08009f64 	.word	0x08009f64
 8009ec0:	08009f68 	.word	0x08009f68

08009ec4 <_init>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	bf00      	nop
 8009ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eca:	bc08      	pop	{r3}
 8009ecc:	469e      	mov	lr, r3
 8009ece:	4770      	bx	lr

08009ed0 <_fini>:
 8009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed2:	bf00      	nop
 8009ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed6:	bc08      	pop	{r3}
 8009ed8:	469e      	mov	lr, r3
 8009eda:	4770      	bx	lr
